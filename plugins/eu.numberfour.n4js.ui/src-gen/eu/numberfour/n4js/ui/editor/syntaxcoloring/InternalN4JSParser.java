package eu.numberfour.n4js.ui.editor.syntaxcoloring; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import eu.numberfour.n4js.services.N4JSGrammarAccess;
import eu.numberfour.n4js.ui.editor.syntaxcoloring.AbstractInternalHighlightingAntlrParser;



import org.antlr.runtime.*;
import java.util.Stack;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
@SuppressWarnings("all")
public class InternalN4JSParser extends AbstractInternalHighlightingAntlrParser {
    public static final String[] tokenNames = new String[] {
        "<invalid>", "<EOR>", "<DOWN>", "<UP>", "Intersection", "Constructor", "Implements", "Instanceof", "Promisify", "Interface", "Protected", "Abstract", "Continue", "Debugger", "External", "Function", "Default", "Extends", "Finally", "Private", "Project", "Delete", "Export", "Import", "Public", "Return", "Static", "Switch", "Target", "Typeof", "Await", "Async", "Await_1", "Break", "Catch", "Class", "Const", "False", "Super", "Throw", "Union", "While", "Yield", "This", "Case", "Else", "Enum", "From", "Null", "This_1", "True", "Type", "Void", "With", "ExclamationMarkEqualsSignEqualsSign", "FullStopFullStopFullStop", "LessThanSignLessThanSignEqualsSign", "EqualsSignEqualsSignEqualsSign", "For", "Get", "Let", "New", "Set", "Try", "Var", "ExclamationMarkEqualsSign", "PercentSignEqualsSign", "AmpersandAmpersand", "AmpersandEqualsSign", "AsteriskEqualsSign", "PlusSignPlusSign", "PlusSignEqualsSign", "HyphenMinusHyphenMinus", "HyphenMinusEqualsSign", "SolidusEqualsSign", "LessThanSignLessThanSign", "LessThanSignEqualsSign", "EqualsSignEqualsSign", "EqualsSignGreaterThanSign", "GreaterThanSignEqualsSign", "CommercialAtCommercialAt", "CircumflexAccentEqualsSign", "As", "Do", "If", "In", "Of", "VerticalLineEqualsSign", "VerticalLineVerticalLine", "ExclamationMark", "PercentSign", "Ampersand", "LeftParenthesis", "RightParenthesis", "Asterisk", "PlusSign", "Comma", "HyphenMinus", "FullStop", "Solidus", "Colon", "Semicolon", "LessThanSign", "EqualsSign", "GreaterThanSign", "QuestionMark", "CommercialAt", "LeftSquareBracket", "RightSquareBracket", "CircumflexAccent", "LeftCurlyBracket", "VerticalLine", "RightCurlyBracket", "Tilde", "RULE_DECIMAL_DIGIT_FRAGMENT", "RULE_EXPONENT_PART", "RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT", "RULE_DOUBLE", "RULE_INT_SUFFIX", "RULE_HEX_INT", "RULE_BINARY_INT", "RULE_OCTAL_INT", "RULE_LEGACY_OCTAL_INT", "RULE_IDENTIFIER_PART", "RULE_SCIENTIFIC_INT", "RULE_SIGNED_INT", "RULE_IDENTIFIER", "RULE_DOUBLE_STRING_CHAR", "RULE_SINGLE_STRING_CHAR", "RULE_STRING", "RULE_LINE_TERMINATOR_FRAGMENT", "RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT", "RULE_BACKSLASH_SEQUENCE", "RULE_REGEX_CHAR_OR_BRACKET", "RULE_REGEX_CHAR", "RULE_ACTUAL_REGEX_TAIL", "RULE_REGEX_START", "RULE_REGEX_TAIL", "RULE_TEMPLATE_LITERAL_CHAR", "RULE_TEMPLATE_HEAD", "RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL", "RULE_ACTUAL_TEMPLATE_END", "RULE_TEMPLATE_MIDDLE", "RULE_TEMPLATE_END", "RULE_TEMPLATE_CONTINUATION", "RULE_NO_LINE_TERMINATOR", "RULE_INCOMPLETE_ASYNC_ARROW", "RULE_STRUCTMODSUFFIX", "RULE_IDENTIFIER_START", "RULE_INT", "RULE_ML_COMMENT_FRAGMENT", "RULE_ML_COMMENT", "RULE_SL_COMMENT", "RULE_EOL", "RULE_WHITESPACE_FRAGMENT", "RULE_WS", "RULE_HEX_DIGIT", "RULE_UNICODE_ESCAPE_FRAGMENT", "RULE_UNICODE_LETTER_FRAGMENT", "RULE_UNICODE_COMBINING_MARK_FRAGMENT", "RULE_UNICODE_DIGIT_FRAGMENT", "RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT", "RULE_ZWNJ", "RULE_ZWJ", "RULE_DOT_DOT", "RULE_BOM", "RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT", "RULE_SL_COMMENT_FRAGMENT", "RULE_ANY_OTHER"
    };
    public static final int Delete=21;
    public static final int Enum=46;
    public static final int RULE_REGEX_CHAR=134;
    public static final int Import=23;
    public static final int EqualsSignGreaterThanSign=78;
    public static final int Var=64;
    public static final int RULE_ACTUAL_TEMPLATE_END=141;
    public static final int Break=33;
    public static final int False=37;
    public static final int LessThanSign=102;
    public static final int LeftParenthesis=92;
    public static final int RULE_TEMPLATE_LITERAL_CHAR=138;
    public static final int Throw=39;
    public static final int Private=19;
    public static final int Extends=17;
    public static final int RULE_REGEX_TAIL=137;
    public static final int ExclamationMark=89;
    public static final int ExclamationMarkEqualsSignEqualsSign=54;
    public static final int GreaterThanSign=104;
    public static final int RULE_LINE_TERMINATOR_SEQUENCE_FRAGMENT=131;
    public static final int RULE_TEMPLATE_HEAD=139;
    public static final int RULE_EOL=153;
    public static final int RULE_STRUCTMODSUFFIX=147;
    public static final int RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL=140;
    public static final int GreaterThanSignEqualsSign=79;
    public static final int RULE_ZWNJ=162;
    public static final int EqualsSignEqualsSign=77;
    public static final int Project=20;
    public static final int RULE_OCTAL_INT=121;
    public static final int Switch=27;
    public static final int VerticalLine=111;
    public static final int PlusSign=95;
    public static final int RULE_INT=149;
    public static final int Get=59;
    public static final int RULE_ML_COMMENT=151;
    public static final int LeftSquareBracket=107;
    public static final int If=84;
    public static final int LessThanSignLessThanSign=75;
    public static final int RULE_REGEX_START=136;
    public static final int Finally=18;
    public static final int Intersection=4;
    public static final int Set=62;
    public static final int RULE_UNICODE_ESCAPE_FRAGMENT=157;
    public static final int In=85;
    public static final int Catch=34;
    public static final int VerticalLineVerticalLine=88;
    public static final int RULE_SCIENTIFIC_INT=124;
    public static final int RULE_TEMPLATE_MIDDLE=142;
    public static final int RULE_INCOMPLETE_ASYNC_ARROW=146;
    public static final int RULE_EXPONENT_PART=115;
    public static final int Union=40;
    public static final int Case=44;
    public static final int RULE_REGEX_CHAR_OR_BRACKET=133;
    public static final int Comma=96;
    public static final int RULE_SL_COMMENT_FRAGMENT=167;
    public static final int As=82;
    public static final int HyphenMinus=97;
    public static final int Target=28;
    public static final int RULE_IDENTIFIER_PART=123;
    public static final int RULE_UNICODE_SPACE_SEPARATOR_FRAGMENT=166;
    public static final int Export=22;
    public static final int CommercialAtCommercialAt=80;
    public static final int LessThanSignEqualsSign=76;
    public static final int RightCurlyBracket=112;
    public static final int Solidus=99;
    public static final int PercentSignEqualsSign=66;
    public static final int RULE_HEX_INT=119;
    public static final int FullStop=98;
    public static final int Abstract=11;
    public static final int Await_1=32;
    public static final int Constructor=5;
    public static final int Promisify=8;
    public static final int RULE_SIGNED_INT=125;
    public static final int Default=16;
    public static final int CommercialAt=106;
    public static final int RULE_LINE_TERMINATOR_FRAGMENT=130;
    public static final int Semicolon=101;
    public static final int Type=51;
    public static final int PlusSignPlusSign=70;
    public static final int QuestionMark=105;
    public static final int Else=45;
    public static final int RULE_HEX_DIGIT=156;
    public static final int RULE_UNICODE_CONNECTOR_PUNCTUATION_FRAGMENT=161;
    public static final int Yield=42;
    public static final int ExclamationMarkEqualsSign=65;
    public static final int Interface=9;
    public static final int RULE_TEMPLATE_CONTINUATION=144;
    public static final int HyphenMinusHyphenMinus=72;
    public static final int New=61;
    public static final int Null=48;
    public static final int AmpersandEqualsSign=68;
    public static final int Typeof=29;
    public static final int SolidusEqualsSign=74;
    public static final int True=50;
    public static final int FullStopFullStopFullStop=55;
    public static final int PercentSign=90;
    public static final int RULE_IDENTIFIER_START=148;
    public static final int Implements=6;
    public static final int RULE_WHITESPACE_FRAGMENT=154;
    public static final int Super=38;
    public static final int Async=31;
    public static final int This=43;
    public static final int Ampersand=91;
    public static final int Try=63;
    public static final int AsteriskEqualsSign=69;
    public static final int VerticalLineEqualsSign=87;
    public static final int Void=52;
    public static final int RightSquareBracket=108;
    public static final int RULE_BINARY_INT=120;
    public static final int Protected=10;
    public static final int Const=36;
    public static final int RULE_ACTUAL_REGEX_TAIL=135;
    public static final int For=58;
    public static final int RightParenthesis=93;
    public static final int RULE_UNICODE_COMBINING_MARK_FRAGMENT=159;
    public static final int Do=83;
    public static final int Public=24;
    public static final int RULE_DOUBLE_STRING_CHAR=127;
    public static final int RULE_LEGACY_OCTAL_INT=122;
    public static final int EqualsSignEqualsSignEqualsSign=57;
    public static final int RULE_TEMPLATE_END=143;
    public static final int This_1=49;
    public static final int RULE_DOT_DOT=164;
    public static final int RULE_NO_LINE_TERMINATOR=145;
    public static final int External=14;
    public static final int CircumflexAccentEqualsSign=81;
    public static final int Class=35;
    public static final int Static=26;
    public static final int Debugger=13;
    public static final int RULE_SINGLE_STRING_CHAR=128;
    public static final int LessThanSignLessThanSignEqualsSign=56;
    public static final int RULE_INT_SUFFIX=118;
    public static final int RULE_IDENTIFIER=126;
    public static final int RULE_ML_COMMENT_FRAGMENT=150;
    public static final int RULE_STRING=129;
    public static final int Continue=12;
    public static final int RULE_SL_COMMENT=152;
    public static final int With=53;
    public static final int EqualsSign=103;
    public static final int Function=15;
    public static final int RULE_ZWJ=163;
    public static final int RULE_UNICODE_DIGIT_FRAGMENT=160;
    public static final int AmpersandAmpersand=67;
    public static final int RULE_DOUBLE=117;
    public static final int Instanceof=7;
    public static final int Colon=100;
    public static final int HyphenMinusEqualsSign=73;
    public static final int RULE_BACKSLASH_SEQUENCE=132;
    public static final int EOF=-1;
    public static final int Asterisk=94;
    public static final int PlusSignEqualsSign=71;
    public static final int Return=25;
    public static final int RULE_WS=155;
    public static final int RULE_BOM=165;
    public static final int LeftCurlyBracket=110;
    public static final int Tilde=113;
    public static final int From=47;
    public static final int RULE_ANY_OTHER=168;
    public static final int While=41;
    public static final int CircumflexAccent=109;
    public static final int RULE_UNICODE_LETTER_FRAGMENT=158;
    public static final int RULE_DECIMAL_DIGIT_FRAGMENT=114;
    public static final int Of=86;
    public static final int RULE_DECIMAL_INTEGER_LITERAL_FRAGMENT=116;
    public static final int Let=60;
    public static final int Await=30;


        public InternalN4JSParser(TokenStream input) {
            this(input, new RecognizerSharedState());
        }
        public InternalN4JSParser(TokenStream input, RecognizerSharedState state) {
            super(input, state);
             
        }
        

    public String[] getTokenNames() { return InternalN4JSParser.tokenNames; }
    public String getGrammarFileName() { return "InternalN4JSParser.g"; }




    	private N4JSGrammarAccess grammarAccess;
    	 	
    	public InternalN4JSParser(TokenStream input, N4JSGrammarAccess grammarAccess) {
    		this(input);
    		this.grammarAccess = grammarAccess;
    	}
    	
    	protected boolean forcedRewind(int marker) { return true; } // overridden in subtype
    	protected void promoteEOL() {} // overridden in subtype
    	protected boolean hasDisallowedEOL() { return false; } // overridden in subtype
    	protected boolean isTypeRefNoTrailingLineBreak() { return true; } // overridden in subtype
    	protected void setInRegularExpression() {} // overridden in subtype
    	protected void setInTemplateSegment() {} // overridden in subtype
    	protected void announce(Token token, AbstractElement element) {} // overridden in subtype
    	protected void announce(Token start, Token stop, AbstractElement element) {} // overridden in subtype
    public final void entryRuleScript() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScript();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleScript() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return AnnotationsScriptAnnotationParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleScriptElement_return ScriptElementsScriptElementParserRuleCall_2_0 = null;



            
        try {
            {
            {
            loop1:
            do {
                int alt1=2;
                int LA1_0 = input.LA(1);

                if ( (LA1_0==CommercialAtCommercialAt) ) {
                    alt1=1;
                }


                switch (alt1) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_3);
            	    AnnotationsScriptAnnotationParserRuleCall_1_0=ruleScriptAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.start):null), (AnnotationsScriptAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsScriptAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getScriptAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop1;
                }
            } while (true);
            loop2:
            do {
                int alt2=2;
                int LA2_0 = input.LA(1);

                if ( ((LA2_0>=Intersection && LA2_0<=Implements)||(LA2_0>=Promisify && LA2_0<=Function)||(LA2_0>=Private && LA2_0<=Break)||(LA2_0>=Class && LA2_0<=This)||(LA2_0>=Enum && LA2_0<=With)||(LA2_0>=For && LA2_0<=Var)||LA2_0==PlusSignPlusSign||LA2_0==HyphenMinusHyphenMinus||LA2_0==SolidusEqualsSign||(LA2_0>=As && LA2_0<=If)||LA2_0==Of||LA2_0==ExclamationMark||LA2_0==LeftParenthesis||LA2_0==PlusSign||LA2_0==HyphenMinus||LA2_0==Solidus||(LA2_0>=Semicolon && LA2_0<=LessThanSign)||(LA2_0>=CommercialAt && LA2_0<=LeftSquareBracket)||LA2_0==LeftCurlyBracket||LA2_0==Tilde||LA2_0==RULE_DOUBLE||(LA2_0>=RULE_HEX_INT && LA2_0<=RULE_LEGACY_OCTAL_INT)||LA2_0==RULE_SCIENTIFIC_INT||LA2_0==RULE_IDENTIFIER||LA2_0==RULE_STRING||(LA2_0>=RULE_TEMPLATE_HEAD && LA2_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA2_0==RULE_INT) ) {
                    alt2=1;
                }


                switch (alt2) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    ScriptElementsScriptElementParserRuleCall_2_0=ruleScriptElement();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.start):null), (ScriptElementsScriptElementParserRuleCall_2_0!=null?((Token)ScriptElementsScriptElementParserRuleCall_2_0.stop):null), grammarAccess.getScriptAccess().getScriptElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop2;
                }
            } while (true);


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptElement_return ruleScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleScriptElement_return retval = new InternalN4JSParser.ruleScriptElement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedScriptElement_return AnnotatedScriptElementParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleImportDeclaration_return ImportDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleExportDeclaration_return ExportDeclarationParserRuleCall_5 = null;

        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_6 = null;



            
        try {
            {
            int alt3=7;
            alt3 = dfa3.predict(input);
            switch (alt3) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedScriptElementParserRuleCall_0=ruleAnnotatedScriptElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.start):null), (AnnotatedScriptElementParserRuleCall_0!=null?((Token)AnnotatedScriptElementParserRuleCall_0.stop):null), grammarAccess.getScriptElementAccess().getAnnotatedScriptElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getScriptElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getScriptElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getScriptElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationParserRuleCall_4=ruleImportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.start):null), (ImportDeclarationParserRuleCall_4!=null?((Token)ImportDeclarationParserRuleCall_4.stop):null), grammarAccess.getScriptElementAccess().getImportDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationParserRuleCall_5=ruleExportDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.start):null), (ExportDeclarationParserRuleCall_5!=null?((Token)ExportDeclarationParserRuleCall_5.stop):null), grammarAccess.getScriptElementAccess().getExportDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_6=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.start):null), (RootStatementParserRuleCall_6!=null?((Token)RootStatementParserRuleCall_6.stop):null), grammarAccess.getScriptElementAccess().getRootStatementParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedScriptElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedScriptElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedScriptElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedScriptElement_return ruleAnnotatedScriptElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedScriptElement_return retval = new InternalN4JSParser.ruleAnnotatedScriptElement_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_3_0_0_2=null;
        Token InterfaceKeyword_1_3_0_1_2=null;
        Token EnumKeyword_1_4_2=null;
        Token LeftCurlyBracketKeyword_1_4_4=null;
        Token CommaKeyword_1_4_6_0=null;
        Token RightCurlyBracketKeyword_1_4_7=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1_1_1 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_2_1_0_2 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_5 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_3_0_0_6 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_0_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_1_5 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_3_0_1_6 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_3_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_4_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_5_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_5);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt16=5;
            alt16 = dfa16.predict(input);
            switch (alt16) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportDeclarationImplParserRuleCall_1_0_1=ruleExportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.start):null), (ExportDeclarationImplParserRuleCall_1_0_1!=null?((Token)ExportDeclarationImplParserRuleCall_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getExportDeclarationImplParserRuleCall_1_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportDeclarationImplParserRuleCall_1_1_1=ruleImportDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.start):null), (ImportDeclarationImplParserRuleCall_1_1_1!=null?((Token)ImportDeclarationImplParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getImportDeclarationImplParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop4:
                    do {
                        int alt4=2;
                        int LA4_0 = input.LA(1);

                        if ( ((LA4_0>=Protected && LA4_0<=Abstract)||LA4_0==External||(LA4_0>=Private && LA4_0<=Project)||LA4_0==Public||LA4_0==Static||LA4_0==Const) ) {
                            alt4=1;
                        }


                        switch (alt4) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_6);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop4;
                        }
                    } while (true);

                    pushFollow(FOLLOW_6);
                    AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_2_1_0_2=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.start):null), (FunctionImplParserRuleCall_1_2_1_0_2!=null?((Token)FunctionImplParserRuleCall_1_2_1_0_2.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getFunctionImplParserRuleCall_1_2_1_0_2()); 
                    }

                    }


                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    int alt13=2;
                    alt13 = dfa13.predict(input);
                    switch (alt13) {
                        case 1 :
                            {
                            {
                            loop5:
                            do {
                                int alt5=2;
                                int LA5_0 = input.LA(1);

                                if ( ((LA5_0>=Protected && LA5_0<=Abstract)||LA5_0==External||(LA5_0>=Private && LA5_0<=Project)||LA5_0==Public||LA5_0==Static||LA5_0==Const) ) {
                                    alt5=1;
                                }


                                switch (alt5) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_7);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop5;
                                }
                            } while (true);

                            ClassKeyword_1_3_0_0_2=(Token)match(input,Class,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_3_0_0_2, grammarAccess.getAnnotatedScriptElementAccess().getClassKeyword_1_3_0_0_2()); 
                            }
                            int alt6=2;
                            int LA6_0 = input.LA(1);

                            if ( (LA6_0==Tilde) ) {
                                alt6=1;
                            }
                            switch (alt6) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_3_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_0_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_0_4()); 
                            }

                            }


                            }
                            int alt7=2;
                            int LA7_0 = input.LA(1);

                            if ( (LA7_0==LessThanSign) ) {
                                alt7=1;
                            }
                            switch (alt7) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_3_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.start):null), (TypeVariablesParserRuleCall_1_3_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt8=2;
                            int LA8_0 = input.LA(1);

                            if ( (LA8_0==Implements||LA8_0==Extends) ) {
                                alt8=1;
                            }
                            switch (alt8) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    ClassExtendsClauseParserRuleCall_1_3_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_3_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_3_0_0_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getClassExtendsClauseParserRuleCall_1_3_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop9:
                            do {
                                int alt9=2;
                                int LA9_0 = input.LA(1);

                                if ( ((LA9_0>=Protected && LA9_0<=Abstract)||LA9_0==External||(LA9_0>=Private && LA9_0<=Project)||LA9_0==Public||LA9_0==Static||LA9_0==Const) ) {
                                    alt9=1;
                                }


                                switch (alt9) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_11);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop9;
                                }
                            } while (true);

                            InterfaceKeyword_1_3_0_1_2=(Token)match(input,Interface,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_3_0_1_2, grammarAccess.getAnnotatedScriptElementAccess().getInterfaceKeyword_1_3_0_1_2()); 
                            }
                            int alt10=2;
                            int LA10_0 = input.LA(1);

                            if ( (LA10_0==Tilde) ) {
                                alt10=1;
                            }
                            switch (alt10) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypingStrategyAssignment_1_3_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_3_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_0_1_4_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_3_0_1_4()); 
                            }

                            }


                            }
                            int alt11=2;
                            int LA11_0 = input.LA(1);

                            if ( (LA11_0==LessThanSign) ) {
                                alt11=1;
                            }
                            switch (alt11) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_3_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.start):null), (TypeVariablesParserRuleCall_1_3_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_3_0_1_5.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getTypeVariablesParserRuleCall_1_3_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt12=2;
                            int LA12_0 = input.LA(1);

                            if ( (LA12_0==Implements||LA12_0==Extends) ) {
                                alt12=1;
                            }
                            switch (alt12) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    InterfaceImplementsListParserRuleCall_1_3_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_3_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_3_0_1_6.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getInterfaceImplementsListParserRuleCall_1_3_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_3_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.start):null), (MembersParserRuleCall_1_3_1!=null?((Token)MembersParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getMembersParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    loop14:
                    do {
                        int alt14=2;
                        int LA14_0 = input.LA(1);

                        if ( ((LA14_0>=Protected && LA14_0<=Abstract)||LA14_0==External||(LA14_0>=Private && LA14_0<=Project)||LA14_0==Public||LA14_0==Static||LA14_0==Const) ) {
                            alt14=1;
                        }


                        switch (alt14) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_12);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop14;
                        }
                    } while (true);

                    EnumKeyword_1_4_2=(Token)match(input,Enum,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_4_2, grammarAccess.getAnnotatedScriptElementAccess().getEnumKeyword_1_4_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_1_4_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_4_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_4_3_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getNameAssignment_1_4_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_4_4=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_4_4, grammarAccess.getAnnotatedScriptElementAccess().getLeftCurlyBracketKeyword_1_4_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_4_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_5_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_5()); 
                    }

                    }


                    }
                    loop15:
                    do {
                        int alt15=2;
                        int LA15_0 = input.LA(1);

                        if ( (LA15_0==Comma) ) {
                            alt15=1;
                        }


                        switch (alt15) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_4_6_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_4_6_0, grammarAccess.getAnnotatedScriptElementAccess().getCommaKeyword_1_4_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0.stop):null), grammarAccess.getAnnotatedScriptElementAccess().getLiteralsAssignment_1_4_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop15;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_4_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_4_7, grammarAccess.getAnnotatedScriptElementAccess().getRightCurlyBracketKeyword_1_4_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeVariables_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariables_return ruleTypeVariables() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariables_return retval = new InternalN4JSParser.ruleTypeVariables_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_14); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeVariablesAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_16);
            TypeVarsTypeVariableParserRuleCall_1_0=ruleTypeVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_1()); 
            }

            }


            }
            loop17:
            do {
                int alt17=2;
                int LA17_0 = input.LA(1);

                if ( (LA17_0==Comma) ) {
                    alt17=1;
                }


                switch (alt17) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeVariablesAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_16);
            	    TypeVarsTypeVariableParserRuleCall_2_1_0=ruleTypeVariable();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeVariablesAccess().getTypeVarsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop17;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeVariablesAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclaration_return ruleExportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclaration_return retval = new InternalN4JSParser.ruleExportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleExportDeclarationImpl_return ExportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ExportDeclarationImplParserRuleCall_1=ruleExportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.start):null), (ExportDeclarationImplParserRuleCall_1!=null?((Token)ExportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportDeclarationAccess().getExportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportDeclarationImpl_return ruleExportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleExportDeclarationImpl_return retval = new InternalN4JSParser.ruleExportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ExportKeyword_0=null;
        Token WildcardExportAsteriskKeyword_1_0_0_0=null;
        Token DefaultExportDefaultKeyword_1_3_0_0=null;
        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleExportClause_return ExportClauseParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleExportFromClause_return ExportFromClauseParserRuleCall_1_1_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_2_0 = null;

        InternalN4JSParser.ruleExportableElement_return ExportedElementExportableElementParserRuleCall_1_3_1_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_3_1_1_1 = null;



            
        try {
            {
            {
            ExportKeyword_0=(Token)match(input,Export,FOLLOW_17); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ExportKeyword_0, grammarAccess.getExportDeclarationImplAccess().getExportKeyword_0()); 
            }
            int alt20=4;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt20=1;
                }
                break;
            case LeftCurlyBracket:
                {
                alt20=2;
                }
                break;
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Function:
            case Private:
            case Project:
            case Public:
            case Static:
            case Async:
            case Class:
            case Const:
            case Enum:
            case Let:
            case Var:
            case CommercialAt:
                {
                alt20=3;
                }
                break;
            case Default:
                {
                alt20=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 20, 0, input);

                throw nvae;
            }

            switch (alt20) {
                case 1 :
                    {
                    {
                    {
                    {
                    WildcardExportAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_18); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WildcardExportAsteriskKeyword_1_0_0_0, grammarAccess.getExportDeclarationImplAccess().getWildcardExportAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_19);
                    ExportFromClauseParserRuleCall_1_0_1=ruleExportFromClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.start):null), (ExportFromClauseParserRuleCall_1_0_1!=null?((Token)ExportFromClauseParserRuleCall_1_0_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_0_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.start):null), (SemiParserRuleCall_1_0_2!=null?((Token)SemiParserRuleCall_1_0_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_20);
                    ExportClauseParserRuleCall_1_1_0=ruleExportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.start):null), (ExportClauseParserRuleCall_1_1_0!=null?((Token)ExportClauseParserRuleCall_1_1_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportClauseParserRuleCall_1_1_0()); 
                    }
                    int alt18=2;
                    int LA18_0 = input.LA(1);

                    if ( (LA18_0==From) && (synpred8_InternalN4JSParser())) {
                        alt18=1;
                    }
                    switch (alt18) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_19);
                            ExportFromClauseParserRuleCall_1_1_1=ruleExportFromClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.start):null), (ExportFromClauseParserRuleCall_1_1_1!=null?((Token)ExportFromClauseParserRuleCall_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportFromClauseParserRuleCall_1_1_1()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_2=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.start):null), (SemiParserRuleCall_1_1_2!=null?((Token)SemiParserRuleCall_1_1_2.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedElementExportableElementParserRuleCall_1_2_0=ruleExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.start):null), (ExportedElementExportableElementParserRuleCall_1_2_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_2_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    DefaultExportDefaultKeyword_1_3_0_0=(Token)match(input,Default,FOLLOW_21); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DefaultExportDefaultKeyword_1_3_0_0, grammarAccess.getExportDeclarationImplAccess().getDefaultExportDefaultKeyword_1_3_0_0()); 
                    }

                    }


                    }
                    int alt19=2;
                    alt19 = dfa19.predict(input);
                    switch (alt19) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExportedElementExportableElementParserRuleCall_1_3_1_0_0=ruleExportableElement();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.start):null), (ExportedElementExportableElementParserRuleCall_1_3_1_0_0!=null?((Token)ExportedElementExportableElementParserRuleCall_1_3_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getExportedElementAssignment_1_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_19);
                            DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.start):null), (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0!=null?((Token)DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0.stop):null), grammarAccess.getExportDeclarationImplAccess().getDefaultExportedExpressionAssignment_1_3_1_1_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_2);
                            SemiParserRuleCall_1_3_1_1_1=ruleSemi();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.start):null), (SemiParserRuleCall_1_3_1_1_1!=null?((Token)SemiParserRuleCall_1_3_1_1_1.stop):null), grammarAccess.getExportDeclarationImplAccess().getSemiParserRuleCall_1_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportFromClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportFromClause_return ruleExportFromClause() throws RecognitionException {
        InternalN4JSParser.ruleExportFromClause_return retval = new InternalN4JSParser.ruleExportFromClause_return();
        retval.start = input.LT(1);

        Token FromKeyword_0=null;
        InternalN4JSParser.ruleModuleSpecifier_return ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1 = null;



            
        try {
            {
            {
            FromKeyword_0=(Token)match(input,From,FOLLOW_22); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FromKeyword_0, grammarAccess.getExportFromClauseAccess().getFromKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.start):null), (ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1!=null?((Token)ReexportedFromTModuleModuleSpecifierParserRuleCall_1_0_1.stop):null), grammarAccess.getExportFromClauseAccess().getReexportedFromAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleExportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportClause_return ruleExportClause() throws RecognitionException {
        InternalN4JSParser.ruleExportClause_return retval = new InternalN4JSParser.ruleExportClause_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token CommaKeyword_1_2=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleExportSpecifier_return NamedExportsExportSpecifierParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_23); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getExportClauseAccess().getLeftCurlyBracketKeyword_0()); 
            }
            int alt23=2;
            int LA23_0 = input.LA(1);

            if ( ((LA23_0>=Intersection && LA23_0<=Implements)||(LA23_0>=Promisify && LA23_0<=Abstract)||LA23_0==External||(LA23_0>=Private && LA23_0<=Project)||LA23_0==Public||LA23_0==Static||LA23_0==Target||(LA23_0>=Await && LA23_0<=Await_1)||LA23_0==Union||(LA23_0>=Yield && LA23_0<=This)||LA23_0==From||LA23_0==Type||(LA23_0>=Get && LA23_0<=Let)||LA23_0==Set||LA23_0==As||LA23_0==Of||LA23_0==RULE_IDENTIFIER) ) {
                alt23=1;
            }
            switch (alt23) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    NamedExportsExportSpecifierParserRuleCall_1_0_0=ruleExportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_0_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_0_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_0()); 
                    }

                    }


                    }
                    loop21:
                    do {
                        int alt21=2;
                        int LA21_0 = input.LA(1);

                        if ( (LA21_0==Comma) ) {
                            int LA21_1 = input.LA(2);

                            if ( ((LA21_1>=Intersection && LA21_1<=Implements)||(LA21_1>=Promisify && LA21_1<=Abstract)||LA21_1==External||(LA21_1>=Private && LA21_1<=Project)||LA21_1==Public||LA21_1==Static||LA21_1==Target||(LA21_1>=Await && LA21_1<=Await_1)||LA21_1==Union||(LA21_1>=Yield && LA21_1<=This)||LA21_1==From||LA21_1==Type||(LA21_1>=Get && LA21_1<=Let)||LA21_1==Set||LA21_1==As||LA21_1==Of||LA21_1==RULE_IDENTIFIER) ) {
                                alt21=1;
                            }


                        }


                        switch (alt21) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_9); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getExportClauseAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    NamedExportsExportSpecifierParserRuleCall_1_1_1_0=ruleExportSpecifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.start):null), (NamedExportsExportSpecifierParserRuleCall_1_1_1_0!=null?((Token)NamedExportsExportSpecifierParserRuleCall_1_1_1_0.stop):null), grammarAccess.getExportClauseAccess().getNamedExportsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop21;
                        }
                    } while (true);
                    int alt22=2;
                    int LA22_0 = input.LA(1);

                    if ( (LA22_0==Comma) ) {
                        alt22=1;
                    }
                    switch (alt22) {
                        case 1 :
                            {
                            CommaKeyword_1_2=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_1_2, grammarAccess.getExportClauseAccess().getCommaKeyword_1_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getExportClauseAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportSpecifier_return ruleExportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleExportSpecifier_return retval = new InternalN4JSParser.ruleExportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0=null;
        InternalN4JSParser.ruleIdentifierRef_return ElementIdentifierRefParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleIdentifierName_return AliasIdentifierNameParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_25);
            ElementIdentifierRefParserRuleCall_0_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.start):null), (ElementIdentifierRefParserRuleCall_0_0!=null?((Token)ElementIdentifierRefParserRuleCall_0_0.stop):null), grammarAccess.getExportSpecifierAccess().getElementAssignment_0()); 
            }

            }


            }
            int alt24=2;
            int LA24_0 = input.LA(1);

            if ( (LA24_0==As) ) {
                alt24=1;
            }
            switch (alt24) {
                case 1 :
                    {
                    AsKeyword_1_0=(Token)match(input,As,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0, grammarAccess.getExportSpecifierAccess().getAsKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasIdentifierNameParserRuleCall_1_1_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.start):null), (AliasIdentifierNameParserRuleCall_1_1_0!=null?((Token)AliasIdentifierNameParserRuleCall_1_1_0.stop):null), grammarAccess.getExportSpecifierAccess().getAliasAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportableElement_return ruleExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleExportableElement_return retval = new InternalN4JSParser.ruleExportableElement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedExportableElement_return AnnotatedExportableElementParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4ClassDeclaration_return N4ClassDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4InterfaceDeclaration_return N4InterfaceDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4EnumDeclaration_return N4EnumDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleExportedFunctionDeclaration_return ExportedFunctionDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleExportedVariableStatement_return ExportedVariableStatementParserRuleCall_5 = null;



            
        try {
            {
            int alt25=6;
            alt25 = dfa25.predict(input);
            switch (alt25) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExportableElementParserRuleCall_0=ruleAnnotatedExportableElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.start):null), (AnnotatedExportableElementParserRuleCall_0!=null?((Token)AnnotatedExportableElementParserRuleCall_0.stop):null), grammarAccess.getExportableElementAccess().getAnnotatedExportableElementParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassDeclarationParserRuleCall_1=ruleN4ClassDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.start):null), (N4ClassDeclarationParserRuleCall_1!=null?((Token)N4ClassDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportableElementAccess().getN4ClassDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4InterfaceDeclarationParserRuleCall_2=ruleN4InterfaceDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.start):null), (N4InterfaceDeclarationParserRuleCall_2!=null?((Token)N4InterfaceDeclarationParserRuleCall_2.stop):null), grammarAccess.getExportableElementAccess().getN4InterfaceDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4EnumDeclarationParserRuleCall_3=ruleN4EnumDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.start):null), (N4EnumDeclarationParserRuleCall_3!=null?((Token)N4EnumDeclarationParserRuleCall_3.stop):null), grammarAccess.getExportableElementAccess().getN4EnumDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedFunctionDeclarationParserRuleCall_4=ruleExportedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.start):null), (ExportedFunctionDeclarationParserRuleCall_4!=null?((Token)ExportedFunctionDeclarationParserRuleCall_4.stop):null), grammarAccess.getExportableElementAccess().getExportedFunctionDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableStatementParserRuleCall_5=ruleExportedVariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.start):null), (ExportedVariableStatementParserRuleCall_5!=null?((Token)ExportedVariableStatementParserRuleCall_5.stop):null), grammarAccess.getExportableElementAccess().getExportedVariableStatementParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExportableElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExportableElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExportableElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExportableElement_return ruleAnnotatedExportableElement() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExportableElement_return retval = new InternalN4JSParser.ruleAnnotatedExportableElement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1_4_0=null;
        Token ClassKeyword_1_2_0_0_2=null;
        Token InterfaceKeyword_1_2_0_1_2=null;
        Token EnumKeyword_1_3_2=null;
        Token LeftCurlyBracketKeyword_1_3_4=null;
        Token CommaKeyword_1_3_6_0=null;
        Token RightCurlyBracketKeyword_1_3_7=null;
        InternalN4JSParser.ruleAnnotationList_return AnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_1_0_3 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1_1_5 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_5 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_2_0_0_6 = null;

        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_2_0_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_1_5 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_1_2_0_1_6 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_2_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_3_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_5_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_27);
            AnnotationListParserRuleCall_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.start):null), (AnnotationListParserRuleCall_0!=null?((Token)AnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAnnotationListParserRuleCall_0()); 
            }

            }
            int alt40=4;
            alt40 = dfa40.predict(input);
            switch (alt40) {
                case 1 :
                    {
                    {
                    loop26:
                    do {
                        int alt26=2;
                        int LA26_0 = input.LA(1);

                        if ( ((LA26_0>=Protected && LA26_0<=Abstract)||LA26_0==External||(LA26_0>=Private && LA26_0<=Project)||LA26_0==Public||LA26_0==Static||LA26_0==Const) ) {
                            alt26=1;
                        }


                        switch (alt26) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_6);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop26;
                        }
                    } while (true);

                    pushFollow(FOLLOW_6);
                    AsyncNoTrailingLineBreakParserRuleCall_1_0_2=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_0_2.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_0_2()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_0_3=ruleFunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.start):null), (FunctionImplParserRuleCall_1_0_3!=null?((Token)FunctionImplParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getFunctionImplParserRuleCall_1_0_3()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop27:
                    do {
                        int alt27=2;
                        alt27 = dfa27.predict(input);
                        switch (alt27) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_28);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop27;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_29);
                    ruleVariableStatementKeyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_30);
                    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0=ruleExportedVariableDeclarationOrBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_3()); 
                    }

                    }


                    }
                    loop28:
                    do {
                        int alt28=2;
                        int LA28_0 = input.LA(1);

                        if ( (LA28_0==Comma) ) {
                            alt28=1;
                        }


                        switch (alt28) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_4_0=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_4_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_1_4_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_30);
                    	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0=ruleExportedVariableDeclarationOrBinding();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getVarDeclsOrBindingsAssignment_1_1_4_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop28;
                        }
                    } while (true);

                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1_1_5=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.start):null), (SemiParserRuleCall_1_1_5!=null?((Token)SemiParserRuleCall_1_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getSemiParserRuleCall_1_1_5()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    int alt37=2;
                    alt37 = dfa37.predict(input);
                    switch (alt37) {
                        case 1 :
                            {
                            {
                            loop29:
                            do {
                                int alt29=2;
                                int LA29_0 = input.LA(1);

                                if ( ((LA29_0>=Protected && LA29_0<=Abstract)||LA29_0==External||(LA29_0>=Private && LA29_0<=Project)||LA29_0==Public||LA29_0==Static||LA29_0==Const) ) {
                                    alt29=1;
                                }


                                switch (alt29) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_7);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop29;
                                }
                            } while (true);

                            ClassKeyword_1_2_0_0_2=(Token)match(input,Class,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ClassKeyword_1_2_0_0_2, grammarAccess.getAnnotatedExportableElementAccess().getClassKeyword_1_2_0_0_2()); 
                            }
                            int alt30=2;
                            int LA30_0 = input.LA(1);

                            if ( (LA30_0==Tilde) ) {
                                alt30=1;
                            }
                            switch (alt30) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_0_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_2_0_0_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_0_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_0_4()); 
                            }

                            }


                            }
                            int alt31=2;
                            int LA31_0 = input.LA(1);

                            if ( (LA31_0==LessThanSign) ) {
                                alt31=1;
                            }
                            switch (alt31) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_2_0_0_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.start):null), (TypeVariablesParserRuleCall_1_2_0_0_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_0_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt32=2;
                            int LA32_0 = input.LA(1);

                            if ( (LA32_0==Implements||LA32_0==Extends) ) {
                                alt32=1;
                            }
                            switch (alt32) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    ClassExtendsClauseParserRuleCall_1_2_0_0_6=ruleClassExtendsClause();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.start):null), (ClassExtendsClauseParserRuleCall_1_2_0_0_6!=null?((Token)ClassExtendsClauseParserRuleCall_1_2_0_0_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getClassExtendsClauseParserRuleCall_1_2_0_0_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            loop33:
                            do {
                                int alt33=2;
                                int LA33_0 = input.LA(1);

                                if ( ((LA33_0>=Protected && LA33_0<=Abstract)||LA33_0==External||(LA33_0>=Private && LA33_0<=Project)||LA33_0==Public||LA33_0==Static||LA33_0==Const) ) {
                                    alt33=1;
                                }


                                switch (alt33) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_11);
                            	    ruleN4Modifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop33;
                                }
                            } while (true);

                            InterfaceKeyword_1_2_0_1_2=(Token)match(input,Interface,FOLLOW_8); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(InterfaceKeyword_1_2_0_1_2, grammarAccess.getAnnotatedExportableElementAccess().getInterfaceKeyword_1_2_0_1_2()); 
                            }
                            int alt34=2;
                            int LA34_0 = input.LA(1);

                            if ( (LA34_0==Tilde) ) {
                                alt34=1;
                            }
                            switch (alt34) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_9);
                                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0=ruleTypingStrategyDefSiteOperator();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypingStrategyAssignment_1_2_0_1_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_2_0_1_4_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.start):null), (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_2_0_1_4_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_2_0_1_4()); 
                            }

                            }


                            }
                            int alt35=2;
                            int LA35_0 = input.LA(1);

                            if ( (LA35_0==LessThanSign) ) {
                                alt35=1;
                            }
                            switch (alt35) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    TypeVariablesParserRuleCall_1_2_0_1_5=ruleTypeVariables();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.start):null), (TypeVariablesParserRuleCall_1_2_0_1_5!=null?((Token)TypeVariablesParserRuleCall_1_2_0_1_5.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getTypeVariablesParserRuleCall_1_2_0_1_5()); 
                                    }

                                    }
                                    break;

                            }
                            int alt36=2;
                            int LA36_0 = input.LA(1);

                            if ( (LA36_0==Implements||LA36_0==Extends) ) {
                                alt36=1;
                            }
                            switch (alt36) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_10);
                                    InterfaceImplementsListParserRuleCall_1_2_0_1_6=ruleInterfaceImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.start):null), (InterfaceImplementsListParserRuleCall_1_2_0_1_6!=null?((Token)InterfaceImplementsListParserRuleCall_1_2_0_1_6.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getInterfaceImplementsListParserRuleCall_1_2_0_1_6()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_2_1=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.start):null), (MembersParserRuleCall_1_2_1!=null?((Token)MembersParserRuleCall_1_2_1.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getMembersParserRuleCall_1_2_1()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    loop38:
                    do {
                        int alt38=2;
                        int LA38_0 = input.LA(1);

                        if ( ((LA38_0>=Protected && LA38_0<=Abstract)||LA38_0==External||(LA38_0>=Private && LA38_0<=Project)||LA38_0==Public||LA38_0==Static||LA38_0==Const) ) {
                            alt38=1;
                        }


                        switch (alt38) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_12);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop38;
                        }
                    } while (true);

                    EnumKeyword_1_3_2=(Token)match(input,Enum,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_1_3_2, grammarAccess.getAnnotatedExportableElementAccess().getEnumKeyword_1_3_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_1_3_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.start):null), (NameBindingIdentifierParserRuleCall_1_3_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_3_3_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getNameAssignment_1_3_3()); 
                    }

                    }


                    }

                    LeftCurlyBracketKeyword_1_3_4=(Token)match(input,LeftCurlyBracket,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_3_4, grammarAccess.getAnnotatedExportableElementAccess().getLeftCurlyBracketKeyword_1_3_4()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_1_3_5_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_5_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_5()); 
                    }

                    }


                    }
                    loop39:
                    do {
                        int alt39=2;
                        int LA39_0 = input.LA(1);

                        if ( (LA39_0==Comma) ) {
                            alt39=1;
                        }


                        switch (alt39) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_6_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_6_0, grammarAccess.getAnnotatedExportableElementAccess().getCommaKeyword_1_3_6_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0.stop):null), grammarAccess.getAnnotatedExportableElementAccess().getLiteralsAssignment_1_3_6_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop39;
                        }
                    } while (true);

                    RightCurlyBracketKeyword_1_3_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_3_7, grammarAccess.getAnnotatedExportableElementAccess().getRightCurlyBracketKeyword_1_3_7()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleImportDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleImportDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleImportDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclaration_return ruleImportDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclaration_return retval = new InternalN4JSParser.ruleImportDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleImportDeclarationImpl_return ImportDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            ImportDeclarationImplParserRuleCall_1=ruleImportDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.start):null), (ImportDeclarationImplParserRuleCall_1!=null?((Token)ImportDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getImportDeclarationAccess().getImportDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportDeclarationImpl_return ruleImportDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleImportDeclarationImpl_return retval = new InternalN4JSParser.ruleImportDeclarationImpl_return();
        retval.start = input.LT(1);

        Token ImportKeyword_0=null;
        Token ImportFromFromKeyword_1_1_0=null;
        InternalN4JSParser.ruleImportClause_return ImportClauseParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleModuleSpecifier_return ModuleTModuleModuleSpecifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ImportKeyword_0=(Token)match(input,Import,FOLLOW_31); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ImportKeyword_0, grammarAccess.getImportDeclarationImplAccess().getImportKeyword_0()); 
            }
            int alt41=2;
            int LA41_0 = input.LA(1);

            if ( ((LA41_0>=Intersection && LA41_0<=Implements)||(LA41_0>=Promisify && LA41_0<=Abstract)||LA41_0==External||(LA41_0>=Private && LA41_0<=Project)||LA41_0==Public||LA41_0==Static||LA41_0==Target||(LA41_0>=Await && LA41_0<=Await_1)||LA41_0==Union||(LA41_0>=Yield && LA41_0<=This)||LA41_0==From||LA41_0==Type||(LA41_0>=Get && LA41_0<=Let)||LA41_0==Set||LA41_0==As||LA41_0==Of||LA41_0==Asterisk||LA41_0==LeftCurlyBracket||LA41_0==RULE_IDENTIFIER) ) {
                alt41=1;
            }
            switch (alt41) {
                case 1 :
                    {
                    pushFollow(FOLLOW_18);
                    ImportClauseParserRuleCall_1_0=ruleImportClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.start):null), (ImportClauseParserRuleCall_1_0!=null?((Token)ImportClauseParserRuleCall_1_0.stop):null), grammarAccess.getImportDeclarationImplAccess().getImportClauseParserRuleCall_1_0()); 
                    }
                    {
                    {
                    ImportFromFromKeyword_1_1_0=(Token)match(input,From,FOLLOW_22); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImportFromFromKeyword_1_1_0, grammarAccess.getImportDeclarationImplAccess().getImportFromFromKeyword_1_1_0()); 
                    }

                    }


                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_19);
            ModuleTModuleModuleSpecifierParserRuleCall_2_0_1=ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.start):null), (ModuleTModuleModuleSpecifierParserRuleCall_2_0_1!=null?((Token)ModuleTModuleModuleSpecifierParserRuleCall_2_0_1.stop):null), grammarAccess.getImportDeclarationImplAccess().getModuleAssignment_2()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getImportDeclarationImplAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportClause_return ruleImportClause() throws RecognitionException {
        InternalN4JSParser.ruleImportClause_return retval = new InternalN4JSParser.ruleImportClause_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        InternalN4JSParser.ruleDefaultImportSpecifier_return ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_0_1_1 = null;

        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ImportSpecifiersExceptDefaultParserRuleCall_1 = null;



            
        try {
            {
            int alt43=2;
            int LA43_0 = input.LA(1);

            if ( ((LA43_0>=Intersection && LA43_0<=Implements)||(LA43_0>=Promisify && LA43_0<=Abstract)||LA43_0==External||(LA43_0>=Private && LA43_0<=Project)||LA43_0==Public||LA43_0==Static||LA43_0==Target||(LA43_0>=Await && LA43_0<=Await_1)||LA43_0==Union||(LA43_0>=Yield && LA43_0<=This)||LA43_0==From||LA43_0==Type||(LA43_0>=Get && LA43_0<=Let)||LA43_0==Set||LA43_0==As||LA43_0==Of||LA43_0==RULE_IDENTIFIER) ) {
                alt43=1;
            }
            else if ( (LA43_0==Asterisk||LA43_0==LeftCurlyBracket) ) {
                alt43=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 43, 0, input);

                throw nvae;
            }
            switch (alt43) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0=ruleDefaultImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.start):null), (ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0!=null?((Token)ImportSpecifiersDefaultImportSpecifierParserRuleCall_0_0_0.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersAssignment_0_0()); 
                    }

                    }


                    }
                    int alt42=2;
                    int LA42_0 = input.LA(1);

                    if ( (LA42_0==Comma) ) {
                        alt42=1;
                    }
                    switch (alt42) {
                        case 1 :
                            {
                            CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_33); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_0_1_0, grammarAccess.getImportClauseAccess().getCommaKeyword_0_1_0()); 
                            }
                            pushFollow(FOLLOW_2);
                            ImportSpecifiersExceptDefaultParserRuleCall_0_1_1=ruleImportSpecifiersExceptDefault();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_0_1_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_0_1_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_0_1_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersExceptDefaultParserRuleCall_1=ruleImportSpecifiersExceptDefault();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.start):null), (ImportSpecifiersExceptDefaultParserRuleCall_1!=null?((Token)ImportSpecifiersExceptDefaultParserRuleCall_1.stop):null), grammarAccess.getImportClauseAccess().getImportSpecifiersExceptDefaultParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleImportSpecifiersExceptDefault_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleImportSpecifiersExceptDefault_return ruleImportSpecifiersExceptDefault() throws RecognitionException {
        InternalN4JSParser.ruleImportSpecifiersExceptDefault_return retval = new InternalN4JSParser.ruleImportSpecifiersExceptDefault_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token CommaKeyword_1_1_2=null;
        Token RightCurlyBracketKeyword_1_2=null;
        InternalN4JSParser.ruleNamespaceImportSpecifier_return ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.ruleNamedImportSpecifier_return ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            int alt47=2;
            int LA47_0 = input.LA(1);

            if ( (LA47_0==Asterisk) ) {
                alt47=1;
            }
            else if ( (LA47_0==LeftCurlyBracket) ) {
                alt47=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 47, 0, input);

                throw nvae;
            }
            switch (alt47) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0=ruleNamespaceImportSpecifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.start):null), (ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0!=null?((Token)ImportSpecifiersNamespaceImportSpecifierParserRuleCall_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    LeftCurlyBracketKeyword_1_0=(Token)match(input,LeftCurlyBracket,FOLLOW_34); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftCurlyBracketKeyword_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getLeftCurlyBracketKeyword_1_0()); 
                    }
                    int alt46=2;
                    int LA46_0 = input.LA(1);

                    if ( ((LA46_0>=Intersection && LA46_0<=With)||(LA46_0>=For && LA46_0<=Var)||(LA46_0>=As && LA46_0<=Of)||LA46_0==RULE_IDENTIFIER) ) {
                        alt46=1;
                    }
                    switch (alt46) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_15);
                            ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0=ruleNamedImportSpecifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_0_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop44:
                            do {
                                int alt44=2;
                                int LA44_0 = input.LA(1);

                                if ( (LA44_0==Comma) ) {
                                    int LA44_1 = input.LA(2);

                                    if ( ((LA44_1>=Intersection && LA44_1<=With)||(LA44_1>=For && LA44_1<=Var)||(LA44_1>=As && LA44_1<=Of)||LA44_1==RULE_IDENTIFIER) ) {
                                        alt44=1;
                                    }


                                }


                                switch (alt44) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_26); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_15);
                            	    ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0=ruleNamedImportSpecifier();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.start):null), (ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0!=null?((Token)ImportSpecifiersNamedImportSpecifierParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getImportSpecifiersExceptDefaultAccess().getImportSpecifiersAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop44;
                                }
                            } while (true);
                            int alt45=2;
                            int LA45_0 = input.LA(1);

                            if ( (LA45_0==Comma) ) {
                                alt45=1;
                            }
                            switch (alt45) {
                                case 1 :
                                    {
                                    CommaKeyword_1_1_2=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(CommaKeyword_1_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getCommaKeyword_1_1_2()); 
                                    }

                                    }
                                    break;

                            }


                            }
                            break;

                    }

                    RightCurlyBracketKeyword_1_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_2, grammarAccess.getImportSpecifiersExceptDefaultAccess().getRightCurlyBracketKeyword_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamedImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamedImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamedImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamedImportSpecifier_return ruleNamedImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamedImportSpecifier_return retval = new InternalN4JSParser.ruleNamedImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleIdentifierName_return ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt48=2;
            alt48 = dfa48.predict(input);
            switch (alt48) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_35);
                    ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.start):null), (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1!=null?((Token)ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1.stop):null), grammarAccess.getNamedImportSpecifierAccess().getImportedElementAssignment_1_0()); 
                    }

                    }


                    }

                    AsKeyword_1_1=(Token)match(input,As,FOLLOW_9); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_1, grammarAccess.getNamedImportSpecifierAccess().getAsKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AliasBindingIdentifierParserRuleCall_1_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.start):null), (AliasBindingIdentifierParserRuleCall_1_2_0!=null?((Token)AliasBindingIdentifierParserRuleCall_1_2_0.stop):null), grammarAccess.getNamedImportSpecifierAccess().getAliasAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultImportSpecifier_return ruleDefaultImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleDefaultImportSpecifier_return retval = new InternalN4JSParser.ruleDefaultImportSpecifier_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.start):null), (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getDefaultImportSpecifierAccess().getImportedElementAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNamespaceImportSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNamespaceImportSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNamespaceImportSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNamespaceImportSpecifier_return ruleNamespaceImportSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleNamespaceImportSpecifier_return retval = new InternalN4JSParser.ruleNamespaceImportSpecifier_return();
        retval.start = input.LT(1);

        Token AsteriskKeyword_1=null;
        Token AsKeyword_2=null;
        Token DeclaredDynamicPlusSignKeyword_4_0=null;
        InternalN4JSParser.ruleBindingIdentifier_return AliasBindingIdentifierParserRuleCall_3_0 = null;



            
        try {
            {
            {
            AsteriskKeyword_1=(Token)match(input,Asterisk,FOLLOW_35); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsteriskKeyword_1, grammarAccess.getNamespaceImportSpecifierAccess().getAsteriskKeyword_1()); 
            }
            AsKeyword_2=(Token)match(input,As,FOLLOW_9); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AsKeyword_2, grammarAccess.getNamespaceImportSpecifierAccess().getAsKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_36);
            AliasBindingIdentifierParserRuleCall_3_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.start):null), (AliasBindingIdentifierParserRuleCall_3_0!=null?((Token)AliasBindingIdentifierParserRuleCall_3_0.stop):null), grammarAccess.getNamespaceImportSpecifierAccess().getAliasAssignment_3()); 
            }

            }


            }
            int alt49=2;
            int LA49_0 = input.LA(1);

            if ( (LA49_0==PlusSign) ) {
                alt49=1;
            }
            switch (alt49) {
                case 1 :
                    {
                    {
                    DeclaredDynamicPlusSignKeyword_4_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredDynamicPlusSignKeyword_4_0, grammarAccess.getNamespaceImportSpecifierAccess().getDeclaredDynamicPlusSignKeyword_4_0()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleModuleSpecifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleModuleSpecifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleModuleSpecifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleModuleSpecifier_return ruleModuleSpecifier() throws RecognitionException {
        InternalN4JSParser.ruleModuleSpecifier_return retval = new InternalN4JSParser.ruleModuleSpecifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionDeclaration_return ruleFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleFunctionDeclaration_return retval = new InternalN4JSParser.ruleFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop50:
            do {
                int alt50=2;
                int LA50_0 = input.LA(1);

                if ( ((LA50_0>=Protected && LA50_0<=Abstract)||LA50_0==External||(LA50_0>=Private && LA50_0<=Project)||LA50_0==Public||LA50_0==Static||LA50_0==Const) ) {
                    alt50=1;
                }


                switch (alt50) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop50;
                }
            } while (true);

            pushFollow(FOLLOW_6);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_37);
            FunctionImplParserRuleCall_0_0_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt51=2;
            alt51 = dfa51.predict(input);
            switch (alt51) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionDeclaration_return norm1_FunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionDeclaration_return retval = new InternalN4JSParser.norm1_FunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            loop52:
            do {
                int alt52=2;
                int LA52_0 = input.LA(1);

                if ( ((LA52_0>=Protected && LA52_0<=Abstract)||LA52_0==External||(LA52_0>=Private && LA52_0<=Project)||LA52_0==Public||LA52_0==Static||LA52_0==Const) ) {
                    alt52=1;
                }


                switch (alt52) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop52;
                }
            } while (true);

            pushFollow(FOLLOW_38);
            AsyncNoTrailingLineBreakParserRuleCall_0_0_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_2.stop):null), grammarAccess.getFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_37);
            FunctionImplParserRuleCall_0_0_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.start):null), (FunctionImplParserRuleCall_0_0_3!=null?((Token)FunctionImplParserRuleCall_0_0_3.stop):null), grammarAccess.getFunctionDeclarationAccess().getFunctionImplParserRuleCall_0_0_3()); 
            }

            }


            }


            }
            int alt53=2;
            int LA53_0 = input.LA(1);

            if ( (LA53_0==Semicolon) ) {
                int LA53_1 = input.LA(2);

                if ( (synpred20_InternalN4JSParser()) ) {
                    alt53=1;
                }
            }
            else if ( (LA53_0==EOF) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RULE_EOL) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RULE_ML_COMMENT) && (synpred20_InternalN4JSParser())) {
                alt53=1;
            }
            else if ( (LA53_0==RightCurlyBracket) ) {
                int LA53_5 = input.LA(2);

                if ( (synpred20_InternalN4JSParser()) ) {
                    alt53=1;
                }
            }
            switch (alt53) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_1=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getFunctionDeclarationAccess().getSemiParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleAsyncNoTrailingLineBreak_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return ruleAsyncNoTrailingLineBreak() throws RecognitionException {
        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return retval = new InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_1 = null;



            
        try {
            {
            int alt54=2;
            int LA54_0 = input.LA(1);

            if ( (LA54_0==Async) ) {
                int LA54_1 = input.LA(2);

                if ( ((LA54_1>=Intersection && LA54_1<=With)||(LA54_1>=For && LA54_1<=Var)||(LA54_1>=As && LA54_1<=Of)||LA54_1==LeftSquareBracket||LA54_1==RULE_DOUBLE||LA54_1==RULE_HEX_INT||LA54_1==RULE_OCTAL_INT||LA54_1==RULE_SCIENTIFIC_INT||LA54_1==RULE_IDENTIFIER||LA54_1==RULE_STRING||LA54_1==RULE_NO_LINE_TERMINATOR||LA54_1==RULE_INT) ) {
                    alt54=1;
                }
            }
            switch (alt54) {
                case 1 :
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0=(Token)match(input,Async,FOLLOW_39); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0, grammarAccess.getAsyncNoTrailingLineBreakAccess().getDeclaredAsyncAsyncKeyword_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_2);
                    NoLineTerminatorParserRuleCall_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.start):null), (NoLineTerminatorParserRuleCall_1!=null?((Token)NoLineTerminatorParserRuleCall_1.stop):null), grammarAccess.getAsyncNoTrailingLineBreakAccess().getNoLineTerminatorParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionImpl_return ruleFunctionImpl() throws RecognitionException {
        InternalN4JSParser.ruleFunctionImpl_return retval = new InternalN4JSParser.ruleFunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm2_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_40); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt55=2;
            int LA55_0 = input.LA(1);

            if ( (LA55_0==Asterisk) ) {
                alt55=1;
            }
            else if ( ((LA55_0>=Intersection && LA55_0<=Implements)||(LA55_0>=Promisify && LA55_0<=Abstract)||LA55_0==External||(LA55_0>=Private && LA55_0<=Project)||LA55_0==Public||LA55_0==Static||LA55_0==Target||(LA55_0>=Await && LA55_0<=Await_1)||LA55_0==Union||(LA55_0>=Yield && LA55_0<=This)||LA55_0==From||LA55_0==Type||(LA55_0>=Get && LA55_0<=Let)||LA55_0==Set||LA55_0==As||LA55_0==Of||LA55_0==LeftParenthesis||LA55_0==LessThanSign||LA55_0==RULE_IDENTIFIER) ) {
                alt55=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 55, 0, input);

                throw nvae;
            }
            switch (alt55) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm2_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionImpl_return norm3_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionImpl_return retval = new InternalN4JSParser.norm3_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm1_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.norm1_FunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleFunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_40); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt56=2;
            int LA56_0 = input.LA(1);

            if ( (LA56_0==Asterisk) ) {
                alt56=1;
            }
            else if ( ((LA56_0>=Intersection && LA56_0<=Implements)||(LA56_0>=Promisify && LA56_0<=Abstract)||LA56_0==External||(LA56_0>=Private && LA56_0<=Project)||LA56_0==Public||LA56_0==Static||LA56_0==Target||(LA56_0>=Await && LA56_0<=Await_1)||LA56_0==Union||LA56_0==This||LA56_0==From||LA56_0==Type||(LA56_0>=Get && LA56_0<=Let)||LA56_0==Set||LA56_0==As||LA56_0==Of||LA56_0==LeftParenthesis||LA56_0==LessThanSign||LA56_0==RULE_IDENTIFIER) ) {
                alt56=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 56, 0, input);

                throw nvae;
            }
            switch (alt56) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm1_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=norm1_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=ruleFunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_FunctionImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_FunctionImpl_return norm6_FunctionImpl() throws RecognitionException {
        InternalN4JSParser.norm6_FunctionImpl_return retval = new InternalN4JSParser.norm6_FunctionImpl_return();
        retval.start = input.LT(1);

        Token FunctionKeyword_0=null;
        Token GeneratorAsteriskKeyword_1_0_0_0=null;
        InternalN4JSParser.norm3_FunctionHeader_return FunctionHeaderParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm3_FunctionBody_return FunctionBodyParserRuleCall_1_0_2 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_1_1_1 = null;



            
        try {
            {
            {
            FunctionKeyword_0=(Token)match(input,Function,FOLLOW_40); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0, grammarAccess.getFunctionImplAccess().getFunctionKeyword_0()); 
            }
            int alt57=2;
            int LA57_0 = input.LA(1);

            if ( (LA57_0==Asterisk) ) {
                alt57=1;
            }
            else if ( ((LA57_0>=Intersection && LA57_0<=Implements)||(LA57_0>=Promisify && LA57_0<=Abstract)||LA57_0==External||(LA57_0>=Private && LA57_0<=Project)||LA57_0==Public||LA57_0==Static||LA57_0==Target||(LA57_0>=Await && LA57_0<=Await_1)||LA57_0==Union||(LA57_0>=Yield && LA57_0<=This)||LA57_0==From||LA57_0==Type||(LA57_0>=Get && LA57_0<=Let)||LA57_0==Set||LA57_0==As||LA57_0==Of||LA57_0==LeftParenthesis||LA57_0==LessThanSign||LA57_0==RULE_IDENTIFIER) ) {
                alt57=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 57, 0, input);

                throw nvae;
            }
            switch (alt57) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_1_0_0_0=(Token)match(input,Asterisk,FOLLOW_41); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_1_0_0_0, grammarAccess.getFunctionImplAccess().getGeneratorAsteriskKeyword_1_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_0_1=norm3_FunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.start):null), (FunctionHeaderParserRuleCall_1_0_1!=null?((Token)FunctionHeaderParserRuleCall_1_0_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_0_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_0_2=norm3_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.start):null), (FunctionBodyParserRuleCall_1_0_2!=null?((Token)FunctionBodyParserRuleCall_1_0_2.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    FunctionHeaderParserRuleCall_1_1_0=ruleFunctionHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.start):null), (FunctionHeaderParserRuleCall_1_1_0!=null?((Token)FunctionHeaderParserRuleCall_1_1_0.stop):null), grammarAccess.getFunctionImplAccess().getFunctionHeaderParserRuleCall_1_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionBodyParserRuleCall_1_1_1=norm2_FunctionBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.start):null), (FunctionBodyParserRuleCall_1_1_1!=null?((Token)FunctionBodyParserRuleCall_1_1_1.stop):null), grammarAccess.getFunctionImplAccess().getFunctionBodyParserRuleCall_1_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionHeader_return ruleFunctionHeader() throws RecognitionException {
        InternalN4JSParser.ruleFunctionHeader_return retval = new InternalN4JSParser.ruleFunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt58=2;
            int LA58_0 = input.LA(1);

            if ( (LA58_0==LessThanSign) ) {
                alt58=1;
            }
            switch (alt58) {
                case 1 :
                    {
                    pushFollow(FOLLOW_40);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt59=2;
            int LA59_0 = input.LA(1);

            if ( ((LA59_0>=Intersection && LA59_0<=Implements)||(LA59_0>=Promisify && LA59_0<=Abstract)||LA59_0==External||(LA59_0>=Private && LA59_0<=Project)||LA59_0==Public||LA59_0==Static||LA59_0==Target||(LA59_0>=Await && LA59_0<=Await_1)||LA59_0==Union||(LA59_0>=Yield && LA59_0<=This)||LA59_0==From||LA59_0==Type||(LA59_0>=Get && LA59_0<=Let)||LA59_0==Set||LA59_0==As||LA59_0==Of||LA59_0==RULE_IDENTIFIER) ) {
                alt59=1;
            }
            switch (alt59) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_40);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_42);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt60=2;
            int LA60_0 = input.LA(1);

            if ( (LA60_0==Colon) && (synpred21_InternalN4JSParser())) {
                alt60=1;
            }
            switch (alt60) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionHeader_return norm1_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionHeader_return retval = new InternalN4JSParser.norm1_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt61=2;
            int LA61_0 = input.LA(1);

            if ( (LA61_0==LessThanSign) ) {
                alt61=1;
            }
            switch (alt61) {
                case 1 :
                    {
                    pushFollow(FOLLOW_40);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt62=2;
            int LA62_0 = input.LA(1);

            if ( ((LA62_0>=Intersection && LA62_0<=Implements)||(LA62_0>=Promisify && LA62_0<=Abstract)||LA62_0==External||(LA62_0>=Private && LA62_0<=Project)||LA62_0==Public||LA62_0==Static||LA62_0==Target||(LA62_0>=Await && LA62_0<=Await_1)||LA62_0==Union||LA62_0==This||LA62_0==From||LA62_0==Type||(LA62_0>=Get && LA62_0<=Let)||LA62_0==Set||LA62_0==As||LA62_0==Of||LA62_0==RULE_IDENTIFIER) ) {
                alt62=1;
            }
            switch (alt62) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_40);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_42);
            StrictFormalParametersParserRuleCall_2=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt63=2;
            int LA63_0 = input.LA(1);

            if ( (LA63_0==Colon) && (synpred22_InternalN4JSParser())) {
                alt63=1;
            }
            switch (alt63) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionHeader_return norm2_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionHeader_return retval = new InternalN4JSParser.norm2_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt64=2;
            int LA64_0 = input.LA(1);

            if ( (LA64_0==LessThanSign) ) {
                alt64=1;
            }
            switch (alt64) {
                case 1 :
                    {
                    pushFollow(FOLLOW_41);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt65=2;
            int LA65_0 = input.LA(1);

            if ( ((LA65_0>=Intersection && LA65_0<=Implements)||(LA65_0>=Promisify && LA65_0<=Abstract)||LA65_0==External||(LA65_0>=Private && LA65_0<=Project)||LA65_0==Public||LA65_0==Static||LA65_0==Target||(LA65_0>=Await && LA65_0<=Await_1)||LA65_0==Union||(LA65_0>=Yield && LA65_0<=This)||LA65_0==From||LA65_0==Type||(LA65_0>=Get && LA65_0<=Let)||LA65_0==Set||LA65_0==As||LA65_0==Of||LA65_0==RULE_IDENTIFIER) ) {
                alt65=1;
            }
            switch (alt65) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_41);
                    NameBindingIdentifierParserRuleCall_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_42);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt66=2;
            int LA66_0 = input.LA(1);

            if ( (LA66_0==Colon) && (synpred23_InternalN4JSParser())) {
                alt66=1;
            }
            switch (alt66) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionHeader_return norm3_FunctionHeader() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionHeader_return retval = new InternalN4JSParser.norm3_FunctionHeader_return();
        retval.start = input.LT(1);

        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_2 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            int alt67=2;
            int LA67_0 = input.LA(1);

            if ( (LA67_0==LessThanSign) ) {
                alt67=1;
            }
            switch (alt67) {
                case 1 :
                    {
                    pushFollow(FOLLOW_41);
                    TypeVariablesParserRuleCall_0=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.start):null), (TypeVariablesParserRuleCall_0!=null?((Token)TypeVariablesParserRuleCall_0.stop):null), grammarAccess.getFunctionHeaderAccess().getTypeVariablesParserRuleCall_0()); 
                    }

                    }
                    break;

            }
            int alt68=2;
            int LA68_0 = input.LA(1);

            if ( ((LA68_0>=Intersection && LA68_0<=Implements)||(LA68_0>=Promisify && LA68_0<=Abstract)||LA68_0==External||(LA68_0>=Private && LA68_0<=Project)||LA68_0==Public||LA68_0==Static||LA68_0==Target||(LA68_0>=Await && LA68_0<=Await_1)||LA68_0==Union||LA68_0==This||LA68_0==From||LA68_0==Type||(LA68_0>=Get && LA68_0<=Let)||LA68_0==Set||LA68_0==As||LA68_0==Of||LA68_0==RULE_IDENTIFIER) ) {
                alt68=1;
            }
            switch (alt68) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_41);
                    NameBindingIdentifierParserRuleCall_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.start):null), (NameBindingIdentifierParserRuleCall_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getNameAssignment_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_42);
            StrictFormalParametersParserRuleCall_2=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.start):null), (StrictFormalParametersParserRuleCall_2!=null?((Token)StrictFormalParametersParserRuleCall_2.stop):null), grammarAccess.getFunctionHeaderAccess().getStrictFormalParametersParserRuleCall_2()); 
            }
            int alt69=2;
            int LA69_0 = input.LA(1);

            if ( (LA69_0==Colon) && (synpred24_InternalN4JSParser())) {
                alt69=1;
            }
            switch (alt69) {
                case 1 :
                    {
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getFunctionHeaderAccess().getColonKeyword_3_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getFunctionHeaderAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionBody_return ruleFunctionBody() throws RecognitionException {
        InternalN4JSParser.ruleFunctionBody_return retval = new InternalN4JSParser.ruleFunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt70=2;
            alt70 = dfa70.predict(input);
            switch (alt70) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FunctionBody_return norm1_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm1_FunctionBody_return retval = new InternalN4JSParser.norm1_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_0 = null;



            
        try {
            {
            int alt71=2;
            alt71 = dfa71.predict(input);
            switch (alt71) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.start):null), (BodyBlockParserRuleCall_1_0_0!=null?((Token)BodyBlockParserRuleCall_1_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_1_0()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_FunctionBody_return norm2_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm2_FunctionBody_return retval = new InternalN4JSParser.norm2_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_FunctionBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_FunctionBody_return norm3_FunctionBody() throws RecognitionException {
        InternalN4JSParser.norm3_FunctionBody_return retval = new InternalN4JSParser.norm3_FunctionBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_0_0_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_0_0_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.start):null), (BodyBlockParserRuleCall_0_0_0!=null?((Token)BodyBlockParserRuleCall_0_0_0.stop):null), grammarAccess.getFunctionBodyAccess().getBodyAssignment_0_0()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedFunctionDeclaration_return ruleExportedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportedFunctionDeclaration_return retval = new InternalN4JSParser.ruleExportedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionDeclarationParserRuleCall=ruleFunctionDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.start):null), (FunctionDeclarationParserRuleCall!=null?((Token)FunctionDeclarationParserRuleCall.stop):null), grammarAccess.getExportedFunctionDeclarationAccess().getFunctionDeclarationParserRuleCall()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionTypeExpression_return ruleFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleFunctionTypeExpression_return retval = new InternalN4JSParser.ruleFunctionTypeExpression_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommercialAtKeyword_2_0=null;
        Token ThisKeyword_2_1=null;
        Token LeftParenthesisKeyword_2_2=null;
        Token RightParenthesisKeyword_2_4=null;
        Token FunctionKeyword_3=null;
        Token LessThanSignKeyword_4_0=null;
        Token CommaKeyword_4_2_0=null;
        Token GreaterThanSignKeyword_4_3=null;
        Token LeftParenthesisKeyword_5=null;
        Token CommaKeyword_6_1_0=null;
        Token RightParenthesisKeyword_7=null;
        Token ColonKeyword_8_0=null;
        Token RightCurlyBracketKeyword_9=null;
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0 = null;

        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_6_0_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_6_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_8_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_44); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getFunctionTypeExpressionAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt72=2;
            int LA72_0 = input.LA(1);

            if ( (LA72_0==CommercialAt) ) {
                alt72=1;
            }
            switch (alt72) {
                case 1 :
                    {
                    CommercialAtKeyword_2_0=(Token)match(input,CommercialAt,FOLLOW_45); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommercialAtKeyword_2_0, grammarAccess.getFunctionTypeExpressionAccess().getCommercialAtKeyword_2_0()); 
                    }
                    ThisKeyword_2_1=(Token)match(input,This,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_2_1, grammarAccess.getFunctionTypeExpressionAccess().getThisKeyword_2_1()); 
                    }
                    LeftParenthesisKeyword_2_2=(Token)match(input,LeftParenthesis,FOLLOW_47); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_2_2, grammarAccess.getFunctionTypeExpressionAccess().getLeftParenthesisKeyword_2_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_48);
                    DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0=ruleTypeRefFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.start):null), (DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0!=null?((Token)DeclaredThisTypeTypeRefFunctionTypeExpressionParserRuleCall_2_3_0.stop):null), grammarAccess.getFunctionTypeExpressionAccess().getDeclaredThisTypeAssignment_2_3()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_2_4=(Token)match(input,RightParenthesis,FOLLOW_49); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_2_4, grammarAccess.getFunctionTypeExpressionAccess().getRightParenthesisKeyword_2_4()); 
                    }

                    }
                    break;

            }

            FunctionKeyword_3=(Token)match(input,Function,FOLLOW_50); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_3, grammarAccess.getFunctionTypeExpressionAccess().getFunctionKeyword_3()); 
            }
            int alt74=2;
            int LA74_0 = input.LA(1);

            if ( (LA74_0==LessThanSign) ) {
                alt74=1;
            }
            switch (alt74) {
                case 1 :
                    {
                    LessThanSignKeyword_4_0=(Token)match(input,LessThanSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_4_0, grammarAccess.getFunctionTypeExpressionAccess().getLessThanSignKeyword_4_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_16);
                    OwnedTypeVarsTypeVariableParserRuleCall_4_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_1_0.stop):null), grammarAccess.getFunctionTypeExpressionAccess().getOwnedTypeVarsAssignment_4_1()); 
                    }

                    }


                    }
                    loop73:
                    do {
                        int alt73=2;
                        int LA73_0 = input.LA(1);

                        if ( (LA73_0==Comma) ) {
                            alt73=1;
                        }


                        switch (alt73) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_4_2_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_4_2_0, grammarAccess.getFunctionTypeExpressionAccess().getCommaKeyword_4_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_16);
                    	    OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.start):null), (OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0!=null?((Token)OwnedTypeVarsTypeVariableParserRuleCall_4_2_1_0.stop):null), grammarAccess.getFunctionTypeExpressionAccess().getOwnedTypeVarsAssignment_4_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop73;
                        }
                    } while (true);

                    GreaterThanSignKeyword_4_3=(Token)match(input,GreaterThanSign,FOLLOW_46); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_4_3, grammarAccess.getFunctionTypeExpressionAccess().getGreaterThanSignKeyword_4_3()); 
                    }

                    }
                    break;

            }

            LeftParenthesisKeyword_5=(Token)match(input,LeftParenthesis,FOLLOW_51); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_5, grammarAccess.getFunctionTypeExpressionAccess().getLeftParenthesisKeyword_5()); 
            }
            int alt76=2;
            int LA76_0 = input.LA(1);

            if ( ((LA76_0>=Intersection && LA76_0<=Implements)||(LA76_0>=Promisify && LA76_0<=Abstract)||(LA76_0>=Private && LA76_0<=Project)||LA76_0==Public||LA76_0==Static||LA76_0==Target||LA76_0==Await_1||LA76_0==Union||LA76_0==This||(LA76_0>=From && LA76_0<=This_1)||(LA76_0>=Type && LA76_0<=Void)||LA76_0==FullStopFullStopFullStop||LA76_0==Get||LA76_0==Set||LA76_0==As||LA76_0==QuestionMark||LA76_0==LeftCurlyBracket||LA76_0==Tilde||LA76_0==RULE_IDENTIFIER) ) {
                alt76=1;
            }
            switch (alt76) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    FparsTAnonymousFormalParameterParserRuleCall_6_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsTAnonymousFormalParameterParserRuleCall_6_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_6_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_6_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_6_0_0.stop):null), grammarAccess.getFunctionTypeExpressionAccess().getFparsAssignment_6_0()); 
                    }

                    }


                    }
                    loop75:
                    do {
                        int alt75=2;
                        int LA75_0 = input.LA(1);

                        if ( (LA75_0==Comma) ) {
                            alt75=1;
                        }


                        switch (alt75) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_6_1_0=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_6_1_0, grammarAccess.getFunctionTypeExpressionAccess().getCommaKeyword_6_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_52);
                    	    FparsTAnonymousFormalParameterParserRuleCall_6_1_1_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsTAnonymousFormalParameterParserRuleCall_6_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_6_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_6_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_6_1_1_0.stop):null), grammarAccess.getFunctionTypeExpressionAccess().getFparsAssignment_6_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop75;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_7=(Token)match(input,RightParenthesis,FOLLOW_54); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_7, grammarAccess.getFunctionTypeExpressionAccess().getRightParenthesisKeyword_7()); 
            }
            int alt77=2;
            int LA77_0 = input.LA(1);

            if ( (LA77_0==Colon) ) {
                alt77=1;
            }
            switch (alt77) {
                case 1 :
                    {
                    ColonKeyword_8_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_8_0, grammarAccess.getFunctionTypeExpressionAccess().getColonKeyword_8_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_24);
                    ReturnTypeRefTypeRefParserRuleCall_8_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_8_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_8_1_0.stop):null), grammarAccess.getFunctionTypeExpressionAccess().getReturnTypeRefAssignment_8_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_9=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_9, grammarAccess.getFunctionTypeExpressionAccess().getRightCurlyBracketKeyword_9()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedFunctionDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedFunctionDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return ruleAnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSParser.ruleFunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_6);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop78:
            do {
                int alt78=2;
                int LA78_0 = input.LA(1);

                if ( ((LA78_0>=Protected && LA78_0<=Abstract)||LA78_0==External||(LA78_0>=Private && LA78_0<=Project)||LA78_0==Public||LA78_0==Static||LA78_0==Const) ) {
                    alt78=1;
                }


                switch (alt78) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop78;
                }
            } while (true);

            pushFollow(FOLLOW_6);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=ruleFunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedFunctionDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return norm1_AnnotatedFunctionDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotationList_return AnnotationListAnnotationListParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_2 = null;

        InternalN4JSParser.norm3_FunctionImpl_return FunctionImplParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_6);
            AnnotationListAnnotationListParserRuleCall_0_0=ruleAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.start):null), (AnnotationListAnnotationListParserRuleCall_0_0!=null?((Token)AnnotationListAnnotationListParserRuleCall_0_0.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAnnotationListAssignment_0()); 
            }

            }


            }
            loop79:
            do {
                int alt79=2;
                int LA79_0 = input.LA(1);

                if ( ((LA79_0>=Protected && LA79_0<=Abstract)||LA79_0==External||(LA79_0>=Private && LA79_0<=Project)||LA79_0==Public||LA79_0==Static||LA79_0==Const) ) {
                    alt79=1;
                }


                switch (alt79) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_6);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop79;
                }
            } while (true);

            pushFollow(FOLLOW_38);
            AsyncNoTrailingLineBreakParserRuleCall_2=ruleAsyncNoTrailingLineBreak();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.start):null), (AsyncNoTrailingLineBreakParserRuleCall_2!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_2.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_2()); 
            }
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_3=norm3_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.start):null), (FunctionImplParserRuleCall_3!=null?((Token)FunctionImplParserRuleCall_3.stop):null), grammarAccess.getAnnotatedFunctionDeclarationAccess().getFunctionImplParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFunctionExpression_return ruleFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleFunctionExpression_return retval = new InternalN4JSParser.ruleFunctionExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FunctionImplParserRuleCall_1=norm6_FunctionImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.start):null), (FunctionImplParserRuleCall_1!=null?((Token)FunctionImplParserRuleCall_1.stop):null), grammarAccess.getFunctionExpressionAccess().getFunctionImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAsyncFunctionExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAsyncFunctionExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAsyncFunctionExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAsyncFunctionExpression_return ruleAsyncFunctionExpression() throws RecognitionException {
        InternalN4JSParser.ruleAsyncFunctionExpression_return retval = new InternalN4JSParser.ruleAsyncFunctionExpression_return();
        retval.start = input.LT(1);

        Token DeclaredAsyncAsyncKeyword_0_0_0_0=null;
        Token FunctionKeyword_0_0_2=null;
        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleFunctionHeader_return FunctionHeaderParserRuleCall_1 = null;

        InternalN4JSParser.norm2_FunctionBody_return FunctionBodyParserRuleCall_2 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            DeclaredAsyncAsyncKeyword_0_0_0_0=(Token)match(input,Async,FOLLOW_55); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DeclaredAsyncAsyncKeyword_0_0_0_0, grammarAccess.getAsyncFunctionExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_0()); 
            }

            }


            }

            pushFollow(FOLLOW_49);
            NoLineTerminatorParserRuleCall_0_0_1=ruleNoLineTerminator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_1()); 
            }
            FunctionKeyword_0_0_2=(Token)match(input,Function,FOLLOW_40); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FunctionKeyword_0_0_2, grammarAccess.getAsyncFunctionExpressionAccess().getFunctionKeyword_0_0_2()); 
            }

            }


            }

            pushFollow(FOLLOW_13);
            FunctionHeaderParserRuleCall_1=ruleFunctionHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.start):null), (FunctionHeaderParserRuleCall_1!=null?((Token)FunctionHeaderParserRuleCall_1.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionHeaderParserRuleCall_1()); 
            }
            pushFollow(FOLLOW_2);
            FunctionBodyParserRuleCall_2=norm2_FunctionBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.start):null), (FunctionBodyParserRuleCall_2!=null?((Token)FunctionBodyParserRuleCall_2.stop):null), grammarAccess.getAsyncFunctionExpressionAccess().getFunctionBodyParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrowExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrowExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrowExpression_return ruleArrowExpression() throws RecognitionException {
        InternalN4JSParser.ruleArrowExpression_return retval = new InternalN4JSParser.ruleArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt86=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt86=1;
                }
                break;
            case Async:
                {
                int LA86_2 = input.LA(2);

                if ( (LA86_2==EqualsSignGreaterThanSign) ) {
                    alt86=3;
                }
                else if ( (LA86_2==RULE_NO_LINE_TERMINATOR) && (synpred35_InternalN4JSParser())) {
                    alt86=2;
                }
                else if ( (LA86_2==LeftParenthesis) && (synpred35_InternalN4JSParser())) {
                    alt86=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 86, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Await_1:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt86=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 86, 0, input);

                throw nvae;
            }

            switch (alt86) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt81=2;
                    int LA81_0 = input.LA(1);

                    if ( ((LA81_0>=Intersection && LA81_0<=Implements)||(LA81_0>=Promisify && LA81_0<=Abstract)||LA81_0==External||(LA81_0>=Private && LA81_0<=Project)||LA81_0==Public||LA81_0==Static||LA81_0==Target||(LA81_0>=Await && LA81_0<=Await_1)||LA81_0==Union||(LA81_0>=Yield && LA81_0<=This)||LA81_0==From||LA81_0==Type||LA81_0==FullStopFullStopFullStop||(LA81_0>=Get && LA81_0<=Let)||LA81_0==Set||LA81_0==As||LA81_0==Of||(LA81_0>=CommercialAt && LA81_0<=LeftSquareBracket)||LA81_0==LeftCurlyBracket||LA81_0==RULE_IDENTIFIER) ) {
                        alt81=1;
                    }
                    switch (alt81) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop80:
                            do {
                                int alt80=2;
                                int LA80_0 = input.LA(1);

                                if ( (LA80_0==Comma) ) {
                                    alt80=1;
                                }


                                switch (alt80) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop80;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt82=2;
                    int LA82_0 = input.LA(1);

                    if ( (LA82_0==Colon) ) {
                        alt82=1;
                    }
                    switch (alt82) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_46);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt84=2;
                    int LA84_0 = input.LA(1);

                    if ( ((LA84_0>=Intersection && LA84_0<=Implements)||(LA84_0>=Promisify && LA84_0<=Abstract)||LA84_0==External||(LA84_0>=Private && LA84_0<=Project)||LA84_0==Public||LA84_0==Static||LA84_0==Target||(LA84_0>=Await && LA84_0<=Await_1)||LA84_0==Union||(LA84_0>=Yield && LA84_0<=This)||LA84_0==From||LA84_0==Type||LA84_0==FullStopFullStopFullStop||(LA84_0>=Get && LA84_0<=Let)||LA84_0==Set||LA84_0==As||LA84_0==Of||(LA84_0>=CommercialAt && LA84_0<=LeftSquareBracket)||LA84_0==LeftCurlyBracket||LA84_0==RULE_IDENTIFIER) ) {
                        alt84=1;
                    }
                    switch (alt84) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop83:
                            do {
                                int alt83=2;
                                int LA83_0 = input.LA(1);

                                if ( (LA83_0==Comma) ) {
                                    alt83=1;
                                }


                                switch (alt83) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop83;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt85=2;
                    int LA85_0 = input.LA(1);

                    if ( (LA85_0==Colon) ) {
                        alt85=1;
                    }
                    switch (alt85) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt87=2;
            alt87 = dfa87.predict(input);
            switch (alt87) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_24);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrowExpression_return norm1_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ArrowExpression_return retval = new InternalN4JSParser.norm1_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSParser.ruleBlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt94=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt94=1;
                }
                break;
            case Async:
                {
                int LA94_2 = input.LA(2);

                if ( (LA94_2==EqualsSignGreaterThanSign) ) {
                    alt94=3;
                }
                else if ( (LA94_2==RULE_NO_LINE_TERMINATOR) && (synpred39_InternalN4JSParser())) {
                    alt94=2;
                }
                else if ( (LA94_2==LeftParenthesis) && (synpred39_InternalN4JSParser())) {
                    alt94=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 94, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Await_1:
            case Union:
            case Yield:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt94=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 94, 0, input);

                throw nvae;
            }

            switch (alt94) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt89=2;
                    int LA89_0 = input.LA(1);

                    if ( ((LA89_0>=Intersection && LA89_0<=Implements)||(LA89_0>=Promisify && LA89_0<=Abstract)||LA89_0==External||(LA89_0>=Private && LA89_0<=Project)||LA89_0==Public||LA89_0==Static||LA89_0==Target||(LA89_0>=Await && LA89_0<=Await_1)||LA89_0==Union||(LA89_0>=Yield && LA89_0<=This)||LA89_0==From||LA89_0==Type||LA89_0==FullStopFullStopFullStop||(LA89_0>=Get && LA89_0<=Let)||LA89_0==Set||LA89_0==As||LA89_0==Of||(LA89_0>=CommercialAt && LA89_0<=LeftSquareBracket)||LA89_0==LeftCurlyBracket||LA89_0==RULE_IDENTIFIER) ) {
                        alt89=1;
                    }
                    switch (alt89) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop88:
                            do {
                                int alt88=2;
                                int LA88_0 = input.LA(1);

                                if ( (LA88_0==Comma) ) {
                                    alt88=1;
                                }


                                switch (alt88) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop88;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt90=2;
                    int LA90_0 = input.LA(1);

                    if ( (LA90_0==Colon) ) {
                        alt90=1;
                    }
                    switch (alt90) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_46);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt92=2;
                    int LA92_0 = input.LA(1);

                    if ( ((LA92_0>=Intersection && LA92_0<=Implements)||(LA92_0>=Promisify && LA92_0<=Abstract)||LA92_0==External||(LA92_0>=Private && LA92_0<=Project)||LA92_0==Public||LA92_0==Static||LA92_0==Target||(LA92_0>=Await && LA92_0<=Await_1)||LA92_0==Union||(LA92_0>=Yield && LA92_0<=This)||LA92_0==From||LA92_0==Type||LA92_0==FullStopFullStopFullStop||(LA92_0>=Get && LA92_0<=Let)||LA92_0==Set||LA92_0==As||LA92_0==Of||(LA92_0>=CommercialAt && LA92_0<=LeftSquareBracket)||LA92_0==LeftCurlyBracket||LA92_0==RULE_IDENTIFIER) ) {
                        alt92=1;
                    }
                    switch (alt92) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=ruleFormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop91:
                            do {
                                int alt91=2;
                                int LA91_0 = input.LA(1);

                                if ( (LA91_0==Comma) ) {
                                    alt91=1;
                                }


                                switch (alt91) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=ruleFormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop91;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt93=2;
                    int LA93_0 = input.LA(1);

                    if ( (LA93_0==Colon) ) {
                        alt93=1;
                    }
                    switch (alt93) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=ruleBindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt95=2;
            alt95 = dfa95.predict(input);
            switch (alt95) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_24);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=ruleBlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ArrowExpression_return norm2_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ArrowExpression_return retval = new InternalN4JSParser.norm2_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt102=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt102=1;
                }
                break;
            case Async:
                {
                int LA102_2 = input.LA(2);

                if ( (LA102_2==EqualsSignGreaterThanSign) ) {
                    alt102=3;
                }
                else if ( (LA102_2==RULE_NO_LINE_TERMINATOR) && (synpred43_InternalN4JSParser())) {
                    alt102=2;
                }
                else if ( (LA102_2==LeftParenthesis) && (synpred43_InternalN4JSParser())) {
                    alt102=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 102, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Await_1:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt102=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 102, 0, input);

                throw nvae;
            }

            switch (alt102) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt97=2;
                    int LA97_0 = input.LA(1);

                    if ( ((LA97_0>=Intersection && LA97_0<=Implements)||(LA97_0>=Promisify && LA97_0<=Abstract)||LA97_0==External||(LA97_0>=Private && LA97_0<=Project)||LA97_0==Public||LA97_0==Static||LA97_0==Target||(LA97_0>=Await && LA97_0<=Await_1)||LA97_0==Union||LA97_0==This||LA97_0==From||LA97_0==Type||LA97_0==FullStopFullStopFullStop||(LA97_0>=Get && LA97_0<=Let)||LA97_0==Set||LA97_0==As||LA97_0==Of||(LA97_0>=CommercialAt && LA97_0<=LeftSquareBracket)||LA97_0==LeftCurlyBracket||LA97_0==RULE_IDENTIFIER) ) {
                        alt97=1;
                    }
                    switch (alt97) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop96:
                            do {
                                int alt96=2;
                                int LA96_0 = input.LA(1);

                                if ( (LA96_0==Comma) ) {
                                    alt96=1;
                                }


                                switch (alt96) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop96;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt98=2;
                    int LA98_0 = input.LA(1);

                    if ( (LA98_0==Colon) ) {
                        alt98=1;
                    }
                    switch (alt98) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_46);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt100=2;
                    int LA100_0 = input.LA(1);

                    if ( ((LA100_0>=Intersection && LA100_0<=Implements)||(LA100_0>=Promisify && LA100_0<=Abstract)||LA100_0==External||(LA100_0>=Private && LA100_0<=Project)||LA100_0==Public||LA100_0==Static||LA100_0==Target||(LA100_0>=Await && LA100_0<=Await_1)||LA100_0==Union||LA100_0==This||LA100_0==From||LA100_0==Type||LA100_0==FullStopFullStopFullStop||(LA100_0>=Get && LA100_0<=Let)||LA100_0==Set||LA100_0==As||LA100_0==Of||(LA100_0>=CommercialAt && LA100_0<=LeftSquareBracket)||LA100_0==LeftCurlyBracket||LA100_0==RULE_IDENTIFIER) ) {
                        alt100=1;
                    }
                    switch (alt100) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop99:
                            do {
                                int alt99=2;
                                int LA99_0 = input.LA(1);

                                if ( (LA99_0==Comma) ) {
                                    alt99=1;
                                }


                                switch (alt99) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop99;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt101=2;
                    int LA101_0 = input.LA(1);

                    if ( (LA101_0==Colon) ) {
                        alt101=1;
                    }
                    switch (alt101) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt103=2;
            alt103 = dfa103.predict(input);
            switch (alt103) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_24);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=ruleExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ArrowExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ArrowExpression_return norm3_ArrowExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ArrowExpression_return retval = new InternalN4JSParser.norm3_ArrowExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0_0_0_0_0=null;
        Token CommaKeyword_0_0_0_0_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_0_2=null;
        Token ColonKeyword_0_0_0_0_3_0=null;
        Token DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=null;
        Token LeftParenthesisKeyword_0_0_0_1_0_0_2=null;
        Token CommaKeyword_0_0_0_1_1_1_0=null;
        Token RightParenthesisKeyword_0_0_0_1_2=null;
        Token ColonKeyword_0_0_0_1_3_0=null;
        Token EqualsSignGreaterThanSignKeyword_0_0_1=null;
        Token HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=null;
        Token RightCurlyBracketKeyword_1_0_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0 = null;

        InternalN4JSParser.ruleNoLineTerminator_return NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0 = null;

        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0 = null;

        InternalN4JSParser.norm1_BlockMinusBraces_return BodyBlockMinusBracesParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt110=3;
            switch ( input.LA(1) ) {
            case LeftParenthesis:
                {
                alt110=1;
                }
                break;
            case Async:
                {
                int LA110_2 = input.LA(2);

                if ( (LA110_2==EqualsSignGreaterThanSign) ) {
                    alt110=3;
                }
                else if ( (LA110_2==RULE_NO_LINE_TERMINATOR) && (synpred47_InternalN4JSParser())) {
                    alt110=2;
                }
                else if ( (LA110_2==LeftParenthesis) && (synpred47_InternalN4JSParser())) {
                    alt110=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 110, 2, input);

                    throw nvae;
                }
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Await_1:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Set:
            case As:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt110=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 110, 0, input);

                throw nvae;
            }

            switch (alt110) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_0_0_0_0_0=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_0_0, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_0_0()); 
                    }
                    int alt105=2;
                    int LA105_0 = input.LA(1);

                    if ( ((LA105_0>=Intersection && LA105_0<=Implements)||(LA105_0>=Promisify && LA105_0<=Abstract)||LA105_0==External||(LA105_0>=Private && LA105_0<=Project)||LA105_0==Public||LA105_0==Static||LA105_0==Target||(LA105_0>=Await && LA105_0<=Await_1)||LA105_0==Union||LA105_0==This||LA105_0==From||LA105_0==Type||LA105_0==FullStopFullStopFullStop||(LA105_0>=Get && LA105_0<=Let)||LA105_0==Set||LA105_0==As||LA105_0==Of||(LA105_0>=CommercialAt && LA105_0<=LeftSquareBracket)||LA105_0==LeftCurlyBracket||LA105_0==RULE_IDENTIFIER) ) {
                        alt105=1;
                    }
                    switch (alt105) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_0()); 
                            }

                            }


                            }
                            loop104:
                            do {
                                int alt104=2;
                                int LA104_0 = input.LA(1);

                                if ( (LA104_0==Comma) ) {
                                    alt104=1;
                                }


                                switch (alt104) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_0_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_0_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_0_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_0_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_0_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop104;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_0_2=(Token)match(input,RightParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_0_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_0_2()); 
                    }
                    int alt106=2;
                    int LA106_0 = input.LA(1);

                    if ( (LA106_0==Colon) ) {
                        alt106=1;
                    }
                    switch (alt106) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_0_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_0_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_0_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_0_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_0_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    {
                    DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0=(Token)match(input,Async,FOLLOW_60); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0, grammarAccess.getArrowExpressionAccess().getDeclaredAsyncAsyncKeyword_0_0_0_1_0_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_46);
                    NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1=ruleNoLineTerminator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.start):null), (NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1!=null?((Token)NoLineTerminatorParserRuleCall_0_0_0_1_0_0_1.stop):null), grammarAccess.getArrowExpressionAccess().getNoLineTerminatorParserRuleCall_0_0_0_1_0_0_1()); 
                    }
                    LeftParenthesisKeyword_0_0_0_1_0_0_2=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_0_0_0_1_0_0_2, grammarAccess.getArrowExpressionAccess().getLeftParenthesisKeyword_0_0_0_1_0_0_2()); 
                    }

                    }


                    }
                    int alt108=2;
                    int LA108_0 = input.LA(1);

                    if ( ((LA108_0>=Intersection && LA108_0<=Implements)||(LA108_0>=Promisify && LA108_0<=Abstract)||LA108_0==External||(LA108_0>=Private && LA108_0<=Project)||LA108_0==Public||LA108_0==Static||LA108_0==Target||(LA108_0>=Await && LA108_0<=Await_1)||LA108_0==Union||LA108_0==This||LA108_0==From||LA108_0==Type||LA108_0==FullStopFullStopFullStop||(LA108_0>=Get && LA108_0<=Let)||LA108_0==Set||LA108_0==As||LA108_0==Of||(LA108_0>=CommercialAt && LA108_0<=LeftSquareBracket)||LA108_0==LeftCurlyBracket||LA108_0==RULE_IDENTIFIER) ) {
                        alt108=1;
                    }
                    switch (alt108) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0=norm1_FormalParameter();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_0_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_0()); 
                            }

                            }


                            }
                            loop107:
                            do {
                                int alt107=2;
                                int LA107_0 = input.LA(1);

                                if ( (LA107_0==Comma) ) {
                                    alt107=1;
                                }


                                switch (alt107) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_0_0_0_1_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_0_0_0_1_1_1_0, grammarAccess.getArrowExpressionAccess().getCommaKeyword_0_0_0_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0=norm1_FormalParameter();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_0_0_0_1_1_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop107;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_0_0_0_1_2=(Token)match(input,RightParenthesis,FOLLOW_58); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_0_0_0_1_2, grammarAccess.getArrowExpressionAccess().getRightParenthesisKeyword_0_0_0_1_2()); 
                    }
                    int alt109=2;
                    int LA109_0 = input.LA(1);

                    if ( (LA109_0==Colon) ) {
                        alt109=1;
                    }
                    switch (alt109) {
                        case 1 :
                            {
                            ColonKeyword_0_0_0_1_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(ColonKeyword_0_0_0_1_3_0, grammarAccess.getArrowExpressionAccess().getColonKeyword_0_0_0_1_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_59);
                            ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_0_1_3_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getReturnTypeRefAssignment_0_0_0_1_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_59);
                    FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0=norm1_BindingIdentifierAsFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.start):null), (FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0!=null?((Token)FparsBindingIdentifierAsFormalParameterParserRuleCall_0_0_0_2_0.stop):null), grammarAccess.getArrowExpressionAccess().getFparsAssignment_0_0_0_2()); 
                    }

                    }


                    }


                    }
                    break;

            }

            EqualsSignGreaterThanSignKeyword_0_0_1=(Token)match(input,EqualsSignGreaterThanSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignGreaterThanSignKeyword_0_0_1, grammarAccess.getArrowExpressionAccess().getEqualsSignGreaterThanSignKeyword_0_0_1()); 
            }

            }


            }
            int alt111=2;
            alt111 = dfa111.predict(input);
            switch (alt111) {
                case 1 :
                    {
                    {
                    {
                    {
                    HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0, grammarAccess.getArrowExpressionAccess().getHasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_24);
                    BodyBlockMinusBracesParserRuleCall_1_0_1_0=norm1_BlockMinusBraces();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.start):null), (BodyBlockMinusBracesParserRuleCall_1_0_1_0!=null?((Token)BodyBlockMinusBracesParserRuleCall_1_0_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_0_1()); 
                    }

                    }


                    }

                    RightCurlyBracketKeyword_1_0_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightCurlyBracketKeyword_1_0_2, grammarAccess.getArrowExpressionAccess().getRightCurlyBracketKeyword_1_0_2()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0=norm1_ExpressionDisguisedAsBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.start):null), (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0!=null?((Token)BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0.stop):null), grammarAccess.getArrowExpressionAccess().getBodyAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleStrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStrictFormalParameters_return ruleStrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.ruleStrictFormalParameters_return retval = new InternalN4JSParser.ruleStrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleFormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt113=2;
            int LA113_0 = input.LA(1);

            if ( ((LA113_0>=Intersection && LA113_0<=Implements)||(LA113_0>=Promisify && LA113_0<=Abstract)||LA113_0==External||(LA113_0>=Private && LA113_0<=Project)||LA113_0==Public||LA113_0==Static||LA113_0==Target||(LA113_0>=Await && LA113_0<=Await_1)||LA113_0==Union||(LA113_0>=Yield && LA113_0<=This)||LA113_0==From||LA113_0==Type||LA113_0==FullStopFullStopFullStop||(LA113_0>=Get && LA113_0<=Let)||LA113_0==Set||LA113_0==As||LA113_0==Of||(LA113_0>=CommercialAt && LA113_0<=LeftSquareBracket)||LA113_0==LeftCurlyBracket||LA113_0==RULE_IDENTIFIER) ) {
                alt113=1;
            }
            switch (alt113) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    FparsFormalParameterParserRuleCall_1_0_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop112:
                    do {
                        int alt112=2;
                        int LA112_0 = input.LA(1);

                        if ( (LA112_0==Comma) ) {
                            alt112=1;
                        }


                        switch (alt112) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_52);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=ruleFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop112;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_StrictFormalParameters_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_StrictFormalParameters_return norm1_StrictFormalParameters() throws RecognitionException {
        InternalN4JSParser.norm1_StrictFormalParameters_return retval = new InternalN4JSParser.norm1_StrictFormalParameters_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token CommaKeyword_1_1_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_0_0 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparsFormalParameterParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getStrictFormalParametersAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt115=2;
            int LA115_0 = input.LA(1);

            if ( ((LA115_0>=Intersection && LA115_0<=Implements)||(LA115_0>=Promisify && LA115_0<=Abstract)||LA115_0==External||(LA115_0>=Private && LA115_0<=Project)||LA115_0==Public||LA115_0==Static||LA115_0==Target||(LA115_0>=Await && LA115_0<=Await_1)||LA115_0==Union||LA115_0==This||LA115_0==From||LA115_0==Type||LA115_0==FullStopFullStopFullStop||(LA115_0>=Get && LA115_0<=Let)||LA115_0==Set||LA115_0==As||LA115_0==Of||(LA115_0>=CommercialAt && LA115_0<=LeftSquareBracket)||LA115_0==LeftCurlyBracket||LA115_0==RULE_IDENTIFIER) ) {
                alt115=1;
            }
            switch (alt115) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_52);
                    FparsFormalParameterParserRuleCall_1_0_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.start):null), (FparsFormalParameterParserRuleCall_1_0_0!=null?((Token)FparsFormalParameterParserRuleCall_1_0_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_0()); 
                    }

                    }


                    }
                    loop114:
                    do {
                        int alt114=2;
                        int LA114_0 = input.LA(1);

                        if ( (LA114_0==Comma) ) {
                            alt114=1;
                        }


                        switch (alt114) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_1_0=(Token)match(input,Comma,FOLLOW_57); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_1_0, grammarAccess.getStrictFormalParametersAccess().getCommaKeyword_1_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_52);
                    	    FparsFormalParameterParserRuleCall_1_1_1_0=norm1_FormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.start):null), (FparsFormalParameterParserRuleCall_1_1_1_0!=null?((Token)FparsFormalParameterParserRuleCall_1_1_1_0.stop):null), grammarAccess.getStrictFormalParametersAccess().getFparsAssignment_1_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop114;
                        }
                    } while (true);


                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getStrictFormalParametersAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return ruleBindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.ruleBindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifierAsFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return norm1_BindingIdentifierAsFormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return retval = new InternalN4JSParser.norm1_BindingIdentifierAsFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsFormalParameterAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBlockMinusBraces() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlockMinusBraces();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlockMinusBraces_return ruleBlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.ruleBlockMinusBraces_return retval = new InternalN4JSParser.ruleBlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            loop116:
            do {
                int alt116=2;
                int LA116_0 = input.LA(1);

                if ( ((LA116_0>=Intersection && LA116_0<=Implements)||(LA116_0>=Promisify && LA116_0<=Function)||(LA116_0>=Private && LA116_0<=Delete)||(LA116_0>=Public && LA116_0<=Break)||(LA116_0>=Class && LA116_0<=This)||(LA116_0>=From && LA116_0<=With)||(LA116_0>=For && LA116_0<=Var)||LA116_0==PlusSignPlusSign||LA116_0==HyphenMinusHyphenMinus||LA116_0==SolidusEqualsSign||(LA116_0>=As && LA116_0<=If)||LA116_0==Of||LA116_0==ExclamationMark||LA116_0==LeftParenthesis||LA116_0==PlusSign||LA116_0==HyphenMinus||LA116_0==Solidus||(LA116_0>=Semicolon && LA116_0<=LessThanSign)||(LA116_0>=CommercialAt && LA116_0<=LeftSquareBracket)||LA116_0==LeftCurlyBracket||LA116_0==Tilde||LA116_0==RULE_DOUBLE||(LA116_0>=RULE_HEX_INT && LA116_0<=RULE_LEGACY_OCTAL_INT)||LA116_0==RULE_SCIENTIFIC_INT||LA116_0==RULE_IDENTIFIER||LA116_0==RULE_STRING||(LA116_0>=RULE_TEMPLATE_HEAD && LA116_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA116_0==RULE_INT) ) {
                    alt116=1;
                }


                switch (alt116) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop116;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BlockMinusBraces_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BlockMinusBraces_return norm1_BlockMinusBraces() throws RecognitionException {
        InternalN4JSParser.norm1_BlockMinusBraces_return retval = new InternalN4JSParser.norm1_BlockMinusBraces_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            loop117:
            do {
                int alt117=2;
                int LA117_0 = input.LA(1);

                if ( ((LA117_0>=Intersection && LA117_0<=Implements)||(LA117_0>=Promisify && LA117_0<=Function)||(LA117_0>=Private && LA117_0<=Delete)||(LA117_0>=Public && LA117_0<=Break)||(LA117_0>=Class && LA117_0<=This)||(LA117_0>=From && LA117_0<=With)||(LA117_0>=For && LA117_0<=Var)||LA117_0==PlusSignPlusSign||LA117_0==HyphenMinusHyphenMinus||LA117_0==SolidusEqualsSign||(LA117_0>=As && LA117_0<=If)||LA117_0==Of||LA117_0==ExclamationMark||LA117_0==LeftParenthesis||LA117_0==PlusSign||LA117_0==HyphenMinus||LA117_0==Solidus||(LA117_0>=Semicolon && LA117_0<=LessThanSign)||(LA117_0>=CommercialAt && LA117_0<=LeftSquareBracket)||LA117_0==LeftCurlyBracket||LA117_0==Tilde||LA117_0==RULE_DOUBLE||(LA117_0>=RULE_HEX_INT && LA117_0<=RULE_LEGACY_OCTAL_INT)||LA117_0==RULE_SCIENTIFIC_INT||LA117_0==RULE_IDENTIFIER||LA117_0==RULE_STRING||(LA117_0>=RULE_TEMPLATE_HEAD && LA117_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA117_0==RULE_INT) ) {
                    alt117=1;
                }


                switch (alt117) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockMinusBracesAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop117;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionDisguisedAsBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionDisguisedAsBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionDisguisedAsBlock_return ruleExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.ruleExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.ruleExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionDisguisedAsBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return norm1_ExpressionDisguisedAsBlock() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return retval = new InternalN4JSParser.norm1_ExpressionDisguisedAsBlock_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AssignmentExpressionStatement_return StatementsAssignmentExpressionStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            StatementsAssignmentExpressionStatementParserRuleCall_1_0=norm1_AssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.start):null), (StatementsAssignmentExpressionStatementParserRuleCall_1_0!=null?((Token)StatementsAssignmentExpressionStatementParserRuleCall_1_0.stop):null), grammarAccess.getExpressionDisguisedAsBlockAccess().getStatementsAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpressionStatement_return ruleAssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpressionStatement_return retval = new InternalN4JSParser.ruleAssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpressionStatement_return norm1_AssignmentExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpressionStatement_return retval = new InternalN4JSParser.norm1_AssignmentExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionStatementAccess().getExpressionAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedExpression_return ruleAnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedExpression_return retval = new InternalN4JSParser.ruleAnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_63);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt120=2;
            int LA120_0 = input.LA(1);

            if ( (LA120_0==Class) ) {
                alt120=1;
            }
            else if ( (LA120_0==Function||LA120_0==Async) ) {
                alt120=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 120, 0, input);

                throw nvae;
            }
            switch (alt120) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_64); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt118=2;
                    int LA118_0 = input.LA(1);

                    if ( ((LA118_0>=Intersection && LA118_0<=Constructor)||(LA118_0>=Promisify && LA118_0<=Abstract)||LA118_0==External||(LA118_0>=Private && LA118_0<=Project)||LA118_0==Public||LA118_0==Static||LA118_0==Target||(LA118_0>=Await && LA118_0<=Await_1)||LA118_0==Union||(LA118_0>=Yield && LA118_0<=This)||LA118_0==From||LA118_0==Type||(LA118_0>=Get && LA118_0<=Let)||LA118_0==Set||LA118_0==As||LA118_0==Of||LA118_0==RULE_IDENTIFIER) ) {
                        alt118=1;
                    }
                    else if ( (LA118_0==Implements) ) {
                        int LA118_2 = input.LA(2);

                        if ( (LA118_2==Implements||LA118_2==Extends||LA118_2==LeftCurlyBracket) ) {
                            alt118=1;
                        }
                    }
                    switch (alt118) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_10);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=ruleBindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt119=2;
                    int LA119_0 = input.LA(1);

                    if ( (LA119_0==Implements||LA119_0==Extends) ) {
                        alt119=1;
                    }
                    switch (alt119) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_10);
                            ClassExtendsClauseParserRuleCall_1_0_3=ruleClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=ruleMembers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_49);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedExpression_return norm1_AnnotatedExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedExpression_return retval = new InternalN4JSParser.norm1_AnnotatedExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1_0_1=null;
        InternalN4JSParser.ruleExpressionAnnotationList_return ExpressionAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_2_0 = null;

        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_1_0_3 = null;

        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_1_0_4 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_1_1 = null;

        InternalN4JSParser.norm6_FunctionImpl_return FunctionImplParserRuleCall_1_1_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_63);
            ExpressionAnnotationListParserRuleCall_0=ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.start):null), (ExpressionAnnotationListParserRuleCall_0!=null?((Token)ExpressionAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getExpressionAnnotationListParserRuleCall_0()); 
            }
            int alt123=2;
            int LA123_0 = input.LA(1);

            if ( (LA123_0==Class) ) {
                alt123=1;
            }
            else if ( (LA123_0==Function||LA123_0==Async) ) {
                alt123=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 123, 0, input);

                throw nvae;
            }
            switch (alt123) {
                case 1 :
                    {
                    {
                    ClassKeyword_1_0_1=(Token)match(input,Class,FOLLOW_65); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_1_0_1, grammarAccess.getAnnotatedExpressionAccess().getClassKeyword_1_0_1()); 
                    }
                    int alt121=2;
                    int LA121_0 = input.LA(1);

                    if ( ((LA121_0>=Intersection && LA121_0<=Constructor)||(LA121_0>=Promisify && LA121_0<=Abstract)||LA121_0==External||(LA121_0>=Private && LA121_0<=Project)||LA121_0==Public||LA121_0==Static||LA121_0==Target||(LA121_0>=Await && LA121_0<=Await_1)||LA121_0==Union||LA121_0==This||LA121_0==From||LA121_0==Type||(LA121_0>=Get && LA121_0<=Let)||LA121_0==Set||LA121_0==As||LA121_0==Of||LA121_0==RULE_IDENTIFIER) ) {
                        alt121=1;
                    }
                    else if ( (LA121_0==Implements) ) {
                        int LA121_2 = input.LA(2);

                        if ( (LA121_2==Implements||LA121_2==Extends||LA121_2==LeftCurlyBracket) ) {
                            alt121=1;
                        }
                    }
                    switch (alt121) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_65);
                            NameBindingIdentifierParserRuleCall_1_0_2_0=norm1_BindingIdentifier();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_2_0.stop):null), grammarAccess.getAnnotatedExpressionAccess().getNameAssignment_1_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt122=2;
                    int LA122_0 = input.LA(1);

                    if ( (LA122_0==Implements||LA122_0==Extends) ) {
                        alt122=1;
                    }
                    switch (alt122) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_65);
                            ClassExtendsClauseParserRuleCall_1_0_3=norm1_ClassExtendsClause();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.start):null), (ClassExtendsClauseParserRuleCall_1_0_3!=null?((Token)ClassExtendsClauseParserRuleCall_1_0_3.stop):null), grammarAccess.getAnnotatedExpressionAccess().getClassExtendsClauseParserRuleCall_1_0_3()); 
                            }

                            }
                            break;

                    }

                    pushFollow(FOLLOW_2);
                    MembersParserRuleCall_1_0_4=norm1_Members();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.start):null), (MembersParserRuleCall_1_0_4!=null?((Token)MembersParserRuleCall_1_0_4.stop):null), grammarAccess.getAnnotatedExpressionAccess().getMembersParserRuleCall_1_0_4()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_49);
                    AsyncNoTrailingLineBreakParserRuleCall_1_1_1=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_1_1!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_1_1.stop):null), grammarAccess.getAnnotatedExpressionAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_1_1()); 
                    }
                    pushFollow(FOLLOW_2);
                    FunctionImplParserRuleCall_1_1_2=norm6_FunctionImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.start):null), (FunctionImplParserRuleCall_1_1_2!=null?((Token)FunctionImplParserRuleCall_1_1_2.stop):null), grammarAccess.getAnnotatedExpressionAccess().getFunctionImplParserRuleCall_1_1_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeVariable_return ruleTypeVariable() throws RecognitionException {
        InternalN4JSParser.ruleTypeVariable_return retval = new InternalN4JSParser.ruleTypeVariable_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_1_0=null;
        Token AmpersandKeyword_1_2_0=null;
        InternalN4JSParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_2_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_66);
            NameIdentifierOrThisParserRuleCall_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.start):null), (NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.stop):null), grammarAccess.getTypeVariableAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt125=2;
            int LA125_0 = input.LA(1);

            if ( (LA125_0==Extends) ) {
                alt125=1;
            }
            switch (alt125) {
                case 1 :
                    {
                    ExtendsKeyword_1_0=(Token)match(input,Extends,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_1_0, grammarAccess.getTypeVariableAccess().getExtendsKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_68);
                    DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_1_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_1_0.start):null), (DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundsAssignment_1_1()); 
                    }

                    }


                    }
                    loop124:
                    do {
                        int alt124=2;
                        int LA124_0 = input.LA(1);

                        if ( (LA124_0==Ampersand) ) {
                            alt124=1;
                        }


                        switch (alt124) {
                    	case 1 :
                    	    {
                    	    AmpersandKeyword_1_2_0=(Token)match(input,Ampersand,FOLLOW_67); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(AmpersandKeyword_1_2_0, grammarAccess.getTypeVariableAccess().getAmpersandKeyword_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_68);
                    	    DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_2_1_0=ruleParameterizedTypeRefNominal();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_2_1_0!=null?((Token)DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_2_1_0.start):null), (DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_2_1_0!=null?((Token)DeclaredUpperBoundsParameterizedTypeRefNominalParserRuleCall_1_2_1_0.stop):null), grammarAccess.getTypeVariableAccess().getDeclaredUpperBoundsAssignment_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop124;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFormalParameter_return ruleFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleFormalParameter_return retval = new InternalN4JSParser.ruleFormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=ruleBindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FormalParameter_return norm1_FormalParameter() throws RecognitionException {
        InternalN4JSParser.norm1_FormalParameter_return retval = new InternalN4JSParser.norm1_FormalParameter_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingElementFragment_return BindingElementFragmentParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            BindingElementFragmentParserRuleCall_1=norm1_BindingElementFragment();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.start):null), (BindingElementFragmentParserRuleCall_1!=null?((Token)BindingElementFragmentParserRuleCall_1.stop):null), grammarAccess.getFormalParameterAccess().getBindingElementFragmentParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleBindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElementFragment_return ruleBindingElementFragment() throws RecognitionException {
        InternalN4JSParser.ruleBindingElementFragment_return retval = new InternalN4JSParser.ruleBindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_1_0_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_1_1_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_1_2 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt129=2;
            int LA129_0 = input.LA(1);

            if ( (LA129_0==LeftCurlyBracket) && (synpred49_InternalN4JSParser())) {
                alt129=1;
            }
            else if ( (LA129_0==LeftSquareBracket) && (synpred49_InternalN4JSParser())) {
                alt129=1;
            }
            else if ( ((LA129_0>=Intersection && LA129_0<=Implements)||(LA129_0>=Promisify && LA129_0<=Abstract)||LA129_0==External||(LA129_0>=Private && LA129_0<=Project)||LA129_0==Public||LA129_0==Static||LA129_0==Target||(LA129_0>=Await && LA129_0<=Await_1)||LA129_0==Union||(LA129_0>=Yield && LA129_0<=This)||LA129_0==From||LA129_0==Type||LA129_0==FullStopFullStopFullStop||(LA129_0>=Get && LA129_0<=Let)||LA129_0==Set||LA129_0==As||LA129_0==Of||LA129_0==CommercialAt||LA129_0==RULE_IDENTIFIER) ) {
                alt129=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 129, 0, input);

                throw nvae;
            }
            switch (alt129) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_69);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop126:
                    do {
                        int alt126=2;
                        int LA126_0 = input.LA(1);

                        if ( (LA126_0==CommercialAt) ) {
                            alt126=1;
                        }


                        switch (alt126) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_70);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop126;
                        }
                    } while (true);
                    {
                    int alt127=2;
                    int LA127_0 = input.LA(1);

                    if ( (LA127_0==FullStopFullStopFullStop) ) {
                        alt127=1;
                    }
                    switch (alt127) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_1_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_9); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_1_0_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    NameBindingIdentifierParserRuleCall_0_1_1_1_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_1_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_1_1_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_1_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_1_1()); 
                    }

                    }


                    }
                    int alt128=2;
                    int LA128_0 = input.LA(1);

                    if ( (LA128_0==Colon) ) {
                        alt128=1;
                    }
                    switch (alt128) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_69);
                            ColonSepTypeRefParserRuleCall_0_1_1_2=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_1_2!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_1_2.start):null), (ColonSepTypeRefParserRuleCall_0_1_1_2!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_1_2.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_1_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;

            }
            int alt130=2;
            int LA130_0 = input.LA(1);

            if ( (LA130_0==EqualsSign) ) {
                alt130=1;
            }
            switch (alt130) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElementFragment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElementFragment_return norm1_BindingElementFragment() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElementFragment_return retval = new InternalN4JSParser.norm1_BindingElementFragment_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_1_1_0_0=null;
        Token EqualsSignKeyword_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_1_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_1_1_1_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_0_1_1_2 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return InitializerAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt134=2;
            int LA134_0 = input.LA(1);

            if ( (LA134_0==LeftCurlyBracket) && (synpred50_InternalN4JSParser())) {
                alt134=1;
            }
            else if ( (LA134_0==LeftSquareBracket) && (synpred50_InternalN4JSParser())) {
                alt134=1;
            }
            else if ( ((LA134_0>=Intersection && LA134_0<=Implements)||(LA134_0>=Promisify && LA134_0<=Abstract)||LA134_0==External||(LA134_0>=Private && LA134_0<=Project)||LA134_0==Public||LA134_0==Static||LA134_0==Target||(LA134_0>=Await && LA134_0<=Await_1)||LA134_0==Union||LA134_0==This||LA134_0==From||LA134_0==Type||LA134_0==FullStopFullStopFullStop||(LA134_0>=Get && LA134_0<=Let)||LA134_0==Set||LA134_0==As||LA134_0==Of||LA134_0==CommercialAt||LA134_0==RULE_IDENTIFIER) ) {
                alt134=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 134, 0, input);

                throw nvae;
            }
            switch (alt134) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_69);
                    BindingPatternBindingPatternParserRuleCall_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getBindingPatternAssignment_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    loop131:
                    do {
                        int alt131=2;
                        int LA131_0 = input.LA(1);

                        if ( (LA131_0==CommercialAt) ) {
                            alt131=1;
                        }


                        switch (alt131) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_70);
                    	    AnnotationsAnnotationParserRuleCall_0_1_0_0=ruleAnnotation();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_1_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_1_0_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getAnnotationsAssignment_0_1_0()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop131;
                        }
                    } while (true);
                    {
                    int alt132=2;
                    int LA132_0 = input.LA(1);

                    if ( (LA132_0==FullStopFullStopFullStop) ) {
                        alt132=1;
                    }
                    switch (alt132) {
                        case 1 :
                            {
                            {
                            VariadicFullStopFullStopFullStopKeyword_0_1_1_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_9); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(VariadicFullStopFullStopFullStopKeyword_0_1_1_0_0, grammarAccess.getBindingElementFragmentAccess().getVariadicFullStopFullStopFullStopKeyword_0_1_1_0_0()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_71);
                    NameBindingIdentifierParserRuleCall_0_1_1_1_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_1_1_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_1_1_0.start):null), (NameBindingIdentifierParserRuleCall_0_1_1_1_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_1_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getNameAssignment_0_1_1_1()); 
                    }

                    }


                    }
                    int alt133=2;
                    int LA133_0 = input.LA(1);

                    if ( (LA133_0==Colon) ) {
                        alt133=1;
                    }
                    switch (alt133) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_69);
                            ColonSepTypeRefParserRuleCall_0_1_1_2=ruleColonSepTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ColonSepTypeRefParserRuleCall_0_1_1_2!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_1_2.start):null), (ColonSepTypeRefParserRuleCall_0_1_1_2!=null?((Token)ColonSepTypeRefParserRuleCall_0_1_1_2.stop):null), grammarAccess.getBindingElementFragmentAccess().getColonSepTypeRefParserRuleCall_0_1_1_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }


                    }
                    break;

            }
            int alt135=2;
            int LA135_0 = input.LA(1);

            if ( (LA135_0==EqualsSign) ) {
                alt135=1;
            }
            switch (alt135) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0, grammarAccess.getBindingElementFragmentAccess().getEqualsSignKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    InitializerAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.start):null), (InitializerAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)InitializerAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingElementFragmentAccess().getInitializerAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleColonSepTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleColonSepTypeRef_return ruleColonSepTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleColonSepTypeRef_return retval = new InternalN4JSParser.ruleColonSepTypeRef_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0 = null;



            
        try {
            {
            {
            ColonKeyword_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0, grammarAccess.getColonSepTypeRefAccess().getColonKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            DeclaredTypeRefTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getColonSepTypeRefAccess().getDeclaredTypeRefAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBlock_return ruleBlock() throws RecognitionException {
        InternalN4JSParser.ruleBlock_return retval = new InternalN4JSParser.ruleBlock_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop136:
            do {
                int alt136=2;
                int LA136_0 = input.LA(1);

                if ( ((LA136_0>=Intersection && LA136_0<=Implements)||(LA136_0>=Promisify && LA136_0<=Function)||(LA136_0>=Private && LA136_0<=Delete)||(LA136_0>=Public && LA136_0<=Break)||(LA136_0>=Class && LA136_0<=This)||(LA136_0>=From && LA136_0<=With)||(LA136_0>=For && LA136_0<=Var)||LA136_0==PlusSignPlusSign||LA136_0==HyphenMinusHyphenMinus||LA136_0==SolidusEqualsSign||(LA136_0>=As && LA136_0<=If)||LA136_0==Of||LA136_0==ExclamationMark||LA136_0==LeftParenthesis||LA136_0==PlusSign||LA136_0==HyphenMinus||LA136_0==Solidus||(LA136_0>=Semicolon && LA136_0<=LessThanSign)||(LA136_0>=CommercialAt && LA136_0<=LeftSquareBracket)||LA136_0==LeftCurlyBracket||LA136_0==Tilde||LA136_0==RULE_DOUBLE||(LA136_0>=RULE_HEX_INT && LA136_0<=RULE_LEGACY_OCTAL_INT)||LA136_0==RULE_SCIENTIFIC_INT||LA136_0==RULE_IDENTIFIER||LA136_0==RULE_STRING||(LA136_0>=RULE_TEMPLATE_HEAD && LA136_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA136_0==RULE_INT) ) {
                    alt136=1;
                }


                switch (alt136) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_62);
            	    StatementsStatementParserRuleCall_1_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop136;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Block_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Block_return norm1_Block() throws RecognitionException {
        InternalN4JSParser.norm1_Block_return retval = new InternalN4JSParser.norm1_Block_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0_0_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            LeftCurlyBracketKeyword_0_0_1=(Token)match(input,LeftCurlyBracket,FOLLOW_62); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0_0_1, grammarAccess.getBlockAccess().getLeftCurlyBracketKeyword_0_0_1()); 
            }

            }


            }
            loop137:
            do {
                int alt137=2;
                int LA137_0 = input.LA(1);

                if ( ((LA137_0>=Intersection && LA137_0<=Implements)||(LA137_0>=Promisify && LA137_0<=Function)||(LA137_0>=Private && LA137_0<=Delete)||(LA137_0>=Public && LA137_0<=Break)||(LA137_0>=Class && LA137_0<=This)||(LA137_0>=From && LA137_0<=With)||(LA137_0>=For && LA137_0<=Var)||LA137_0==PlusSignPlusSign||LA137_0==HyphenMinusHyphenMinus||LA137_0==SolidusEqualsSign||(LA137_0>=As && LA137_0<=If)||LA137_0==Of||LA137_0==ExclamationMark||LA137_0==LeftParenthesis||LA137_0==PlusSign||LA137_0==HyphenMinus||LA137_0==Solidus||(LA137_0>=Semicolon && LA137_0<=LessThanSign)||(LA137_0>=CommercialAt && LA137_0<=LeftSquareBracket)||LA137_0==LeftCurlyBracket||LA137_0==Tilde||LA137_0==RULE_DOUBLE||(LA137_0>=RULE_HEX_INT && LA137_0<=RULE_LEGACY_OCTAL_INT)||LA137_0==RULE_SCIENTIFIC_INT||LA137_0==RULE_IDENTIFIER||LA137_0==RULE_STRING||(LA137_0>=RULE_TEMPLATE_HEAD && LA137_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA137_0==RULE_INT) ) {
                    alt137=1;
                }


                switch (alt137) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_62);
            	    StatementsStatementParserRuleCall_1_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.start):null), (StatementsStatementParserRuleCall_1_0!=null?((Token)StatementsStatementParserRuleCall_1_0.stop):null), grammarAccess.getBlockAccess().getStatementsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop137;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getBlockAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRootStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRootStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRootStatement_return ruleRootStatement() throws RecognitionException {
        InternalN4JSParser.ruleRootStatement_return retval = new InternalN4JSParser.ruleRootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBlock_return BlockParserRuleCall_0 = null;

        InternalN4JSParser.ruleFunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm1_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSParser.ruleLabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSParser.ruleExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSParser.ruleIfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSParser.ruleIterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSParser.ruleContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSParser.ruleBreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSParser.ruleReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSParser.ruleWithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSParser.ruleSwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSParser.ruleThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSParser.ruleTryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt138=16;
            alt138 = dfa138.predict(input);
            switch (alt138) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=ruleFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm1_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=ruleLabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=ruleExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=ruleIfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=ruleIterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=ruleContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=ruleBreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=ruleReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=ruleWithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=ruleSwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=ruleThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=ruleTryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RootStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RootStatement_return norm1_RootStatement() throws RecognitionException {
        InternalN4JSParser.norm1_RootStatement_return retval = new InternalN4JSParser.norm1_RootStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Block_return BlockParserRuleCall_0 = null;

        InternalN4JSParser.norm1_FunctionDeclaration_return FunctionDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm3_VariableStatement_return VariableStatementParserRuleCall_2 = null;

        InternalN4JSParser.ruleEmptyStatement_return EmptyStatementParserRuleCall_3 = null;

        InternalN4JSParser.norm1_LabelledStatement_return LabelledStatementParserRuleCall_4 = null;

        InternalN4JSParser.norm1_ExpressionStatement_return ExpressionStatementParserRuleCall_5 = null;

        InternalN4JSParser.norm1_IfStatement_return IfStatementParserRuleCall_6 = null;

        InternalN4JSParser.norm1_IterationStatement_return IterationStatementParserRuleCall_7 = null;

        InternalN4JSParser.norm1_ContinueStatement_return ContinueStatementParserRuleCall_8 = null;

        InternalN4JSParser.norm1_BreakStatement_return BreakStatementParserRuleCall_9 = null;

        InternalN4JSParser.norm1_ReturnStatement_return ReturnStatementParserRuleCall_10 = null;

        InternalN4JSParser.norm1_WithStatement_return WithStatementParserRuleCall_11 = null;

        InternalN4JSParser.norm1_SwitchStatement_return SwitchStatementParserRuleCall_12 = null;

        InternalN4JSParser.norm1_ThrowStatement_return ThrowStatementParserRuleCall_13 = null;

        InternalN4JSParser.norm1_TryStatement_return TryStatementParserRuleCall_14 = null;

        InternalN4JSParser.ruleDebuggerStatement_return DebuggerStatementParserRuleCall_15 = null;



            
        try {
            {
            int alt139=16;
            alt139 = dfa139.predict(input);
            switch (alt139) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BlockParserRuleCall_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.start):null), (BlockParserRuleCall_0!=null?((Token)BlockParserRuleCall_0.stop):null), grammarAccess.getRootStatementAccess().getBlockParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FunctionDeclarationParserRuleCall_1=norm1_FunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.start):null), (FunctionDeclarationParserRuleCall_1!=null?((Token)FunctionDeclarationParserRuleCall_1.stop):null), grammarAccess.getRootStatementAccess().getFunctionDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableStatementParserRuleCall_2=norm3_VariableStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.start):null), (VariableStatementParserRuleCall_2!=null?((Token)VariableStatementParserRuleCall_2.stop):null), grammarAccess.getRootStatementAccess().getVariableStatementParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    EmptyStatementParserRuleCall_3=ruleEmptyStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.start):null), (EmptyStatementParserRuleCall_3!=null?((Token)EmptyStatementParserRuleCall_3.stop):null), grammarAccess.getRootStatementAccess().getEmptyStatementParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    LabelledStatementParserRuleCall_4=norm1_LabelledStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.start):null), (LabelledStatementParserRuleCall_4!=null?((Token)LabelledStatementParserRuleCall_4.stop):null), grammarAccess.getRootStatementAccess().getLabelledStatementParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionStatementParserRuleCall_5=norm1_ExpressionStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.start):null), (ExpressionStatementParserRuleCall_5!=null?((Token)ExpressionStatementParserRuleCall_5.stop):null), grammarAccess.getRootStatementAccess().getExpressionStatementParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    IfStatementParserRuleCall_6=norm1_IfStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.start):null), (IfStatementParserRuleCall_6!=null?((Token)IfStatementParserRuleCall_6.stop):null), grammarAccess.getRootStatementAccess().getIfStatementParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    IterationStatementParserRuleCall_7=norm1_IterationStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.start):null), (IterationStatementParserRuleCall_7!=null?((Token)IterationStatementParserRuleCall_7.stop):null), grammarAccess.getRootStatementAccess().getIterationStatementParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    ContinueStatementParserRuleCall_8=norm1_ContinueStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.start):null), (ContinueStatementParserRuleCall_8!=null?((Token)ContinueStatementParserRuleCall_8.stop):null), grammarAccess.getRootStatementAccess().getContinueStatementParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    BreakStatementParserRuleCall_9=norm1_BreakStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.start):null), (BreakStatementParserRuleCall_9!=null?((Token)BreakStatementParserRuleCall_9.stop):null), grammarAccess.getRootStatementAccess().getBreakStatementParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    pushFollow(FOLLOW_2);
                    ReturnStatementParserRuleCall_10=norm1_ReturnStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.start):null), (ReturnStatementParserRuleCall_10!=null?((Token)ReturnStatementParserRuleCall_10.stop):null), grammarAccess.getRootStatementAccess().getReturnStatementParserRuleCall_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    WithStatementParserRuleCall_11=norm1_WithStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.start):null), (WithStatementParserRuleCall_11!=null?((Token)WithStatementParserRuleCall_11.stop):null), grammarAccess.getRootStatementAccess().getWithStatementParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    SwitchStatementParserRuleCall_12=norm1_SwitchStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.start):null), (SwitchStatementParserRuleCall_12!=null?((Token)SwitchStatementParserRuleCall_12.stop):null), grammarAccess.getRootStatementAccess().getSwitchStatementParserRuleCall_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    pushFollow(FOLLOW_2);
                    ThrowStatementParserRuleCall_13=norm1_ThrowStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.start):null), (ThrowStatementParserRuleCall_13!=null?((Token)ThrowStatementParserRuleCall_13.stop):null), grammarAccess.getRootStatementAccess().getThrowStatementParserRuleCall_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    pushFollow(FOLLOW_2);
                    TryStatementParserRuleCall_14=norm1_TryStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.start):null), (TryStatementParserRuleCall_14!=null?((Token)TryStatementParserRuleCall_14.stop):null), grammarAccess.getRootStatementAccess().getTryStatementParserRuleCall_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    pushFollow(FOLLOW_2);
                    DebuggerStatementParserRuleCall_15=ruleDebuggerStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.start):null), (DebuggerStatementParserRuleCall_15!=null?((Token)DebuggerStatementParserRuleCall_15.stop):null), grammarAccess.getRootStatementAccess().getDebuggerStatementParserRuleCall_15()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStatement_return ruleStatement() throws RecognitionException {
        InternalN4JSParser.ruleStatement_return retval = new InternalN4JSParser.ruleStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.ruleRootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt140=2;
            alt140 = dfa140.predict(input);
            switch (alt140) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=ruleAnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=ruleRootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Statement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Statement_return norm1_Statement() throws RecognitionException {
        InternalN4JSParser.norm1_Statement_return retval = new InternalN4JSParser.norm1_Statement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedFunctionDeclaration_return AnnotatedFunctionDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RootStatement_return RootStatementParserRuleCall_1 = null;



            
        try {
            {
            int alt141=2;
            alt141 = dfa141.predict(input);
            switch (alt141) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedFunctionDeclarationParserRuleCall_0=norm1_AnnotatedFunctionDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.start):null), (AnnotatedFunctionDeclarationParserRuleCall_0!=null?((Token)AnnotatedFunctionDeclarationParserRuleCall_0.stop):null), grammarAccess.getStatementAccess().getAnnotatedFunctionDeclarationParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    RootStatementParserRuleCall_1=norm1_RootStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.start):null), (RootStatementParserRuleCall_1!=null?((Token)RootStatementParserRuleCall_1.stop):null), grammarAccess.getStatementAccess().getRootStatementParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableStatement_return norm1_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm1_VariableStatement_return retval = new InternalN4JSParser.norm1_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_29);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_30);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm1_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop142:
            do {
                int alt142=2;
                int LA142_0 = input.LA(1);

                if ( (LA142_0==Comma) ) {
                    alt142=1;
                }


                switch (alt142) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_30);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm1_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop142;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableStatement_return norm3_VariableStatement() throws RecognitionException {
        InternalN4JSParser.norm3_VariableStatement_return retval = new InternalN4JSParser.norm3_VariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_2_0=null;
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_29);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }


            }


            }
            {
            {
            pushFollow(FOLLOW_30);
            VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0=norm3_VariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_1()); 
            }

            }


            }
            loop143:
            do {
                int alt143=2;
                int LA143_0 = input.LA(1);

                if ( (LA143_0==Comma) ) {
                    alt143=1;
                }


                switch (alt143) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getVariableStatementAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_30);
            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0=norm3_VariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_2_1_0.stop):null), grammarAccess.getVariableStatementAccess().getVarDeclsOrBindingsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop143;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getVariableStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableStatement_return ruleExportedVariableStatement() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableStatement_return retval = new InternalN4JSParser.ruleExportedVariableStatement_return();
        retval.start = input.LT(1);

        Token CommaKeyword_4_0=null;
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_5 = null;



            
        try {
            {
            {
            loop144:
            do {
                int alt144=2;
                alt144 = dfa144.predict(input);
                switch (alt144) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_28);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop144;
                }
            } while (true);
            {
            {
            pushFollow(FOLLOW_29);
            ruleVariableStatementKeyword();

            state._fsp--;
            if (state.failed) return retval;

            }


            }
            {
            {
            pushFollow(FOLLOW_30);
            VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0=ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_3_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_3()); 
            }

            }


            }
            loop145:
            do {
                int alt145=2;
                int LA145_0 = input.LA(1);

                if ( (LA145_0==Comma) ) {
                    alt145=1;
                }


                switch (alt145) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getExportedVariableStatementAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_30);
            	    VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0=ruleExportedVariableDeclarationOrBinding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.start):null), (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0!=null?((Token)VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_4_1_0.stop):null), grammarAccess.getExportedVariableStatementAccess().getVarDeclsOrBindingsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop145;
                }
            } while (true);

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_5=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.start):null), (SemiParserRuleCall_5!=null?((Token)SemiParserRuleCall_5.stop):null), grammarAccess.getExportedVariableStatementAccess().getSemiParserRuleCall_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableDeclarationOrBinding_return ruleVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleVariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt146=2;
            int LA146_0 = input.LA(1);

            if ( (LA146_0==LeftCurlyBracket) && (synpred65_InternalN4JSParser())) {
                alt146=1;
            }
            else if ( (LA146_0==LeftSquareBracket) && (synpred65_InternalN4JSParser())) {
                alt146=1;
            }
            else if ( ((LA146_0>=Intersection && LA146_0<=Implements)||(LA146_0>=Promisify && LA146_0<=Abstract)||LA146_0==External||(LA146_0>=Private && LA146_0<=Project)||LA146_0==Public||LA146_0==Static||LA146_0==Target||(LA146_0>=Await && LA146_0<=Await_1)||LA146_0==Union||(LA146_0>=Yield && LA146_0<=This)||LA146_0==From||LA146_0==Type||(LA146_0>=Get && LA146_0<=Let)||LA146_0==Set||LA146_0==As||LA146_0==Of||LA146_0==CommercialAt||LA146_0==RULE_IDENTIFIER) ) {
                alt146=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 146, 0, input);

                throw nvae;
            }
            switch (alt146) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=ruleVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationOrBinding_return norm1_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm1_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt147=2;
            int LA147_0 = input.LA(1);

            if ( (LA147_0==LeftCurlyBracket) && (synpred66_InternalN4JSParser())) {
                alt147=1;
            }
            else if ( (LA147_0==LeftSquareBracket) && (synpred66_InternalN4JSParser())) {
                alt147=1;
            }
            else if ( ((LA147_0>=Intersection && LA147_0<=Implements)||(LA147_0>=Promisify && LA147_0<=Abstract)||LA147_0==External||(LA147_0>=Private && LA147_0<=Project)||LA147_0==Public||LA147_0==Static||LA147_0==Target||(LA147_0>=Await && LA147_0<=Await_1)||LA147_0==Union||(LA147_0>=Yield && LA147_0<=This)||LA147_0==From||LA147_0==Type||(LA147_0>=Get && LA147_0<=Let)||LA147_0==Set||LA147_0==As||LA147_0==Of||LA147_0==CommercialAt||LA147_0==RULE_IDENTIFIER) ) {
                alt147=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 147, 0, input);

                throw nvae;
            }
            switch (alt147) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm1_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableDeclarationOrBinding_return norm2_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm2_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt148=2;
            int LA148_0 = input.LA(1);

            if ( (LA148_0==LeftCurlyBracket) && (synpred67_InternalN4JSParser())) {
                alt148=1;
            }
            else if ( (LA148_0==LeftSquareBracket) && (synpred67_InternalN4JSParser())) {
                alt148=1;
            }
            else if ( ((LA148_0>=Intersection && LA148_0<=Implements)||(LA148_0>=Promisify && LA148_0<=Abstract)||LA148_0==External||(LA148_0>=Private && LA148_0<=Project)||LA148_0==Public||LA148_0==Static||LA148_0==Target||(LA148_0>=Await && LA148_0<=Await_1)||LA148_0==Union||LA148_0==This||LA148_0==From||LA148_0==Type||(LA148_0>=Get && LA148_0<=Let)||LA148_0==Set||LA148_0==As||LA148_0==Of||LA148_0==CommercialAt||LA148_0==RULE_IDENTIFIER) ) {
                alt148=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 148, 0, input);

                throw nvae;
            }
            switch (alt148) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm2_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationOrBinding_return norm3_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm3_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt149=2;
            int LA149_0 = input.LA(1);

            if ( (LA149_0==LeftCurlyBracket) && (synpred68_InternalN4JSParser())) {
                alt149=1;
            }
            else if ( (LA149_0==LeftSquareBracket) && (synpred68_InternalN4JSParser())) {
                alt149=1;
            }
            else if ( ((LA149_0>=Intersection && LA149_0<=Implements)||(LA149_0>=Promisify && LA149_0<=Abstract)||LA149_0==External||(LA149_0>=Private && LA149_0<=Project)||LA149_0==Public||LA149_0==Static||LA149_0==Target||(LA149_0>=Await && LA149_0<=Await_1)||LA149_0==Union||LA149_0==This||LA149_0==From||LA149_0==Type||(LA149_0>=Get && LA149_0<=Let)||LA149_0==Set||LA149_0==As||LA149_0==Of||LA149_0==CommercialAt||LA149_0==RULE_IDENTIFIER) ) {
                alt149=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 149, 0, input);

                throw nvae;
            }
            switch (alt149) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm3_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationOrBinding_return norm4_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm4_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm4_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm4_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt150=2;
            int LA150_0 = input.LA(1);

            if ( (LA150_0==LeftCurlyBracket) && (synpred69_InternalN4JSParser())) {
                alt150=1;
            }
            else if ( (LA150_0==LeftSquareBracket) && (synpred69_InternalN4JSParser())) {
                alt150=1;
            }
            else if ( ((LA150_0>=Intersection && LA150_0<=Implements)||(LA150_0>=Promisify && LA150_0<=Abstract)||LA150_0==External||(LA150_0>=Private && LA150_0<=Project)||LA150_0==Public||LA150_0==Static||LA150_0==Target||(LA150_0>=Await && LA150_0<=Await_1)||LA150_0==Union||(LA150_0>=Yield && LA150_0<=This)||LA150_0==From||LA150_0==Type||(LA150_0>=Get && LA150_0<=Let)||LA150_0==Set||LA150_0==As||LA150_0==Of||LA150_0==CommercialAt||LA150_0==RULE_IDENTIFIER) ) {
                alt150=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 150, 0, input);

                throw nvae;
            }
            switch (alt150) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm4_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm4_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationOrBinding_return norm6_VariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return retval = new InternalN4JSParser.norm6_VariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_VariableBinding_return VariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm6_VariableDeclaration_return VariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt151=2;
            int LA151_0 = input.LA(1);

            if ( (LA151_0==LeftCurlyBracket) && (synpred70_InternalN4JSParser())) {
                alt151=1;
            }
            else if ( (LA151_0==LeftSquareBracket) && (synpred70_InternalN4JSParser())) {
                alt151=1;
            }
            else if ( ((LA151_0>=Intersection && LA151_0<=Implements)||(LA151_0>=Promisify && LA151_0<=Abstract)||LA151_0==External||(LA151_0>=Private && LA151_0<=Project)||LA151_0==Public||LA151_0==Static||LA151_0==Target||(LA151_0>=Await && LA151_0<=Await_1)||LA151_0==Union||LA151_0==This||LA151_0==From||LA151_0==Type||(LA151_0>=Get && LA151_0<=Let)||LA151_0==Set||LA151_0==As||LA151_0==Of||LA151_0==CommercialAt||LA151_0==RULE_IDENTIFIER) ) {
                alt151=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 151, 0, input);

                throw nvae;
            }
            switch (alt151) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VariableBindingParserRuleCall_0=norm6_VariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.start):null), (VariableBindingParserRuleCall_0!=null?((Token)VariableBindingParserRuleCall_0.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    VariableDeclarationParserRuleCall_1=norm6_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.start):null), (VariableDeclarationParserRuleCall_1!=null?((Token)VariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationOrBindingAccess().getVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleVariableBinding_return ruleVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleVariableBinding_return retval = new InternalN4JSParser.ruleVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableBinding_return norm1_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_VariableBinding_return retval = new InternalN4JSParser.norm1_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_VariableBinding_return norm2_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm2_VariableBinding_return retval = new InternalN4JSParser.norm2_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableBinding_return norm3_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm3_VariableBinding_return retval = new InternalN4JSParser.norm3_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            {
            EqualsSignKeyword_1_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1_1_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_1_0()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_1_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_1_1()); 
            }

            }


            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableBinding_return norm4_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm4_VariableBinding_return retval = new InternalN4JSParser.norm4_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_69);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt152=2;
            int LA152_0 = input.LA(1);

            if ( (LA152_0==EqualsSign) ) {
                alt152=1;
            }
            switch (alt152) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm5_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_69);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt153=2;
            int LA153_0 = input.LA(1);

            if ( (LA153_0==EqualsSign) ) {
                alt153=1;
            }
            switch (alt153) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm6_VariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableBinding_return norm6_VariableBinding() throws RecognitionException {
        InternalN4JSParser.norm6_VariableBinding_return retval = new InternalN4JSParser.norm6_VariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_69);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt154=2;
            int LA154_0 = input.LA(1);

            if ( (LA154_0==EqualsSign) ) {
                alt154=1;
            }
            switch (alt154) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm7_VariableBinding() throws RecognitionException {
        Token EqualsSignKeyword_1_0_0_0=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_69);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }
            int alt155=2;
            int LA155_0 = input.LA(1);

            if ( (LA155_0==EqualsSign) ) {
                alt155=1;
            }
            switch (alt155) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_0_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_0_0, grammarAccess.getVariableBindingAccess().getEqualsSignKeyword_1_0_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getVariableBindingAccess().getExpressionAssignment_1_0_0_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclaration_return norm1_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclaration_return retval = new InternalN4JSParser.norm1_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm1_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclaration_return norm3_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclaration_return retval = new InternalN4JSParser.norm3_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm3_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclaration_return norm4_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclaration_return retval = new InternalN4JSParser.norm4_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm4_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm4_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclaration_return norm5_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return retval = new InternalN4JSParser.norm5_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclaration_return norm6_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclaration_return retval = new InternalN4JSParser.norm6_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm6_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm6_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclaration_return norm7_VariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return retval = new InternalN4JSParser.norm7_VariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void ruleVariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop156:
            do {
                int alt156=2;
                alt156 = dfa156.predict(input);
                switch (alt156) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_73);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop156;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_69);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt157=2;
            int LA157_0 = input.LA(1);

            if ( (LA157_0==EqualsSign) ) {
                alt157=1;
            }
            switch (alt157) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm1_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_VariableDeclarationImpl_return norm1_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm1_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop158:
            do {
                int alt158=2;
                alt158 = dfa158.predict(input);
                switch (alt158) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_73);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop158;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_69);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt159=2;
            int LA159_0 = input.LA(1);

            if ( (LA159_0==EqualsSign) ) {
                alt159=1;
            }
            switch (alt159) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_VariableDeclarationImpl() throws RecognitionException {
        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop160:
            do {
                int alt160=2;
                alt160 = dfa160.predict(input);
                switch (alt160) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_73);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return ;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop160;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_69);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt161=2;
            int LA161_0 = input.LA(1);

            if ( (LA161_0==EqualsSign) ) {
                alt161=1;
            }
            switch (alt161) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class norm3_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_VariableDeclarationImpl_return norm3_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm3_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm3_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_1_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_1_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            loop162:
            do {
                int alt162=2;
                alt162 = dfa162.predict(input);
                switch (alt162) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_73);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop162;
                }
            } while (true);
            {
            {
            {
            {
            pushFollow(FOLLOW_69);
            NameBindingIdentifierParserRuleCall_1_1_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_1_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_1_0_0()); 
            }

            }


            }


            }
            int alt163=2;
            int LA163_0 = input.LA(1);

            if ( (LA163_0==EqualsSign) ) {
                alt163=1;
            }
            switch (alt163) {
                case 1 :
                    {
                    EqualsSignKeyword_1_1_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_1_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_1_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm4_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm4_VariableDeclarationImpl_return norm4_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm4_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm4_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop164:
            do {
                int alt164=2;
                alt164 = dfa164.predict(input);
                switch (alt164) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_73);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop164;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_71);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt165=2;
            int LA165_0 = input.LA(1);

            if ( (LA165_0==Colon) ) {
                alt165=1;
            }
            switch (alt165) {
                case 1 :
                    {
                    pushFollow(FOLLOW_69);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt166=2;
            int LA166_0 = input.LA(1);

            if ( (LA166_0==EqualsSign) ) {
                alt166=1;
            }
            switch (alt166) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm5_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm5_VariableDeclarationImpl_return norm5_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm5_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop167:
            do {
                int alt167=2;
                alt167 = dfa167.predict(input);
                switch (alt167) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_73);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop167;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_71);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt168=2;
            int LA168_0 = input.LA(1);

            if ( (LA168_0==Colon) ) {
                alt168=1;
            }
            switch (alt168) {
                case 1 :
                    {
                    pushFollow(FOLLOW_69);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt169=2;
            int LA169_0 = input.LA(1);

            if ( (LA169_0==EqualsSign) ) {
                alt169=1;
            }
            switch (alt169) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm6_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm6_VariableDeclarationImpl_return norm6_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm6_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm6_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop170:
            do {
                int alt170=2;
                alt170 = dfa170.predict(input);
                switch (alt170) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_73);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop170;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_71);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt171=2;
            int LA171_0 = input.LA(1);

            if ( (LA171_0==Colon) ) {
                alt171=1;
            }
            switch (alt171) {
                case 1 :
                    {
                    pushFollow(FOLLOW_69);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt172=2;
            int LA172_0 = input.LA(1);

            if ( (LA172_0==EqualsSign) ) {
                alt172=1;
            }
            switch (alt172) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm7_VariableDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm7_VariableDeclarationImpl_return norm7_VariableDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclarationImpl_return retval = new InternalN4JSParser.norm7_VariableDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_0_0_1 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;



            
        try {
            {
            {
            loop173:
            do {
                int alt173=2;
                alt173 = dfa173.predict(input);
                switch (alt173) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_73);
            	    AnnotationsAnnotationParserRuleCall_0_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.start):null), (AnnotationsAnnotationParserRuleCall_0_0!=null?((Token)AnnotationsAnnotationParserRuleCall_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getAnnotationsAssignment_0()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop173;
                }
            } while (true);
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_71);
            NameBindingIdentifierParserRuleCall_1_0_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0_0_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getNameAssignment_1_0_0_0_0()); 
            }

            }


            }
            int alt174=2;
            int LA174_0 = input.LA(1);

            if ( (LA174_0==Colon) ) {
                alt174=1;
            }
            switch (alt174) {
                case 1 :
                    {
                    pushFollow(FOLLOW_69);
                    ColonSepTypeRefParserRuleCall_1_0_0_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_0_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_0_0_1.stop):null), grammarAccess.getVariableDeclarationImplAccess().getColonSepTypeRefParserRuleCall_1_0_0_0_1()); 
                    }

                    }
                    break;

            }


            }


            }
            int alt175=2;
            int LA175_0 = input.LA(1);

            if ( (LA175_0==EqualsSign) ) {
                alt175=1;
            }
            switch (alt175) {
                case 1 :
                    {
                    EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getVariableDeclarationImplAccess().getEqualsSignKeyword_1_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getVariableDeclarationImplAccess().getExpressionAssignment_1_0_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclarationOrBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclarationOrBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclarationOrBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return ruleExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return retval = new InternalN4JSParser.ruleExportedVariableDeclarationOrBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.ruleExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt176=2;
            int LA176_0 = input.LA(1);

            if ( (LA176_0==LeftCurlyBracket) && (synpred87_InternalN4JSParser())) {
                alt176=1;
            }
            else if ( (LA176_0==LeftSquareBracket) && (synpred87_InternalN4JSParser())) {
                alt176=1;
            }
            else if ( ((LA176_0>=Intersection && LA176_0<=Implements)||(LA176_0>=Promisify && LA176_0<=Abstract)||LA176_0==External||(LA176_0>=Private && LA176_0<=Project)||LA176_0==Public||LA176_0==Static||LA176_0==Target||(LA176_0>=Await && LA176_0<=Await_1)||LA176_0==Union||(LA176_0>=Yield && LA176_0<=This)||LA176_0==From||LA176_0==Type||(LA176_0>=Get && LA176_0<=Let)||LA176_0==Set||LA176_0==As||LA176_0==Of||LA176_0==CommercialAt||LA176_0==RULE_IDENTIFIER) ) {
                alt176=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 176, 0, input);

                throw nvae;
            }
            switch (alt176) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=ruleExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=ruleExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm1_ExportedVariableDeclarationOrBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return ExportedVariableBindingParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ExportedVariableDeclaration_return ExportedVariableDeclarationParserRuleCall_1 = null;



            
        try {
            {
            int alt177=2;
            int LA177_0 = input.LA(1);

            if ( (LA177_0==LeftCurlyBracket) && (synpred88_InternalN4JSParser())) {
                alt177=1;
            }
            else if ( (LA177_0==LeftSquareBracket) && (synpred88_InternalN4JSParser())) {
                alt177=1;
            }
            else if ( ((LA177_0>=Intersection && LA177_0<=Implements)||(LA177_0>=Promisify && LA177_0<=Abstract)||LA177_0==External||(LA177_0>=Private && LA177_0<=Project)||LA177_0==Public||LA177_0==Static||LA177_0==Target||(LA177_0>=Await && LA177_0<=Await_1)||LA177_0==Union||LA177_0==This||LA177_0==From||LA177_0==Type||(LA177_0>=Get && LA177_0<=Let)||LA177_0==Set||LA177_0==As||LA177_0==Of||LA177_0==CommercialAt||LA177_0==RULE_IDENTIFIER) ) {
                alt177=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 177, 0, input);

                throw nvae;
            }
            switch (alt177) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableBindingParserRuleCall_0=norm1_ExportedVariableBinding();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.start):null), (ExportedVariableBindingParserRuleCall_0!=null?((Token)ExportedVariableBindingParserRuleCall_0.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableBindingParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ExportedVariableDeclarationParserRuleCall_1=norm1_ExportedVariableDeclaration();

                    state._fsp--;
                    if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce((ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.start):null), (ExportedVariableDeclarationParserRuleCall_1!=null?((Token)ExportedVariableDeclarationParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationOrBindingAccess().getExportedVariableDeclarationParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleExportedVariableBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableBinding_return ruleExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableBinding_return retval = new InternalN4JSParser.ruleExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.ruleBindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            PatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableBinding_return norm1_ExportedVariableBinding() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableBinding_return retval = new InternalN4JSParser.norm1_ExportedVariableBinding_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_1=null;
        InternalN4JSParser.norm1_BindingPattern_return PatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_72);
            PatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.start):null), (PatternBindingPatternParserRuleCall_0_0!=null?((Token)PatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getPatternAssignment_0()); 
            }

            }


            }

            EqualsSignKeyword_1=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EqualsSignKeyword_1, grammarAccess.getExportedVariableBindingAccess().getEqualsSignKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getExportedVariableBindingAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExportedVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExportedVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExportedVariableDeclaration_return ruleExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleExportedVariableDeclaration_return retval = new InternalN4JSParser.ruleExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm5_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm5_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExportedVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExportedVariableDeclaration_return norm1_ExportedVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_ExportedVariableDeclaration_return retval = new InternalN4JSParser.norm1_ExportedVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm7_VariableDeclarationImpl_return VariableDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            VariableDeclarationImplParserRuleCall_1=norm7_VariableDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.start):null), (VariableDeclarationImplParserRuleCall_1!=null?((Token)VariableDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getExportedVariableDeclarationAccess().getVariableDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEmptyStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEmptyStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEmptyStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEmptyStatement_return ruleEmptyStatement() throws RecognitionException {
        InternalN4JSParser.ruleEmptyStatement_return retval = new InternalN4JSParser.ruleEmptyStatement_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;


            
        try {
            {
            {
            SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SemicolonKeyword_1, grammarAccess.getEmptyStatementAccess().getSemicolonKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionStatement_return ruleExpressionStatement() throws RecognitionException {
        InternalN4JSParser.ruleExpressionStatement_return retval = new InternalN4JSParser.ruleExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            ExpressionExpressionParserRuleCall_0_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ExpressionStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ExpressionStatement_return norm1_ExpressionStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ExpressionStatement_return retval = new InternalN4JSParser.norm1_ExpressionStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_19);
            ExpressionExpressionParserRuleCall_0_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.start):null), (ExpressionExpressionParserRuleCall_0_0!=null?((Token)ExpressionExpressionParserRuleCall_0_0.stop):null), grammarAccess.getExpressionStatementAccess().getExpressionAssignment_0()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_1=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.start):null), (SemiParserRuleCall_1!=null?((Token)SemiParserRuleCall_1.stop):null), grammarAccess.getExpressionStatementAccess().getSemiParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIfStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIfStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIfStatement_return ruleIfStatement() throws RecognitionException {
        InternalN4JSParser.ruleIfStatement_return retval = new InternalN4JSParser.ruleIfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleStatement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            IfStmtStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt178=2;
            int LA178_0 = input.LA(1);

            if ( (LA178_0==Else) ) {
                int LA178_1 = input.LA(2);

                if ( (synpred91_InternalN4JSParser()) ) {
                    alt178=1;
                }
            }
            switch (alt178) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=ruleStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IfStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IfStatement_return norm1_IfStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IfStatement_return retval = new InternalN4JSParser.norm1_IfStatement_return();
        retval.start = input.LT(1);

        Token IfKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token ElseKeyword_5_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return IfStmtStatementParserRuleCall_4_0 = null;

        InternalN4JSParser.norm1_Statement_return ElseStmtStatementParserRuleCall_5_1_0 = null;



            
        try {
            {
            {
            IfKeyword_0=(Token)match(input,If,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IfKeyword_0, grammarAccess.getIfStatementAccess().getIfKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getIfStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_75);
            IfStmtStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.start):null), (IfStmtStatementParserRuleCall_4_0!=null?((Token)IfStmtStatementParserRuleCall_4_0.stop):null), grammarAccess.getIfStatementAccess().getIfStmtAssignment_4()); 
            }

            }


            }
            int alt179=2;
            int LA179_0 = input.LA(1);

            if ( (LA179_0==Else) ) {
                int LA179_1 = input.LA(2);

                if ( (synpred92_InternalN4JSParser()) ) {
                    alt179=1;
                }
            }
            switch (alt179) {
                case 1 :
                    {
                    {
                    ElseKeyword_5_0=(Token)match(input,Else,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_5_0, grammarAccess.getIfStatementAccess().getElseKeyword_5_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ElseStmtStatementParserRuleCall_5_1_0=norm1_Statement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.start):null), (ElseStmtStatementParserRuleCall_5_1_0!=null?((Token)ElseStmtStatementParserRuleCall_5_1_0.stop):null), grammarAccess.getIfStatementAccess().getElseStmtAssignment_5_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIterationStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIterationStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIterationStatement_return ruleIterationStatement() throws RecognitionException {
        InternalN4JSParser.ruleIterationStatement_return retval = new InternalN4JSParser.ruleIterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleDoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSParser.ruleWhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSParser.ruleForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt180=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt180=1;
                }
                break;
            case While:
                {
                alt180=2;
                }
                break;
            case For:
                {
                alt180=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 180, 0, input);

                throw nvae;
            }

            switch (alt180) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=ruleDoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=ruleWhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=ruleForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IterationStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IterationStatement_return norm1_IterationStatement() throws RecognitionException {
        InternalN4JSParser.norm1_IterationStatement_return retval = new InternalN4JSParser.norm1_IterationStatement_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_DoStatement_return DoStatementParserRuleCall_0 = null;

        InternalN4JSParser.norm1_WhileStatement_return WhileStatementParserRuleCall_1 = null;

        InternalN4JSParser.norm1_ForStatement_return ForStatementParserRuleCall_2 = null;



            
        try {
            {
            int alt181=3;
            switch ( input.LA(1) ) {
            case Do:
                {
                alt181=1;
                }
                break;
            case While:
                {
                alt181=2;
                }
                break;
            case For:
                {
                alt181=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 181, 0, input);

                throw nvae;
            }

            switch (alt181) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoStatementParserRuleCall_0=norm1_DoStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.start):null), (DoStatementParserRuleCall_0!=null?((Token)DoStatementParserRuleCall_0.stop):null), grammarAccess.getIterationStatementAccess().getDoStatementParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    WhileStatementParserRuleCall_1=norm1_WhileStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.start):null), (WhileStatementParserRuleCall_1!=null?((Token)WhileStatementParserRuleCall_1.stop):null), grammarAccess.getIterationStatementAccess().getWhileStatementParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ForStatementParserRuleCall_2=norm1_ForStatement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.start):null), (ForStatementParserRuleCall_2!=null?((Token)ForStatementParserRuleCall_2.stop):null), grammarAccess.getIterationStatementAccess().getForStatementParserRuleCall_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoStatement_return ruleDoStatement() throws RecognitionException {
        InternalN4JSParser.ruleDoStatement_return retval = new InternalN4JSParser.ruleDoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_76);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_4_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_37); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt182=2;
            alt182 = dfa182.predict(input);
            switch (alt182) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DoStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DoStatement_return norm1_DoStatement() throws RecognitionException {
        InternalN4JSParser.norm1_DoStatement_return retval = new InternalN4JSParser.norm1_DoStatement_return();
        retval.start = input.LT(1);

        Token DoKeyword_0=null;
        Token WhileKeyword_2=null;
        Token LeftParenthesisKeyword_3=null;
        Token RightParenthesisKeyword_5=null;
        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_6 = null;



            
        try {
            {
            {
            DoKeyword_0=(Token)match(input,Do,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DoKeyword_0, grammarAccess.getDoStatementAccess().getDoKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_76);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getDoStatementAccess().getStatementAssignment_1()); 
            }

            }


            }

            WhileKeyword_2=(Token)match(input,While,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_2, grammarAccess.getDoStatementAccess().getWhileKeyword_2()); 
            }
            LeftParenthesisKeyword_3=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_3, grammarAccess.getDoStatementAccess().getLeftParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_4_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.start):null), (ExpressionExpressionParserRuleCall_4_0!=null?((Token)ExpressionExpressionParserRuleCall_4_0.stop):null), grammarAccess.getDoStatementAccess().getExpressionAssignment_4()); 
            }

            }


            }

            RightParenthesisKeyword_5=(Token)match(input,RightParenthesis,FOLLOW_37); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_5, grammarAccess.getDoStatementAccess().getRightParenthesisKeyword_5()); 
            }
            int alt183=2;
            int LA183_0 = input.LA(1);

            if ( (LA183_0==Semicolon) ) {
                int LA183_1 = input.LA(2);

                if ( (synpred94_InternalN4JSParser()) ) {
                    alt183=1;
                }
            }
            else if ( (LA183_0==EOF) && (synpred94_InternalN4JSParser())) {
                alt183=1;
            }
            else if ( (LA183_0==RULE_EOL) && (synpred94_InternalN4JSParser())) {
                alt183=1;
            }
            else if ( (LA183_0==RULE_ML_COMMENT) && (synpred94_InternalN4JSParser())) {
                alt183=1;
            }
            else if ( (LA183_0==RightCurlyBracket) ) {
                int LA183_5 = input.LA(2);

                if ( (synpred94_InternalN4JSParser()) ) {
                    alt183=1;
                }
            }
            switch (alt183) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    SemiParserRuleCall_6=ruleSemi();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.start):null), (SemiParserRuleCall_6!=null?((Token)SemiParserRuleCall_6.stop):null), grammarAccess.getDoStatementAccess().getSemiParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWhileStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWhileStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWhileStatement_return ruleWhileStatement() throws RecognitionException {
        InternalN4JSParser.ruleWhileStatement_return retval = new InternalN4JSParser.ruleWhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WhileStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WhileStatement_return norm1_WhileStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WhileStatement_return retval = new InternalN4JSParser.norm1_WhileStatement_return();
        retval.start = input.LT(1);

        Token WhileKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WhileKeyword_0=(Token)match(input,While,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WhileKeyword_0, grammarAccess.getWhileStatementAccess().getWhileKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWhileStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWhileStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWhileStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWhileStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleForStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleForStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleForStatement_return ruleForStatement() throws RecognitionException {
        InternalN4JSParser.ruleForStatement_return retval = new InternalN4JSParser.ruleForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSParser.norm4_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSParser.ruleVariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSParser.ruleExpression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSParser.norm1_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt201=2;
            alt201 = dfa201.predict(input);
            switch (alt201) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_78);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_48);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt200=3;
                    alt200 = dfa200.predict(input);
                    switch (alt200) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_29);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt192=2;
                            alt192 = dfa192.predict(input);
                            switch (alt192) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_79);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=ruleBindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt184=2;
                                    int LA184_0 = input.LA(1);

                                    if ( (LA184_0==In) ) {
                                        alt184=1;
                                    }
                                    else if ( (LA184_0==Of) ) {
                                        alt184=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 184, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt184) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt185=2;
                                    alt185 = dfa185.predict(input);
                                    switch (alt185) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_48);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm4_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt191=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt191=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt191=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt191=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 191, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt191) {
                                        case 1 :
                                            {
                                            {
                                            loop186:
                                            do {
                                                int alt186=2;
                                                int LA186_0 = input.LA(1);

                                                if ( (LA186_0==Comma) ) {
                                                    alt186=1;
                                                }


                                                switch (alt186) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_82);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=ruleVariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop186;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt187=2;
                                            int LA187_0 = input.LA(1);

                                            if ( ((LA187_0>=Intersection && LA187_0<=Implements)||(LA187_0>=Promisify && LA187_0<=Abstract)||(LA187_0>=External && LA187_0<=Function)||(LA187_0>=Private && LA187_0<=Delete)||LA187_0==Public||LA187_0==Static||(LA187_0>=Target && LA187_0<=Await_1)||LA187_0==Class||(LA187_0>=False && LA187_0<=Super)||LA187_0==Union||(LA187_0>=Yield && LA187_0<=This)||(LA187_0>=From && LA187_0<=Void)||(LA187_0>=Get && LA187_0<=Set)||LA187_0==PlusSignPlusSign||LA187_0==HyphenMinusHyphenMinus||LA187_0==SolidusEqualsSign||LA187_0==As||LA187_0==Of||LA187_0==ExclamationMark||LA187_0==LeftParenthesis||LA187_0==PlusSign||LA187_0==HyphenMinus||LA187_0==Solidus||LA187_0==LessThanSign||(LA187_0>=CommercialAt && LA187_0<=LeftSquareBracket)||LA187_0==LeftCurlyBracket||LA187_0==Tilde||LA187_0==RULE_DOUBLE||(LA187_0>=RULE_HEX_INT && LA187_0<=RULE_LEGACY_OCTAL_INT)||LA187_0==RULE_SCIENTIFIC_INT||LA187_0==RULE_IDENTIFIER||LA187_0==RULE_STRING||(LA187_0>=RULE_TEMPLATE_HEAD && LA187_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA187_0==RULE_INT) ) {
                                                alt187=1;
                                            }
                                            switch (alt187) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_84);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt188=2;
                                            int LA188_0 = input.LA(1);

                                            if ( ((LA188_0>=Intersection && LA188_0<=Implements)||(LA188_0>=Promisify && LA188_0<=Abstract)||(LA188_0>=External && LA188_0<=Function)||(LA188_0>=Private && LA188_0<=Delete)||LA188_0==Public||LA188_0==Static||(LA188_0>=Target && LA188_0<=Await_1)||LA188_0==Class||(LA188_0>=False && LA188_0<=Super)||LA188_0==Union||(LA188_0>=Yield && LA188_0<=This)||(LA188_0>=From && LA188_0<=Void)||(LA188_0>=Get && LA188_0<=Set)||LA188_0==PlusSignPlusSign||LA188_0==HyphenMinusHyphenMinus||LA188_0==SolidusEqualsSign||LA188_0==As||LA188_0==Of||LA188_0==ExclamationMark||LA188_0==LeftParenthesis||LA188_0==PlusSign||LA188_0==HyphenMinus||LA188_0==Solidus||LA188_0==LessThanSign||(LA188_0>=CommercialAt && LA188_0<=LeftSquareBracket)||LA188_0==LeftCurlyBracket||LA188_0==Tilde||LA188_0==RULE_DOUBLE||(LA188_0>=RULE_HEX_INT && LA188_0<=RULE_LEGACY_OCTAL_INT)||LA188_0==RULE_SCIENTIFIC_INT||LA188_0==RULE_IDENTIFIER||LA188_0==RULE_STRING||(LA188_0>=RULE_TEMPLATE_HEAD && LA188_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA188_0==RULE_INT) ) {
                                                alt188=1;
                                            }
                                            switch (alt188) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_48);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt189=2;
                                            int LA189_0 = input.LA(1);

                                            if ( ((LA189_0>=Intersection && LA189_0<=Implements)||(LA189_0>=Promisify && LA189_0<=Abstract)||(LA189_0>=External && LA189_0<=Function)||(LA189_0>=Private && LA189_0<=Delete)||LA189_0==Public||LA189_0==Static||(LA189_0>=Target && LA189_0<=Await_1)||LA189_0==Class||(LA189_0>=False && LA189_0<=Super)||LA189_0==Union||(LA189_0>=Yield && LA189_0<=This)||(LA189_0>=From && LA189_0<=Void)||(LA189_0>=Get && LA189_0<=Set)||LA189_0==PlusSignPlusSign||LA189_0==HyphenMinusHyphenMinus||LA189_0==SolidusEqualsSign||LA189_0==As||LA189_0==Of||LA189_0==ExclamationMark||LA189_0==LeftParenthesis||LA189_0==PlusSign||LA189_0==HyphenMinus||LA189_0==Solidus||LA189_0==LessThanSign||(LA189_0>=CommercialAt && LA189_0<=LeftSquareBracket)||LA189_0==LeftCurlyBracket||LA189_0==Tilde||LA189_0==RULE_DOUBLE||(LA189_0>=RULE_HEX_INT && LA189_0<=RULE_LEGACY_OCTAL_INT)||LA189_0==RULE_SCIENTIFIC_INT||LA189_0==RULE_IDENTIFIER||LA189_0==RULE_STRING||(LA189_0>=RULE_TEMPLATE_HEAD && LA189_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA189_0==RULE_INT) ) {
                                                alt189=1;
                                            }
                                            switch (alt189) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_48);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm1_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt190=2;
                                            int LA190_0 = input.LA(1);

                                            if ( ((LA190_0>=Intersection && LA190_0<=Implements)||(LA190_0>=Promisify && LA190_0<=Abstract)||(LA190_0>=External && LA190_0<=Function)||(LA190_0>=Private && LA190_0<=Delete)||LA190_0==Public||LA190_0==Static||(LA190_0>=Target && LA190_0<=Await_1)||LA190_0==Class||(LA190_0>=False && LA190_0<=Super)||LA190_0==Union||(LA190_0>=Yield && LA190_0<=This)||(LA190_0>=From && LA190_0<=Void)||(LA190_0>=Get && LA190_0<=Set)||LA190_0==PlusSignPlusSign||LA190_0==HyphenMinusHyphenMinus||LA190_0==SolidusEqualsSign||LA190_0==As||LA190_0==Of||LA190_0==ExclamationMark||LA190_0==LeftParenthesis||LA190_0==PlusSign||LA190_0==HyphenMinus||LA190_0==Solidus||LA190_0==LessThanSign||(LA190_0>=CommercialAt && LA190_0<=LeftSquareBracket)||LA190_0==LeftCurlyBracket||LA190_0==Tilde||LA190_0==RULE_DOUBLE||(LA190_0>=RULE_HEX_INT && LA190_0<=RULE_LEGACY_OCTAL_INT)||LA190_0==RULE_SCIENTIFIC_INT||LA190_0==RULE_IDENTIFIER||LA190_0==RULE_STRING||(LA190_0>=RULE_TEMPLATE_HEAD && LA190_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA190_0==RULE_INT) ) {
                                                alt190=1;
                                            }
                                            switch (alt190) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_48);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm1_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_85);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=ruleExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt197=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt197=1;
                                }
                                break;
                            case In:
                                {
                                alt197=2;
                                }
                                break;
                            case Of:
                                {
                                alt197=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 197, 0, input);

                                throw nvae;
                            }

                            switch (alt197) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt193=2;
                                    int LA193_0 = input.LA(1);

                                    if ( ((LA193_0>=Intersection && LA193_0<=Implements)||(LA193_0>=Promisify && LA193_0<=Abstract)||(LA193_0>=External && LA193_0<=Function)||(LA193_0>=Private && LA193_0<=Delete)||LA193_0==Public||LA193_0==Static||(LA193_0>=Target && LA193_0<=Await_1)||LA193_0==Class||(LA193_0>=False && LA193_0<=Super)||LA193_0==Union||(LA193_0>=Yield && LA193_0<=This)||(LA193_0>=From && LA193_0<=Void)||(LA193_0>=Get && LA193_0<=Set)||LA193_0==PlusSignPlusSign||LA193_0==HyphenMinusHyphenMinus||LA193_0==SolidusEqualsSign||LA193_0==As||LA193_0==Of||LA193_0==ExclamationMark||LA193_0==LeftParenthesis||LA193_0==PlusSign||LA193_0==HyphenMinus||LA193_0==Solidus||LA193_0==LessThanSign||(LA193_0>=CommercialAt && LA193_0<=LeftSquareBracket)||LA193_0==LeftCurlyBracket||LA193_0==Tilde||LA193_0==RULE_DOUBLE||(LA193_0>=RULE_HEX_INT && LA193_0<=RULE_LEGACY_OCTAL_INT)||LA193_0==RULE_SCIENTIFIC_INT||LA193_0==RULE_IDENTIFIER||LA193_0==RULE_STRING||(LA193_0>=RULE_TEMPLATE_HEAD && LA193_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA193_0==RULE_INT) ) {
                                        alt193=1;
                                    }
                                    switch (alt193) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_84);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt194=2;
                                    int LA194_0 = input.LA(1);

                                    if ( ((LA194_0>=Intersection && LA194_0<=Implements)||(LA194_0>=Promisify && LA194_0<=Abstract)||(LA194_0>=External && LA194_0<=Function)||(LA194_0>=Private && LA194_0<=Delete)||LA194_0==Public||LA194_0==Static||(LA194_0>=Target && LA194_0<=Await_1)||LA194_0==Class||(LA194_0>=False && LA194_0<=Super)||LA194_0==Union||(LA194_0>=Yield && LA194_0<=This)||(LA194_0>=From && LA194_0<=Void)||(LA194_0>=Get && LA194_0<=Set)||LA194_0==PlusSignPlusSign||LA194_0==HyphenMinusHyphenMinus||LA194_0==SolidusEqualsSign||LA194_0==As||LA194_0==Of||LA194_0==ExclamationMark||LA194_0==LeftParenthesis||LA194_0==PlusSign||LA194_0==HyphenMinus||LA194_0==Solidus||LA194_0==LessThanSign||(LA194_0>=CommercialAt && LA194_0<=LeftSquareBracket)||LA194_0==LeftCurlyBracket||LA194_0==Tilde||LA194_0==RULE_DOUBLE||(LA194_0>=RULE_HEX_INT && LA194_0<=RULE_LEGACY_OCTAL_INT)||LA194_0==RULE_SCIENTIFIC_INT||LA194_0==RULE_IDENTIFIER||LA194_0==RULE_STRING||(LA194_0>=RULE_TEMPLATE_HEAD && LA194_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA194_0==RULE_INT) ) {
                                        alt194=1;
                                    }
                                    switch (alt194) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_48);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt195=2;
                                    int LA195_0 = input.LA(1);

                                    if ( ((LA195_0>=Intersection && LA195_0<=Implements)||(LA195_0>=Promisify && LA195_0<=Abstract)||(LA195_0>=External && LA195_0<=Function)||(LA195_0>=Private && LA195_0<=Delete)||LA195_0==Public||LA195_0==Static||(LA195_0>=Target && LA195_0<=Await_1)||LA195_0==Class||(LA195_0>=False && LA195_0<=Super)||LA195_0==Union||(LA195_0>=Yield && LA195_0<=This)||(LA195_0>=From && LA195_0<=Void)||(LA195_0>=Get && LA195_0<=Set)||LA195_0==PlusSignPlusSign||LA195_0==HyphenMinusHyphenMinus||LA195_0==SolidusEqualsSign||LA195_0==As||LA195_0==Of||LA195_0==ExclamationMark||LA195_0==LeftParenthesis||LA195_0==PlusSign||LA195_0==HyphenMinus||LA195_0==Solidus||LA195_0==LessThanSign||(LA195_0>=CommercialAt && LA195_0<=LeftSquareBracket)||LA195_0==LeftCurlyBracket||LA195_0==Tilde||LA195_0==RULE_DOUBLE||(LA195_0>=RULE_HEX_INT && LA195_0<=RULE_LEGACY_OCTAL_INT)||LA195_0==RULE_SCIENTIFIC_INT||LA195_0==RULE_IDENTIFIER||LA195_0==RULE_STRING||(LA195_0>=RULE_TEMPLATE_HEAD && LA195_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA195_0==RULE_INT) ) {
                                        alt195=1;
                                    }
                                    switch (alt195) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_48);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm1_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt196=2;
                                    int LA196_0 = input.LA(1);

                                    if ( ((LA196_0>=Intersection && LA196_0<=Implements)||(LA196_0>=Promisify && LA196_0<=Abstract)||(LA196_0>=External && LA196_0<=Function)||(LA196_0>=Private && LA196_0<=Delete)||LA196_0==Public||LA196_0==Static||(LA196_0>=Target && LA196_0<=Await_1)||LA196_0==Class||(LA196_0>=False && LA196_0<=Super)||LA196_0==Union||(LA196_0>=Yield && LA196_0<=This)||(LA196_0>=From && LA196_0<=Void)||(LA196_0>=Get && LA196_0<=Set)||LA196_0==PlusSignPlusSign||LA196_0==HyphenMinusHyphenMinus||LA196_0==SolidusEqualsSign||LA196_0==As||LA196_0==Of||LA196_0==ExclamationMark||LA196_0==LeftParenthesis||LA196_0==PlusSign||LA196_0==HyphenMinus||LA196_0==Solidus||LA196_0==LessThanSign||(LA196_0>=CommercialAt && LA196_0<=LeftSquareBracket)||LA196_0==LeftCurlyBracket||LA196_0==Tilde||LA196_0==RULE_DOUBLE||(LA196_0>=RULE_HEX_INT && LA196_0<=RULE_LEGACY_OCTAL_INT)||LA196_0==RULE_SCIENTIFIC_INT||LA196_0==RULE_IDENTIFIER||LA196_0==RULE_STRING||(LA196_0>=RULE_TEMPLATE_HEAD && LA196_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA196_0==RULE_INT) ) {
                                        alt196=1;
                                    }
                                    switch (alt196) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_48);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm1_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt198=2;
                            int LA198_0 = input.LA(1);

                            if ( ((LA198_0>=Intersection && LA198_0<=Implements)||(LA198_0>=Promisify && LA198_0<=Abstract)||(LA198_0>=External && LA198_0<=Function)||(LA198_0>=Private && LA198_0<=Delete)||LA198_0==Public||LA198_0==Static||(LA198_0>=Target && LA198_0<=Await_1)||LA198_0==Class||(LA198_0>=False && LA198_0<=Super)||LA198_0==Union||(LA198_0>=Yield && LA198_0<=This)||(LA198_0>=From && LA198_0<=Void)||(LA198_0>=Get && LA198_0<=Set)||LA198_0==PlusSignPlusSign||LA198_0==HyphenMinusHyphenMinus||LA198_0==SolidusEqualsSign||LA198_0==As||LA198_0==Of||LA198_0==ExclamationMark||LA198_0==LeftParenthesis||LA198_0==PlusSign||LA198_0==HyphenMinus||LA198_0==Solidus||LA198_0==LessThanSign||(LA198_0>=CommercialAt && LA198_0<=LeftSquareBracket)||LA198_0==LeftCurlyBracket||LA198_0==Tilde||LA198_0==RULE_DOUBLE||(LA198_0>=RULE_HEX_INT && LA198_0<=RULE_LEGACY_OCTAL_INT)||LA198_0==RULE_SCIENTIFIC_INT||LA198_0==RULE_IDENTIFIER||LA198_0==RULE_STRING||(LA198_0>=RULE_TEMPLATE_HEAD && LA198_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA198_0==RULE_INT) ) {
                                alt198=1;
                            }
                            switch (alt198) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_84);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt199=2;
                            int LA199_0 = input.LA(1);

                            if ( ((LA199_0>=Intersection && LA199_0<=Implements)||(LA199_0>=Promisify && LA199_0<=Abstract)||(LA199_0>=External && LA199_0<=Function)||(LA199_0>=Private && LA199_0<=Delete)||LA199_0==Public||LA199_0==Static||(LA199_0>=Target && LA199_0<=Await_1)||LA199_0==Class||(LA199_0>=False && LA199_0<=Super)||LA199_0==Union||(LA199_0>=Yield && LA199_0<=This)||(LA199_0>=From && LA199_0<=Void)||(LA199_0>=Get && LA199_0<=Set)||LA199_0==PlusSignPlusSign||LA199_0==HyphenMinusHyphenMinus||LA199_0==SolidusEqualsSign||LA199_0==As||LA199_0==Of||LA199_0==ExclamationMark||LA199_0==LeftParenthesis||LA199_0==PlusSign||LA199_0==HyphenMinus||LA199_0==Solidus||LA199_0==LessThanSign||(LA199_0>=CommercialAt && LA199_0<=LeftSquareBracket)||LA199_0==LeftCurlyBracket||LA199_0==Tilde||LA199_0==RULE_DOUBLE||(LA199_0>=RULE_HEX_INT && LA199_0<=RULE_LEGACY_OCTAL_INT)||LA199_0==RULE_SCIENTIFIC_INT||LA199_0==RULE_IDENTIFIER||LA199_0==RULE_STRING||(LA199_0>=RULE_TEMPLATE_HEAD && LA199_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA199_0==RULE_INT) ) {
                                alt199=1;
                            }
                            switch (alt199) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_48);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm1_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ForStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ForStatement_return norm1_ForStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ForStatement_return retval = new InternalN4JSParser.norm1_ForStatement_return();
        retval.start = input.LT(1);

        Token ForKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token ForInInKeyword_3_0_0_1_0=null;
        Token RightParenthesisKeyword_3_0_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_0_0_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=null;
        Token CommaKeyword_3_1_0_0_1_1_1_0_0_0=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_1=null;
        Token SemicolonKeyword_3_1_0_0_1_1_1_0_3=null;
        Token ForInInKeyword_3_1_0_0_1_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_0=null;
        Token SemicolonKeyword_3_1_0_1_1_0_2=null;
        Token ForInInKeyword_3_1_0_1_1_1_0_0=null;
        Token ForOfOfKeyword_3_1_0_1_1_2_0_0=null;
        Token SemicolonKeyword_3_1_0_2_0=null;
        Token SemicolonKeyword_3_1_0_2_2=null;
        Token RightParenthesisKeyword_3_1_1=null;
        InternalN4JSParser.ruleLetIdentifierRef_return InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_0_0_2_0 = null;

        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0 = null;

        InternalN4JSParser.norm6_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0 = null;

        InternalN4JSParser.norm2_VariableDeclarationOrBinding_return VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0 = null;

        InternalN4JSParser.norm2_Expression_return InitExprExpressionParserRuleCall_3_1_0_1_0_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0_2_1_0 = null;

        InternalN4JSParser.norm3_Expression_return UpdateExprExpressionParserRuleCall_3_1_0_2_3_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            ForKeyword_1=(Token)match(input,For,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ForKeyword_1, grammarAccess.getForStatementAccess().getForKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_77); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getForStatementAccess().getLeftParenthesisKeyword_2()); 
            }
            int alt219=2;
            alt219 = dfa219.predict(input);
            switch (alt219) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_78);
                    InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0=ruleLetIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.start):null), (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0!=null?((Token)InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_0_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    ForInInKeyword_3_0_0_1_0=(Token)match(input,In,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ForInInKeyword_3_0_0_1_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_0_0_1_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_48);
                    ExpressionExpressionParserRuleCall_3_0_0_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_0_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_0_0_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_3_0_0_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_0_0_3, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_0_0_3()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    int alt218=3;
                    alt218 = dfa218.predict(input);
                    switch (alt218) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_29);
                            ruleVariableStatementKeyword();

                            state._fsp--;
                            if (state.failed) return retval;

                            }


                            }
                            int alt210=2;
                            alt210 = dfa210.predict(input);
                            switch (alt210) {
                                case 1 :
                                    {
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_79);
                                    VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0=norm2_BindingIdentifierAsVariableDeclaration();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.start):null), (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0!=null?((Token)VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_0_0_0()); 
                                    }

                                    }


                                    }
                                    int alt202=2;
                                    int LA202_0 = input.LA(1);

                                    if ( (LA202_0==In) ) {
                                        alt202=1;
                                    }
                                    else if ( (LA202_0==Of) ) {
                                        alt202=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 202, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt202) {
                                        case 1 :
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_0_0_1_0_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_0_0_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_0_0_1_0_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_0_0_1_1_0()); 
                                            }

                                            }


                                            }


                                            }
                                            break;

                                    }
                                    int alt203=2;
                                    alt203 = dfa203.predict(input);
                                    switch (alt203) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_48);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_0_0_2()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_81);
                                    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0=norm6_VariableDeclarationOrBinding();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_0()); 
                                    }

                                    }


                                    }
                                    int alt209=3;
                                    switch ( input.LA(1) ) {
                                    case Comma:
                                    case Semicolon:
                                        {
                                        alt209=1;
                                        }
                                        break;
                                    case In:
                                        {
                                        alt209=2;
                                        }
                                        break;
                                    case Of:
                                        {
                                        alt209=3;
                                        }
                                        break;
                                    default:
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 209, 0, input);

                                        throw nvae;
                                    }

                                    switch (alt209) {
                                        case 1 :
                                            {
                                            {
                                            loop204:
                                            do {
                                                int alt204=2;
                                                int LA204_0 = input.LA(1);

                                                if ( (LA204_0==Comma) ) {
                                                    alt204=1;
                                                }


                                                switch (alt204) {
                                            	case 1 :
                                            	    {
                                            	    CommaKeyword_3_1_0_0_1_1_1_0_0_0=(Token)match(input,Comma,FOLLOW_29); if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce(CommaKeyword_3_1_0_0_1_1_1_0_0_0, grammarAccess.getForStatementAccess().getCommaKeyword_3_1_0_0_1_1_1_0_0_0()); 
                                            	    }
                                            	    {
                                            	    {
                                            	    pushFollow(FOLLOW_82);
                                            	    VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0=norm2_VariableDeclarationOrBinding();

                                            	    state._fsp--;
                                            	    if (state.failed) return retval;
                                            	    if ( state.backtracking==0 ) {
                                            	       announce((VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.start):null), (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0!=null?((Token)VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0.stop):null), grammarAccess.getForStatementAccess().getVarDeclsOrBindingsAssignment_3_1_0_0_1_1_1_0_0_1()); 
                                            	    }

                                            	    }


                                            	    }


                                            	    }
                                            	    break;

                                            	default :
                                            	    break loop204;
                                                }
                                            } while (true);

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_1=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_1, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_1()); 
                                            }
                                            int alt205=2;
                                            int LA205_0 = input.LA(1);

                                            if ( ((LA205_0>=Intersection && LA205_0<=Implements)||(LA205_0>=Promisify && LA205_0<=Abstract)||(LA205_0>=External && LA205_0<=Function)||(LA205_0>=Private && LA205_0<=Delete)||LA205_0==Public||LA205_0==Static||(LA205_0>=Target && LA205_0<=Await_1)||LA205_0==Class||(LA205_0>=False && LA205_0<=Super)||LA205_0==Union||(LA205_0>=Yield && LA205_0<=This)||(LA205_0>=From && LA205_0<=Void)||(LA205_0>=Get && LA205_0<=Set)||LA205_0==PlusSignPlusSign||LA205_0==HyphenMinusHyphenMinus||LA205_0==SolidusEqualsSign||LA205_0==As||LA205_0==Of||LA205_0==ExclamationMark||LA205_0==LeftParenthesis||LA205_0==PlusSign||LA205_0==HyphenMinus||LA205_0==Solidus||LA205_0==LessThanSign||(LA205_0>=CommercialAt && LA205_0<=LeftSquareBracket)||LA205_0==LeftCurlyBracket||LA205_0==Tilde||LA205_0==RULE_DOUBLE||(LA205_0>=RULE_HEX_INT && LA205_0<=RULE_LEGACY_OCTAL_INT)||LA205_0==RULE_SCIENTIFIC_INT||LA205_0==RULE_IDENTIFIER||LA205_0==RULE_STRING||(LA205_0>=RULE_TEMPLATE_HEAD && LA205_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA205_0==RULE_INT) ) {
                                                alt205=1;
                                            }
                                            switch (alt205) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_84);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_0_2()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }

                                            SemicolonKeyword_3_1_0_0_1_1_1_0_3=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(SemicolonKeyword_3_1_0_0_1_1_1_0_3, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_0_1_1_1_0_3()); 
                                            }
                                            int alt206=2;
                                            int LA206_0 = input.LA(1);

                                            if ( ((LA206_0>=Intersection && LA206_0<=Implements)||(LA206_0>=Promisify && LA206_0<=Abstract)||(LA206_0>=External && LA206_0<=Function)||(LA206_0>=Private && LA206_0<=Delete)||LA206_0==Public||LA206_0==Static||(LA206_0>=Target && LA206_0<=Await_1)||LA206_0==Class||(LA206_0>=False && LA206_0<=Super)||LA206_0==Union||(LA206_0>=Yield && LA206_0<=This)||(LA206_0>=From && LA206_0<=Void)||(LA206_0>=Get && LA206_0<=Set)||LA206_0==PlusSignPlusSign||LA206_0==HyphenMinusHyphenMinus||LA206_0==SolidusEqualsSign||LA206_0==As||LA206_0==Of||LA206_0==ExclamationMark||LA206_0==LeftParenthesis||LA206_0==PlusSign||LA206_0==HyphenMinus||LA206_0==Solidus||LA206_0==LessThanSign||(LA206_0>=CommercialAt && LA206_0<=LeftSquareBracket)||LA206_0==LeftCurlyBracket||LA206_0==Tilde||LA206_0==RULE_DOUBLE||(LA206_0>=RULE_HEX_INT && LA206_0<=RULE_LEGACY_OCTAL_INT)||LA206_0==RULE_SCIENTIFIC_INT||LA206_0==RULE_IDENTIFIER||LA206_0==RULE_STRING||(LA206_0>=RULE_TEMPLATE_HEAD && LA206_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA206_0==RULE_INT) ) {
                                                alt206=1;
                                            }
                                            switch (alt206) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_48);
                                                    UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_0_1_1_1_0_4()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 2 :
                                            {
                                            {
                                            {
                                            {
                                            ForInInKeyword_3_1_0_0_1_1_1_1_0_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForInInKeyword_3_1_0_0_1_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_0_1_1_1_1_0_0()); 
                                            }

                                            }


                                            }
                                            int alt207=2;
                                            int LA207_0 = input.LA(1);

                                            if ( ((LA207_0>=Intersection && LA207_0<=Implements)||(LA207_0>=Promisify && LA207_0<=Abstract)||(LA207_0>=External && LA207_0<=Function)||(LA207_0>=Private && LA207_0<=Delete)||LA207_0==Public||LA207_0==Static||(LA207_0>=Target && LA207_0<=Await_1)||LA207_0==Class||(LA207_0>=False && LA207_0<=Super)||LA207_0==Union||(LA207_0>=Yield && LA207_0<=This)||(LA207_0>=From && LA207_0<=Void)||(LA207_0>=Get && LA207_0<=Set)||LA207_0==PlusSignPlusSign||LA207_0==HyphenMinusHyphenMinus||LA207_0==SolidusEqualsSign||LA207_0==As||LA207_0==Of||LA207_0==ExclamationMark||LA207_0==LeftParenthesis||LA207_0==PlusSign||LA207_0==HyphenMinus||LA207_0==Solidus||LA207_0==LessThanSign||(LA207_0>=CommercialAt && LA207_0<=LeftSquareBracket)||LA207_0==LeftCurlyBracket||LA207_0==Tilde||LA207_0==RULE_DOUBLE||(LA207_0>=RULE_HEX_INT && LA207_0<=RULE_LEGACY_OCTAL_INT)||LA207_0==RULE_SCIENTIFIC_INT||LA207_0==RULE_IDENTIFIER||LA207_0==RULE_STRING||(LA207_0>=RULE_TEMPLATE_HEAD && LA207_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA207_0==RULE_INT) ) {
                                                alt207=1;
                                            }
                                            switch (alt207) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_48);
                                                    ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0=norm3_Expression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_1_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;
                                        case 3 :
                                            {
                                            {
                                            {
                                            {
                                            ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_0_1_1_1_2_0_0()); 
                                            }

                                            }


                                            }
                                            int alt208=2;
                                            int LA208_0 = input.LA(1);

                                            if ( ((LA208_0>=Intersection && LA208_0<=Implements)||(LA208_0>=Promisify && LA208_0<=Abstract)||(LA208_0>=External && LA208_0<=Function)||(LA208_0>=Private && LA208_0<=Delete)||LA208_0==Public||LA208_0==Static||(LA208_0>=Target && LA208_0<=Await_1)||LA208_0==Class||(LA208_0>=False && LA208_0<=Super)||LA208_0==Union||(LA208_0>=Yield && LA208_0<=This)||(LA208_0>=From && LA208_0<=Void)||(LA208_0>=Get && LA208_0<=Set)||LA208_0==PlusSignPlusSign||LA208_0==HyphenMinusHyphenMinus||LA208_0==SolidusEqualsSign||LA208_0==As||LA208_0==Of||LA208_0==ExclamationMark||LA208_0==LeftParenthesis||LA208_0==PlusSign||LA208_0==HyphenMinus||LA208_0==Solidus||LA208_0==LessThanSign||(LA208_0>=CommercialAt && LA208_0<=LeftSquareBracket)||LA208_0==LeftCurlyBracket||LA208_0==Tilde||LA208_0==RULE_DOUBLE||(LA208_0>=RULE_HEX_INT && LA208_0<=RULE_LEGACY_OCTAL_INT)||LA208_0==RULE_SCIENTIFIC_INT||LA208_0==RULE_IDENTIFIER||LA208_0==RULE_STRING||(LA208_0>=RULE_TEMPLATE_HEAD && LA208_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA208_0==RULE_INT) ) {
                                                alt208=1;
                                            }
                                            switch (alt208) {
                                                case 1 :
                                                    {
                                                    {
                                                    pushFollow(FOLLOW_48);
                                                    ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0=norm3_AssignmentExpression();

                                                    state._fsp--;
                                                    if (state.failed) return retval;
                                                    if ( state.backtracking==0 ) {
                                                       announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_0_1_1_1_2_1()); 
                                                    }

                                                    }


                                                    }
                                                    break;

                                            }


                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_85);
                            InitExprExpressionParserRuleCall_3_1_0_1_0_0=norm2_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.start):null), (InitExprExpressionParserRuleCall_3_1_0_1_0_0!=null?((Token)InitExprExpressionParserRuleCall_3_1_0_1_0_0.stop):null), grammarAccess.getForStatementAccess().getInitExprAssignment_3_1_0_1_0()); 
                            }

                            }


                            }
                            int alt215=3;
                            switch ( input.LA(1) ) {
                            case Semicolon:
                                {
                                alt215=1;
                                }
                                break;
                            case In:
                                {
                                alt215=2;
                                }
                                break;
                            case Of:
                                {
                                alt215=3;
                                }
                                break;
                            default:
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 215, 0, input);

                                throw nvae;
                            }

                            switch (alt215) {
                                case 1 :
                                    {
                                    {
                                    SemicolonKeyword_3_1_0_1_1_0_0=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_0()); 
                                    }
                                    int alt211=2;
                                    int LA211_0 = input.LA(1);

                                    if ( ((LA211_0>=Intersection && LA211_0<=Implements)||(LA211_0>=Promisify && LA211_0<=Abstract)||(LA211_0>=External && LA211_0<=Function)||(LA211_0>=Private && LA211_0<=Delete)||LA211_0==Public||LA211_0==Static||(LA211_0>=Target && LA211_0<=Await_1)||LA211_0==Class||(LA211_0>=False && LA211_0<=Super)||LA211_0==Union||(LA211_0>=Yield && LA211_0<=This)||(LA211_0>=From && LA211_0<=Void)||(LA211_0>=Get && LA211_0<=Set)||LA211_0==PlusSignPlusSign||LA211_0==HyphenMinusHyphenMinus||LA211_0==SolidusEqualsSign||LA211_0==As||LA211_0==Of||LA211_0==ExclamationMark||LA211_0==LeftParenthesis||LA211_0==PlusSign||LA211_0==HyphenMinus||LA211_0==Solidus||LA211_0==LessThanSign||(LA211_0>=CommercialAt && LA211_0<=LeftSquareBracket)||LA211_0==LeftCurlyBracket||LA211_0==Tilde||LA211_0==RULE_DOUBLE||(LA211_0>=RULE_HEX_INT && LA211_0<=RULE_LEGACY_OCTAL_INT)||LA211_0==RULE_SCIENTIFIC_INT||LA211_0==RULE_IDENTIFIER||LA211_0==RULE_STRING||(LA211_0>=RULE_TEMPLATE_HEAD && LA211_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA211_0==RULE_INT) ) {
                                        alt211=1;
                                    }
                                    switch (alt211) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_84);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_0_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }

                                    SemicolonKeyword_3_1_0_1_1_0_2=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(SemicolonKeyword_3_1_0_1_1_0_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_1_1_0_2()); 
                                    }
                                    int alt212=2;
                                    int LA212_0 = input.LA(1);

                                    if ( ((LA212_0>=Intersection && LA212_0<=Implements)||(LA212_0>=Promisify && LA212_0<=Abstract)||(LA212_0>=External && LA212_0<=Function)||(LA212_0>=Private && LA212_0<=Delete)||LA212_0==Public||LA212_0==Static||(LA212_0>=Target && LA212_0<=Await_1)||LA212_0==Class||(LA212_0>=False && LA212_0<=Super)||LA212_0==Union||(LA212_0>=Yield && LA212_0<=This)||(LA212_0>=From && LA212_0<=Void)||(LA212_0>=Get && LA212_0<=Set)||LA212_0==PlusSignPlusSign||LA212_0==HyphenMinusHyphenMinus||LA212_0==SolidusEqualsSign||LA212_0==As||LA212_0==Of||LA212_0==ExclamationMark||LA212_0==LeftParenthesis||LA212_0==PlusSign||LA212_0==HyphenMinus||LA212_0==Solidus||LA212_0==LessThanSign||(LA212_0>=CommercialAt && LA212_0<=LeftSquareBracket)||LA212_0==LeftCurlyBracket||LA212_0==Tilde||LA212_0==RULE_DOUBLE||(LA212_0>=RULE_HEX_INT && LA212_0<=RULE_LEGACY_OCTAL_INT)||LA212_0==RULE_SCIENTIFIC_INT||LA212_0==RULE_IDENTIFIER||LA212_0==RULE_STRING||(LA212_0>=RULE_TEMPLATE_HEAD && LA212_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA212_0==RULE_INT) ) {
                                        alt212=1;
                                    }
                                    switch (alt212) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_48);
                                            UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_1_1_0_3()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    {
                                    ForInInKeyword_3_1_0_1_1_1_0_0=(Token)match(input,In,FOLLOW_80); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForInInKeyword_3_1_0_1_1_1_0_0, grammarAccess.getForStatementAccess().getForInInKeyword_3_1_0_1_1_1_0_0()); 
                                    }

                                    }


                                    }
                                    int alt213=2;
                                    int LA213_0 = input.LA(1);

                                    if ( ((LA213_0>=Intersection && LA213_0<=Implements)||(LA213_0>=Promisify && LA213_0<=Abstract)||(LA213_0>=External && LA213_0<=Function)||(LA213_0>=Private && LA213_0<=Delete)||LA213_0==Public||LA213_0==Static||(LA213_0>=Target && LA213_0<=Await_1)||LA213_0==Class||(LA213_0>=False && LA213_0<=Super)||LA213_0==Union||(LA213_0>=Yield && LA213_0<=This)||(LA213_0>=From && LA213_0<=Void)||(LA213_0>=Get && LA213_0<=Set)||LA213_0==PlusSignPlusSign||LA213_0==HyphenMinusHyphenMinus||LA213_0==SolidusEqualsSign||LA213_0==As||LA213_0==Of||LA213_0==ExclamationMark||LA213_0==LeftParenthesis||LA213_0==PlusSign||LA213_0==HyphenMinus||LA213_0==Solidus||LA213_0==LessThanSign||(LA213_0>=CommercialAt && LA213_0<=LeftSquareBracket)||LA213_0==LeftCurlyBracket||LA213_0==Tilde||LA213_0==RULE_DOUBLE||(LA213_0>=RULE_HEX_INT && LA213_0<=RULE_LEGACY_OCTAL_INT)||LA213_0==RULE_SCIENTIFIC_INT||LA213_0==RULE_IDENTIFIER||LA213_0==RULE_STRING||(LA213_0>=RULE_TEMPLATE_HEAD && LA213_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA213_0==RULE_INT) ) {
                                        alt213=1;
                                    }
                                    switch (alt213) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_48);
                                            ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0=norm3_Expression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_1_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;
                                case 3 :
                                    {
                                    {
                                    {
                                    {
                                    ForOfOfKeyword_3_1_0_1_1_2_0_0=(Token)match(input,Of,FOLLOW_80); if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce(ForOfOfKeyword_3_1_0_1_1_2_0_0, grammarAccess.getForStatementAccess().getForOfOfKeyword_3_1_0_1_1_2_0_0()); 
                                    }

                                    }


                                    }
                                    int alt214=2;
                                    int LA214_0 = input.LA(1);

                                    if ( ((LA214_0>=Intersection && LA214_0<=Implements)||(LA214_0>=Promisify && LA214_0<=Abstract)||(LA214_0>=External && LA214_0<=Function)||(LA214_0>=Private && LA214_0<=Delete)||LA214_0==Public||LA214_0==Static||(LA214_0>=Target && LA214_0<=Await_1)||LA214_0==Class||(LA214_0>=False && LA214_0<=Super)||LA214_0==Union||(LA214_0>=Yield && LA214_0<=This)||(LA214_0>=From && LA214_0<=Void)||(LA214_0>=Get && LA214_0<=Set)||LA214_0==PlusSignPlusSign||LA214_0==HyphenMinusHyphenMinus||LA214_0==SolidusEqualsSign||LA214_0==As||LA214_0==Of||LA214_0==ExclamationMark||LA214_0==LeftParenthesis||LA214_0==PlusSign||LA214_0==HyphenMinus||LA214_0==Solidus||LA214_0==LessThanSign||(LA214_0>=CommercialAt && LA214_0<=LeftSquareBracket)||LA214_0==LeftCurlyBracket||LA214_0==Tilde||LA214_0==RULE_DOUBLE||(LA214_0>=RULE_HEX_INT && LA214_0<=RULE_LEGACY_OCTAL_INT)||LA214_0==RULE_SCIENTIFIC_INT||LA214_0==RULE_IDENTIFIER||LA214_0==RULE_STRING||(LA214_0>=RULE_TEMPLATE_HEAD && LA214_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA214_0==RULE_INT) ) {
                                        alt214=1;
                                    }
                                    switch (alt214) {
                                        case 1 :
                                            {
                                            {
                                            pushFollow(FOLLOW_48);
                                            ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0=norm3_AssignmentExpression();

                                            state._fsp--;
                                            if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce((ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_1_1_2_1()); 
                                            }

                                            }


                                            }
                                            break;

                                    }


                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 3 :
                            {
                            {
                            SemicolonKeyword_3_1_0_2_0=(Token)match(input,Semicolon,FOLLOW_83); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_0, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_0()); 
                            }
                            int alt216=2;
                            int LA216_0 = input.LA(1);

                            if ( ((LA216_0>=Intersection && LA216_0<=Implements)||(LA216_0>=Promisify && LA216_0<=Abstract)||(LA216_0>=External && LA216_0<=Function)||(LA216_0>=Private && LA216_0<=Delete)||LA216_0==Public||LA216_0==Static||(LA216_0>=Target && LA216_0<=Await_1)||LA216_0==Class||(LA216_0>=False && LA216_0<=Super)||LA216_0==Union||(LA216_0>=Yield && LA216_0<=This)||(LA216_0>=From && LA216_0<=Void)||(LA216_0>=Get && LA216_0<=Set)||LA216_0==PlusSignPlusSign||LA216_0==HyphenMinusHyphenMinus||LA216_0==SolidusEqualsSign||LA216_0==As||LA216_0==Of||LA216_0==ExclamationMark||LA216_0==LeftParenthesis||LA216_0==PlusSign||LA216_0==HyphenMinus||LA216_0==Solidus||LA216_0==LessThanSign||(LA216_0>=CommercialAt && LA216_0<=LeftSquareBracket)||LA216_0==LeftCurlyBracket||LA216_0==Tilde||LA216_0==RULE_DOUBLE||(LA216_0>=RULE_HEX_INT && LA216_0<=RULE_LEGACY_OCTAL_INT)||LA216_0==RULE_SCIENTIFIC_INT||LA216_0==RULE_IDENTIFIER||LA216_0==RULE_STRING||(LA216_0>=RULE_TEMPLATE_HEAD && LA216_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA216_0==RULE_INT) ) {
                                alt216=1;
                            }
                            switch (alt216) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_84);
                                    ExpressionExpressionParserRuleCall_3_1_0_2_1_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0_2_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0_2_1_0.stop):null), grammarAccess.getForStatementAccess().getExpressionAssignment_3_1_0_2_1()); 
                                    }

                                    }


                                    }
                                    break;

                            }

                            SemicolonKeyword_3_1_0_2_2=(Token)match(input,Semicolon,FOLLOW_80); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_3_1_0_2_2, grammarAccess.getForStatementAccess().getSemicolonKeyword_3_1_0_2_2()); 
                            }
                            int alt217=2;
                            int LA217_0 = input.LA(1);

                            if ( ((LA217_0>=Intersection && LA217_0<=Implements)||(LA217_0>=Promisify && LA217_0<=Abstract)||(LA217_0>=External && LA217_0<=Function)||(LA217_0>=Private && LA217_0<=Delete)||LA217_0==Public||LA217_0==Static||(LA217_0>=Target && LA217_0<=Await_1)||LA217_0==Class||(LA217_0>=False && LA217_0<=Super)||LA217_0==Union||(LA217_0>=Yield && LA217_0<=This)||(LA217_0>=From && LA217_0<=Void)||(LA217_0>=Get && LA217_0<=Set)||LA217_0==PlusSignPlusSign||LA217_0==HyphenMinusHyphenMinus||LA217_0==SolidusEqualsSign||LA217_0==As||LA217_0==Of||LA217_0==ExclamationMark||LA217_0==LeftParenthesis||LA217_0==PlusSign||LA217_0==HyphenMinus||LA217_0==Solidus||LA217_0==LessThanSign||(LA217_0>=CommercialAt && LA217_0<=LeftSquareBracket)||LA217_0==LeftCurlyBracket||LA217_0==Tilde||LA217_0==RULE_DOUBLE||(LA217_0>=RULE_HEX_INT && LA217_0<=RULE_LEGACY_OCTAL_INT)||LA217_0==RULE_SCIENTIFIC_INT||LA217_0==RULE_IDENTIFIER||LA217_0==RULE_STRING||(LA217_0>=RULE_TEMPLATE_HEAD && LA217_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA217_0==RULE_INT) ) {
                                alt217=1;
                            }
                            switch (alt217) {
                                case 1 :
                                    {
                                    {
                                    pushFollow(FOLLOW_48);
                                    UpdateExprExpressionParserRuleCall_3_1_0_2_3_0=norm3_Expression();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.start):null), (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0!=null?((Token)UpdateExprExpressionParserRuleCall_3_1_0_2_3_0.stop):null), grammarAccess.getForStatementAccess().getUpdateExprAssignment_3_1_0_2_3()); 
                                    }

                                    }


                                    }
                                    break;

                            }


                            }


                            }
                            break;

                    }

                    RightParenthesisKeyword_3_1_1=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_3_1_1, grammarAccess.getForStatementAccess().getRightParenthesisKeyword_3_1_1()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getForStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetIdentifierRef_return ruleLetIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleLetIdentifierRef_return retval = new InternalN4JSParser.ruleLetIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLetAsIdentifier_return IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1=ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementLetAsIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getLetIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLetAsIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLetAsIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLetAsIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLetAsIdentifier_return ruleLetAsIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleLetAsIdentifier_return retval = new InternalN4JSParser.ruleLetAsIdentifier_return();
        retval.start = input.LT(1);

        Token LetKeyword=null;


            
        try {
            {
            LetKeyword=(Token)match(input,Let,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LetKeyword, grammarAccess.getLetAsIdentifierAccess().getLetKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifierAsVariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return ruleBindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.ruleBindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BindingIdentifierAsVariableDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return norm2_BindingIdentifierAsVariableDeclaration() throws RecognitionException {
        InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return retval = new InternalN4JSParser.norm2_BindingIdentifierAsVariableDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            NameBindingIdentifierParserRuleCall_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.start):null), (NameBindingIdentifierParserRuleCall_0!=null?((Token)NameBindingIdentifierParserRuleCall_0.stop):null), grammarAccess.getBindingIdentifierAsVariableDeclarationAccess().getNameAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleContinueStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleContinueStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleContinueStatement_return ruleContinueStatement() throws RecognitionException {
        InternalN4JSParser.ruleContinueStatement_return retval = new InternalN4JSParser.ruleContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_86); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt220=2;
            int LA220_0 = input.LA(1);

            if ( ((LA220_0>=Intersection && LA220_0<=Implements)||(LA220_0>=Promisify && LA220_0<=Abstract)||LA220_0==External||(LA220_0>=Private && LA220_0<=Project)||LA220_0==Public||LA220_0==Static||LA220_0==Target||(LA220_0>=Await && LA220_0<=Await_1)||LA220_0==Union||(LA220_0>=Yield && LA220_0<=This)||LA220_0==From||LA220_0==Type||(LA220_0>=Get && LA220_0<=Let)||LA220_0==Set||LA220_0==As||LA220_0==Of||LA220_0==RULE_IDENTIFIER) ) {
                alt220=1;
            }
            switch (alt220) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_19);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ContinueStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ContinueStatement_return norm1_ContinueStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ContinueStatement_return retval = new InternalN4JSParser.norm1_ContinueStatement_return();
        retval.start = input.LT(1);

        Token ContinueKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ContinueKeyword_1=(Token)match(input,Continue,FOLLOW_86); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ContinueKeyword_1, grammarAccess.getContinueStatementAccess().getContinueKeyword_1()); 
            }
            int alt221=2;
            int LA221_0 = input.LA(1);

            if ( ((LA221_0>=Intersection && LA221_0<=Implements)||(LA221_0>=Promisify && LA221_0<=Abstract)||LA221_0==External||(LA221_0>=Private && LA221_0<=Project)||LA221_0==Public||LA221_0==Static||LA221_0==Target||(LA221_0>=Await && LA221_0<=Await_1)||LA221_0==Union||LA221_0==This||LA221_0==From||LA221_0==Type||(LA221_0>=Get && LA221_0<=Let)||LA221_0==Set||LA221_0==As||LA221_0==Of||LA221_0==RULE_IDENTIFIER) ) {
                alt221=1;
            }
            switch (alt221) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_19);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getContinueStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getContinueStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBreakStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBreakStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBreakStatement_return ruleBreakStatement() throws RecognitionException {
        InternalN4JSParser.ruleBreakStatement_return retval = new InternalN4JSParser.ruleBreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_86); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt222=2;
            int LA222_0 = input.LA(1);

            if ( ((LA222_0>=Intersection && LA222_0<=Implements)||(LA222_0>=Promisify && LA222_0<=Abstract)||LA222_0==External||(LA222_0>=Private && LA222_0<=Project)||LA222_0==Public||LA222_0==Static||LA222_0==Target||(LA222_0>=Await && LA222_0<=Await_1)||LA222_0==Union||(LA222_0>=Yield && LA222_0<=This)||LA222_0==From||LA222_0==Type||(LA222_0>=Get && LA222_0<=Let)||LA222_0==Set||LA222_0==As||LA222_0==Of||LA222_0==RULE_IDENTIFIER) ) {
                alt222=1;
            }
            switch (alt222) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_19);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BreakStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BreakStatement_return norm1_BreakStatement() throws RecognitionException {
        InternalN4JSParser.norm1_BreakStatement_return retval = new InternalN4JSParser.norm1_BreakStatement_return();
        retval.start = input.LT(1);

        Token BreakKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            BreakKeyword_1=(Token)match(input,Break,FOLLOW_86); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(BreakKeyword_1, grammarAccess.getBreakStatementAccess().getBreakKeyword_1()); 
            }
            int alt223=2;
            int LA223_0 = input.LA(1);

            if ( ((LA223_0>=Intersection && LA223_0<=Implements)||(LA223_0>=Promisify && LA223_0<=Abstract)||LA223_0==External||(LA223_0>=Private && LA223_0<=Project)||LA223_0==Public||LA223_0==Static||LA223_0==Target||(LA223_0>=Await && LA223_0<=Await_1)||LA223_0==Union||LA223_0==This||LA223_0==From||LA223_0==Type||(LA223_0>=Get && LA223_0<=Let)||LA223_0==Set||LA223_0==As||LA223_0==Of||LA223_0==RULE_IDENTIFIER) ) {
                alt223=1;
            }
            switch (alt223) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_19);
                    LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.start):null), (LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1!=null?((Token)LabelLabelledStatementBindingIdentifierParserRuleCall_2_0_1.stop):null), grammarAccess.getBreakStatementAccess().getLabelAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getBreakStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReturnStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReturnStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleReturnStatement_return ruleReturnStatement() throws RecognitionException {
        InternalN4JSParser.ruleReturnStatement_return retval = new InternalN4JSParser.ruleReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_87); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt224=2;
            int LA224_0 = input.LA(1);

            if ( ((LA224_0>=Intersection && LA224_0<=Implements)||(LA224_0>=Promisify && LA224_0<=Abstract)||(LA224_0>=External && LA224_0<=Function)||(LA224_0>=Private && LA224_0<=Delete)||LA224_0==Public||LA224_0==Static||(LA224_0>=Target && LA224_0<=Await_1)||LA224_0==Class||(LA224_0>=False && LA224_0<=Super)||LA224_0==Union||(LA224_0>=Yield && LA224_0<=This)||(LA224_0>=From && LA224_0<=Void)||(LA224_0>=Get && LA224_0<=Set)||LA224_0==PlusSignPlusSign||LA224_0==HyphenMinusHyphenMinus||LA224_0==SolidusEqualsSign||LA224_0==As||LA224_0==Of||LA224_0==ExclamationMark||LA224_0==LeftParenthesis||LA224_0==PlusSign||LA224_0==HyphenMinus||LA224_0==Solidus||LA224_0==LessThanSign||(LA224_0>=CommercialAt && LA224_0<=LeftSquareBracket)||LA224_0==LeftCurlyBracket||LA224_0==Tilde||LA224_0==RULE_DOUBLE||(LA224_0>=RULE_HEX_INT && LA224_0<=RULE_LEGACY_OCTAL_INT)||LA224_0==RULE_SCIENTIFIC_INT||LA224_0==RULE_IDENTIFIER||LA224_0==RULE_STRING||(LA224_0>=RULE_TEMPLATE_HEAD && LA224_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA224_0==RULE_INT) ) {
                alt224=1;
            }
            switch (alt224) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_19);
                    ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ReturnStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ReturnStatement_return norm1_ReturnStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ReturnStatement_return retval = new InternalN4JSParser.norm1_ReturnStatement_return();
        retval.start = input.LT(1);

        Token ReturnKeyword_1=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_3 = null;



            
        try {
            {
            {
            ReturnKeyword_1=(Token)match(input,Return,FOLLOW_87); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ReturnKeyword_1, grammarAccess.getReturnStatementAccess().getReturnKeyword_1()); 
            }
            int alt225=2;
            int LA225_0 = input.LA(1);

            if ( ((LA225_0>=Intersection && LA225_0<=Implements)||(LA225_0>=Promisify && LA225_0<=Abstract)||(LA225_0>=External && LA225_0<=Function)||(LA225_0>=Private && LA225_0<=Delete)||LA225_0==Public||LA225_0==Static||(LA225_0>=Target && LA225_0<=Await_1)||LA225_0==Class||(LA225_0>=False && LA225_0<=Super)||LA225_0==Union||(LA225_0>=Yield && LA225_0<=This)||(LA225_0>=From && LA225_0<=Void)||(LA225_0>=Get && LA225_0<=Set)||LA225_0==PlusSignPlusSign||LA225_0==HyphenMinusHyphenMinus||LA225_0==SolidusEqualsSign||LA225_0==As||LA225_0==Of||LA225_0==ExclamationMark||LA225_0==LeftParenthesis||LA225_0==PlusSign||LA225_0==HyphenMinus||LA225_0==Solidus||LA225_0==LessThanSign||(LA225_0>=CommercialAt && LA225_0<=LeftSquareBracket)||LA225_0==LeftCurlyBracket||LA225_0==Tilde||LA225_0==RULE_DOUBLE||(LA225_0>=RULE_HEX_INT && LA225_0<=RULE_LEGACY_OCTAL_INT)||LA225_0==RULE_SCIENTIFIC_INT||LA225_0==RULE_IDENTIFIER||LA225_0==RULE_STRING||(LA225_0>=RULE_TEMPLATE_HEAD && LA225_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA225_0==RULE_INT) ) {
                alt225=1;
            }
            switch (alt225) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_19);
                    ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getReturnStatementAccess().getExpressionAssignment_2()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_3=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.start):null), (SemiParserRuleCall_3!=null?((Token)SemiParserRuleCall_3.stop):null), grammarAccess.getReturnStatementAccess().getSemiParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWithStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWithStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWithStatement_return ruleWithStatement() throws RecognitionException {
        InternalN4JSParser.ruleWithStatement_return retval = new InternalN4JSParser.ruleWithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_WithStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_WithStatement_return norm1_WithStatement() throws RecognitionException {
        InternalN4JSParser.norm1_WithStatement_return retval = new InternalN4JSParser.norm1_WithStatement_return();
        retval.start = input.LT(1);

        Token WithKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_4_0 = null;



            
        try {
            {
            {
            WithKeyword_0=(Token)match(input,With,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(WithKeyword_0, grammarAccess.getWithStatementAccess().getWithKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getWithStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getWithStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getWithStatementAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_4_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.start):null), (StatementStatementParserRuleCall_4_0!=null?((Token)StatementStatementParserRuleCall_4_0.stop):null), grammarAccess.getWithStatementAccess().getStatementAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSwitchStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSwitchStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSwitchStatement_return ruleSwitchStatement() throws RecognitionException {
        InternalN4JSParser.ruleSwitchStatement_return retval = new InternalN4JSParser.ruleSwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSParser.ruleDefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSParser.ruleCaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_2_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop226:
            do {
                int alt226=2;
                int LA226_0 = input.LA(1);

                if ( (LA226_0==Case) ) {
                    alt226=1;
                }


                switch (alt226) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_88);
            	    CasesCaseClauseParserRuleCall_5_0=ruleCaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop226;
                }
            } while (true);
            int alt228=2;
            int LA228_0 = input.LA(1);

            if ( (LA228_0==Default) ) {
                alt228=1;
            }
            switch (alt228) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_89);
                    CasesDefaultClauseParserRuleCall_6_0_0=ruleDefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop227:
                    do {
                        int alt227=2;
                        int LA227_0 = input.LA(1);

                        if ( (LA227_0==Case) ) {
                            alt227=1;
                        }


                        switch (alt227) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_89);
                    	    CasesCaseClauseParserRuleCall_6_1_0=ruleCaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop227;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SwitchStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SwitchStatement_return norm1_SwitchStatement() throws RecognitionException {
        InternalN4JSParser.norm1_SwitchStatement_return retval = new InternalN4JSParser.norm1_SwitchStatement_return();
        retval.start = input.LT(1);

        Token SwitchKeyword_0=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token LeftCurlyBracketKeyword_4=null;
        Token RightCurlyBracketKeyword_7=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_5_0 = null;

        InternalN4JSParser.norm1_DefaultClause_return CasesDefaultClauseParserRuleCall_6_0_0 = null;

        InternalN4JSParser.norm1_CaseClause_return CasesCaseClauseParserRuleCall_6_1_0 = null;



            
        try {
            {
            {
            SwitchKeyword_0=(Token)match(input,Switch,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SwitchKeyword_0, grammarAccess.getSwitchStatementAccess().getSwitchKeyword_0()); 
            }
            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getSwitchStatementAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_2_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.start):null), (ExpressionExpressionParserRuleCall_2_0!=null?((Token)ExpressionExpressionParserRuleCall_2_0.stop):null), grammarAccess.getSwitchStatementAccess().getExpressionAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getSwitchStatementAccess().getRightParenthesisKeyword_3()); 
            }
            LeftCurlyBracketKeyword_4=(Token)match(input,LeftCurlyBracket,FOLLOW_88); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_4, grammarAccess.getSwitchStatementAccess().getLeftCurlyBracketKeyword_4()); 
            }
            loop229:
            do {
                int alt229=2;
                int LA229_0 = input.LA(1);

                if ( (LA229_0==Case) ) {
                    alt229=1;
                }


                switch (alt229) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_88);
            	    CasesCaseClauseParserRuleCall_5_0=norm1_CaseClause();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.start):null), (CasesCaseClauseParserRuleCall_5_0!=null?((Token)CasesCaseClauseParserRuleCall_5_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_5()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop229;
                }
            } while (true);
            int alt231=2;
            int LA231_0 = input.LA(1);

            if ( (LA231_0==Default) ) {
                alt231=1;
            }
            switch (alt231) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_89);
                    CasesDefaultClauseParserRuleCall_6_0_0=norm1_DefaultClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.start):null), (CasesDefaultClauseParserRuleCall_6_0_0!=null?((Token)CasesDefaultClauseParserRuleCall_6_0_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_0()); 
                    }

                    }


                    }
                    loop230:
                    do {
                        int alt230=2;
                        int LA230_0 = input.LA(1);

                        if ( (LA230_0==Case) ) {
                            alt230=1;
                        }


                        switch (alt230) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_89);
                    	    CasesCaseClauseParserRuleCall_6_1_0=norm1_CaseClause();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.start):null), (CasesCaseClauseParserRuleCall_6_1_0!=null?((Token)CasesCaseClauseParserRuleCall_6_1_0.stop):null), grammarAccess.getSwitchStatementAccess().getCasesAssignment_6_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop230;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_7=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_7, grammarAccess.getSwitchStatementAccess().getRightCurlyBracketKeyword_7()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCaseClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCaseClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCaseClause_return ruleCaseClause() throws RecognitionException {
        InternalN4JSParser.ruleCaseClause_return retval = new InternalN4JSParser.ruleCaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_90);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop232:
            do {
                int alt232=2;
                int LA232_0 = input.LA(1);

                if ( ((LA232_0>=Intersection && LA232_0<=Implements)||(LA232_0>=Promisify && LA232_0<=Function)||(LA232_0>=Private && LA232_0<=Delete)||(LA232_0>=Public && LA232_0<=Break)||(LA232_0>=Class && LA232_0<=This)||(LA232_0>=From && LA232_0<=With)||(LA232_0>=For && LA232_0<=Var)||LA232_0==PlusSignPlusSign||LA232_0==HyphenMinusHyphenMinus||LA232_0==SolidusEqualsSign||(LA232_0>=As && LA232_0<=If)||LA232_0==Of||LA232_0==ExclamationMark||LA232_0==LeftParenthesis||LA232_0==PlusSign||LA232_0==HyphenMinus||LA232_0==Solidus||(LA232_0>=Semicolon && LA232_0<=LessThanSign)||(LA232_0>=CommercialAt && LA232_0<=LeftSquareBracket)||LA232_0==LeftCurlyBracket||LA232_0==Tilde||LA232_0==RULE_DOUBLE||(LA232_0>=RULE_HEX_INT && LA232_0<=RULE_LEGACY_OCTAL_INT)||LA232_0==RULE_SCIENTIFIC_INT||LA232_0==RULE_IDENTIFIER||LA232_0==RULE_STRING||(LA232_0>=RULE_TEMPLATE_HEAD && LA232_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA232_0==RULE_INT) ) {
                    alt232=1;
                }


                switch (alt232) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop232;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CaseClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CaseClause_return norm1_CaseClause() throws RecognitionException {
        InternalN4JSParser.norm1_CaseClause_return retval = new InternalN4JSParser.norm1_CaseClause_return();
        retval.start = input.LT(1);

        Token CaseKeyword_0=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            CaseKeyword_0=(Token)match(input,Case,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CaseKeyword_0, grammarAccess.getCaseClauseAccess().getCaseKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_90);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getCaseClauseAccess().getExpressionAssignment_1()); 
            }

            }


            }

            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getCaseClauseAccess().getColonKeyword_2()); 
            }
            loop233:
            do {
                int alt233=2;
                int LA233_0 = input.LA(1);

                if ( ((LA233_0>=Intersection && LA233_0<=Implements)||(LA233_0>=Promisify && LA233_0<=Function)||(LA233_0>=Private && LA233_0<=Delete)||(LA233_0>=Public && LA233_0<=Break)||(LA233_0>=Class && LA233_0<=This)||(LA233_0>=From && LA233_0<=With)||(LA233_0>=For && LA233_0<=Var)||LA233_0==PlusSignPlusSign||LA233_0==HyphenMinusHyphenMinus||LA233_0==SolidusEqualsSign||(LA233_0>=As && LA233_0<=If)||LA233_0==Of||LA233_0==ExclamationMark||LA233_0==LeftParenthesis||LA233_0==PlusSign||LA233_0==HyphenMinus||LA233_0==Solidus||(LA233_0>=Semicolon && LA233_0<=LessThanSign)||(LA233_0>=CommercialAt && LA233_0<=LeftSquareBracket)||LA233_0==LeftCurlyBracket||LA233_0==Tilde||LA233_0==RULE_DOUBLE||(LA233_0>=RULE_HEX_INT && LA233_0<=RULE_LEGACY_OCTAL_INT)||LA233_0==RULE_SCIENTIFIC_INT||LA233_0==RULE_IDENTIFIER||LA233_0==RULE_STRING||(LA233_0>=RULE_TEMPLATE_HEAD && LA233_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA233_0==RULE_INT) ) {
                    alt233=1;
                }


                switch (alt233) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getCaseClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop233;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDefaultClause() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDefaultClause();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDefaultClause_return ruleDefaultClause() throws RecognitionException {
        InternalN4JSParser.ruleDefaultClause_return retval = new InternalN4JSParser.ruleDefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.ruleStatement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop234:
            do {
                int alt234=2;
                int LA234_0 = input.LA(1);

                if ( ((LA234_0>=Intersection && LA234_0<=Implements)||(LA234_0>=Promisify && LA234_0<=Function)||(LA234_0>=Private && LA234_0<=Delete)||(LA234_0>=Public && LA234_0<=Break)||(LA234_0>=Class && LA234_0<=This)||(LA234_0>=From && LA234_0<=With)||(LA234_0>=For && LA234_0<=Var)||LA234_0==PlusSignPlusSign||LA234_0==HyphenMinusHyphenMinus||LA234_0==SolidusEqualsSign||(LA234_0>=As && LA234_0<=If)||LA234_0==Of||LA234_0==ExclamationMark||LA234_0==LeftParenthesis||LA234_0==PlusSign||LA234_0==HyphenMinus||LA234_0==Solidus||(LA234_0>=Semicolon && LA234_0<=LessThanSign)||(LA234_0>=CommercialAt && LA234_0<=LeftSquareBracket)||LA234_0==LeftCurlyBracket||LA234_0==Tilde||LA234_0==RULE_DOUBLE||(LA234_0>=RULE_HEX_INT && LA234_0<=RULE_LEGACY_OCTAL_INT)||LA234_0==RULE_SCIENTIFIC_INT||LA234_0==RULE_IDENTIFIER||LA234_0==RULE_STRING||(LA234_0>=RULE_TEMPLATE_HEAD && LA234_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA234_0==RULE_INT) ) {
                    alt234=1;
                }


                switch (alt234) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=ruleStatement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop234;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_DefaultClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_DefaultClause_return norm1_DefaultClause() throws RecognitionException {
        InternalN4JSParser.norm1_DefaultClause_return retval = new InternalN4JSParser.norm1_DefaultClause_return();
        retval.start = input.LT(1);

        Token DefaultKeyword_1=null;
        Token ColonKeyword_2=null;
        InternalN4JSParser.norm1_Statement_return StatementsStatementParserRuleCall_3_0 = null;



            
        try {
            {
            {
            DefaultKeyword_1=(Token)match(input,Default,FOLLOW_90); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DefaultKeyword_1, grammarAccess.getDefaultClauseAccess().getDefaultKeyword_1()); 
            }
            ColonKeyword_2=(Token)match(input,Colon,FOLLOW_4); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_2, grammarAccess.getDefaultClauseAccess().getColonKeyword_2()); 
            }
            loop235:
            do {
                int alt235=2;
                int LA235_0 = input.LA(1);

                if ( ((LA235_0>=Intersection && LA235_0<=Implements)||(LA235_0>=Promisify && LA235_0<=Function)||(LA235_0>=Private && LA235_0<=Delete)||(LA235_0>=Public && LA235_0<=Break)||(LA235_0>=Class && LA235_0<=This)||(LA235_0>=From && LA235_0<=With)||(LA235_0>=For && LA235_0<=Var)||LA235_0==PlusSignPlusSign||LA235_0==HyphenMinusHyphenMinus||LA235_0==SolidusEqualsSign||(LA235_0>=As && LA235_0<=If)||LA235_0==Of||LA235_0==ExclamationMark||LA235_0==LeftParenthesis||LA235_0==PlusSign||LA235_0==HyphenMinus||LA235_0==Solidus||(LA235_0>=Semicolon && LA235_0<=LessThanSign)||(LA235_0>=CommercialAt && LA235_0<=LeftSquareBracket)||LA235_0==LeftCurlyBracket||LA235_0==Tilde||LA235_0==RULE_DOUBLE||(LA235_0>=RULE_HEX_INT && LA235_0<=RULE_LEGACY_OCTAL_INT)||LA235_0==RULE_SCIENTIFIC_INT||LA235_0==RULE_IDENTIFIER||LA235_0==RULE_STRING||(LA235_0>=RULE_TEMPLATE_HEAD && LA235_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA235_0==RULE_INT) ) {
                    alt235=1;
                }


                switch (alt235) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_4);
            	    StatementsStatementParserRuleCall_3_0=norm1_Statement();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.start):null), (StatementsStatementParserRuleCall_3_0!=null?((Token)StatementsStatementParserRuleCall_3_0.stop):null), grammarAccess.getDefaultClauseAccess().getStatementsAssignment_3()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop235;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLabelledStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLabelledStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLabelledStatement_return ruleLabelledStatement() throws RecognitionException {
        InternalN4JSParser.ruleLabelledStatement_return retval = new InternalN4JSParser.ruleLabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.ruleStatement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_90);
            NameBindingIdentifierParserRuleCall_0_0_0_0=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=ruleStatement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LabelledStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LabelledStatement_return norm1_LabelledStatement() throws RecognitionException {
        InternalN4JSParser.norm1_LabelledStatement_return retval = new InternalN4JSParser.norm1_LabelledStatement_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm1_Statement_return StatementStatementParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            {
            {
            pushFollow(FOLLOW_90);
            NameBindingIdentifierParserRuleCall_0_0_0_0=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_0_0.stop):null), grammarAccess.getLabelledStatementAccess().getNameAssignment_0_0_0()); 
            }

            }


            }

            ColonKeyword_0_0_1=(Token)match(input,Colon,FOLLOW_74); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_1, grammarAccess.getLabelledStatementAccess().getColonKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            StatementStatementParserRuleCall_1_0=norm1_Statement();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.start):null), (StatementStatementParserRuleCall_1_0!=null?((Token)StatementStatementParserRuleCall_1_0.stop):null), grammarAccess.getLabelledStatementAccess().getStatementAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThrowStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThrowStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThrowStatement_return ruleThrowStatement() throws RecognitionException {
        InternalN4JSParser.ruleThrowStatement_return retval = new InternalN4JSParser.ruleThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_19);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ThrowStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ThrowStatement_return norm1_ThrowStatement() throws RecognitionException {
        InternalN4JSParser.norm1_ThrowStatement_return retval = new InternalN4JSParser.norm1_ThrowStatement_return();
        retval.start = input.LT(1);

        Token ThrowKeyword_0=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            ThrowKeyword_0=(Token)match(input,Throw,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               promoteEOL(); announce(ThrowKeyword_0, grammarAccess.getThrowStatementAccess().getThrowKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_19);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getThrowStatementAccess().getExpressionAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getThrowStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTryStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTryStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTryStatement_return ruleTryStatement() throws RecognitionException {
        InternalN4JSParser.ruleTryStatement_return retval = new InternalN4JSParser.ruleTryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleCatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSParser.ruleFinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_91);
            BlockBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt237=2;
            int LA237_0 = input.LA(1);

            if ( (LA237_0==Catch) ) {
                alt237=1;
            }
            else if ( (LA237_0==Finally) ) {
                alt237=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 237, 0, input);

                throw nvae;
            }
            switch (alt237) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    CatchCatchBlockParserRuleCall_2_0_0_0=ruleCatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt236=2;
                    int LA236_0 = input.LA(1);

                    if ( (LA236_0==Finally) ) {
                        alt236=1;
                    }
                    switch (alt236) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=ruleFinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=ruleFinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TryStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TryStatement_return norm1_TryStatement() throws RecognitionException {
        InternalN4JSParser.norm1_TryStatement_return retval = new InternalN4JSParser.norm1_TryStatement_return();
        retval.start = input.LT(1);

        Token TryKeyword_0=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_CatchBlock_return CatchCatchBlockParserRuleCall_2_0_0_0 = null;

        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_0_1_0 = null;

        InternalN4JSParser.norm1_FinallyBlock_return FinallyFinallyBlockParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            TryKeyword_0=(Token)match(input,Try,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TryKeyword_0, grammarAccess.getTryStatementAccess().getTryKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_91);
            BlockBlockParserRuleCall_1_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.start):null), (BlockBlockParserRuleCall_1_0!=null?((Token)BlockBlockParserRuleCall_1_0.stop):null), grammarAccess.getTryStatementAccess().getBlockAssignment_1()); 
            }

            }


            }
            int alt239=2;
            int LA239_0 = input.LA(1);

            if ( (LA239_0==Catch) ) {
                alt239=1;
            }
            else if ( (LA239_0==Finally) ) {
                alt239=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 239, 0, input);

                throw nvae;
            }
            switch (alt239) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_92);
                    CatchCatchBlockParserRuleCall_2_0_0_0=norm1_CatchBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.start):null), (CatchCatchBlockParserRuleCall_2_0_0_0!=null?((Token)CatchCatchBlockParserRuleCall_2_0_0_0.stop):null), grammarAccess.getTryStatementAccess().getCatchAssignment_2_0_0()); 
                    }

                    }


                    }
                    int alt238=2;
                    int LA238_0 = input.LA(1);

                    if ( (LA238_0==Finally) ) {
                        alt238=1;
                    }
                    switch (alt238) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            FinallyFinallyBlockParserRuleCall_2_0_1_0=norm1_FinallyBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_0_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_0_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FinallyFinallyBlockParserRuleCall_2_1_0=norm1_FinallyBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.start):null), (FinallyFinallyBlockParserRuleCall_2_1_0!=null?((Token)FinallyFinallyBlockParserRuleCall_2_1_0.stop):null), grammarAccess.getTryStatementAccess().getFinallyAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchBlock_return ruleCatchBlock() throws RecognitionException {
        InternalN4JSParser.ruleCatchBlock_return retval = new InternalN4JSParser.ruleCatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.ruleCatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            CatchVariableCatchVariableParserRuleCall_3_0=ruleCatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchBlock_return norm1_CatchBlock() throws RecognitionException {
        InternalN4JSParser.norm1_CatchBlock_return retval = new InternalN4JSParser.norm1_CatchBlock_return();
        retval.start = input.LT(1);

        Token CatchKeyword_1=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_4=null;
        InternalN4JSParser.norm1_CatchVariable_return CatchVariableCatchVariableParserRuleCall_3_0 = null;

        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_5_0 = null;



            
        try {
            {
            {
            CatchKeyword_1=(Token)match(input,Catch,FOLLOW_46); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CatchKeyword_1, grammarAccess.getCatchBlockAccess().getCatchKeyword_1()); 
            }
            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_93); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getCatchBlockAccess().getLeftParenthesisKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            CatchVariableCatchVariableParserRuleCall_3_0=norm1_CatchVariable();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.start):null), (CatchVariableCatchVariableParserRuleCall_3_0!=null?((Token)CatchVariableCatchVariableParserRuleCall_3_0.stop):null), grammarAccess.getCatchBlockAccess().getCatchVariableAssignment_3()); 
            }

            }


            }

            RightParenthesisKeyword_4=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_4, grammarAccess.getCatchBlockAccess().getRightParenthesisKeyword_4()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_5_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.start):null), (BlockBlockParserRuleCall_5_0!=null?((Token)BlockBlockParserRuleCall_5_0.stop):null), grammarAccess.getCatchBlockAccess().getBlockAssignment_5()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCatchVariable() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCatchVariable();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCatchVariable_return ruleCatchVariable() throws RecognitionException {
        InternalN4JSParser.ruleCatchVariable_return retval = new InternalN4JSParser.ruleCatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;



            
        try {
            {
            int alt240=3;
            alt240 = dfa240.predict(input);
            switch (alt240) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CatchVariable_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CatchVariable_return norm1_CatchVariable() throws RecognitionException {
        InternalN4JSParser.norm1_CatchVariable_return retval = new InternalN4JSParser.norm1_CatchVariable_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingPattern_return BindingPatternBindingPatternParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_1_0_0_0 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_1_0_1 = null;

        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;



            
        try {
            {
            int alt241=3;
            alt241 = dfa241.predict(input);
            switch (alt241) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BindingPatternBindingPatternParserRuleCall_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.start):null), (BindingPatternBindingPatternParserRuleCall_0_0!=null?((Token)BindingPatternBindingPatternParserRuleCall_0_0.stop):null), grammarAccess.getCatchVariableAccess().getBindingPatternAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    NameBindingIdentifierParserRuleCall_1_0_0_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.start):null), (NameBindingIdentifierParserRuleCall_1_0_0_0!=null?((Token)NameBindingIdentifierParserRuleCall_1_0_0_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_1_0_0()); 
                    }

                    }


                    }
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_1_0_1=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.start):null), (ColonSepTypeRefParserRuleCall_1_0_1!=null?((Token)ColonSepTypeRefParserRuleCall_1_0_1.stop):null), grammarAccess.getCatchVariableAccess().getColonSepTypeRefParserRuleCall_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getCatchVariableAccess().getNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleFinallyBlock() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleFinallyBlock();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleFinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFinallyBlock_return ruleFinallyBlock() throws RecognitionException {
        InternalN4JSParser.ruleFinallyBlock_return retval = new InternalN4JSParser.ruleFinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSParser.ruleBlock_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FinallyBlock_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FinallyBlock_return norm1_FinallyBlock() throws RecognitionException {
        InternalN4JSParser.norm1_FinallyBlock_return retval = new InternalN4JSParser.norm1_FinallyBlock_return();
        retval.start = input.LT(1);

        Token FinallyKeyword_1=null;
        InternalN4JSParser.norm1_Block_return BlockBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            FinallyKeyword_1=(Token)match(input,Finally,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FinallyKeyword_1, grammarAccess.getFinallyBlockAccess().getFinallyKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BlockBlockParserRuleCall_2_0=norm1_Block();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.start):null), (BlockBlockParserRuleCall_2_0!=null?((Token)BlockBlockParserRuleCall_2_0.stop):null), grammarAccess.getFinallyBlockAccess().getBlockAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDebuggerStatement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDebuggerStatement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDebuggerStatement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDebuggerStatement_return ruleDebuggerStatement() throws RecognitionException {
        InternalN4JSParser.ruleDebuggerStatement_return retval = new InternalN4JSParser.ruleDebuggerStatement_return();
        retval.start = input.LT(1);

        Token DebuggerKeyword_1=null;
        InternalN4JSParser.ruleSemi_return SemiParserRuleCall_2 = null;



            
        try {
            {
            {
            DebuggerKeyword_1=(Token)match(input,Debugger,FOLLOW_19); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(DebuggerKeyword_1, grammarAccess.getDebuggerStatementAccess().getDebuggerKeyword_1()); 
            }
            pushFollow(FOLLOW_2);
            SemiParserRuleCall_2=ruleSemi();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.start):null), (SemiParserRuleCall_2!=null?((Token)SemiParserRuleCall_2.stop):null), grammarAccess.getDebuggerStatementAccess().getSemiParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePrimaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePrimaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePrimaryExpression_return rulePrimaryExpression() throws RecognitionException {
        InternalN4JSParser.rulePrimaryExpression_return retval = new InternalN4JSParser.rulePrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_3 = null;

        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_4 = null;

        InternalN4JSParser.ruleArrayLiteral_return ArrayLiteralParserRuleCall_5 = null;

        InternalN4JSParser.ruleObjectLiteral_return ObjectLiteralParserRuleCall_6 = null;

        InternalN4JSParser.ruleParenExpression_return ParenExpressionParserRuleCall_7 = null;

        InternalN4JSParser.ruleAnnotatedExpression_return AnnotatedExpressionParserRuleCall_8 = null;

        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_9 = null;

        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_10 = null;

        InternalN4JSParser.ruleN4ClassExpression_return N4ClassExpressionParserRuleCall_11 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateLiteralParserRuleCall_12 = null;



            
        try {
            {
            int alt242=13;
            alt242 = dfa242.predict(input);
            switch (alt242) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_3=ruleParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.start):null), (ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.start):null), (LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_5=ruleArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.start):null), (ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_6=ruleObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.start):null), (ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_7=ruleParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.start):null), (ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_8=ruleAnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.start):null), (AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.start):null), (FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.start):null), (AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_11=ruleN4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.start):null), (N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_12=ruleTemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.start):null), (TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PrimaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PrimaryExpression_return norm1_PrimaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PrimaryExpression_return retval = new InternalN4JSParser.norm1_PrimaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisLiteral_return ThisLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleSuperLiteral_return SuperLiteralParserRuleCall_1 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefParserRuleCall_2 = null;

        InternalN4JSParser.norm1_ParameterizedCallExpression_return ParameterizedCallExpressionParserRuleCall_3 = null;

        InternalN4JSParser.ruleLiteral_return LiteralParserRuleCall_4 = null;

        InternalN4JSParser.norm1_ArrayLiteral_return ArrayLiteralParserRuleCall_5 = null;

        InternalN4JSParser.norm1_ObjectLiteral_return ObjectLiteralParserRuleCall_6 = null;

        InternalN4JSParser.norm1_ParenExpression_return ParenExpressionParserRuleCall_7 = null;

        InternalN4JSParser.norm1_AnnotatedExpression_return AnnotatedExpressionParserRuleCall_8 = null;

        InternalN4JSParser.ruleFunctionExpression_return FunctionExpressionParserRuleCall_9 = null;

        InternalN4JSParser.ruleAsyncFunctionExpression_return AsyncFunctionExpressionParserRuleCall_10 = null;

        InternalN4JSParser.norm1_N4ClassExpression_return N4ClassExpressionParserRuleCall_11 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateLiteralParserRuleCall_12 = null;



            
        try {
            {
            int alt243=13;
            alt243 = dfa243.predict(input);
            switch (alt243) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisLiteralParserRuleCall_0=ruleThisLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.start):null), (ThisLiteralParserRuleCall_0!=null?((Token)ThisLiteralParserRuleCall_0.stop):null), grammarAccess.getPrimaryExpressionAccess().getThisLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    SuperLiteralParserRuleCall_1=ruleSuperLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.start):null), (SuperLiteralParserRuleCall_1!=null?((Token)SuperLiteralParserRuleCall_1.stop):null), grammarAccess.getPrimaryExpressionAccess().getSuperLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    IdentifierRefParserRuleCall_2=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.start):null), (IdentifierRefParserRuleCall_2!=null?((Token)IdentifierRefParserRuleCall_2.stop):null), grammarAccess.getPrimaryExpressionAccess().getIdentifierRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedCallExpressionParserRuleCall_3=norm1_ParameterizedCallExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.start):null), (ParameterizedCallExpressionParserRuleCall_3!=null?((Token)ParameterizedCallExpressionParserRuleCall_3.stop):null), grammarAccess.getPrimaryExpressionAccess().getParameterizedCallExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralParserRuleCall_4=ruleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.start):null), (LiteralParserRuleCall_4!=null?((Token)LiteralParserRuleCall_4.stop):null), grammarAccess.getPrimaryExpressionAccess().getLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayLiteralParserRuleCall_5=norm1_ArrayLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.start):null), (ArrayLiteralParserRuleCall_5!=null?((Token)ArrayLiteralParserRuleCall_5.stop):null), grammarAccess.getPrimaryExpressionAccess().getArrayLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectLiteralParserRuleCall_6=norm1_ObjectLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.start):null), (ObjectLiteralParserRuleCall_6!=null?((Token)ObjectLiteralParserRuleCall_6.stop):null), grammarAccess.getPrimaryExpressionAccess().getObjectLiteralParserRuleCall_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    pushFollow(FOLLOW_2);
                    ParenExpressionParserRuleCall_7=norm1_ParenExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.start):null), (ParenExpressionParserRuleCall_7!=null?((Token)ParenExpressionParserRuleCall_7.stop):null), grammarAccess.getPrimaryExpressionAccess().getParenExpressionParserRuleCall_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedExpressionParserRuleCall_8=norm1_AnnotatedExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.start):null), (AnnotatedExpressionParserRuleCall_8!=null?((Token)AnnotatedExpressionParserRuleCall_8.stop):null), grammarAccess.getPrimaryExpressionAccess().getAnnotatedExpressionParserRuleCall_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionExpressionParserRuleCall_9=ruleFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.start):null), (FunctionExpressionParserRuleCall_9!=null?((Token)FunctionExpressionParserRuleCall_9.stop):null), grammarAccess.getPrimaryExpressionAccess().getFunctionExpressionParserRuleCall_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AsyncFunctionExpressionParserRuleCall_10=ruleAsyncFunctionExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.start):null), (AsyncFunctionExpressionParserRuleCall_10!=null?((Token)AsyncFunctionExpressionParserRuleCall_10.stop):null), grammarAccess.getPrimaryExpressionAccess().getAsyncFunctionExpressionParserRuleCall_10()); 
                    }

                    }


                    }
                    break;
                case 12 :
                    {
                    pushFollow(FOLLOW_2);
                    N4ClassExpressionParserRuleCall_11=norm1_N4ClassExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.start):null), (N4ClassExpressionParserRuleCall_11!=null?((Token)N4ClassExpressionParserRuleCall_11.stop):null), grammarAccess.getPrimaryExpressionAccess().getN4ClassExpressionParserRuleCall_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    pushFollow(FOLLOW_2);
                    TemplateLiteralParserRuleCall_12=norm1_TemplateLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.start):null), (TemplateLiteralParserRuleCall_12!=null?((Token)TemplateLiteralParserRuleCall_12.stop):null), grammarAccess.getPrimaryExpressionAccess().getTemplateLiteralParserRuleCall_12()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParenExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParenExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParenExpression_return ruleParenExpression() throws RecognitionException {
        InternalN4JSParser.ruleParenExpression_return retval = new InternalN4JSParser.ruleParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParenExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParenExpression_return norm1_ParenExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParenExpression_return retval = new InternalN4JSParser.norm1_ParenExpression_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getParenExpressionAccess().getLeftParenthesisKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            ExpressionExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.start):null), (ExpressionExpressionParserRuleCall_1_0!=null?((Token)ExpressionExpressionParserRuleCall_1_0.stop):null), grammarAccess.getParenExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getParenExpressionAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierRef_return ruleIdentifierRef() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierRef_return retval = new InternalN4JSParser.ruleIdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IdentifierRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IdentifierRef_return norm1_IdentifierRef() throws RecognitionException {
        InternalN4JSParser.norm1_IdentifierRef_return retval = new InternalN4JSParser.norm1_IdentifierRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BindingIdentifier_return IdIdentifiableElementBindingIdentifierParserRuleCall_0_1 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            IdIdentifiableElementBindingIdentifierParserRuleCall_0_1=norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.start):null), (IdIdentifiableElementBindingIdentifierParserRuleCall_0_1!=null?((Token)IdIdentifiableElementBindingIdentifierParserRuleCall_0_1.stop):null), grammarAccess.getIdentifierRefAccess().getIdAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSuperLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSuperLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSuperLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSuperLiteral_return ruleSuperLiteral() throws RecognitionException {
        InternalN4JSParser.ruleSuperLiteral_return retval = new InternalN4JSParser.ruleSuperLiteral_return();
        retval.start = input.LT(1);

        Token SuperKeyword_1=null;


            
        try {
            {
            {
            SuperKeyword_1=(Token)match(input,Super,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SuperKeyword_1, grammarAccess.getSuperLiteralAccess().getSuperKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisLiteral_return ruleThisLiteral() throws RecognitionException {
        InternalN4JSParser.ruleThisLiteral_return retval = new InternalN4JSParser.ruleThisLiteral_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisLiteralAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayLiteral_return ruleArrayLiteral() throws RecognitionException {
        InternalN4JSParser.ruleArrayLiteral_return retval = new InternalN4JSParser.ruleArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.ruleArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_94); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop244:
            do {
                int alt244=2;
                int LA244_0 = input.LA(1);

                if ( (LA244_0==Comma) ) {
                    alt244=1;
                }


                switch (alt244) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_94);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop244;
                }
            } while (true);
            int alt249=2;
            int LA249_0 = input.LA(1);

            if ( ((LA249_0>=Intersection && LA249_0<=Implements)||(LA249_0>=Promisify && LA249_0<=Abstract)||(LA249_0>=External && LA249_0<=Function)||(LA249_0>=Private && LA249_0<=Delete)||LA249_0==Public||LA249_0==Static||(LA249_0>=Target && LA249_0<=Await_1)||LA249_0==Class||(LA249_0>=False && LA249_0<=Super)||LA249_0==Union||(LA249_0>=Yield && LA249_0<=This)||(LA249_0>=From && LA249_0<=Void)||LA249_0==FullStopFullStopFullStop||(LA249_0>=Get && LA249_0<=Set)||LA249_0==PlusSignPlusSign||LA249_0==HyphenMinusHyphenMinus||LA249_0==SolidusEqualsSign||LA249_0==As||LA249_0==Of||LA249_0==ExclamationMark||LA249_0==LeftParenthesis||LA249_0==PlusSign||LA249_0==HyphenMinus||LA249_0==Solidus||LA249_0==LessThanSign||(LA249_0>=CommercialAt && LA249_0<=LeftSquareBracket)||LA249_0==LeftCurlyBracket||LA249_0==Tilde||LA249_0==RULE_DOUBLE||(LA249_0>=RULE_HEX_INT && LA249_0<=RULE_LEGACY_OCTAL_INT)||LA249_0==RULE_SCIENTIFIC_INT||LA249_0==RULE_IDENTIFIER||LA249_0==RULE_STRING||(LA249_0>=RULE_TEMPLATE_HEAD && LA249_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA249_0==RULE_INT) ) {
                alt249=1;
            }
            switch (alt249) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    ElementsArrayElementParserRuleCall_3_0_0=ruleArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop246:
                    do {
                        int alt246=2;
                        alt246 = dfa246.predict(input);
                        switch (alt246) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop245:
                    	    do {
                    	        int alt245=2;
                    	        int LA245_0 = input.LA(1);

                    	        if ( (LA245_0==Comma) ) {
                    	            alt245=1;
                    	        }


                    	        switch (alt245) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_96);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop245;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_95);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=ruleArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop246;
                        }
                    } while (true);
                    int alt248=2;
                    int LA248_0 = input.LA(1);

                    if ( (LA248_0==Comma) ) {
                        alt248=1;
                    }
                    switch (alt248) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_95); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop247:
                            do {
                                int alt247=2;
                                int LA247_0 = input.LA(1);

                                if ( (LA247_0==Comma) ) {
                                    alt247=1;
                                }


                                switch (alt247) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_95);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop247;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayLiteral_return norm1_ArrayLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayLiteral_return retval = new InternalN4JSParser.norm1_ArrayLiteral_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token TrailingCommaCommaKeyword_3_2_0_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.norm1_ArrayElement_return ElementsArrayElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleArrayPadding_return ElementsArrayPaddingParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_94); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayLiteralAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop250:
            do {
                int alt250=2;
                int LA250_0 = input.LA(1);

                if ( (LA250_0==Comma) ) {
                    alt250=1;
                }


                switch (alt250) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_94);
            	    ElementsArrayPaddingParserRuleCall_2_0=ruleArrayPadding();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.start):null), (ElementsArrayPaddingParserRuleCall_2_0!=null?((Token)ElementsArrayPaddingParserRuleCall_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop250;
                }
            } while (true);
            int alt255=2;
            int LA255_0 = input.LA(1);

            if ( ((LA255_0>=Intersection && LA255_0<=Implements)||(LA255_0>=Promisify && LA255_0<=Abstract)||(LA255_0>=External && LA255_0<=Function)||(LA255_0>=Private && LA255_0<=Delete)||LA255_0==Public||LA255_0==Static||(LA255_0>=Target && LA255_0<=Await_1)||LA255_0==Class||(LA255_0>=False && LA255_0<=Super)||LA255_0==Union||(LA255_0>=Yield && LA255_0<=This)||(LA255_0>=From && LA255_0<=Void)||LA255_0==FullStopFullStopFullStop||(LA255_0>=Get && LA255_0<=Set)||LA255_0==PlusSignPlusSign||LA255_0==HyphenMinusHyphenMinus||LA255_0==SolidusEqualsSign||LA255_0==As||LA255_0==Of||LA255_0==ExclamationMark||LA255_0==LeftParenthesis||LA255_0==PlusSign||LA255_0==HyphenMinus||LA255_0==Solidus||LA255_0==LessThanSign||(LA255_0>=CommercialAt && LA255_0<=LeftSquareBracket)||LA255_0==LeftCurlyBracket||LA255_0==Tilde||LA255_0==RULE_DOUBLE||(LA255_0>=RULE_HEX_INT && LA255_0<=RULE_LEGACY_OCTAL_INT)||LA255_0==RULE_SCIENTIFIC_INT||LA255_0==RULE_IDENTIFIER||LA255_0==RULE_STRING||(LA255_0>=RULE_TEMPLATE_HEAD && LA255_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA255_0==RULE_INT) ) {
                alt255=1;
            }
            switch (alt255) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    ElementsArrayElementParserRuleCall_3_0_0=norm1_ArrayElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.start):null), (ElementsArrayElementParserRuleCall_3_0_0!=null?((Token)ElementsArrayElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop252:
                    do {
                        int alt252=2;
                        alt252 = dfa252.predict(input);
                        switch (alt252) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_96); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayLiteralAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop251:
                    	    do {
                    	        int alt251=2;
                    	        int LA251_0 = input.LA(1);

                    	        if ( (LA251_0==Comma) ) {
                    	            alt251=1;
                    	        }


                    	        switch (alt251) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_96);
                    	    	    ElementsArrayPaddingParserRuleCall_3_1_1_0=ruleArrayPadding();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_1_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop251;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_95);
                    	    ElementsArrayElementParserRuleCall_3_1_2_0=norm1_ArrayElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.start):null), (ElementsArrayElementParserRuleCall_3_1_2_0!=null?((Token)ElementsArrayElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop252;
                        }
                    } while (true);
                    int alt254=2;
                    int LA254_0 = input.LA(1);

                    if ( (LA254_0==Comma) ) {
                        alt254=1;
                    }
                    switch (alt254) {
                        case 1 :
                            {
                            {
                            {
                            TrailingCommaCommaKeyword_3_2_0_0=(Token)match(input,Comma,FOLLOW_95); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(TrailingCommaCommaKeyword_3_2_0_0, grammarAccess.getArrayLiteralAccess().getTrailingCommaCommaKeyword_3_2_0_0()); 
                            }

                            }


                            }
                            loop253:
                            do {
                                int alt253=2;
                                int LA253_0 = input.LA(1);

                                if ( (LA253_0==Comma) ) {
                                    alt253=1;
                                }


                                switch (alt253) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_95);
                            	    ElementsArrayPaddingParserRuleCall_3_2_1_0=ruleArrayPadding();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.start):null), (ElementsArrayPaddingParserRuleCall_3_2_1_0!=null?((Token)ElementsArrayPaddingParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayLiteralAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop253;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayLiteralAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayPadding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayPadding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayPadding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayPadding_return ruleArrayPadding() throws RecognitionException {
        InternalN4JSParser.ruleArrayPadding_return retval = new InternalN4JSParser.ruleArrayPadding_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getArrayPaddingAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayElement_return ruleArrayElement() throws RecognitionException {
        InternalN4JSParser.ruleArrayElement_return retval = new InternalN4JSParser.ruleArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt256=2;
            int LA256_0 = input.LA(1);

            if ( (LA256_0==FullStopFullStopFullStop) ) {
                alt256=1;
            }
            switch (alt256) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayElement_return norm1_ArrayElement() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayElement_return retval = new InternalN4JSParser.norm1_ArrayElement_return();
        retval.start = input.LT(1);

        Token SpreadFullStopFullStopFullStopKeyword_1_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt257=2;
            int LA257_0 = input.LA(1);

            if ( (LA257_0==FullStopFullStopFullStop) ) {
                alt257=1;
            }
            switch (alt257) {
                case 1 :
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0, grammarAccess.getArrayElementAccess().getSpreadFullStopFullStopFullStopKeyword_1_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_2_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_0.stop):null), grammarAccess.getArrayElementAccess().getExpressionAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectLiteral_return ruleObjectLiteral() throws RecognitionException {
        InternalN4JSParser.ruleObjectLiteral_return retval = new InternalN4JSParser.ruleObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSParser.rulePropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_97); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt260=2;
            int LA260_0 = input.LA(1);

            if ( ((LA260_0>=Intersection && LA260_0<=With)||(LA260_0>=For && LA260_0<=Var)||(LA260_0>=As && LA260_0<=Of)||LA260_0==Asterisk||LA260_0==LessThanSign||(LA260_0>=QuestionMark && LA260_0<=LeftSquareBracket)||LA260_0==LeftCurlyBracket||LA260_0==Tilde||LA260_0==RULE_DOUBLE||LA260_0==RULE_HEX_INT||LA260_0==RULE_OCTAL_INT||LA260_0==RULE_SCIENTIFIC_INT||LA260_0==RULE_IDENTIFIER||LA260_0==RULE_STRING||LA260_0==RULE_INT) ) {
                alt260=1;
            }
            switch (alt260) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=rulePropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop258:
                    do {
                        int alt258=2;
                        int LA258_0 = input.LA(1);

                        if ( (LA258_0==Comma) ) {
                            int LA258_1 = input.LA(2);

                            if ( ((LA258_1>=Intersection && LA258_1<=With)||(LA258_1>=For && LA258_1<=Var)||(LA258_1>=As && LA258_1<=Of)||LA258_1==Asterisk||LA258_1==LessThanSign||(LA258_1>=QuestionMark && LA258_1<=LeftSquareBracket)||LA258_1==LeftCurlyBracket||LA258_1==Tilde||LA258_1==RULE_DOUBLE||LA258_1==RULE_HEX_INT||LA258_1==RULE_OCTAL_INT||LA258_1==RULE_SCIENTIFIC_INT||LA258_1==RULE_IDENTIFIER||LA258_1==RULE_STRING||LA258_1==RULE_INT) ) {
                                alt258=1;
                            }


                        }


                        switch (alt258) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=rulePropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop258;
                        }
                    } while (true);
                    int alt259=2;
                    int LA259_0 = input.LA(1);

                    if ( (LA259_0==Comma) ) {
                        alt259=1;
                    }
                    switch (alt259) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectLiteral_return norm1_ObjectLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectLiteral_return retval = new InternalN4JSParser.norm1_ObjectLiteral_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token CommaKeyword_2_2=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0 = null;

        InternalN4JSParser.norm1_PropertyAssignment_return PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_97); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectLiteralAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt263=2;
            int LA263_0 = input.LA(1);

            if ( ((LA263_0>=Intersection && LA263_0<=With)||(LA263_0>=For && LA263_0<=Var)||(LA263_0>=As && LA263_0<=Of)||LA263_0==Asterisk||LA263_0==LessThanSign||(LA263_0>=QuestionMark && LA263_0<=LeftSquareBracket)||LA263_0==LeftCurlyBracket||LA263_0==Tilde||LA263_0==RULE_DOUBLE||LA263_0==RULE_HEX_INT||LA263_0==RULE_OCTAL_INT||LA263_0==RULE_SCIENTIFIC_INT||LA263_0==RULE_IDENTIFIER||LA263_0==RULE_STRING||LA263_0==RULE_INT) ) {
                alt263=1;
            }
            switch (alt263) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0=norm1_PropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_0()); 
                    }

                    }


                    }
                    loop261:
                    do {
                        int alt261=2;
                        int LA261_0 = input.LA(1);

                        if ( (LA261_0==Comma) ) {
                            int LA261_1 = input.LA(2);

                            if ( ((LA261_1>=Intersection && LA261_1<=With)||(LA261_1>=For && LA261_1<=Var)||(LA261_1>=As && LA261_1<=Of)||LA261_1==Asterisk||LA261_1==LessThanSign||(LA261_1>=QuestionMark && LA261_1<=LeftSquareBracket)||LA261_1==LeftCurlyBracket||LA261_1==Tilde||LA261_1==RULE_DOUBLE||LA261_1==RULE_HEX_INT||LA261_1==RULE_OCTAL_INT||LA261_1==RULE_SCIENTIFIC_INT||LA261_1==RULE_IDENTIFIER||LA261_1==RULE_STRING||LA261_1==RULE_INT) ) {
                                alt261=1;
                            }


                        }


                        switch (alt261) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_98); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0=norm1_PropertyAssignment();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.start):null), (PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0!=null?((Token)PropertyAssignmentsPropertyAssignmentParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectLiteralAccess().getPropertyAssignmentsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop261;
                        }
                    } while (true);
                    int alt262=2;
                    int LA262_0 = input.LA(1);

                    if ( (LA262_0==Comma) ) {
                        alt262=1;
                    }
                    switch (alt262) {
                        case 1 :
                            {
                            CommaKeyword_2_2=(Token)match(input,Comma,FOLLOW_24); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_2_2, grammarAccess.getObjectLiteralAccess().getCommaKeyword_2_2()); 
                            }

                            }
                            break;

                    }


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectLiteralAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignment_return rulePropertyAssignment() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignment_return retval = new InternalN4JSParser.rulePropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSParser.rulePropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSParser.rulePropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.rulePropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.rulePropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.rulePropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt264=6;
            alt264 = dfa264.predict(input);
            switch (alt264) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=ruleAnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=rulePropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=rulePropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=rulePropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=rulePropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=rulePropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyAssignment_return norm1_PropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyAssignment_return retval = new InternalN4JSParser.norm1_PropertyAssignment_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return AnnotatedPropertyAssignmentParserRuleCall_0 = null;

        InternalN4JSParser.norm1_PropertyNameValuePair_return PropertyNameValuePairParserRuleCall_1 = null;

        InternalN4JSParser.norm1_PropertyGetterDeclaration_return PropertyGetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.norm1_PropertySetterDeclaration_return PropertySetterDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.norm1_PropertyMethodDeclaration_return PropertyMethodDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return PropertyNameValuePairSingleNameParserRuleCall_5 = null;



            
        try {
            {
            int alt265=6;
            alt265 = dfa265.predict(input);
            switch (alt265) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedPropertyAssignmentParserRuleCall_0=norm1_AnnotatedPropertyAssignment();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.start):null), (AnnotatedPropertyAssignmentParserRuleCall_0!=null?((Token)AnnotatedPropertyAssignmentParserRuleCall_0.stop):null), grammarAccess.getPropertyAssignmentAccess().getAnnotatedPropertyAssignmentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairParserRuleCall_1=norm1_PropertyNameValuePair();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.start):null), (PropertyNameValuePairParserRuleCall_1!=null?((Token)PropertyNameValuePairParserRuleCall_1.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyGetterDeclarationParserRuleCall_2=norm1_PropertyGetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.start):null), (PropertyGetterDeclarationParserRuleCall_2!=null?((Token)PropertyGetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyGetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertySetterDeclarationParserRuleCall_3=norm1_PropertySetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.start):null), (PropertySetterDeclarationParserRuleCall_3!=null?((Token)PropertySetterDeclarationParserRuleCall_3.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertySetterDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PropertyMethodDeclarationParserRuleCall_4=norm1_PropertyMethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.start):null), (PropertyMethodDeclarationParserRuleCall_4!=null?((Token)PropertyMethodDeclarationParserRuleCall_4.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyMethodDeclarationParserRuleCall_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    PropertyNameValuePairSingleNameParserRuleCall_5=norm1_PropertyNameValuePairSingleName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.start):null), (PropertyNameValuePairSingleNameParserRuleCall_5!=null?((Token)PropertyNameValuePairSingleNameParserRuleCall_5.stop):null), grammarAccess.getPropertyAssignmentAccess().getPropertyNameValuePairSingleNameParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedPropertyAssignment() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedPropertyAssignment();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedPropertyAssignment_return ruleAnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedPropertyAssignment_return retval = new InternalN4JSParser.ruleAnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_99);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt273=5;
            alt273 = dfa273.predict(input);
            switch (alt273) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt266=2;
                    alt266 = dfa266.predict(input);
                    switch (alt266) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_100);
                            DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_90);
                    LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2()); 
                    }
                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_46);
                    LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2()); 
                    }

                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_48);
                    FparFormalParameterParserRuleCall_1_2_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt267=2;
                    int LA267_0 = input.LA(1);

                    if ( (LA267_0==LessThanSign) ) {
                        alt267=1;
                    }
                    switch (alt267) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_101);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt268=2;
                    alt268 = dfa268.predict(input);
                    switch (alt268) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_101);
                            ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt269=2;
                    int LA269_0 = input.LA(1);

                    if ( (LA269_0==Asterisk) ) {
                        alt269=1;
                    }
                    else if ( ((LA269_0>=Intersection && LA269_0<=With)||(LA269_0>=For && LA269_0<=Var)||(LA269_0>=As && LA269_0<=Of)||LA269_0==LeftSquareBracket||LA269_0==RULE_DOUBLE||LA269_0==RULE_HEX_INT||LA269_0==RULE_OCTAL_INT||LA269_0==RULE_SCIENTIFIC_INT||LA269_0==RULE_IDENTIFIER||LA269_0==RULE_STRING||LA269_0==RULE_INT) ) {
                        alt269=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 269, 0, input);

                        throw nvae;
                    }
                    switch (alt269) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_41);
                            LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1()); 
                            }
                            {
                            pushFollow(FOLLOW_102);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_40);
                            LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0()); 
                            }
                            {
                            pushFollow(FOLLOW_102);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt270=2;
                    int LA270_0 = input.LA(1);

                    if ( (LA270_0==Semicolon) ) {
                        alt270=1;
                    }
                    switch (alt270) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt271=2;
                    alt271 = dfa271.predict(input);
                    switch (alt271) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_9);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_69);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=ruleIdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt272=2;
                    int LA272_0 = input.LA(1);

                    if ( (LA272_0==EqualsSign) ) {
                        alt272=1;
                    }
                    switch (alt272) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedPropertyAssignment_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return norm1_AnnotatedPropertyAssignment() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return retval = new InternalN4JSParser.norm1_AnnotatedPropertyAssignment_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0_0_0_3=null;
        Token SetKeyword_1_2_0_0_1=null;
        Token LeftParenthesisKeyword_1_2_1=null;
        Token RightParenthesisKeyword_1_2_3=null;
        Token GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_3_1=null;
        Token EqualsSignKeyword_1_4_3_0=null;
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return PropertyAssignmentAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_1_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_2_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_2_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_3_0_0_1 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_4_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_99);
            PropertyAssignmentAnnotationListParserRuleCall_0=rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.start):null), (PropertyAssignmentAnnotationListParserRuleCall_0!=null?((Token)PropertyAssignmentAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getPropertyAssignmentAnnotationListParserRuleCall_0()); 
            }
            int alt281=5;
            alt281 = dfa281.predict(input);
            switch (alt281) {
                case 1 :
                    {
                    {
                    {
                    {
                    int alt274=2;
                    alt274 = dfa274.predict(input);
                    switch (alt274) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_100);
                            DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_0_0_0_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_90);
                    LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2()); 
                    }
                    ColonKeyword_1_0_0_0_3=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0_0_0_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getColonKeyword_1_0_0_0_3()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_1_0_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_13);
                    GetterHeaderParserRuleCall_1_1_0_0_1=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.start):null), (GetterHeaderParserRuleCall_1_1_0_0_1!=null?((Token)GetterHeaderParserRuleCall_1_1_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getGetterHeaderParserRuleCall_1_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_1_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.start):null), (BodyBlockParserRuleCall_1_1_1_0!=null?((Token)BodyBlockParserRuleCall_1_1_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    SetKeyword_1_2_0_0_1=(Token)match(input,Set,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_2_0_0_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSetKeyword_1_2_0_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_46);
                    LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2()); 
                    }

                    }


                    }


                    }

                    LeftParenthesisKeyword_1_2_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_2_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getLeftParenthesisKeyword_1_2_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_48);
                    FparFormalParameterParserRuleCall_1_2_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.start):null), (FparFormalParameterParserRuleCall_1_2_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_2_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getFparAssignment_1_2_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_2_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2_3, grammarAccess.getAnnotatedPropertyAssignmentAccess().getRightParenthesisKeyword_1_2_3()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_2_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.start):null), (BodyBlockParserRuleCall_1_2_4_0!=null?((Token)BodyBlockParserRuleCall_1_2_4_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getBodyAssignment_1_2_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    {
                    {
                    int alt275=2;
                    int LA275_0 = input.LA(1);

                    if ( (LA275_0==LessThanSign) ) {
                        alt275=1;
                    }
                    switch (alt275) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_101);
                            TypeVariablesParserRuleCall_1_3_0_0_1=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.start):null), (TypeVariablesParserRuleCall_1_3_0_0_1!=null?((Token)TypeVariablesParserRuleCall_1_3_0_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getTypeVariablesParserRuleCall_1_3_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt276=2;
                    alt276 = dfa276.predict(input);
                    switch (alt276) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_101);
                            ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getReturnTypeRefAssignment_1_3_0_0_2()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt277=2;
                    int LA277_0 = input.LA(1);

                    if ( (LA277_0==Asterisk) ) {
                        alt277=1;
                    }
                    else if ( ((LA277_0>=Intersection && LA277_0<=With)||(LA277_0>=For && LA277_0<=Var)||(LA277_0>=As && LA277_0<=Of)||LA277_0==LeftSquareBracket||LA277_0==RULE_DOUBLE||LA277_0==RULE_HEX_INT||LA277_0==RULE_OCTAL_INT||LA277_0==RULE_SCIENTIFIC_INT||LA277_0==RULE_IDENTIFIER||LA277_0==RULE_STRING||LA277_0==RULE_INT) ) {
                        alt277=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 277, 0, input);

                        throw nvae;
                    }
                    switch (alt277) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getGeneratorAsteriskKeyword_1_3_0_0_3_0_0_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_41);
                            LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1()); 
                            }
                            {
                            pushFollow(FOLLOW_102);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2=norm1_MethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_40);
                            LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0()); 
                            }
                            {
                            pushFollow(FOLLOW_102);
                            MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1=ruleMethodParamsAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getMethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt278=2;
                    int LA278_0 = input.LA(1);

                    if ( (LA278_0==Semicolon) ) {
                        alt278=1;
                    }
                    switch (alt278) {
                        case 1 :
                            {
                            SemicolonKeyword_1_3_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_3_1, grammarAccess.getAnnotatedPropertyAssignmentAccess().getSemicolonKeyword_1_3_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    int alt279=2;
                    alt279 = dfa279.predict(input);
                    switch (alt279) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_9);
                            DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0=ruleTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getDeclaredTypeRefAssignment_1_4_1()); 
                            }

                            }


                            }
                            break;

                    }
                    {
                    {
                    pushFollow(FOLLOW_69);
                    IdentifierRefIdentifierRefParserRuleCall_1_4_2_0=norm1_IdentifierRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_4_2_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getIdentifierRefAssignment_1_4_2()); 
                    }

                    }


                    }
                    int alt280=2;
                    int LA280_0 = input.LA(1);

                    if ( (LA280_0==EqualsSign) ) {
                        alt280=1;
                    }
                    switch (alt280) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_4_3_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_4_3_0, grammarAccess.getAnnotatedPropertyAssignmentAccess().getEqualsSignKeyword_1_4_3_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0.stop):null), grammarAccess.getAnnotatedPropertyAssignmentAccess().getExpressionAssignment_1_4_3_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyMethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyMethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyMethodDeclaration_return rulePropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyMethodDeclaration_return retval = new InternalN4JSParser.rulePropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt282=2;
            int LA282_0 = input.LA(1);

            if ( (LA282_0==LessThanSign) ) {
                alt282=1;
            }
            switch (alt282) {
                case 1 :
                    {
                    pushFollow(FOLLOW_101);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt283=2;
            alt283 = dfa283.predict(input);
            switch (alt283) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_101);
                    ReturnTypeRefTypeRefParserRuleCall_0_0_2_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt284=2;
            int LA284_0 = input.LA(1);

            if ( (LA284_0==Asterisk) ) {
                alt284=1;
            }
            else if ( ((LA284_0>=Intersection && LA284_0<=With)||(LA284_0>=For && LA284_0<=Var)||(LA284_0>=As && LA284_0<=Of)||LA284_0==LeftSquareBracket||LA284_0==RULE_DOUBLE||LA284_0==RULE_HEX_INT||LA284_0==RULE_OCTAL_INT||LA284_0==RULE_SCIENTIFIC_INT||LA284_0==RULE_IDENTIFIER||LA284_0==RULE_STRING||LA284_0==RULE_INT) ) {
                alt284=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 284, 0, input);

                throw nvae;
            }
            switch (alt284) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_41);
                    LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_102);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_40);
                    LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_102);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt285=2;
            int LA285_0 = input.LA(1);

            if ( (LA285_0==Semicolon) ) {
                alt285=1;
            }
            switch (alt285) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyMethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyMethodDeclaration_return norm1_PropertyMethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyMethodDeclaration_return retval = new InternalN4JSParser.norm1_PropertyMethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1 = null;

        InternalN4JSParser.norm1_MethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0 = null;

        InternalN4JSParser.ruleMethodParamsAndBody_return MethodParamsAndBodyParserRuleCall_0_0_3_1_1 = null;



            
        try {
            {
            {
            {
            {
            int alt286=2;
            int LA286_0 = input.LA(1);

            if ( (LA286_0==LessThanSign) ) {
                alt286=1;
            }
            switch (alt286) {
                case 1 :
                    {
                    pushFollow(FOLLOW_101);
                    TypeVariablesParserRuleCall_0_0_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.start):null), (TypeVariablesParserRuleCall_0_0_1!=null?((Token)TypeVariablesParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_1()); 
                    }

                    }
                    break;

            }
            int alt287=2;
            alt287 = dfa287.predict(input);
            switch (alt287) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_101);
                    ReturnTypeRefTypeRefParserRuleCall_0_0_2_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_2_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_0_0_2_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_0_0_2_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getReturnTypeRefAssignment_0_0_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt288=2;
            int LA288_0 = input.LA(1);

            if ( (LA288_0==Asterisk) ) {
                alt288=1;
            }
            else if ( ((LA288_0>=Intersection && LA288_0<=With)||(LA288_0>=For && LA288_0<=Var)||(LA288_0>=As && LA288_0<=Of)||LA288_0==LeftSquareBracket||LA288_0==RULE_DOUBLE||LA288_0==RULE_HEX_INT||LA288_0==RULE_OCTAL_INT||LA288_0==RULE_SCIENTIFIC_INT||LA288_0==RULE_IDENTIFIER||LA288_0==RULE_STRING||LA288_0==RULE_INT) ) {
                alt288=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 288, 0, input);

                throw nvae;
            }
            switch (alt288) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getPropertyMethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_41);
                    LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_102);
                    MethodParamsAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_40);
                    LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_0()); 
                    }
                    {
                    pushFollow(FOLLOW_102);
                    MethodParamsAndBodyParserRuleCall_0_0_3_1_1=ruleMethodParamsAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.start):null), (MethodParamsAndBodyParserRuleCall_0_0_3_1_1!=null?((Token)MethodParamsAndBodyParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getPropertyMethodDeclarationAccess().getMethodParamsAndBodyParserRuleCall_0_0_3_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt289=2;
            int LA289_0 = input.LA(1);

            if ( (LA289_0==Semicolon) ) {
                alt289=1;
            }
            switch (alt289) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getPropertyMethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePair() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePair();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePair_return rulePropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePair_return retval = new InternalN4JSParser.rulePropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt290=2;
            alt290 = dfa290.predict(input);
            switch (alt290) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_100);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_90);
            LiteralOrComputedPropertyNameParserRuleCall_0_0_2=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_2.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_2.stop):null), grammarAccess.getPropertyNameValuePairAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_2()); 
            }
            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePair_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePair_return norm1_PropertyNameValuePair() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePair_return retval = new InternalN4JSParser.norm1_PropertyNameValuePair_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_3=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt291=2;
            alt291 = dfa291.predict(input);
            switch (alt291) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_100);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getDeclaredTypeRefAssignment_0_0_1()); 
                    }

                    }


                    }
                    break;

            }

            pushFollow(FOLLOW_90);
            LiteralOrComputedPropertyNameParserRuleCall_0_0_2=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_2.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_2.stop):null), grammarAccess.getPropertyNameValuePairAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_2()); 
            }
            ColonKeyword_0_0_3=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ColonKeyword_0_0_3, grammarAccess.getPropertyNameValuePairAccess().getColonKeyword_0_0_3()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyNameValuePairSingleName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyNameValuePairSingleName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyNameValuePairSingleName_return rulePropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.rulePropertyNameValuePairSingleName_return retval = new InternalN4JSParser.rulePropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt292=2;
            alt292 = dfa292.predict(input);
            switch (alt292) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_69);
            IdentifierRefIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt293=2;
            int LA293_0 = input.LA(1);

            if ( (LA293_0==EqualsSign) ) {
                alt293=1;
            }
            switch (alt293) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyNameValuePairSingleName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return norm1_PropertyNameValuePairSingleName() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return retval = new InternalN4JSParser.norm1_PropertyNameValuePairSingleName_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_2_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_0_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return IdentifierRefIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt294=2;
            alt294 = dfa294.predict(input);
            switch (alt294) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_9);
                    DeclaredTypeRefTypeRefParserRuleCall_0_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_0_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_0_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getDeclaredTypeRefAssignment_0()); 
                    }

                    }


                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_69);
            IdentifierRefIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.start):null), (IdentifierRefIdentifierRefParserRuleCall_1_0!=null?((Token)IdentifierRefIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getIdentifierRefAssignment_1()); 
            }

            }


            }
            int alt295=2;
            int LA295_0 = input.LA(1);

            if ( (LA295_0==EqualsSign) ) {
                alt295=1;
            }
            switch (alt295) {
                case 1 :
                    {
                    EqualsSignKeyword_2_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_2_0, grammarAccess.getPropertyNameValuePairSingleNameAccess().getEqualsSignKeyword_2_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_2_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_2_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_2_1_0.stop):null), grammarAccess.getPropertyNameValuePairSingleNameAccess().getExpressionAssignment_2_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyGetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyGetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyGetterDeclaration_return rulePropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertyGetterDeclaration_return retval = new InternalN4JSParser.rulePropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertyGetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertyGetterDeclaration_return norm1_PropertyGetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertyGetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertyGetterDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_13);
            GetterHeaderParserRuleCall_0_0_1=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.start):null), (GetterHeaderParserRuleCall_0_0_1!=null?((Token)GetterHeaderParserRuleCall_0_0_1.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_1_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getPropertyGetterDeclarationAccess().getBodyAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertySetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertySetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertySetterDeclaration_return rulePropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.rulePropertySetterDeclaration_return retval = new InternalN4JSParser.rulePropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_46);
            LiteralOrComputedPropertyNameParserRuleCall_0_0_2=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_2.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_2.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_2()); 
            }

            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PropertySetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PropertySetterDeclaration_return norm1_PropertySetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_PropertySetterDeclaration_return retval = new InternalN4JSParser.norm1_PropertySetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getPropertySetterDeclarationAccess().getSetKeyword_0_0_1()); 
            }
            {
            pushFollow(FOLLOW_46);
            LiteralOrComputedPropertyNameParserRuleCall_0_0_2=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_2.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_2!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_2.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_2()); 
            }

            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getPropertySetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getPropertySetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            {
            {
            pushFollow(FOLLOW_2);
            BodyBlockParserRuleCall_4_0=ruleBlock();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getPropertySetterDeclarationAccess().getBodyAssignment_4()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedCallExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedCallExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedCallExpression_return ruleParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedCallExpression_return retval = new InternalN4JSParser.ruleParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSParser.ruleIdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_9);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_46);
            TargetIdentifierRefParserRuleCall_1_0=ruleIdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=ruleArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedCallExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedCallExpression_return norm1_ParameterizedCallExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedCallExpression_return retval = new InternalN4JSParser.norm1_ParameterizedCallExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_0 = null;

        InternalN4JSParser.norm1_IdentifierRef_return TargetIdentifierRefParserRuleCall_1_0 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_2 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_9);
            TypeArgumentsParserRuleCall_0=ruleTypeArguments();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.start):null), (TypeArgumentsParserRuleCall_0!=null?((Token)TypeArgumentsParserRuleCall_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTypeArgumentsParserRuleCall_0()); 
            }
            {
            {
            pushFollow(FOLLOW_46);
            TargetIdentifierRefParserRuleCall_1_0=norm1_IdentifierRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.start):null), (TargetIdentifierRefParserRuleCall_1_0!=null?((Token)TargetIdentifierRefParserRuleCall_1_0.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getTargetAssignment_1()); 
            }

            }


            }

            pushFollow(FOLLOW_2);
            ArgumentsWithParenthesesParserRuleCall_2=norm1_ArgumentsWithParentheses();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.start):null), (ArgumentsWithParenthesesParserRuleCall_2!=null?((Token)ArgumentsWithParenthesesParserRuleCall_2.stop):null), grammarAccess.getParameterizedCallExpressionAccess().getArgumentsWithParenthesesParserRuleCall_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLeftHandSideExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLeftHandSideExpression_return ruleLeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.ruleLeftHandSideExpression_return retval = new InternalN4JSParser.ruleLeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleMemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSParser.ruleArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_103);
            MemberExpressionParserRuleCall_0=ruleMemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt297=2;
            int LA297_0 = input.LA(1);

            if ( (LA297_0==LeftParenthesis) ) {
                alt297=1;
            }
            switch (alt297) {
                case 1 :
                    {
                    pushFollow(FOLLOW_104);
                    ArgumentsWithParenthesesParserRuleCall_1_1=ruleArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop296:
                    do {
                        int alt296=5;
                        int LA296_0 = input.LA(1);

                        if ( (LA296_0==LeftParenthesis) ) {
                            alt296=1;
                        }
                        else if ( (LA296_0==LeftSquareBracket) ) {
                            alt296=2;
                        }
                        else if ( (LA296_0==FullStop) ) {
                            alt296=3;
                        }
                        else if ( (LA296_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred163_InternalN4JSParser())) {
                            alt296=4;
                        }
                        else if ( (LA296_0==RULE_TEMPLATE_HEAD) && (synpred163_InternalN4JSParser())) {
                            alt296=4;
                        }


                        switch (alt296) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=ruleArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop296;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LeftHandSideExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LeftHandSideExpression_return norm1_LeftHandSideExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LeftHandSideExpression_return retval = new InternalN4JSParser.norm1_LeftHandSideExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_MemberExpression_return MemberExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_1 = null;

        InternalN4JSParser.norm1_ArgumentsWithParentheses_return ArgumentsWithParenthesesParserRuleCall_1_2_0_1 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_2_1_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_103);
            MemberExpressionParserRuleCall_0=norm1_MemberExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.start):null), (MemberExpressionParserRuleCall_0!=null?((Token)MemberExpressionParserRuleCall_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getMemberExpressionParserRuleCall_0()); 
            }
            int alt299=2;
            int LA299_0 = input.LA(1);

            if ( (LA299_0==LeftParenthesis) ) {
                alt299=1;
            }
            switch (alt299) {
                case 1 :
                    {
                    pushFollow(FOLLOW_104);
                    ArgumentsWithParenthesesParserRuleCall_1_1=norm1_ArgumentsWithParentheses();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_1()); 
                    }
                    loop298:
                    do {
                        int alt298=5;
                        int LA298_0 = input.LA(1);

                        if ( (LA298_0==LeftParenthesis) ) {
                            alt298=1;
                        }
                        else if ( (LA298_0==LeftSquareBracket) ) {
                            alt298=2;
                        }
                        else if ( (LA298_0==FullStop) ) {
                            alt298=3;
                        }
                        else if ( (LA298_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred164_InternalN4JSParser())) {
                            alt298=4;
                        }
                        else if ( (LA298_0==RULE_TEMPLATE_HEAD) && (synpred164_InternalN4JSParser())) {
                            alt298=4;
                        }


                        switch (alt298) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    ArgumentsWithParenthesesParserRuleCall_1_2_0_1=norm1_ArgumentsWithParentheses();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.start):null), (ArgumentsWithParenthesesParserRuleCall_1_2_0_1!=null?((Token)ArgumentsWithParenthesesParserRuleCall_1_2_0_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getArgumentsWithParenthesesParserRuleCall_1_2_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    IndexedAccessExpressionTailParserRuleCall_1_2_1_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_2_1_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_2_1_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_2_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_2_2_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 4 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_2_3_0_1_0.stop):null), grammarAccess.getLeftHandSideExpressionAccess().getTemplateAssignment_1_2_3_0_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop298;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArguments_return ruleArguments() throws RecognitionException {
        InternalN4JSParser.ruleArguments_return retval = new InternalN4JSParser.ruleArguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        Token CommaKeyword_0_2_0=null;
        Token SpreadFullStopFullStopFullStopKeyword_0_2_1_0=null;
        Token SpreadFullStopFullStopFullStopKeyword_1_0_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ArgumentsAssignmentExpressionParserRuleCall_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ArgumentsAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt302=2;
            int LA302_0 = input.LA(1);

            if ( ((LA302_0>=Intersection && LA302_0<=Implements)||(LA302_0>=Promisify && LA302_0<=Abstract)||(LA302_0>=External && LA302_0<=Function)||(LA302_0>=Private && LA302_0<=Delete)||LA302_0==Public||LA302_0==Static||(LA302_0>=Target && LA302_0<=Await_1)||LA302_0==Class||(LA302_0>=False && LA302_0<=Super)||LA302_0==Union||(LA302_0>=Yield && LA302_0<=This)||(LA302_0>=From && LA302_0<=Void)||(LA302_0>=Get && LA302_0<=Set)||LA302_0==PlusSignPlusSign||LA302_0==HyphenMinusHyphenMinus||LA302_0==SolidusEqualsSign||LA302_0==As||LA302_0==Of||LA302_0==ExclamationMark||LA302_0==LeftParenthesis||LA302_0==PlusSign||LA302_0==HyphenMinus||LA302_0==Solidus||LA302_0==LessThanSign||(LA302_0>=CommercialAt && LA302_0<=LeftSquareBracket)||LA302_0==LeftCurlyBracket||LA302_0==Tilde||LA302_0==RULE_DOUBLE||(LA302_0>=RULE_HEX_INT && LA302_0<=RULE_LEGACY_OCTAL_INT)||LA302_0==RULE_SCIENTIFIC_INT||LA302_0==RULE_IDENTIFIER||LA302_0==RULE_STRING||(LA302_0>=RULE_TEMPLATE_HEAD && LA302_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA302_0==RULE_INT) ) {
                alt302=1;
            }
            else if ( (LA302_0==FullStopFullStopFullStop) ) {
                alt302=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 302, 0, input);

                throw nvae;
            }
            switch (alt302) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ArgumentsAssignmentExpressionParserRuleCall_0_0_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsAssignmentExpressionParserRuleCall_0_0_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_0_0.start):null), (ArgumentsAssignmentExpressionParserRuleCall_0_0_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0_0()); 
                    }

                    }


                    }
                    loop300:
                    do {
                        int alt300=2;
                        int LA300_0 = input.LA(1);

                        if ( (LA300_0==Comma) ) {
                            int LA300_1 = input.LA(2);

                            if ( ((LA300_1>=Intersection && LA300_1<=Implements)||(LA300_1>=Promisify && LA300_1<=Abstract)||(LA300_1>=External && LA300_1<=Function)||(LA300_1>=Private && LA300_1<=Delete)||LA300_1==Public||LA300_1==Static||(LA300_1>=Target && LA300_1<=Await_1)||LA300_1==Class||(LA300_1>=False && LA300_1<=Super)||LA300_1==Union||(LA300_1>=Yield && LA300_1<=This)||(LA300_1>=From && LA300_1<=Void)||(LA300_1>=Get && LA300_1<=Set)||LA300_1==PlusSignPlusSign||LA300_1==HyphenMinusHyphenMinus||LA300_1==SolidusEqualsSign||LA300_1==As||LA300_1==Of||LA300_1==ExclamationMark||LA300_1==LeftParenthesis||LA300_1==PlusSign||LA300_1==HyphenMinus||LA300_1==Solidus||LA300_1==LessThanSign||(LA300_1>=CommercialAt && LA300_1<=LeftSquareBracket)||LA300_1==LeftCurlyBracket||LA300_1==Tilde||LA300_1==RULE_DOUBLE||(LA300_1>=RULE_HEX_INT && LA300_1<=RULE_LEGACY_OCTAL_INT)||LA300_1==RULE_SCIENTIFIC_INT||LA300_1==RULE_IDENTIFIER||LA300_1==RULE_STRING||(LA300_1>=RULE_TEMPLATE_HEAD && LA300_1<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA300_1==RULE_INT) ) {
                                alt300=1;
                            }


                        }


                        switch (alt300) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_0_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_0_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_32);
                    	    ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop300;
                        }
                    } while (true);
                    int alt301=2;
                    int LA301_0 = input.LA(1);

                    if ( (LA301_0==Comma) ) {
                        alt301=1;
                    }
                    switch (alt301) {
                        case 1 :
                            {
                            CommaKeyword_0_2_0=(Token)match(input,Comma,FOLLOW_105); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_0_2_0, grammarAccess.getArgumentsAccess().getCommaKeyword_0_2_0()); 
                            }
                            {
                            {
                            SpreadFullStopFullStopFullStopKeyword_0_2_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_61); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SpreadFullStopFullStopFullStopKeyword_0_2_1_0, grammarAccess.getArgumentsAccess().getSpreadFullStopFullStopFullStopKeyword_0_2_1_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0.start):null), (ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0_2_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0_0, grammarAccess.getArgumentsAccess().getSpreadFullStopFullStopFullStopKeyword_1_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArgumentsAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_1_1_0.start):null), (ArgumentsAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Arguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Arguments_return norm1_Arguments() throws RecognitionException {
        InternalN4JSParser.norm1_Arguments_return retval = new InternalN4JSParser.norm1_Arguments_return();
        retval.start = input.LT(1);

        Token CommaKeyword_0_1_0=null;
        Token CommaKeyword_0_2_0=null;
        Token SpreadFullStopFullStopFullStopKeyword_0_2_1_0=null;
        Token SpreadFullStopFullStopFullStopKeyword_1_0_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ArgumentsAssignmentExpressionParserRuleCall_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ArgumentsAssignmentExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt305=2;
            int LA305_0 = input.LA(1);

            if ( ((LA305_0>=Intersection && LA305_0<=Implements)||(LA305_0>=Promisify && LA305_0<=Abstract)||(LA305_0>=External && LA305_0<=Function)||(LA305_0>=Private && LA305_0<=Delete)||LA305_0==Public||LA305_0==Static||(LA305_0>=Target && LA305_0<=Await_1)||LA305_0==Class||(LA305_0>=False && LA305_0<=Super)||LA305_0==Union||(LA305_0>=Yield && LA305_0<=This)||(LA305_0>=From && LA305_0<=Void)||(LA305_0>=Get && LA305_0<=Set)||LA305_0==PlusSignPlusSign||LA305_0==HyphenMinusHyphenMinus||LA305_0==SolidusEqualsSign||LA305_0==As||LA305_0==Of||LA305_0==ExclamationMark||LA305_0==LeftParenthesis||LA305_0==PlusSign||LA305_0==HyphenMinus||LA305_0==Solidus||LA305_0==LessThanSign||(LA305_0>=CommercialAt && LA305_0<=LeftSquareBracket)||LA305_0==LeftCurlyBracket||LA305_0==Tilde||LA305_0==RULE_DOUBLE||(LA305_0>=RULE_HEX_INT && LA305_0<=RULE_LEGACY_OCTAL_INT)||LA305_0==RULE_SCIENTIFIC_INT||LA305_0==RULE_IDENTIFIER||LA305_0==RULE_STRING||(LA305_0>=RULE_TEMPLATE_HEAD && LA305_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA305_0==RULE_INT) ) {
                alt305=1;
            }
            else if ( (LA305_0==FullStopFullStopFullStop) ) {
                alt305=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 305, 0, input);

                throw nvae;
            }
            switch (alt305) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ArgumentsAssignmentExpressionParserRuleCall_0_0_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsAssignmentExpressionParserRuleCall_0_0_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_0_0.start):null), (ArgumentsAssignmentExpressionParserRuleCall_0_0_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_0_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0_0()); 
                    }

                    }


                    }
                    loop303:
                    do {
                        int alt303=2;
                        int LA303_0 = input.LA(1);

                        if ( (LA303_0==Comma) ) {
                            int LA303_1 = input.LA(2);

                            if ( ((LA303_1>=Intersection && LA303_1<=Implements)||(LA303_1>=Promisify && LA303_1<=Abstract)||(LA303_1>=External && LA303_1<=Function)||(LA303_1>=Private && LA303_1<=Delete)||LA303_1==Public||LA303_1==Static||(LA303_1>=Target && LA303_1<=Await_1)||LA303_1==Class||(LA303_1>=False && LA303_1<=Super)||LA303_1==Union||(LA303_1>=Yield && LA303_1<=This)||(LA303_1>=From && LA303_1<=Void)||(LA303_1>=Get && LA303_1<=Set)||LA303_1==PlusSignPlusSign||LA303_1==HyphenMinusHyphenMinus||LA303_1==SolidusEqualsSign||LA303_1==As||LA303_1==Of||LA303_1==ExclamationMark||LA303_1==LeftParenthesis||LA303_1==PlusSign||LA303_1==HyphenMinus||LA303_1==Solidus||LA303_1==LessThanSign||(LA303_1>=CommercialAt && LA303_1<=LeftSquareBracket)||LA303_1==LeftCurlyBracket||LA303_1==Tilde||LA303_1==RULE_DOUBLE||(LA303_1>=RULE_HEX_INT && LA303_1<=RULE_LEGACY_OCTAL_INT)||LA303_1==RULE_SCIENTIFIC_INT||LA303_1==RULE_IDENTIFIER||LA303_1==RULE_STRING||(LA303_1>=RULE_TEMPLATE_HEAD && LA303_1<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA303_1==RULE_INT) ) {
                                alt303=1;
                            }


                        }


                        switch (alt303) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_1_0=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_0_1_0, grammarAccess.getArgumentsAccess().getCommaKeyword_0_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_32);
                    	    ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop303;
                        }
                    } while (true);
                    int alt304=2;
                    int LA304_0 = input.LA(1);

                    if ( (LA304_0==Comma) ) {
                        alt304=1;
                    }
                    switch (alt304) {
                        case 1 :
                            {
                            CommaKeyword_0_2_0=(Token)match(input,Comma,FOLLOW_105); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_0_2_0, grammarAccess.getArgumentsAccess().getCommaKeyword_0_2_0()); 
                            }
                            {
                            {
                            SpreadFullStopFullStopFullStopKeyword_0_2_1_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_61); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SpreadFullStopFullStopFullStopKeyword_0_2_1_0, grammarAccess.getArgumentsAccess().getSpreadFullStopFullStopFullStopKeyword_0_2_1_0()); 
                            }

                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0.start):null), (ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_0_2_2_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_0_2_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    SpreadFullStopFullStopFullStopKeyword_1_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SpreadFullStopFullStopFullStopKeyword_1_0_0, grammarAccess.getArgumentsAccess().getSpreadFullStopFullStopFullStopKeyword_1_0_0()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArgumentsAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_1_1_0.start):null), (ArgumentsAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)ArgumentsAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getArgumentsAccess().getArgumentsAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTypeArguments_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArguments_return ruleTypeArguments() throws RecognitionException {
        InternalN4JSParser.ruleTypeArguments_return retval = new InternalN4JSParser.ruleTypeArguments_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token CommaKeyword_2_0=null;
        Token GreaterThanSignKeyword_3=null;
        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeArgsTypeRefParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_43); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LessThanSignKeyword_0, grammarAccess.getTypeArgumentsAccess().getLessThanSignKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_16);
            TypeArgsTypeRefParserRuleCall_1_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.start):null), (TypeArgsTypeRefParserRuleCall_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_1()); 
            }

            }


            }
            loop306:
            do {
                int alt306=2;
                int LA306_0 = input.LA(1);

                if ( (LA306_0==Comma) ) {
                    alt306=1;
                }


                switch (alt306) {
            	case 1 :
            	    {
            	    CommaKeyword_2_0=(Token)match(input,Comma,FOLLOW_43); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_2_0, grammarAccess.getTypeArgumentsAccess().getCommaKeyword_2_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_16);
            	    TypeArgsTypeRefParserRuleCall_2_1_0=ruleTypeRef();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.start):null), (TypeArgsTypeRefParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeRefParserRuleCall_2_1_0.stop):null), grammarAccess.getTypeArgumentsAccess().getTypeArgsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop306;
                }
            } while (true);

            GreaterThanSignKeyword_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GreaterThanSignKeyword_3, grammarAccess.getTypeArgumentsAccess().getGreaterThanSignKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArgumentsWithParentheses_return ruleArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.ruleArgumentsWithParentheses_return retval = new InternalN4JSParser.ruleArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt307=2;
            int LA307_0 = input.LA(1);

            if ( ((LA307_0>=Intersection && LA307_0<=Implements)||(LA307_0>=Promisify && LA307_0<=Abstract)||(LA307_0>=External && LA307_0<=Function)||(LA307_0>=Private && LA307_0<=Delete)||LA307_0==Public||LA307_0==Static||(LA307_0>=Target && LA307_0<=Await_1)||LA307_0==Class||(LA307_0>=False && LA307_0<=Super)||LA307_0==Union||(LA307_0>=Yield && LA307_0<=This)||(LA307_0>=From && LA307_0<=Void)||LA307_0==FullStopFullStopFullStop||(LA307_0>=Get && LA307_0<=Set)||LA307_0==PlusSignPlusSign||LA307_0==HyphenMinusHyphenMinus||LA307_0==SolidusEqualsSign||LA307_0==As||LA307_0==Of||LA307_0==ExclamationMark||LA307_0==LeftParenthesis||LA307_0==PlusSign||LA307_0==HyphenMinus||LA307_0==Solidus||LA307_0==LessThanSign||(LA307_0>=CommercialAt && LA307_0<=LeftSquareBracket)||LA307_0==LeftCurlyBracket||LA307_0==Tilde||LA307_0==RULE_DOUBLE||(LA307_0>=RULE_HEX_INT && LA307_0<=RULE_LEGACY_OCTAL_INT)||LA307_0==RULE_SCIENTIFIC_INT||LA307_0==RULE_IDENTIFIER||LA307_0==RULE_STRING||(LA307_0>=RULE_TEMPLATE_HEAD && LA307_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA307_0==RULE_INT) ) {
                alt307=1;
            }
            switch (alt307) {
                case 1 :
                    {
                    pushFollow(FOLLOW_48);
                    ArgumentsParserRuleCall_1=ruleArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArgumentsWithParentheses_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArgumentsWithParentheses_return norm1_ArgumentsWithParentheses() throws RecognitionException {
        InternalN4JSParser.norm1_ArgumentsWithParentheses_return retval = new InternalN4JSParser.norm1_ArgumentsWithParentheses_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_0=null;
        Token RightParenthesisKeyword_2=null;
        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1 = null;



            
        try {
            {
            {
            LeftParenthesisKeyword_0=(Token)match(input,LeftParenthesis,FOLLOW_106); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0, grammarAccess.getArgumentsWithParenthesesAccess().getLeftParenthesisKeyword_0()); 
            }
            int alt308=2;
            int LA308_0 = input.LA(1);

            if ( ((LA308_0>=Intersection && LA308_0<=Implements)||(LA308_0>=Promisify && LA308_0<=Abstract)||(LA308_0>=External && LA308_0<=Function)||(LA308_0>=Private && LA308_0<=Delete)||LA308_0==Public||LA308_0==Static||(LA308_0>=Target && LA308_0<=Await_1)||LA308_0==Class||(LA308_0>=False && LA308_0<=Super)||LA308_0==Union||(LA308_0>=Yield && LA308_0<=This)||(LA308_0>=From && LA308_0<=Void)||LA308_0==FullStopFullStopFullStop||(LA308_0>=Get && LA308_0<=Set)||LA308_0==PlusSignPlusSign||LA308_0==HyphenMinusHyphenMinus||LA308_0==SolidusEqualsSign||LA308_0==As||LA308_0==Of||LA308_0==ExclamationMark||LA308_0==LeftParenthesis||LA308_0==PlusSign||LA308_0==HyphenMinus||LA308_0==Solidus||LA308_0==LessThanSign||(LA308_0>=CommercialAt && LA308_0<=LeftSquareBracket)||LA308_0==LeftCurlyBracket||LA308_0==Tilde||LA308_0==RULE_DOUBLE||(LA308_0>=RULE_HEX_INT && LA308_0<=RULE_LEGACY_OCTAL_INT)||LA308_0==RULE_SCIENTIFIC_INT||LA308_0==RULE_IDENTIFIER||LA308_0==RULE_STRING||(LA308_0>=RULE_TEMPLATE_HEAD && LA308_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA308_0==RULE_INT) ) {
                alt308=1;
            }
            switch (alt308) {
                case 1 :
                    {
                    pushFollow(FOLLOW_48);
                    ArgumentsParserRuleCall_1=norm1_Arguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.start):null), (ArgumentsParserRuleCall_1!=null?((Token)ArgumentsParserRuleCall_1.stop):null), grammarAccess.getArgumentsWithParenthesesAccess().getArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }

            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getArgumentsWithParenthesesAccess().getRightParenthesisKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMemberExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMemberExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMemberExpression_return ruleMemberExpression() throws RecognitionException {
        InternalN4JSParser.ruleMemberExpression_return retval = new InternalN4JSParser.ruleMemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSParser.ruleMemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSParser.ruleArguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSParser.rulePrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleIndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSParser.ruleTemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt314=3;
            alt314 = dfa314.predict(input);
            switch (alt314) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_110);
                    CalleeMemberExpressionParserRuleCall_1_1_0=ruleMemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt309=2;
                    int LA309_0 = input.LA(1);

                    if ( (LA309_0==LessThanSign) ) {
                        int LA309_1 = input.LA(2);

                        if ( (synpred167_InternalN4JSParser()) ) {
                            alt309=1;
                        }
                    }
                    switch (alt309) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt312=2;
                    int LA312_0 = input.LA(1);

                    if ( (LA312_0==LeftParenthesis) ) {
                        int LA312_1 = input.LA(2);

                        if ( (synpred168_InternalN4JSParser()) ) {
                            alt312=1;
                        }
                    }
                    switch (alt312) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt310=2;
                            int LA310_0 = input.LA(1);

                            if ( ((LA310_0>=Intersection && LA310_0<=Implements)||(LA310_0>=Promisify && LA310_0<=Abstract)||(LA310_0>=External && LA310_0<=Function)||(LA310_0>=Private && LA310_0<=Delete)||LA310_0==Public||LA310_0==Static||(LA310_0>=Target && LA310_0<=Await_1)||LA310_0==Class||(LA310_0>=False && LA310_0<=Super)||LA310_0==Union||(LA310_0>=Yield && LA310_0<=This)||(LA310_0>=From && LA310_0<=Void)||LA310_0==FullStopFullStopFullStop||(LA310_0>=Get && LA310_0<=Set)||LA310_0==PlusSignPlusSign||LA310_0==HyphenMinusHyphenMinus||LA310_0==SolidusEqualsSign||LA310_0==As||LA310_0==Of||LA310_0==ExclamationMark||LA310_0==LeftParenthesis||LA310_0==PlusSign||LA310_0==HyphenMinus||LA310_0==Solidus||LA310_0==LessThanSign||(LA310_0>=CommercialAt && LA310_0<=LeftSquareBracket)||LA310_0==LeftCurlyBracket||LA310_0==Tilde||LA310_0==RULE_DOUBLE||(LA310_0>=RULE_HEX_INT && LA310_0<=RULE_LEGACY_OCTAL_INT)||LA310_0==RULE_SCIENTIFIC_INT||LA310_0==RULE_IDENTIFIER||LA310_0==RULE_STRING||(LA310_0>=RULE_TEMPLATE_HEAD && LA310_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA310_0==RULE_INT) ) {
                                alt310=1;
                            }
                            switch (alt310) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_48);
                                    ArgumentsParserRuleCall_1_3_1=ruleArguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_104); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop311:
                            do {
                                int alt311=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt311=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt311=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt311=3;
                                    }
                                    break;

                                }

                                switch (alt311) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_104);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=ruleIndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_104);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=ruleParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_104);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=ruleTemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop311;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    PrimaryExpressionParserRuleCall_2_0=rulePrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop313:
                    do {
                        int alt313=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt313=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt313=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt313=3;
                            }
                            break;

                        }

                        switch (alt313) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=ruleIndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=ruleParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=ruleTemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop313;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MemberExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MemberExpression_return norm1_MemberExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MemberExpression_return retval = new InternalN4JSParser.norm1_MemberExpression_return();
        retval.start = input.LT(1);

        Token NewKeyword_0_0_0_1=null;
        Token FullStopKeyword_0_0_0_2=null;
        Token TargetKeyword_0_1=null;
        Token NewKeyword_1_0_0_1=null;
        Token WithArgsLeftParenthesisKeyword_1_3_0_0=null;
        Token RightParenthesisKeyword_1_3_2=null;
        InternalN4JSParser.norm1_MemberExpression_return CalleeMemberExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1_2 = null;

        InternalN4JSParser.norm1_Arguments_return ArgumentsParserRuleCall_1_3_1 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0 = null;

        InternalN4JSParser.norm1_PrimaryExpression_return PrimaryExpressionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return IndexedAccessExpressionTailParserRuleCall_2_1_0_1 = null;

        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1 = null;

        InternalN4JSParser.norm1_TemplateLiteral_return TemplateTemplateLiteralParserRuleCall_2_1_2_1_0 = null;



            
        try {
            {
            int alt320=3;
            alt320 = dfa320.predict(input);
            switch (alt320) {
                case 1 :
                    {
                    {
                    {
                    {
                    NewKeyword_0_0_0_1=(Token)match(input,New,FOLLOW_107); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_0_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_0_0_0_1()); 
                    }
                    FullStopKeyword_0_0_0_2=(Token)match(input,FullStop,FOLLOW_108); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_0_0_0_2, grammarAccess.getMemberExpressionAccess().getFullStopKeyword_0_0_0_2()); 
                    }

                    }


                    }

                    TargetKeyword_0_1=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_0_1, grammarAccess.getMemberExpressionAccess().getTargetKeyword_0_1()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    NewKeyword_1_0_0_1=(Token)match(input,New,FOLLOW_109); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_1_0_0_1, grammarAccess.getMemberExpressionAccess().getNewKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_110);
                    CalleeMemberExpressionParserRuleCall_1_1_0=norm1_MemberExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.start):null), (CalleeMemberExpressionParserRuleCall_1_1_0!=null?((Token)CalleeMemberExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getCalleeAssignment_1_1()); 
                    }

                    }


                    }
                    int alt315=2;
                    int LA315_0 = input.LA(1);

                    if ( (LA315_0==LessThanSign) ) {
                        int LA315_1 = input.LA(2);

                        if ( (synpred171_InternalN4JSParser()) ) {
                            alt315=1;
                        }
                    }
                    switch (alt315) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_103);
                            TypeArgumentsParserRuleCall_1_2=ruleTypeArguments();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.start):null), (TypeArgumentsParserRuleCall_1_2!=null?((Token)TypeArgumentsParserRuleCall_1_2.stop):null), grammarAccess.getMemberExpressionAccess().getTypeArgumentsParserRuleCall_1_2()); 
                            }

                            }
                            break;

                    }
                    int alt318=2;
                    int LA318_0 = input.LA(1);

                    if ( (LA318_0==LeftParenthesis) ) {
                        int LA318_1 = input.LA(2);

                        if ( (synpred172_InternalN4JSParser()) ) {
                            alt318=1;
                        }
                    }
                    switch (alt318) {
                        case 1 :
                            {
                            {
                            {
                            WithArgsLeftParenthesisKeyword_1_3_0_0=(Token)match(input,LeftParenthesis,FOLLOW_106); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(WithArgsLeftParenthesisKeyword_1_3_0_0, grammarAccess.getMemberExpressionAccess().getWithArgsLeftParenthesisKeyword_1_3_0_0()); 
                            }

                            }


                            }
                            int alt316=2;
                            int LA316_0 = input.LA(1);

                            if ( ((LA316_0>=Intersection && LA316_0<=Implements)||(LA316_0>=Promisify && LA316_0<=Abstract)||(LA316_0>=External && LA316_0<=Function)||(LA316_0>=Private && LA316_0<=Delete)||LA316_0==Public||LA316_0==Static||(LA316_0>=Target && LA316_0<=Await_1)||LA316_0==Class||(LA316_0>=False && LA316_0<=Super)||LA316_0==Union||(LA316_0>=Yield && LA316_0<=This)||(LA316_0>=From && LA316_0<=Void)||LA316_0==FullStopFullStopFullStop||(LA316_0>=Get && LA316_0<=Set)||LA316_0==PlusSignPlusSign||LA316_0==HyphenMinusHyphenMinus||LA316_0==SolidusEqualsSign||LA316_0==As||LA316_0==Of||LA316_0==ExclamationMark||LA316_0==LeftParenthesis||LA316_0==PlusSign||LA316_0==HyphenMinus||LA316_0==Solidus||LA316_0==LessThanSign||(LA316_0>=CommercialAt && LA316_0<=LeftSquareBracket)||LA316_0==LeftCurlyBracket||LA316_0==Tilde||LA316_0==RULE_DOUBLE||(LA316_0>=RULE_HEX_INT && LA316_0<=RULE_LEGACY_OCTAL_INT)||LA316_0==RULE_SCIENTIFIC_INT||LA316_0==RULE_IDENTIFIER||LA316_0==RULE_STRING||(LA316_0>=RULE_TEMPLATE_HEAD && LA316_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA316_0==RULE_INT) ) {
                                alt316=1;
                            }
                            switch (alt316) {
                                case 1 :
                                    {
                                    pushFollow(FOLLOW_48);
                                    ArgumentsParserRuleCall_1_3_1=norm1_Arguments();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.start):null), (ArgumentsParserRuleCall_1_3_1!=null?((Token)ArgumentsParserRuleCall_1_3_1.stop):null), grammarAccess.getMemberExpressionAccess().getArgumentsParserRuleCall_1_3_1()); 
                                    }

                                    }
                                    break;

                            }

                            RightParenthesisKeyword_1_3_2=(Token)match(input,RightParenthesis,FOLLOW_104); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightParenthesisKeyword_1_3_2, grammarAccess.getMemberExpressionAccess().getRightParenthesisKeyword_1_3_2()); 
                            }
                            loop317:
                            do {
                                int alt317=4;
                                switch ( input.LA(1) ) {
                                case LeftSquareBracket:
                                    {
                                    alt317=1;
                                    }
                                    break;
                                case FullStop:
                                    {
                                    alt317=2;
                                    }
                                    break;
                                case RULE_TEMPLATE_HEAD:
                                case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                                    {
                                    alt317=3;
                                    }
                                    break;

                                }

                                switch (alt317) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_104);
                            	    IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1=norm1_IndexedAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_1_3_3_0_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 2 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_104);
                            	    ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;
                            	case 3 :
                            	    {
                            	    {
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_104);
                            	    TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0=norm1_TemplateLiteral();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_1_3_3_2_1()); 
                            	    }

                            	    }


                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop317;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_104);
                    PrimaryExpressionParserRuleCall_2_0=norm1_PrimaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.start):null), (PrimaryExpressionParserRuleCall_2_0!=null?((Token)PrimaryExpressionParserRuleCall_2_0.stop):null), grammarAccess.getMemberExpressionAccess().getPrimaryExpressionParserRuleCall_2_0()); 
                    }
                    loop319:
                    do {
                        int alt319=4;
                        switch ( input.LA(1) ) {
                        case LeftSquareBracket:
                            {
                            alt319=1;
                            }
                            break;
                        case FullStop:
                            {
                            alt319=2;
                            }
                            break;
                        case RULE_TEMPLATE_HEAD:
                        case RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL:
                            {
                            alt319=3;
                            }
                            break;

                        }

                        switch (alt319) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    IndexedAccessExpressionTailParserRuleCall_2_1_0_1=norm1_IndexedAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.start):null), (IndexedAccessExpressionTailParserRuleCall_2_1_0_1!=null?((Token)IndexedAccessExpressionTailParserRuleCall_2_1_0_1.stop):null), grammarAccess.getMemberExpressionAccess().getIndexedAccessExpressionTailParserRuleCall_2_1_0_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 2 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1=norm1_ParameterizedPropertyAccessExpressionTail();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.start):null), (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1!=null?((Token)ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1.stop):null), grammarAccess.getMemberExpressionAccess().getParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1()); 
                    	    }

                    	    }


                    	    }
                    	    break;
                    	case 3 :
                    	    {
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_104);
                    	    TemplateTemplateLiteralParserRuleCall_2_1_2_1_0=norm1_TemplateLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.start):null), (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0!=null?((Token)TemplateTemplateLiteralParserRuleCall_2_1_2_1_0.stop):null), grammarAccess.getMemberExpressionAccess().getTemplateAssignment_2_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop319;
                        }
                    } while (true);


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleIndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIndexedAccessExpressionTail_return ruleIndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleIndexedAccessExpressionTail_return retval = new InternalN4JSParser.ruleIndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSParser.norm1_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_111);
            IndexExpressionParserRuleCall_1_0=norm1_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_IndexedAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_IndexedAccessExpressionTail_return norm1_IndexedAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_IndexedAccessExpressionTail_return retval = new InternalN4JSParser.norm1_IndexedAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_0=null;
        Token RightSquareBracketKeyword_2=null;
        InternalN4JSParser.norm3_Expression_return IndexExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_0=(Token)match(input,LeftSquareBracket,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_0, grammarAccess.getIndexedAccessExpressionTailAccess().getLeftSquareBracketKeyword_0()); 
            }
            {
            {
            pushFollow(FOLLOW_111);
            IndexExpressionParserRuleCall_1_0=norm3_Expression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.start):null), (IndexExpressionParserRuleCall_1_0!=null?((Token)IndexExpressionParserRuleCall_1_0.stop):null), grammarAccess.getIndexedAccessExpressionTailAccess().getIndexAssignment_1()); 
            }

            }


            }

            RightSquareBracketKeyword_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_2, grammarAccess.getIndexedAccessExpressionTailAccess().getRightSquareBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return ruleParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.ruleParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt321=2;
            int LA321_0 = input.LA(1);

            if ( (LA321_0==LessThanSign) ) {
                alt321=1;
            }
            switch (alt321) {
                case 1 :
                    {
                    pushFollow(FOLLOW_26);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ParameterizedPropertyAccessExpressionTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return norm1_ParameterizedPropertyAccessExpressionTail() throws RecognitionException {
        InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return retval = new InternalN4JSParser.norm1_ParameterizedPropertyAccessExpressionTail_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_0=null;
        InternalN4JSParser.ruleTypeArguments_return TypeArgumentsParserRuleCall_1 = null;

        InternalN4JSParser.ruleIdentifierName_return PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1 = null;



            
        try {
            {
            {
            FullStopKeyword_0=(Token)match(input,FullStop,FOLLOW_112); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(FullStopKeyword_0, grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getFullStopKeyword_0()); 
            }
            int alt322=2;
            int LA322_0 = input.LA(1);

            if ( (LA322_0==LessThanSign) ) {
                alt322=1;
            }
            switch (alt322) {
                case 1 :
                    {
                    pushFollow(FOLLOW_26);
                    TypeArgumentsParserRuleCall_1=ruleTypeArguments();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.start):null), (TypeArgumentsParserRuleCall_1!=null?((Token)TypeArgumentsParserRuleCall_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getTypeArgumentsParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1=ruleIdentifierName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.start):null), (PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1!=null?((Token)PropertyIdentifiableElementIdentifierNameParserRuleCall_2_0_1.stop):null), grammarAccess.getParameterizedPropertyAccessExpressionTailAccess().getPropertyAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePostfixExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePostfixExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePostfixExpression_return rulePostfixExpression() throws RecognitionException {
        InternalN4JSParser.rulePostfixExpression_return retval = new InternalN4JSParser.rulePostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_113);
            LeftHandSideExpressionParserRuleCall_0=ruleLeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt323=2;
            int LA323_0 = input.LA(1);

            if ( (LA323_0==PlusSignPlusSign) && (synpred173_InternalN4JSParser())) {
                alt323=1;
            }
            else if ( (LA323_0==HyphenMinusHyphenMinus) && (synpred173_InternalN4JSParser())) {
                alt323=1;
            }
            switch (alt323) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PostfixExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PostfixExpression_return norm1_PostfixExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PostfixExpression_return retval = new InternalN4JSParser.norm1_PostfixExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_LeftHandSideExpression_return LeftHandSideExpressionParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_113);
            LeftHandSideExpressionParserRuleCall_0=norm1_LeftHandSideExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {

              		if (input.LA(1) == PlusSignPlusSign || input.LA(1) == HyphenMinusHyphenMinus) {
              			promoteEOL();
              		}
              		announce((LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.start):null), (LeftHandSideExpressionParserRuleCall_0!=null?((Token)LeftHandSideExpressionParserRuleCall_0.stop):null), grammarAccess.getPostfixExpressionAccess().getLeftHandSideExpressionParserRuleCall_0());
              	
            }
            int alt324=2;
            int LA324_0 = input.LA(1);

            if ( (LA324_0==PlusSignPlusSign) && (synpred174_InternalN4JSParser())) {
                alt324=1;
            }
            else if ( (LA324_0==HyphenMinusHyphenMinus) && (synpred174_InternalN4JSParser())) {
                alt324=1;
            }
            switch (alt324) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    rulePostfixOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleCastExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleCastExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleCastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleCastExpression_return ruleCastExpression() throws RecognitionException {
        InternalN4JSParser.ruleCastExpression_return retval = new InternalN4JSParser.ruleCastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.rulePostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_25);
            PostfixExpressionParserRuleCall_0=rulePostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt325=2;
            int LA325_0 = input.LA(1);

            if ( (LA325_0==As) && (synpred175_InternalN4JSParser())) {
                alt325=1;
            }
            switch (alt325) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_CastExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_CastExpression_return norm1_CastExpression() throws RecognitionException {
        InternalN4JSParser.norm1_CastExpression_return retval = new InternalN4JSParser.norm1_CastExpression_return();
        retval.start = input.LT(1);

        Token AsKeyword_1_0_0_1=null;
        InternalN4JSParser.norm1_PostfixExpression_return PostfixExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefForCast_return TargetTypeRefTypeRefForCastParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_25);
            PostfixExpressionParserRuleCall_0=norm1_PostfixExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.start):null), (PostfixExpressionParserRuleCall_0!=null?((Token)PostfixExpressionParserRuleCall_0.stop):null), grammarAccess.getCastExpressionAccess().getPostfixExpressionParserRuleCall_0()); 
            }
            int alt326=2;
            int LA326_0 = input.LA(1);

            if ( (LA326_0==As) && (synpred176_InternalN4JSParser())) {
                alt326=1;
            }
            switch (alt326) {
                case 1 :
                    {
                    {
                    {
                    AsKeyword_1_0_0_1=(Token)match(input,As,FOLLOW_114); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_1_0_0_1, grammarAccess.getCastExpressionAccess().getAsKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TargetTypeRefTypeRefForCastParserRuleCall_1_1_0=ruleTypeRefForCast();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.start):null), (TargetTypeRefTypeRefForCastParserRuleCall_1_1_0!=null?((Token)TargetTypeRefTypeRefForCastParserRuleCall_1_1_0.stop):null), grammarAccess.getCastExpressionAccess().getTargetTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnaryExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnaryExpression_return ruleUnaryExpression() throws RecognitionException {
        InternalN4JSParser.ruleUnaryExpression_return retval = new InternalN4JSParser.ruleUnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleCastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleUnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt327=2;
            int LA327_0 = input.LA(1);

            if ( ((LA327_0>=Intersection && LA327_0<=Implements)||(LA327_0>=Promisify && LA327_0<=Abstract)||(LA327_0>=External && LA327_0<=Function)||(LA327_0>=Private && LA327_0<=Project)||LA327_0==Public||LA327_0==Static||LA327_0==Target||(LA327_0>=Await && LA327_0<=Await_1)||LA327_0==Class||(LA327_0>=False && LA327_0<=Super)||LA327_0==Union||(LA327_0>=Yield && LA327_0<=This)||(LA327_0>=From && LA327_0<=Type)||(LA327_0>=Get && LA327_0<=Set)||LA327_0==SolidusEqualsSign||LA327_0==As||LA327_0==Of||LA327_0==LeftParenthesis||LA327_0==Solidus||LA327_0==LessThanSign||(LA327_0>=CommercialAt && LA327_0<=LeftSquareBracket)||LA327_0==LeftCurlyBracket||LA327_0==RULE_DOUBLE||(LA327_0>=RULE_HEX_INT && LA327_0<=RULE_LEGACY_OCTAL_INT)||LA327_0==RULE_SCIENTIFIC_INT||LA327_0==RULE_IDENTIFIER||LA327_0==RULE_STRING||(LA327_0>=RULE_TEMPLATE_HEAD && LA327_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA327_0==RULE_INT) ) {
                alt327=1;
            }
            else if ( (LA327_0==Delete||LA327_0==Typeof||LA327_0==Void||LA327_0==PlusSignPlusSign||LA327_0==HyphenMinusHyphenMinus||LA327_0==ExclamationMark||LA327_0==PlusSign||LA327_0==HyphenMinus||LA327_0==Tilde) ) {
                alt327=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 327, 0, input);

                throw nvae;
            }
            switch (alt327) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=ruleCastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_61);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=ruleUnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_UnaryExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_UnaryExpression_return norm1_UnaryExpression() throws RecognitionException {
        InternalN4JSParser.norm1_UnaryExpression_return retval = new InternalN4JSParser.norm1_UnaryExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_CastExpression_return CastExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_UnaryExpression_return ExpressionUnaryExpressionParserRuleCall_1_2_0 = null;



            
        try {
            {
            int alt328=2;
            int LA328_0 = input.LA(1);

            if ( ((LA328_0>=Intersection && LA328_0<=Implements)||(LA328_0>=Promisify && LA328_0<=Abstract)||(LA328_0>=External && LA328_0<=Function)||(LA328_0>=Private && LA328_0<=Project)||LA328_0==Public||LA328_0==Static||LA328_0==Target||(LA328_0>=Await && LA328_0<=Await_1)||LA328_0==Class||(LA328_0>=False && LA328_0<=Super)||LA328_0==Union||LA328_0==This||(LA328_0>=From && LA328_0<=Type)||(LA328_0>=Get && LA328_0<=Set)||LA328_0==SolidusEqualsSign||LA328_0==As||LA328_0==Of||LA328_0==LeftParenthesis||LA328_0==Solidus||LA328_0==LessThanSign||(LA328_0>=CommercialAt && LA328_0<=LeftSquareBracket)||LA328_0==LeftCurlyBracket||LA328_0==RULE_DOUBLE||(LA328_0>=RULE_HEX_INT && LA328_0<=RULE_LEGACY_OCTAL_INT)||LA328_0==RULE_SCIENTIFIC_INT||LA328_0==RULE_IDENTIFIER||LA328_0==RULE_STRING||(LA328_0>=RULE_TEMPLATE_HEAD && LA328_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA328_0==RULE_INT) ) {
                alt328=1;
            }
            else if ( (LA328_0==Delete||LA328_0==Typeof||LA328_0==Void||LA328_0==PlusSignPlusSign||LA328_0==HyphenMinusHyphenMinus||LA328_0==ExclamationMark||LA328_0==PlusSign||LA328_0==HyphenMinus||LA328_0==Tilde) ) {
                alt328=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 328, 0, input);

                throw nvae;
            }
            switch (alt328) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    CastExpressionParserRuleCall_0=norm1_CastExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.start):null), (CastExpressionParserRuleCall_0!=null?((Token)CastExpressionParserRuleCall_0.stop):null), grammarAccess.getUnaryExpressionAccess().getCastExpressionParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_61);
                    ruleUnaryOperator();

                    state._fsp--;
                    if (state.failed) return retval;

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionUnaryExpressionParserRuleCall_1_2_0=norm1_UnaryExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.start):null), (ExpressionUnaryExpressionParserRuleCall_1_2_0!=null?((Token)ExpressionUnaryExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getUnaryExpressionAccess().getExpressionAssignment_1_2()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleMultiplicativeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleMultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMultiplicativeExpression_return ruleMultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.ruleMultiplicativeExpression_return retval = new InternalN4JSParser.ruleMultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleUnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleUnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            UnaryExpressionParserRuleCall_0=ruleUnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop329:
            do {
                int alt329=2;
                int LA329_0 = input.LA(1);

                if ( (LA329_0==Asterisk) && (synpred177_InternalN4JSParser())) {
                    alt329=1;
                }
                else if ( (LA329_0==Solidus) && (synpred177_InternalN4JSParser())) {
                    alt329=1;
                }
                else if ( (LA329_0==PercentSign) && (synpred177_InternalN4JSParser())) {
                    alt329=1;
                }


                switch (alt329) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_115);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=ruleUnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop329;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MultiplicativeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MultiplicativeExpression_return norm1_MultiplicativeExpression() throws RecognitionException {
        InternalN4JSParser.norm1_MultiplicativeExpression_return retval = new InternalN4JSParser.norm1_MultiplicativeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_UnaryExpression_return UnaryExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_UnaryExpression_return RhsUnaryExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_115);
            UnaryExpressionParserRuleCall_0=norm1_UnaryExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.start):null), (UnaryExpressionParserRuleCall_0!=null?((Token)UnaryExpressionParserRuleCall_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getUnaryExpressionParserRuleCall_0()); 
            }
            loop330:
            do {
                int alt330=2;
                int LA330_0 = input.LA(1);

                if ( (LA330_0==Asterisk) && (synpred178_InternalN4JSParser())) {
                    alt330=1;
                }
                else if ( (LA330_0==Solidus) && (synpred178_InternalN4JSParser())) {
                    alt330=1;
                }
                else if ( (LA330_0==PercentSign) && (synpred178_InternalN4JSParser())) {
                    alt330=1;
                }


                switch (alt330) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    ruleMultiplicativeOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_115);
            	    RhsUnaryExpressionParserRuleCall_1_1_0=norm1_UnaryExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.start):null), (RhsUnaryExpressionParserRuleCall_1_1_0!=null?((Token)RhsUnaryExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getMultiplicativeExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop330;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAdditiveExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAdditiveExpression_return ruleAdditiveExpression() throws RecognitionException {
        InternalN4JSParser.ruleAdditiveExpression_return retval = new InternalN4JSParser.ruleAdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleMultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleMultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_116);
            MultiplicativeExpressionParserRuleCall_0=ruleMultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop331:
            do {
                int alt331=2;
                int LA331_0 = input.LA(1);

                if ( (LA331_0==PlusSign) && (synpred179_InternalN4JSParser())) {
                    alt331=1;
                }
                else if ( (LA331_0==HyphenMinus) && (synpred179_InternalN4JSParser())) {
                    alt331=1;
                }


                switch (alt331) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=ruleMultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop331;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AdditiveExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AdditiveExpression_return norm1_AdditiveExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AdditiveExpression_return retval = new InternalN4JSParser.norm1_AdditiveExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_MultiplicativeExpression_return MultiplicativeExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_MultiplicativeExpression_return RhsMultiplicativeExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_116);
            MultiplicativeExpressionParserRuleCall_0=norm1_MultiplicativeExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.start):null), (MultiplicativeExpressionParserRuleCall_0!=null?((Token)MultiplicativeExpressionParserRuleCall_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getMultiplicativeExpressionParserRuleCall_0()); 
            }
            loop332:
            do {
                int alt332=2;
                int LA332_0 = input.LA(1);

                if ( (LA332_0==PlusSign) && (synpred180_InternalN4JSParser())) {
                    alt332=1;
                }
                else if ( (LA332_0==HyphenMinus) && (synpred180_InternalN4JSParser())) {
                    alt332=1;
                }


                switch (alt332) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    ruleAdditiveOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_116);
            	    RhsMultiplicativeExpressionParserRuleCall_1_1_0=norm1_MultiplicativeExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.start):null), (RhsMultiplicativeExpressionParserRuleCall_1_1_0!=null?((Token)RhsMultiplicativeExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getAdditiveExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop332;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftExpression_return ruleShiftExpression() throws RecognitionException {
        InternalN4JSParser.ruleShiftExpression_return retval = new InternalN4JSParser.ruleShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleAdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            AdditiveExpressionParserRuleCall_0=ruleAdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop333:
            do {
                int alt333=2;
                alt333 = dfa333.predict(input);
                switch (alt333) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=ruleAdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop333;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ShiftExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ShiftExpression_return norm1_ShiftExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ShiftExpression_return retval = new InternalN4JSParser.norm1_ShiftExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AdditiveExpression_return AdditiveExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleShiftOperator_return OpShiftOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_AdditiveExpression_return RhsAdditiveExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_117);
            AdditiveExpressionParserRuleCall_0=norm1_AdditiveExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.start):null), (AdditiveExpressionParserRuleCall_0!=null?((Token)AdditiveExpressionParserRuleCall_0.stop):null), grammarAccess.getShiftExpressionAccess().getAdditiveExpressionParserRuleCall_0()); 
            }
            loop334:
            do {
                int alt334=2;
                alt334 = dfa334.predict(input);
                switch (alt334) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpShiftOperatorParserRuleCall_1_0_1_0=ruleShiftOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.start):null), (OpShiftOperatorParserRuleCall_1_0_1_0!=null?((Token)OpShiftOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getShiftExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_117);
            	    RhsAdditiveExpressionParserRuleCall_1_0_2_0=norm1_AdditiveExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.start):null), (RhsAdditiveExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsAdditiveExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getShiftExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop334;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleShiftOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleShiftOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleShiftOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleShiftOperator_return ruleShiftOperator() throws RecognitionException {
        InternalN4JSParser.ruleShiftOperator_return retval = new InternalN4JSParser.ruleShiftOperator_return();
        retval.start = input.LT(1);

        Token GreaterThanSignKeyword_0_0=null;
        Token GreaterThanSignKeyword_0_1=null;
        Token GreaterThanSignKeyword_0_2=null;
        Token LessThanSignLessThanSignKeyword_1=null;


            
        try {
            {
            int alt336=2;
            int LA336_0 = input.LA(1);

            if ( (LA336_0==GreaterThanSign) ) {
                alt336=1;
            }
            else if ( (LA336_0==LessThanSignLessThanSign) ) {
                alt336=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 336, 0, input);

                throw nvae;
            }
            switch (alt336) {
                case 1 :
                    {
                    {
                    GreaterThanSignKeyword_0_0=(Token)match(input,GreaterThanSign,FOLLOW_118); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_0()); 
                    }
                    GreaterThanSignKeyword_0_1=(Token)match(input,GreaterThanSign,FOLLOW_119); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_1, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_1()); 
                    }
                    int alt335=2;
                    int LA335_0 = input.LA(1);

                    if ( (LA335_0==GreaterThanSign) ) {
                        alt335=1;
                    }
                    switch (alt335) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_0_2=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_0_2, grammarAccess.getShiftOperatorAccess().getGreaterThanSignKeyword_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    LessThanSignLessThanSignKeyword_1=(Token)match(input,LessThanSignLessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignKeyword_1, grammarAccess.getShiftOperatorAccess().getLessThanSignLessThanSignKeyword_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalExpression_return ruleRelationalExpression() throws RecognitionException {
        InternalN4JSParser.ruleRelationalExpression_return retval = new InternalN4JSParser.ruleRelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_120);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop337:
            do {
                int alt337=2;
                alt337 = dfa337.predict(input);
                switch (alt337) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop337;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalExpression_return norm1_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalExpression_return retval = new InternalN4JSParser.norm1_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            ShiftExpressionParserRuleCall_0=ruleShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop338:
            do {
                int alt338=2;
                alt338 = dfa338.predict(input);
                switch (alt338) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=ruleShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop338;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_RelationalExpression_return norm2_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_RelationalExpression_return retval = new InternalN4JSParser.norm2_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_120);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop339:
            do {
                int alt339=2;
                alt339 = dfa339.predict(input);
                switch (alt339) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=ruleRelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_120);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop339;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_RelationalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_RelationalExpression_return norm3_RelationalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_RelationalExpression_return retval = new InternalN4JSParser.norm3_RelationalExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ShiftExpression_return ShiftExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalOperator_return OpRelationalOperatorParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_ShiftExpression_return RhsShiftExpressionParserRuleCall_1_0_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_121);
            ShiftExpressionParserRuleCall_0=norm1_ShiftExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.start):null), (ShiftExpressionParserRuleCall_0!=null?((Token)ShiftExpressionParserRuleCall_0.stop):null), grammarAccess.getRelationalExpressionAccess().getShiftExpressionParserRuleCall_0()); 
            }
            loop340:
            do {
                int alt340=2;
                alt340 = dfa340.predict(input);
                switch (alt340) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpRelationalOperatorParserRuleCall_1_0_1_0=norm1_RelationalOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.start):null), (OpRelationalOperatorParserRuleCall_1_0_1_0!=null?((Token)OpRelationalOperatorParserRuleCall_1_0_1_0.stop):null), grammarAccess.getRelationalExpressionAccess().getOpAssignment_1_0_1()); 
            	    }

            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_121);
            	    RhsShiftExpressionParserRuleCall_1_0_2_0=norm1_ShiftExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.start):null), (RhsShiftExpressionParserRuleCall_1_0_2_0!=null?((Token)RhsShiftExpressionParserRuleCall_1_0_2_0.stop):null), grammarAccess.getRelationalExpressionAccess().getRhsAssignment_1_0_2()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop340;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRelationalOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRelationalOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRelationalOperator_return ruleRelationalOperator() throws RecognitionException {
        InternalN4JSParser.ruleRelationalOperator_return retval = new InternalN4JSParser.ruleRelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;


            
        try {
            {
            int alt341=5;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt341=1;
                }
                break;
            case GreaterThanSign:
                {
                alt341=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt341=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt341=4;
                }
                break;
            case Instanceof:
                {
                alt341=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 341, 0, input);

                throw nvae;
            }

            switch (alt341) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_RelationalOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_RelationalOperator_return norm1_RelationalOperator() throws RecognitionException {
        InternalN4JSParser.norm1_RelationalOperator_return retval = new InternalN4JSParser.norm1_RelationalOperator_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0=null;
        Token GreaterThanSignKeyword_1=null;
        Token LessThanSignEqualsSignKeyword_2=null;
        Token GreaterThanSignEqualsSignKeyword_3=null;
        Token InstanceofKeyword_4=null;
        Token InKeyword_5_0=null;


            
        try {
            {
            int alt342=6;
            switch ( input.LA(1) ) {
            case LessThanSign:
                {
                alt342=1;
                }
                break;
            case GreaterThanSign:
                {
                alt342=2;
                }
                break;
            case LessThanSignEqualsSign:
                {
                alt342=3;
                }
                break;
            case GreaterThanSignEqualsSign:
                {
                alt342=4;
                }
                break;
            case Instanceof:
                {
                alt342=5;
                }
                break;
            case In:
                {
                alt342=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 342, 0, input);

                throw nvae;
            }

            switch (alt342) {
                case 1 :
                    {
                    LessThanSignKeyword_0=(Token)match(input,LessThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0, grammarAccess.getRelationalOperatorAccess().getLessThanSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    GreaterThanSignKeyword_1=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LessThanSignEqualsSignKeyword_2=(Token)match(input,LessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignEqualsSignKeyword_2, grammarAccess.getRelationalOperatorAccess().getLessThanSignEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    GreaterThanSignEqualsSignKeyword_3=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_3, grammarAccess.getRelationalOperatorAccess().getGreaterThanSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    InstanceofKeyword_4=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_4, grammarAccess.getRelationalOperatorAccess().getInstanceofKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    InKeyword_5_0=(Token)match(input,In,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_5_0, grammarAccess.getRelationalOperatorAccess().getInKeyword_5_0()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleEqualityExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleEqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleEqualityExpression_return ruleEqualityExpression() throws RecognitionException {
        InternalN4JSParser.ruleEqualityExpression_return retval = new InternalN4JSParser.ruleEqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleRelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleRelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            RelationalExpressionParserRuleCall_0=ruleRelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop343:
            do {
                int alt343=2;
                int LA343_0 = input.LA(1);

                if ( (LA343_0==EqualsSignEqualsSignEqualsSign) && (synpred191_InternalN4JSParser())) {
                    alt343=1;
                }
                else if ( (LA343_0==ExclamationMarkEqualsSignEqualsSign) && (synpred191_InternalN4JSParser())) {
                    alt343=1;
                }
                else if ( (LA343_0==EqualsSignEqualsSign) && (synpred191_InternalN4JSParser())) {
                    alt343=1;
                }
                else if ( (LA343_0==ExclamationMarkEqualsSign) && (synpred191_InternalN4JSParser())) {
                    alt343=1;
                }


                switch (alt343) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=ruleRelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop343;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_EqualityExpression_return norm1_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm1_EqualityExpression_return retval = new InternalN4JSParser.norm1_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            RelationalExpressionParserRuleCall_0=norm1_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop344:
            do {
                int alt344=2;
                int LA344_0 = input.LA(1);

                if ( (LA344_0==EqualsSignEqualsSignEqualsSign) && (synpred192_InternalN4JSParser())) {
                    alt344=1;
                }
                else if ( (LA344_0==ExclamationMarkEqualsSignEqualsSign) && (synpred192_InternalN4JSParser())) {
                    alt344=1;
                }
                else if ( (LA344_0==EqualsSignEqualsSign) && (synpred192_InternalN4JSParser())) {
                    alt344=1;
                }
                else if ( (LA344_0==ExclamationMarkEqualsSign) && (synpred192_InternalN4JSParser())) {
                    alt344=1;
                }


                switch (alt344) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm1_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop344;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_EqualityExpression_return norm2_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm2_EqualityExpression_return retval = new InternalN4JSParser.norm2_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            RelationalExpressionParserRuleCall_0=norm2_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop345:
            do {
                int alt345=2;
                int LA345_0 = input.LA(1);

                if ( (LA345_0==EqualsSignEqualsSignEqualsSign) && (synpred193_InternalN4JSParser())) {
                    alt345=1;
                }
                else if ( (LA345_0==ExclamationMarkEqualsSignEqualsSign) && (synpred193_InternalN4JSParser())) {
                    alt345=1;
                }
                else if ( (LA345_0==EqualsSignEqualsSign) && (synpred193_InternalN4JSParser())) {
                    alt345=1;
                }
                else if ( (LA345_0==ExclamationMarkEqualsSign) && (synpred193_InternalN4JSParser())) {
                    alt345=1;
                }


                switch (alt345) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm2_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop345;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_EqualityExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_EqualityExpression_return norm3_EqualityExpression() throws RecognitionException {
        InternalN4JSParser.norm3_EqualityExpression_return retval = new InternalN4JSParser.norm3_EqualityExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_RelationalExpression_return RelationalExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_RelationalExpression_return RhsRelationalExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_122);
            RelationalExpressionParserRuleCall_0=norm3_RelationalExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.start):null), (RelationalExpressionParserRuleCall_0!=null?((Token)RelationalExpressionParserRuleCall_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRelationalExpressionParserRuleCall_0()); 
            }
            loop346:
            do {
                int alt346=2;
                int LA346_0 = input.LA(1);

                if ( (LA346_0==EqualsSignEqualsSignEqualsSign) && (synpred194_InternalN4JSParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==ExclamationMarkEqualsSignEqualsSign) && (synpred194_InternalN4JSParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==EqualsSignEqualsSign) && (synpred194_InternalN4JSParser())) {
                    alt346=1;
                }
                else if ( (LA346_0==ExclamationMarkEqualsSign) && (synpred194_InternalN4JSParser())) {
                    alt346=1;
                }


                switch (alt346) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    ruleEqualityOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_122);
            	    RhsRelationalExpressionParserRuleCall_1_1_0=norm3_RelationalExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.start):null), (RhsRelationalExpressionParserRuleCall_1_1_0!=null?((Token)RhsRelationalExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getEqualityExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop346;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDExpression_return ruleBitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDExpression_return retval = new InternalN4JSParser.ruleBitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleEqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleEqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_68);
            EqualityExpressionParserRuleCall_0=ruleEqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop347:
            do {
                int alt347=2;
                int LA347_0 = input.LA(1);

                if ( (LA347_0==Ampersand) && (synpred195_InternalN4JSParser())) {
                    alt347=1;
                }


                switch (alt347) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_68);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=ruleEqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop347;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseANDExpression_return norm1_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseANDExpression_return retval = new InternalN4JSParser.norm1_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_68);
            EqualityExpressionParserRuleCall_0=norm1_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop348:
            do {
                int alt348=2;
                int LA348_0 = input.LA(1);

                if ( (LA348_0==Ampersand) && (synpred196_InternalN4JSParser())) {
                    alt348=1;
                }


                switch (alt348) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_68);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm1_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop348;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseANDExpression_return norm2_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseANDExpression_return retval = new InternalN4JSParser.norm2_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_68);
            EqualityExpressionParserRuleCall_0=norm2_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop349:
            do {
                int alt349=2;
                int LA349_0 = input.LA(1);

                if ( (LA349_0==Ampersand) && (synpred197_InternalN4JSParser())) {
                    alt349=1;
                }


                switch (alt349) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_68);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm2_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop349;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseANDExpression_return norm3_BitwiseANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseANDExpression_return retval = new InternalN4JSParser.norm3_BitwiseANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_EqualityExpression_return EqualityExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseANDOperator_return OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_EqualityExpression_return RhsEqualityExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_68);
            EqualityExpressionParserRuleCall_0=norm3_EqualityExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.start):null), (EqualityExpressionParserRuleCall_0!=null?((Token)EqualityExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getEqualityExpressionParserRuleCall_0()); 
            }
            loop350:
            do {
                int alt350=2;
                int LA350_0 = input.LA(1);

                if ( (LA350_0==Ampersand) && (synpred198_InternalN4JSParser())) {
                    alt350=1;
                }


                switch (alt350) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0=ruleBitwiseANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_68);
            	    RhsEqualityExpressionParserRuleCall_1_1_0=norm3_EqualityExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.start):null), (RhsEqualityExpressionParserRuleCall_1_1_0!=null?((Token)RhsEqualityExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop350;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseANDOperator_return ruleBitwiseANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseANDOperator_return retval = new InternalN4JSParser.ruleBitwiseANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandKeyword=null;


            
        try {
            {
            AmpersandKeyword=(Token)match(input,Ampersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandKeyword, grammarAccess.getBitwiseANDOperatorAccess().getAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXORExpression_return ruleBitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXORExpression_return retval = new InternalN4JSParser.ruleBitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            BitwiseANDExpressionParserRuleCall_0=ruleBitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop351:
            do {
                int alt351=2;
                int LA351_0 = input.LA(1);

                if ( (LA351_0==CircumflexAccent) && (synpred199_InternalN4JSParser())) {
                    alt351=1;
                }


                switch (alt351) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=ruleBitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop351;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseXORExpression_return norm1_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseXORExpression_return retval = new InternalN4JSParser.norm1_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            BitwiseANDExpressionParserRuleCall_0=norm1_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop352:
            do {
                int alt352=2;
                int LA352_0 = input.LA(1);

                if ( (LA352_0==CircumflexAccent) && (synpred200_InternalN4JSParser())) {
                    alt352=1;
                }


                switch (alt352) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm1_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop352;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseXORExpression_return norm2_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseXORExpression_return retval = new InternalN4JSParser.norm2_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            BitwiseANDExpressionParserRuleCall_0=norm2_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop353:
            do {
                int alt353=2;
                int LA353_0 = input.LA(1);

                if ( (LA353_0==CircumflexAccent) && (synpred201_InternalN4JSParser())) {
                    alt353=1;
                }


                switch (alt353) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm2_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop353;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseXORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseXORExpression_return norm3_BitwiseXORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseXORExpression_return retval = new InternalN4JSParser.norm3_BitwiseXORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseANDExpression_return BitwiseANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseXOROperator_return OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseANDExpression_return RhsBitwiseANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_123);
            BitwiseANDExpressionParserRuleCall_0=norm3_BitwiseANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.start):null), (BitwiseANDExpressionParserRuleCall_0!=null?((Token)BitwiseANDExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getBitwiseANDExpressionParserRuleCall_0()); 
            }
            loop354:
            do {
                int alt354=2;
                int LA354_0 = input.LA(1);

                if ( (LA354_0==CircumflexAccent) && (synpred202_InternalN4JSParser())) {
                    alt354=1;
                }


                switch (alt354) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseXOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseXOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_123);
            	    RhsBitwiseANDExpressionParserRuleCall_1_1_0=norm3_BitwiseANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseXORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop354;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseXOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseXOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseXOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseXOROperator_return ruleBitwiseXOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseXOROperator_return retval = new InternalN4JSParser.ruleBitwiseXOROperator_return();
        retval.start = input.LT(1);

        Token CircumflexAccentKeyword=null;


            
        try {
            {
            CircumflexAccentKeyword=(Token)match(input,CircumflexAccent,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CircumflexAccentKeyword, grammarAccess.getBitwiseXOROperatorAccess().getCircumflexAccentKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseORExpression_return ruleBitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseORExpression_return retval = new InternalN4JSParser.ruleBitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            BitwiseXORExpressionParserRuleCall_0=ruleBitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop355:
            do {
                int alt355=2;
                int LA355_0 = input.LA(1);

                if ( (LA355_0==VerticalLine) && (synpred203_InternalN4JSParser())) {
                    alt355=1;
                }


                switch (alt355) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=ruleBitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop355;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BitwiseORExpression_return norm1_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_BitwiseORExpression_return retval = new InternalN4JSParser.norm1_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            BitwiseXORExpressionParserRuleCall_0=norm1_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop356:
            do {
                int alt356=2;
                int LA356_0 = input.LA(1);

                if ( (LA356_0==VerticalLine) && (synpred204_InternalN4JSParser())) {
                    alt356=1;
                }


                switch (alt356) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm1_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop356;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_BitwiseORExpression_return norm2_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_BitwiseORExpression_return retval = new InternalN4JSParser.norm2_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            BitwiseXORExpressionParserRuleCall_0=norm2_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop357:
            do {
                int alt357=2;
                int LA357_0 = input.LA(1);

                if ( (LA357_0==VerticalLine) && (synpred205_InternalN4JSParser())) {
                    alt357=1;
                }


                switch (alt357) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm2_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop357;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_BitwiseORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_BitwiseORExpression_return norm3_BitwiseORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_BitwiseORExpression_return retval = new InternalN4JSParser.norm3_BitwiseORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseXORExpression_return BitwiseXORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleBitwiseOROperator_return OpBitwiseOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseXORExpression_return RhsBitwiseXORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_124);
            BitwiseXORExpressionParserRuleCall_0=norm3_BitwiseXORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.start):null), (BitwiseXORExpressionParserRuleCall_0!=null?((Token)BitwiseXORExpressionParserRuleCall_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getBitwiseXORExpressionParserRuleCall_0()); 
            }
            loop358:
            do {
                int alt358=2;
                int LA358_0 = input.LA(1);

                if ( (LA358_0==VerticalLine) && (synpred206_InternalN4JSParser())) {
                    alt358=1;
                }


                switch (alt358) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpBitwiseOROperatorParserRuleCall_1_0_0_1_0=ruleBitwiseOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpBitwiseOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpBitwiseOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_124);
            	    RhsBitwiseXORExpressionParserRuleCall_1_1_0=norm3_BitwiseXORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseXORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseXORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getBitwiseORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop358;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBitwiseOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBitwiseOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBitwiseOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBitwiseOROperator_return ruleBitwiseOROperator() throws RecognitionException {
        InternalN4JSParser.ruleBitwiseOROperator_return retval = new InternalN4JSParser.ruleBitwiseOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineKeyword=null;


            
        try {
            {
            VerticalLineKeyword=(Token)match(input,VerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineKeyword, grammarAccess.getBitwiseOROperatorAccess().getVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDExpression_return ruleLogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDExpression_return retval = new InternalN4JSParser.ruleLogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleBitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleBitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseORExpressionParserRuleCall_0=ruleBitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop359:
            do {
                int alt359=2;
                int LA359_0 = input.LA(1);

                if ( (LA359_0==AmpersandAmpersand) && (synpred207_InternalN4JSParser())) {
                    alt359=1;
                }


                switch (alt359) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=ruleBitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop359;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalANDExpression_return norm1_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalANDExpression_return retval = new InternalN4JSParser.norm1_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseORExpressionParserRuleCall_0=norm1_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop360:
            do {
                int alt360=2;
                int LA360_0 = input.LA(1);

                if ( (LA360_0==AmpersandAmpersand) && (synpred208_InternalN4JSParser())) {
                    alt360=1;
                }


                switch (alt360) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm1_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop360;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalANDExpression_return norm2_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalANDExpression_return retval = new InternalN4JSParser.norm2_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseORExpressionParserRuleCall_0=norm2_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop361:
            do {
                int alt361=2;
                int LA361_0 = input.LA(1);

                if ( (LA361_0==AmpersandAmpersand) && (synpred209_InternalN4JSParser())) {
                    alt361=1;
                }


                switch (alt361) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm2_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop361;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalANDExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalANDExpression_return norm3_LogicalANDExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalANDExpression_return retval = new InternalN4JSParser.norm3_LogicalANDExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_BitwiseORExpression_return BitwiseORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalANDOperator_return OpLogicalANDOperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_BitwiseORExpression_return RhsBitwiseORExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_125);
            BitwiseORExpressionParserRuleCall_0=norm3_BitwiseORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.start):null), (BitwiseORExpressionParserRuleCall_0!=null?((Token)BitwiseORExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getBitwiseORExpressionParserRuleCall_0()); 
            }
            loop362:
            do {
                int alt362=2;
                int LA362_0 = input.LA(1);

                if ( (LA362_0==AmpersandAmpersand) && (synpred210_InternalN4JSParser())) {
                    alt362=1;
                }


                switch (alt362) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpLogicalANDOperatorParserRuleCall_1_0_0_1_0=ruleLogicalANDOperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalANDOperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalANDOperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_125);
            	    RhsBitwiseORExpressionParserRuleCall_1_1_0=norm3_BitwiseORExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.start):null), (RhsBitwiseORExpressionParserRuleCall_1_1_0!=null?((Token)RhsBitwiseORExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalANDExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop362;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalANDOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalANDOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalANDOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalANDOperator_return ruleLogicalANDOperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalANDOperator_return retval = new InternalN4JSParser.ruleLogicalANDOperator_return();
        retval.start = input.LT(1);

        Token AmpersandAmpersandKeyword=null;


            
        try {
            {
            AmpersandAmpersandKeyword=(Token)match(input,AmpersandAmpersand,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AmpersandAmpersandKeyword, grammarAccess.getLogicalANDOperatorAccess().getAmpersandAmpersandKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalORExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalORExpression_return ruleLogicalORExpression() throws RecognitionException {
        InternalN4JSParser.ruleLogicalORExpression_return retval = new InternalN4JSParser.ruleLogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.ruleLogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            LogicalANDExpressionParserRuleCall_0=ruleLogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop363:
            do {
                int alt363=2;
                int LA363_0 = input.LA(1);

                if ( (LA363_0==VerticalLineVerticalLine) && (synpred211_InternalN4JSParser())) {
                    alt363=1;
                }


                switch (alt363) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=ruleLogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop363;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LogicalORExpression_return norm1_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm1_LogicalORExpression_return retval = new InternalN4JSParser.norm1_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            LogicalANDExpressionParserRuleCall_0=norm1_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop364:
            do {
                int alt364=2;
                int LA364_0 = input.LA(1);

                if ( (LA364_0==VerticalLineVerticalLine) && (synpred212_InternalN4JSParser())) {
                    alt364=1;
                }


                switch (alt364) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm1_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop364;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_LogicalORExpression_return norm2_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm2_LogicalORExpression_return retval = new InternalN4JSParser.norm2_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            LogicalANDExpressionParserRuleCall_0=norm2_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop365:
            do {
                int alt365=2;
                int LA365_0 = input.LA(1);

                if ( (LA365_0==VerticalLineVerticalLine) && (synpred213_InternalN4JSParser())) {
                    alt365=1;
                }


                switch (alt365) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm2_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop365;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_LogicalORExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_LogicalORExpression_return norm3_LogicalORExpression() throws RecognitionException {
        InternalN4JSParser.norm3_LogicalORExpression_return retval = new InternalN4JSParser.norm3_LogicalORExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_LogicalANDExpression_return LogicalANDExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleLogicalOROperator_return OpLogicalOROperatorParserRuleCall_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_LogicalANDExpression_return RhsLogicalANDExpressionParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_126);
            LogicalANDExpressionParserRuleCall_0=norm3_LogicalANDExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.start):null), (LogicalANDExpressionParserRuleCall_0!=null?((Token)LogicalANDExpressionParserRuleCall_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getLogicalANDExpressionParserRuleCall_0()); 
            }
            loop366:
            do {
                int alt366=2;
                int LA366_0 = input.LA(1);

                if ( (LA366_0==VerticalLineVerticalLine) && (synpred214_InternalN4JSParser())) {
                    alt366=1;
                }


                switch (alt366) {
            	case 1 :
            	    {
            	    {
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_61);
            	    OpLogicalOROperatorParserRuleCall_1_0_0_1_0=ruleLogicalOROperator();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.start):null), (OpLogicalOROperatorParserRuleCall_1_0_0_1_0!=null?((Token)OpLogicalOROperatorParserRuleCall_1_0_0_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getOpAssignment_1_0_0_1()); 
            	    }

            	    }


            	    }


            	    }


            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_126);
            	    RhsLogicalANDExpressionParserRuleCall_1_1_0=norm3_LogicalANDExpression();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.start):null), (RhsLogicalANDExpressionParserRuleCall_1_1_0!=null?((Token)RhsLogicalANDExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getLogicalORExpressionAccess().getRhsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop366;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLogicalOROperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLogicalOROperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLogicalOROperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLogicalOROperator_return ruleLogicalOROperator() throws RecognitionException {
        InternalN4JSParser.ruleLogicalOROperator_return retval = new InternalN4JSParser.ruleLogicalOROperator_return();
        retval.start = input.LT(1);

        Token VerticalLineVerticalLineKeyword=null;


            
        try {
            {
            VerticalLineVerticalLineKeyword=(Token)match(input,VerticalLineVerticalLine,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(VerticalLineVerticalLineKeyword, grammarAccess.getLogicalOROperatorAccess().getVerticalLineVerticalLineKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleConditionalExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConditionalExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleConditionalExpression_return ruleConditionalExpression() throws RecognitionException {
        InternalN4JSParser.ruleConditionalExpression_return retval = new InternalN4JSParser.ruleConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.ruleLogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            LogicalORExpressionParserRuleCall_0=ruleLogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt367=2;
            int LA367_0 = input.LA(1);

            if ( (LA367_0==QuestionMark) && (synpred215_InternalN4JSParser())) {
                alt367=1;
            }
            switch (alt367) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_90);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ConditionalExpression_return norm1_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm1_ConditionalExpression_return retval = new InternalN4JSParser.norm1_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm1_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            LogicalORExpressionParserRuleCall_0=norm1_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt368=2;
            int LA368_0 = input.LA(1);

            if ( (LA368_0==QuestionMark) && (synpred216_InternalN4JSParser())) {
                alt368=1;
            }
            switch (alt368) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_90);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_ConditionalExpression_return norm2_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm2_ConditionalExpression_return retval = new InternalN4JSParser.norm2_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm2_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            LogicalORExpressionParserRuleCall_0=norm2_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt369=2;
            int LA369_0 = input.LA(1);

            if ( (LA369_0==QuestionMark) && (synpred217_InternalN4JSParser())) {
                alt369=1;
            }
            switch (alt369) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_90);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_ConditionalExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_ConditionalExpression_return norm3_ConditionalExpression() throws RecognitionException {
        InternalN4JSParser.norm3_ConditionalExpression_return retval = new InternalN4JSParser.norm3_ConditionalExpression_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_1_0_0_1=null;
        Token ColonKeyword_1_2=null;
        InternalN4JSParser.norm3_LogicalORExpression_return LogicalORExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return TrueExpressionAssignmentExpressionParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return FalseExpressionAssignmentExpressionParserRuleCall_1_3_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_127);
            LogicalORExpressionParserRuleCall_0=norm3_LogicalORExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.start):null), (LogicalORExpressionParserRuleCall_0!=null?((Token)LogicalORExpressionParserRuleCall_0.stop):null), grammarAccess.getConditionalExpressionAccess().getLogicalORExpressionParserRuleCall_0()); 
            }
            int alt370=2;
            int LA370_0 = input.LA(1);

            if ( (LA370_0==QuestionMark) && (synpred218_InternalN4JSParser())) {
                alt370=1;
            }
            switch (alt370) {
                case 1 :
                    {
                    {
                    {
                    QuestionMarkKeyword_1_0_0_1=(Token)match(input,QuestionMark,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(QuestionMarkKeyword_1_0_0_1, grammarAccess.getConditionalExpressionAccess().getQuestionMarkKeyword_1_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_90);
                    TrueExpressionAssignmentExpressionParserRuleCall_1_1_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.start):null), (TrueExpressionAssignmentExpressionParserRuleCall_1_1_0!=null?((Token)TrueExpressionAssignmentExpressionParserRuleCall_1_1_0.stop):null), grammarAccess.getConditionalExpressionAccess().getTrueExpressionAssignment_1_1()); 
                    }

                    }


                    }

                    ColonKeyword_1_2=(Token)match(input,Colon,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_2, grammarAccess.getConditionalExpressionAccess().getColonKeyword_1_2()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FalseExpressionAssignmentExpressionParserRuleCall_1_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.start):null), (FalseExpressionAssignmentExpressionParserRuleCall_1_3_0!=null?((Token)FalseExpressionAssignmentExpressionParserRuleCall_1_3_0.stop):null), grammarAccess.getConditionalExpressionAccess().getFalseExpressionAssignment_1_3()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentExpression_return ruleAssignmentExpression() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentExpression_return retval = new InternalN4JSParser.ruleAssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.rulePromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.ruleArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.ruleConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt372=4;
            alt372 = dfa372.predict(input);
            switch (alt372) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=ruleAwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=rulePromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=ruleArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_128);
                    ConditionalExpressionParserRuleCall_4_0=ruleConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt371=2;
                    alt371 = dfa371.predict(input);
                    switch (alt371) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_61);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=ruleAssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AssignmentExpression_return norm1_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AssignmentExpression_return retval = new InternalN4JSParser.norm1_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm1_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.norm1_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt374=4;
            alt374 = dfa374.predict(input);
            switch (alt374) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm1_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm1_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm1_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_128);
                    ConditionalExpressionParserRuleCall_4_0=norm1_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt373=2;
                    alt373 = dfa373.predict(input);
                    switch (alt373) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_61);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AssignmentExpression_return norm2_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AssignmentExpression_return retval = new InternalN4JSParser.norm2_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm2_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm2_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.ruleYieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSParser.norm2_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt376=5;
            alt376 = dfa376.predict(input);
            switch (alt376) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm2_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm2_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm2_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=ruleYieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_128);
                    ConditionalExpressionParserRuleCall_4_0=norm2_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt375=2;
                    alt375 = dfa375.predict(input);
                    switch (alt375) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_61);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm2_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AssignmentExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AssignmentExpression_return norm3_AssignmentExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AssignmentExpression_return retval = new InternalN4JSParser.norm3_AssignmentExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_AwaitExpression_return AwaitExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_PromisifyExpression_return PromisifyExpressionParserRuleCall_1 = null;

        InternalN4JSParser.norm3_ArrowExpression_return ArrowExpressionParserRuleCall_2 = null;

        InternalN4JSParser.norm1_YieldExpression_return YieldExpressionParserRuleCall_3_0 = null;

        InternalN4JSParser.norm3_ConditionalExpression_return ConditionalExpressionParserRuleCall_4_0 = null;

        InternalN4JSParser.ruleAssignmentOperator_return OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return RhsAssignmentExpressionParserRuleCall_4_1_1_0 = null;



            
        try {
            {
            int alt378=5;
            alt378 = dfa378.predict(input);
            switch (alt378) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    AwaitExpressionParserRuleCall_0=norm3_AwaitExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.start):null), (AwaitExpressionParserRuleCall_0!=null?((Token)AwaitExpressionParserRuleCall_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getAwaitExpressionParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    PromisifyExpressionParserRuleCall_1=norm3_PromisifyExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.start):null), (PromisifyExpressionParserRuleCall_1!=null?((Token)PromisifyExpressionParserRuleCall_1.stop):null), grammarAccess.getAssignmentExpressionAccess().getPromisifyExpressionParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ArrowExpressionParserRuleCall_2=norm3_ArrowExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.start):null), (ArrowExpressionParserRuleCall_2!=null?((Token)ArrowExpressionParserRuleCall_2.stop):null), grammarAccess.getAssignmentExpressionAccess().getArrowExpressionParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    YieldExpressionParserRuleCall_3_0=norm1_YieldExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.start):null), (YieldExpressionParserRuleCall_3_0!=null?((Token)YieldExpressionParserRuleCall_3_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getYieldExpressionParserRuleCall_3_0()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    {
                    pushFollow(FOLLOW_128);
                    ConditionalExpressionParserRuleCall_4_0=norm3_ConditionalExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.start):null), (ConditionalExpressionParserRuleCall_4_0!=null?((Token)ConditionalExpressionParserRuleCall_4_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getConditionalExpressionParserRuleCall_4_0()); 
                    }
                    int alt377=2;
                    alt377 = dfa377.predict(input);
                    switch (alt377) {
                        case 1 :
                            {
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_61);
                            OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0=ruleAssignmentOperator();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.start):null), (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0!=null?((Token)OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getOpAssignment_4_1_0_0_1()); 
                            }

                            }


                            }


                            }


                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            RhsAssignmentExpressionParserRuleCall_4_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.start):null), (RhsAssignmentExpressionParserRuleCall_4_1_1_0!=null?((Token)RhsAssignmentExpressionParserRuleCall_4_1_1_0.stop):null), grammarAccess.getAssignmentExpressionAccess().getRhsAssignment_4_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleYieldExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleYieldExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleYieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleYieldExpression_return ruleYieldExpression() throws RecognitionException {
        InternalN4JSParser.ruleYieldExpression_return retval = new InternalN4JSParser.ruleYieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt379=2;
            int LA379_0 = input.LA(1);

            if ( (LA379_0==Asterisk) && (synpred239_InternalN4JSParser())) {
                alt379=1;
            }
            switch (alt379) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt380=2;
            alt380 = dfa380.predict(input);
            switch (alt380) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_YieldExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_YieldExpression_return norm1_YieldExpression() throws RecognitionException {
        InternalN4JSParser.norm1_YieldExpression_return retval = new InternalN4JSParser.norm1_YieldExpression_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1=null;
        Token ManyAsteriskKeyword_2_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_3_0 = null;



            
        try {
            {
            {
            YieldKeyword_1=(Token)match(input,Yield,FOLLOW_129); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(YieldKeyword_1, grammarAccess.getYieldExpressionAccess().getYieldKeyword_1()); 
            }
            int alt381=2;
            int LA381_0 = input.LA(1);

            if ( (LA381_0==Asterisk) && (synpred241_InternalN4JSParser())) {
                alt381=1;
            }
            switch (alt381) {
                case 1 :
                    {
                    {
                    ManyAsteriskKeyword_2_0=(Token)match(input,Asterisk,FOLLOW_130); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ManyAsteriskKeyword_2_0, grammarAccess.getYieldExpressionAccess().getManyAsteriskKeyword_2_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt382=2;
            alt382 = dfa382.predict(input);
            switch (alt382) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ExpressionAssignmentExpressionParserRuleCall_3_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_3_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_3_0.stop):null), grammarAccess.getYieldExpressionAccess().getExpressionAssignment_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAssignmentOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAssignmentOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAssignmentOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAssignmentOperator_return ruleAssignmentOperator() throws RecognitionException {
        InternalN4JSParser.ruleAssignmentOperator_return retval = new InternalN4JSParser.ruleAssignmentOperator_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0=null;
        Token AsteriskEqualsSignKeyword_1=null;
        Token SolidusEqualsSignKeyword_2=null;
        Token PercentSignEqualsSignKeyword_3=null;
        Token PlusSignEqualsSignKeyword_4=null;
        Token HyphenMinusEqualsSignKeyword_5=null;
        Token LessThanSignLessThanSignEqualsSignKeyword_6=null;
        Token GreaterThanSignKeyword_7_0=null;
        Token GreaterThanSignKeyword_7_1=null;
        Token GreaterThanSignEqualsSignKeyword_7_2=null;
        Token AmpersandEqualsSignKeyword_8=null;
        Token CircumflexAccentEqualsSignKeyword_9=null;
        Token VerticalLineEqualsSignKeyword_10=null;


            
        try {
            {
            int alt384=11;
            switch ( input.LA(1) ) {
            case EqualsSign:
                {
                alt384=1;
                }
                break;
            case AsteriskEqualsSign:
                {
                alt384=2;
                }
                break;
            case SolidusEqualsSign:
                {
                alt384=3;
                }
                break;
            case PercentSignEqualsSign:
                {
                alt384=4;
                }
                break;
            case PlusSignEqualsSign:
                {
                alt384=5;
                }
                break;
            case HyphenMinusEqualsSign:
                {
                alt384=6;
                }
                break;
            case LessThanSignLessThanSignEqualsSign:
                {
                alt384=7;
                }
                break;
            case GreaterThanSign:
                {
                alt384=8;
                }
                break;
            case AmpersandEqualsSign:
                {
                alt384=9;
                }
                break;
            case CircumflexAccentEqualsSign:
                {
                alt384=10;
                }
                break;
            case VerticalLineEqualsSign:
                {
                alt384=11;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 384, 0, input);

                throw nvae;
            }

            switch (alt384) {
                case 1 :
                    {
                    EqualsSignKeyword_0=(Token)match(input,EqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_0, grammarAccess.getAssignmentOperatorAccess().getEqualsSignKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    AsteriskEqualsSignKeyword_1=(Token)match(input,AsteriskEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsteriskEqualsSignKeyword_1, grammarAccess.getAssignmentOperatorAccess().getAsteriskEqualsSignKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    SolidusEqualsSignKeyword_2=(Token)match(input,SolidusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_2, grammarAccess.getAssignmentOperatorAccess().getSolidusEqualsSignKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PercentSignEqualsSignKeyword_3=(Token)match(input,PercentSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PercentSignEqualsSignKeyword_3, grammarAccess.getAssignmentOperatorAccess().getPercentSignEqualsSignKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    PlusSignEqualsSignKeyword_4=(Token)match(input,PlusSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PlusSignEqualsSignKeyword_4, grammarAccess.getAssignmentOperatorAccess().getPlusSignEqualsSignKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    HyphenMinusEqualsSignKeyword_5=(Token)match(input,HyphenMinusEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(HyphenMinusEqualsSignKeyword_5, grammarAccess.getAssignmentOperatorAccess().getHyphenMinusEqualsSignKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    LessThanSignLessThanSignEqualsSignKeyword_6=(Token)match(input,LessThanSignLessThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignLessThanSignEqualsSignKeyword_6, grammarAccess.getAssignmentOperatorAccess().getLessThanSignLessThanSignEqualsSignKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    {
                    GreaterThanSignKeyword_7_0=(Token)match(input,GreaterThanSign,FOLLOW_131); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_7_0, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_0()); 
                    }
                    int alt383=2;
                    int LA383_0 = input.LA(1);

                    if ( (LA383_0==GreaterThanSign) ) {
                        alt383=1;
                    }
                    switch (alt383) {
                        case 1 :
                            {
                            GreaterThanSignKeyword_7_1=(Token)match(input,GreaterThanSign,FOLLOW_132); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GreaterThanSignKeyword_7_1, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignKeyword_7_1()); 
                            }

                            }
                            break;

                    }

                    GreaterThanSignEqualsSignKeyword_7_2=(Token)match(input,GreaterThanSignEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignEqualsSignKeyword_7_2, grammarAccess.getAssignmentOperatorAccess().getGreaterThanSignEqualsSignKeyword_7_2()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    AmpersandEqualsSignKeyword_8=(Token)match(input,AmpersandEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AmpersandEqualsSignKeyword_8, grammarAccess.getAssignmentOperatorAccess().getAmpersandEqualsSignKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    CircumflexAccentEqualsSignKeyword_9=(Token)match(input,CircumflexAccentEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CircumflexAccentEqualsSignKeyword_9, grammarAccess.getAssignmentOperatorAccess().getCircumflexAccentEqualsSignKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    VerticalLineEqualsSignKeyword_10=(Token)match(input,VerticalLineEqualsSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VerticalLineEqualsSignKeyword_10, grammarAccess.getAssignmentOperatorAccess().getVerticalLineEqualsSignKeyword_10()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAwaitExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAwaitExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAwaitExpression_return ruleAwaitExpression() throws RecognitionException {
        InternalN4JSParser.ruleAwaitExpression_return retval = new InternalN4JSParser.ruleAwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await_1,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AwaitExpression_return norm1_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm1_AwaitExpression_return retval = new InternalN4JSParser.norm1_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await_1,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_AwaitExpression_return norm2_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm2_AwaitExpression_return retval = new InternalN4JSParser.norm2_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await_1,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_AwaitExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_AwaitExpression_return norm3_AwaitExpression() throws RecognitionException {
        InternalN4JSParser.norm3_AwaitExpression_return retval = new InternalN4JSParser.norm3_AwaitExpression_return();
        retval.start = input.LT(1);

        Token AwaitKeyword_0_0_1=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            AwaitKeyword_0_0_1=(Token)match(input,Await_1,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(AwaitKeyword_0_0_1, grammarAccess.getAwaitExpressionAccess().getAwaitKeyword_0_0_1()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getAwaitExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePromisifyExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePromisifyExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePromisifyExpression_return rulePromisifyExpression() throws RecognitionException {
        InternalN4JSParser.rulePromisifyExpression_return retval = new InternalN4JSParser.rulePromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.ruleAssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_PromisifyExpression_return norm1_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm1_PromisifyExpression_return retval = new InternalN4JSParser.norm1_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_PromisifyExpression_return norm2_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm2_PromisifyExpression_return retval = new InternalN4JSParser.norm2_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm2_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_PromisifyExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_PromisifyExpression_return norm3_PromisifyExpression() throws RecognitionException {
        InternalN4JSParser.norm3_PromisifyExpression_return retval = new InternalN4JSParser.norm3_PromisifyExpression_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        Token PromisifyKeyword_0_0_2=null;
        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_133); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getPromisifyExpressionAccess().getCommercialAtKeyword_0_0_1()); 
            }
            PromisifyKeyword_0_0_2=(Token)match(input,Promisify,FOLLOW_61); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(PromisifyKeyword_0_0_2, grammarAccess.getPromisifyExpressionAccess().getPromisifyKeyword_0_0_2()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_2);
            ExpressionAssignmentExpressionParserRuleCall_1_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0.stop):null), grammarAccess.getPromisifyExpressionAccess().getExpressionAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpression_return ruleExpression() throws RecognitionException {
        InternalN4JSParser.ruleExpression_return retval = new InternalN4JSParser.ruleExpression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.ruleAssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.ruleAssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_32);
            AssignmentExpressionParserRuleCall_0=ruleAssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt386=2;
            int LA386_0 = input.LA(1);

            if ( (LA386_0==Comma) ) {
                alt386=1;
            }
            switch (alt386) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=ruleAssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop385:
                    do {
                        int alt385=2;
                        int LA385_0 = input.LA(1);

                        if ( (LA385_0==Comma) ) {
                            alt385=1;
                        }


                        switch (alt385) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_32);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=ruleAssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop385;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Expression_return norm1_Expression() throws RecognitionException {
        InternalN4JSParser.norm1_Expression_return retval = new InternalN4JSParser.norm1_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm1_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_32);
            AssignmentExpressionParserRuleCall_0=norm1_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt388=2;
            int LA388_0 = input.LA(1);

            if ( (LA388_0==Comma) ) {
                alt388=1;
            }
            switch (alt388) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm1_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop387:
                    do {
                        int alt387=2;
                        int LA387_0 = input.LA(1);

                        if ( (LA387_0==Comma) ) {
                            alt387=1;
                        }


                        switch (alt387) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_32);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm1_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop387;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm2_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm2_Expression_return norm2_Expression() throws RecognitionException {
        InternalN4JSParser.norm2_Expression_return retval = new InternalN4JSParser.norm2_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm2_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm2_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_32);
            AssignmentExpressionParserRuleCall_0=norm2_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt390=2;
            int LA390_0 = input.LA(1);

            if ( (LA390_0==Comma) ) {
                alt390=1;
            }
            switch (alt390) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm2_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop389:
                    do {
                        int alt389=2;
                        int LA389_0 = input.LA(1);

                        if ( (LA389_0==Comma) ) {
                            alt389=1;
                        }


                        switch (alt389) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_32);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm2_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop389;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm3_Expression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm3_Expression_return norm3_Expression() throws RecognitionException {
        InternalN4JSParser.norm3_Expression_return retval = new InternalN4JSParser.norm3_Expression_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_1=null;
        Token CommaKeyword_1_3_0=null;
        InternalN4JSParser.norm3_AssignmentExpression_return AssignmentExpressionParserRuleCall_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_2_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExprsAssignmentExpressionParserRuleCall_1_3_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_32);
            AssignmentExpressionParserRuleCall_0=norm3_AssignmentExpression();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.start):null), (AssignmentExpressionParserRuleCall_0!=null?((Token)AssignmentExpressionParserRuleCall_0.stop):null), grammarAccess.getExpressionAccess().getAssignmentExpressionParserRuleCall_0()); 
            }
            int alt392=2;
            int LA392_0 = input.LA(1);

            if ( (LA392_0==Comma) ) {
                alt392=1;
            }
            switch (alt392) {
                case 1 :
                    {
                    CommaKeyword_1_1=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(CommaKeyword_1_1, grammarAccess.getExpressionAccess().getCommaKeyword_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_32);
                    ExprsAssignmentExpressionParserRuleCall_1_2_0=norm3_AssignmentExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_2_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_2_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_2()); 
                    }

                    }


                    }
                    loop391:
                    do {
                        int alt391=2;
                        int LA391_0 = input.LA(1);

                        if ( (LA391_0==Comma) ) {
                            alt391=1;
                        }


                        switch (alt391) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_3_0=(Token)match(input,Comma,FOLLOW_61); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_3_0, grammarAccess.getExpressionAccess().getCommaKeyword_1_3_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_32);
                    	    ExprsAssignmentExpressionParserRuleCall_1_3_1_0=norm3_AssignmentExpression();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.start):null), (ExprsAssignmentExpressionParserRuleCall_1_3_1_0!=null?((Token)ExprsAssignmentExpressionParserRuleCall_1_3_1_0.stop):null), grammarAccess.getExpressionAccess().getExprsAssignment_1_3_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop391;
                        }
                    } while (true);


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateLiteral_return ruleTemplateLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateLiteral_return retval = new InternalN4JSParser.ruleTemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSParser.norm1_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt396=2;
            int LA396_0 = input.LA(1);

            if ( (LA396_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt396=1;
            }
            else if ( (LA396_0==RULE_TEMPLATE_HEAD) ) {
                alt396=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 396, 0, input);

                throw nvae;
            }
            switch (alt396) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_134);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt393=2;
                    int LA393_0 = input.LA(1);

                    if ( ((LA393_0>=Intersection && LA393_0<=Implements)||(LA393_0>=Promisify && LA393_0<=Abstract)||(LA393_0>=External && LA393_0<=Function)||(LA393_0>=Private && LA393_0<=Delete)||LA393_0==Public||LA393_0==Static||(LA393_0>=Target && LA393_0<=Await_1)||LA393_0==Class||(LA393_0>=False && LA393_0<=Super)||LA393_0==Union||(LA393_0>=Yield && LA393_0<=This)||(LA393_0>=From && LA393_0<=Void)||(LA393_0>=Get && LA393_0<=Set)||LA393_0==PlusSignPlusSign||LA393_0==HyphenMinusHyphenMinus||LA393_0==SolidusEqualsSign||LA393_0==As||LA393_0==Of||LA393_0==ExclamationMark||LA393_0==LeftParenthesis||LA393_0==PlusSign||LA393_0==HyphenMinus||LA393_0==Solidus||LA393_0==LessThanSign||(LA393_0>=CommercialAt && LA393_0<=LeftSquareBracket)||LA393_0==LeftCurlyBracket||LA393_0==Tilde||LA393_0==RULE_DOUBLE||(LA393_0>=RULE_HEX_INT && LA393_0<=RULE_LEGACY_OCTAL_INT)||LA393_0==RULE_SCIENTIFIC_INT||LA393_0==RULE_IDENTIFIER||LA393_0==RULE_STRING||(LA393_0>=RULE_TEMPLATE_HEAD && LA393_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA393_0==RULE_INT) ) {
                        alt393=1;
                    }
                    switch (alt393) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_134);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm1_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_135);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop395:
                    do {
                        int alt395=2;
                        int LA395_0 = input.LA(1);

                        if ( (LA395_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt395=1;
                        }


                        switch (alt395) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_134);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt394=2;
                    	    int LA394_0 = input.LA(1);

                    	    if ( ((LA394_0>=Intersection && LA394_0<=Implements)||(LA394_0>=Promisify && LA394_0<=Abstract)||(LA394_0>=External && LA394_0<=Function)||(LA394_0>=Private && LA394_0<=Delete)||LA394_0==Public||LA394_0==Static||(LA394_0>=Target && LA394_0<=Await_1)||LA394_0==Class||(LA394_0>=False && LA394_0<=Super)||LA394_0==Union||(LA394_0>=Yield && LA394_0<=This)||(LA394_0>=From && LA394_0<=Void)||(LA394_0>=Get && LA394_0<=Set)||LA394_0==PlusSignPlusSign||LA394_0==HyphenMinusHyphenMinus||LA394_0==SolidusEqualsSign||LA394_0==As||LA394_0==Of||LA394_0==ExclamationMark||LA394_0==LeftParenthesis||LA394_0==PlusSign||LA394_0==HyphenMinus||LA394_0==Solidus||LA394_0==LessThanSign||(LA394_0>=CommercialAt && LA394_0<=LeftSquareBracket)||LA394_0==LeftCurlyBracket||LA394_0==Tilde||LA394_0==RULE_DOUBLE||(LA394_0>=RULE_HEX_INT && LA394_0<=RULE_LEGACY_OCTAL_INT)||LA394_0==RULE_SCIENTIFIC_INT||LA394_0==RULE_IDENTIFIER||LA394_0==RULE_STRING||(LA394_0>=RULE_TEMPLATE_HEAD && LA394_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA394_0==RULE_INT) ) {
                    	        alt394=1;
                    	    }
                    	    switch (alt394) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_134);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm1_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_135);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop395;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_TemplateLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_TemplateLiteral_return norm1_TemplateLiteral() throws RecognitionException {
        InternalN4JSParser.norm1_TemplateLiteral_return retval = new InternalN4JSParser.norm1_TemplateLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNoSubstitutionTemplate_return SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTemplateHead_return SegmentsTemplateHeadParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_2 = null;

        InternalN4JSParser.ruleTemplateMiddle_return SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0 = null;

        InternalN4JSParser.norm3_Expression_return SegmentsExpressionParserRuleCall_1_1_3_1_0 = null;

        InternalN4JSParser.ruleTemplateExpressionEnd_return TemplateExpressionEndParserRuleCall_1_1_3_2 = null;

        InternalN4JSParser.ruleTemplateTail_return SegmentsTemplateTailParserRuleCall_1_1_4_0 = null;



            
        try {
            {
            {
            int alt400=2;
            int LA400_0 = input.LA(1);

            if ( (LA400_0==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
                alt400=1;
            }
            else if ( (LA400_0==RULE_TEMPLATE_HEAD) ) {
                alt400=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 400, 0, input);

                throw nvae;
            }
            switch (alt400) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0=ruleNoSubstitutionTemplate();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.start):null), (SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0!=null?((Token)SegmentsNoSubstitutionTemplateParserRuleCall_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_134);
                    SegmentsTemplateHeadParserRuleCall_1_1_0_0=ruleTemplateHead();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.start):null), (SegmentsTemplateHeadParserRuleCall_1_1_0_0!=null?((Token)SegmentsTemplateHeadParserRuleCall_1_1_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_0()); 
                    }

                    }


                    }
                    int alt397=2;
                    int LA397_0 = input.LA(1);

                    if ( ((LA397_0>=Intersection && LA397_0<=Implements)||(LA397_0>=Promisify && LA397_0<=Abstract)||(LA397_0>=External && LA397_0<=Function)||(LA397_0>=Private && LA397_0<=Delete)||LA397_0==Public||LA397_0==Static||(LA397_0>=Target && LA397_0<=Await_1)||LA397_0==Class||(LA397_0>=False && LA397_0<=Super)||LA397_0==Union||(LA397_0>=Yield && LA397_0<=This)||(LA397_0>=From && LA397_0<=Void)||(LA397_0>=Get && LA397_0<=Set)||LA397_0==PlusSignPlusSign||LA397_0==HyphenMinusHyphenMinus||LA397_0==SolidusEqualsSign||LA397_0==As||LA397_0==Of||LA397_0==ExclamationMark||LA397_0==LeftParenthesis||LA397_0==PlusSign||LA397_0==HyphenMinus||LA397_0==Solidus||LA397_0==LessThanSign||(LA397_0>=CommercialAt && LA397_0<=LeftSquareBracket)||LA397_0==LeftCurlyBracket||LA397_0==Tilde||LA397_0==RULE_DOUBLE||(LA397_0>=RULE_HEX_INT && LA397_0<=RULE_LEGACY_OCTAL_INT)||LA397_0==RULE_SCIENTIFIC_INT||LA397_0==RULE_IDENTIFIER||LA397_0==RULE_STRING||(LA397_0>=RULE_TEMPLATE_HEAD && LA397_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA397_0==RULE_INT) ) {
                        alt397=1;
                    }
                    switch (alt397) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_134);
                            SegmentsExpressionParserRuleCall_1_1_1_0=norm3_Expression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }

                    pushFollow(FOLLOW_135);
                    TemplateExpressionEndParserRuleCall_1_1_2=ruleTemplateExpressionEnd();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_2()); 
                    }
                    loop399:
                    do {
                        int alt399=2;
                        int LA399_0 = input.LA(1);

                        if ( (LA399_0==RULE_TEMPLATE_MIDDLE) ) {
                            alt399=1;
                        }


                        switch (alt399) {
                    	case 1 :
                    	    {
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_134);
                    	    SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0=ruleTemplateMiddle();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.start):null), (SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0!=null?((Token)SegmentsTemplateMiddleParserRuleCall_1_1_3_0_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_0()); 
                    	    }

                    	    }


                    	    }
                    	    int alt398=2;
                    	    int LA398_0 = input.LA(1);

                    	    if ( ((LA398_0>=Intersection && LA398_0<=Implements)||(LA398_0>=Promisify && LA398_0<=Abstract)||(LA398_0>=External && LA398_0<=Function)||(LA398_0>=Private && LA398_0<=Delete)||LA398_0==Public||LA398_0==Static||(LA398_0>=Target && LA398_0<=Await_1)||LA398_0==Class||(LA398_0>=False && LA398_0<=Super)||LA398_0==Union||(LA398_0>=Yield && LA398_0<=This)||(LA398_0>=From && LA398_0<=Void)||(LA398_0>=Get && LA398_0<=Set)||LA398_0==PlusSignPlusSign||LA398_0==HyphenMinusHyphenMinus||LA398_0==SolidusEqualsSign||LA398_0==As||LA398_0==Of||LA398_0==ExclamationMark||LA398_0==LeftParenthesis||LA398_0==PlusSign||LA398_0==HyphenMinus||LA398_0==Solidus||LA398_0==LessThanSign||(LA398_0>=CommercialAt && LA398_0<=LeftSquareBracket)||LA398_0==LeftCurlyBracket||LA398_0==Tilde||LA398_0==RULE_DOUBLE||(LA398_0>=RULE_HEX_INT && LA398_0<=RULE_LEGACY_OCTAL_INT)||LA398_0==RULE_SCIENTIFIC_INT||LA398_0==RULE_IDENTIFIER||LA398_0==RULE_STRING||(LA398_0>=RULE_TEMPLATE_HEAD && LA398_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA398_0==RULE_INT) ) {
                    	        alt398=1;
                    	    }
                    	    switch (alt398) {
                    	        case 1 :
                    	            {
                    	            {
                    	            pushFollow(FOLLOW_134);
                    	            SegmentsExpressionParserRuleCall_1_1_3_1_0=norm3_Expression();

                    	            state._fsp--;
                    	            if (state.failed) return retval;
                    	            if ( state.backtracking==0 ) {
                    	               announce((SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.start):null), (SegmentsExpressionParserRuleCall_1_1_3_1_0!=null?((Token)SegmentsExpressionParserRuleCall_1_1_3_1_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_3_1()); 
                    	            }

                    	            }


                    	            }
                    	            break;

                    	    }

                    	    pushFollow(FOLLOW_135);
                    	    TemplateExpressionEndParserRuleCall_1_1_3_2=ruleTemplateExpressionEnd();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.start):null), (TemplateExpressionEndParserRuleCall_1_1_3_2!=null?((Token)TemplateExpressionEndParserRuleCall_1_1_3_2.stop):null), grammarAccess.getTemplateLiteralAccess().getTemplateExpressionEndParserRuleCall_1_1_3_2()); 
                    	    }

                    	    }
                    	    break;

                    	default :
                    	    break loop399;
                        }
                    } while (true);
                    {
                    {
                    pushFollow(FOLLOW_2);
                    SegmentsTemplateTailParserRuleCall_1_1_4_0=ruleTemplateTail();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.start):null), (SegmentsTemplateTailParserRuleCall_1_1_4_0!=null?((Token)SegmentsTemplateTailParserRuleCall_1_1_4_0.stop):null), grammarAccess.getTemplateLiteralAccess().getSegmentsAssignment_1_1_4()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateExpressionEnd() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateExpressionEnd();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateExpressionEnd_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateExpressionEnd_return ruleTemplateExpressionEnd() throws RecognitionException {
        InternalN4JSParser.ruleTemplateExpressionEnd_return retval = new InternalN4JSParser.ruleTemplateExpressionEnd_return();
        retval.start = input.LT(1);

        Token RightCurlyBracketKeyword=null;


        		setInTemplateSegment();
            
        try {
            {
            RightCurlyBracketKeyword=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword, grammarAccess.getTemplateExpressionEndAccess().getRightCurlyBracketKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNoSubstitutionTemplate() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNoSubstitutionTemplate();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNoSubstitutionTemplate_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoSubstitutionTemplate_return ruleNoSubstitutionTemplate() throws RecognitionException {
        InternalN4JSParser.ruleNoSubstitutionTemplate_return retval = new InternalN4JSParser.ruleNoSubstitutionTemplate_return();
        retval.start = input.LT(1);

        Token RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0=(Token)match(input,RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueNO_SUBSTITUTION_TEMPLATE_LITERALTerminalRuleCall_1_0, grammarAccess.getNoSubstitutionTemplateAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateHead() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateHead();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateHead_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateHead_return ruleTemplateHead() throws RecognitionException {
        InternalN4JSParser.ruleTemplateHead_return retval = new InternalN4JSParser.ruleTemplateHead_return();
        retval.start = input.LT(1);

        Token RawValueTEMPLATE_HEADTerminalRuleCall_1_0=null;


            
        try {
            {
            {
            {
            {
            RawValueTEMPLATE_HEADTerminalRuleCall_1_0=(Token)match(input,RULE_TEMPLATE_HEAD,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RawValueTEMPLATE_HEADTerminalRuleCall_1_0, grammarAccess.getTemplateHeadAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTail() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTail();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTail_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTail_return ruleTemplateTail() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTail_return retval = new InternalN4JSParser.ruleTemplateTail_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTemplateTailLiteral_return RawValueTemplateTailLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateTailLiteralParserRuleCall_1_0=ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.start):null), (RawValueTemplateTailLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateTailLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateTailAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddle() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddle();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddle_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddle_return ruleTemplateMiddle() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddle_return retval = new InternalN4JSParser.ruleTemplateMiddle_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTemplateMiddleLiteral_return RawValueTemplateMiddleLiteralParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_2);
            RawValueTemplateMiddleLiteralParserRuleCall_1_0=ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.start):null), (RawValueTemplateMiddleLiteralParserRuleCall_1_0!=null?((Token)RawValueTemplateMiddleLiteralParserRuleCall_1_0.stop):null), grammarAccess.getTemplateMiddleAccess().getRawValueAssignment_1()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteral_return ruleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLiteral_return retval = new InternalN4JSParser.ruleLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleNumericLiteral_return NumericLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleBooleanLiteral_return BooleanLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleStringLiteral_return StringLiteralParserRuleCall_2 = null;

        InternalN4JSParser.ruleNullLiteral_return NullLiteralParserRuleCall_3 = null;

        InternalN4JSParser.ruleRegularExpressionLiteral_return RegularExpressionLiteralParserRuleCall_4 = null;



            
        try {
            {
            int alt401=5;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_BINARY_INT:
            case RULE_OCTAL_INT:
            case RULE_LEGACY_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt401=1;
                }
                break;
            case False:
            case True:
                {
                alt401=2;
                }
                break;
            case RULE_STRING:
                {
                alt401=3;
                }
                break;
            case Null:
                {
                alt401=4;
                }
                break;
            case SolidusEqualsSign:
            case Solidus:
                {
                alt401=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 401, 0, input);

                throw nvae;
            }

            switch (alt401) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    NumericLiteralParserRuleCall_0=ruleNumericLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.start):null), (NumericLiteralParserRuleCall_0!=null?((Token)NumericLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAccess().getNumericLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    BooleanLiteralParserRuleCall_1=ruleBooleanLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.start):null), (BooleanLiteralParserRuleCall_1!=null?((Token)BooleanLiteralParserRuleCall_1.stop):null), grammarAccess.getLiteralAccess().getBooleanLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    StringLiteralParserRuleCall_2=ruleStringLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.start):null), (StringLiteralParserRuleCall_2!=null?((Token)StringLiteralParserRuleCall_2.stop):null), grammarAccess.getLiteralAccess().getStringLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    NullLiteralParserRuleCall_3=ruleNullLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.start):null), (NullLiteralParserRuleCall_3!=null?((Token)NullLiteralParserRuleCall_3.stop):null), grammarAccess.getLiteralAccess().getNullLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    RegularExpressionLiteralParserRuleCall_4=ruleRegularExpressionLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.start):null), (RegularExpressionLiteralParserRuleCall_4!=null?((Token)RegularExpressionLiteralParserRuleCall_4.stop):null), grammarAccess.getLiteralAccess().getRegularExpressionLiteralParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNullLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNullLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNullLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNullLiteral_return ruleNullLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNullLiteral_return retval = new InternalN4JSParser.ruleNullLiteral_return();
        retval.start = input.LT(1);

        Token NullKeyword_1=null;


            
        try {
            {
            {
            NullKeyword_1=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(NullKeyword_1, grammarAccess.getNullLiteralAccess().getNullKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBooleanLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBooleanLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBooleanLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBooleanLiteral_return ruleBooleanLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBooleanLiteral_return retval = new InternalN4JSParser.ruleBooleanLiteral_return();
        retval.start = input.LT(1);

        Token TrueTrueKeyword_1_0_0=null;
        Token FalseKeyword_1_1=null;


            
        try {
            {
            {
            int alt402=2;
            int LA402_0 = input.LA(1);

            if ( (LA402_0==True) ) {
                alt402=1;
            }
            else if ( (LA402_0==False) ) {
                alt402=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 402, 0, input);

                throw nvae;
            }
            switch (alt402) {
                case 1 :
                    {
                    {
                    {
                    TrueTrueKeyword_1_0_0=(Token)match(input,True,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TrueTrueKeyword_1_0_0, grammarAccess.getBooleanLiteralAccess().getTrueTrueKeyword_1_0_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    FalseKeyword_1_1=(Token)match(input,False,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_1_1, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStringLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStringLiteral_return ruleStringLiteral() throws RecognitionException {
        InternalN4JSParser.ruleStringLiteral_return retval = new InternalN4JSParser.ruleStringLiteral_return();
        retval.start = input.LT(1);

        Token ValueSTRINGTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSTRINGTerminalRuleCall_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSTRINGTerminalRuleCall_0, grammarAccess.getStringLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteral_return ruleNumericLiteral() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteral_return retval = new InternalN4JSParser.ruleNumericLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleDoubleLiteral_return DoubleLiteralParserRuleCall_0 = null;

        InternalN4JSParser.ruleIntLiteral_return IntLiteralParserRuleCall_1 = null;

        InternalN4JSParser.ruleBinaryIntLiteral_return BinaryIntLiteralParserRuleCall_2 = null;

        InternalN4JSParser.ruleOctalIntLiteral_return OctalIntLiteralParserRuleCall_3 = null;

        InternalN4JSParser.ruleLegacyOctalIntLiteral_return LegacyOctalIntLiteralParserRuleCall_4 = null;

        InternalN4JSParser.ruleHexIntLiteral_return HexIntLiteralParserRuleCall_5 = null;

        InternalN4JSParser.ruleScientificIntLiteral_return ScientificIntLiteralParserRuleCall_6 = null;



            
        try {
            {
            int alt403=7;
            switch ( input.LA(1) ) {
            case RULE_DOUBLE:
                {
                alt403=1;
                }
                break;
            case RULE_INT:
                {
                alt403=2;
                }
                break;
            case RULE_BINARY_INT:
                {
                alt403=3;
                }
                break;
            case RULE_OCTAL_INT:
                {
                alt403=4;
                }
                break;
            case RULE_LEGACY_OCTAL_INT:
                {
                alt403=5;
                }
                break;
            case RULE_HEX_INT:
                {
                alt403=6;
                }
                break;
            case RULE_SCIENTIFIC_INT:
                {
                alt403=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 403, 0, input);

                throw nvae;
            }

            switch (alt403) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    DoubleLiteralParserRuleCall_0=ruleDoubleLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.start):null), (DoubleLiteralParserRuleCall_0!=null?((Token)DoubleLiteralParserRuleCall_0.stop):null), grammarAccess.getNumericLiteralAccess().getDoubleLiteralParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    IntLiteralParserRuleCall_1=ruleIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.start):null), (IntLiteralParserRuleCall_1!=null?((Token)IntLiteralParserRuleCall_1.stop):null), grammarAccess.getNumericLiteralAccess().getIntLiteralParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    BinaryIntLiteralParserRuleCall_2=ruleBinaryIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.start):null), (BinaryIntLiteralParserRuleCall_2!=null?((Token)BinaryIntLiteralParserRuleCall_2.stop):null), grammarAccess.getNumericLiteralAccess().getBinaryIntLiteralParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    OctalIntLiteralParserRuleCall_3=ruleOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.start):null), (OctalIntLiteralParserRuleCall_3!=null?((Token)OctalIntLiteralParserRuleCall_3.stop):null), grammarAccess.getNumericLiteralAccess().getOctalIntLiteralParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    LegacyOctalIntLiteralParserRuleCall_4=ruleLegacyOctalIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.start):null), (LegacyOctalIntLiteralParserRuleCall_4!=null?((Token)LegacyOctalIntLiteralParserRuleCall_4.stop):null), grammarAccess.getNumericLiteralAccess().getLegacyOctalIntLiteralParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    HexIntLiteralParserRuleCall_5=ruleHexIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.start):null), (HexIntLiteralParserRuleCall_5!=null?((Token)HexIntLiteralParserRuleCall_5.stop):null), grammarAccess.getNumericLiteralAccess().getHexIntLiteralParserRuleCall_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    pushFollow(FOLLOW_2);
                    ScientificIntLiteralParserRuleCall_6=ruleScientificIntLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.start):null), (ScientificIntLiteralParserRuleCall_6!=null?((Token)ScientificIntLiteralParserRuleCall_6.stop):null), grammarAccess.getNumericLiteralAccess().getScientificIntLiteralParserRuleCall_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleDoubleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleDoubleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleDoubleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleDoubleLiteral_return ruleDoubleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleDoubleLiteral_return retval = new InternalN4JSParser.ruleDoubleLiteral_return();
        retval.start = input.LT(1);

        Token ValueDOUBLETerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueDOUBLETerminalRuleCall_0=(Token)match(input,RULE_DOUBLE,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueDOUBLETerminalRuleCall_0, grammarAccess.getDoubleLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntLiteral_return ruleIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleIntLiteral_return retval = new InternalN4JSParser.ruleIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueINTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueINTTerminalRuleCall_0=(Token)match(input,RULE_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueINTTerminalRuleCall_0, grammarAccess.getIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleOctalIntLiteral_return ruleOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleOctalIntLiteral_return retval = new InternalN4JSParser.ruleOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueOCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueOCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueOCTAL_INTTerminalRuleCall_0, grammarAccess.getOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLegacyOctalIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLegacyOctalIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLegacyOctalIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLegacyOctalIntLiteral_return ruleLegacyOctalIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleLegacyOctalIntLiteral_return retval = new InternalN4JSParser.ruleLegacyOctalIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueLEGACY_OCTAL_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueLEGACY_OCTAL_INTTerminalRuleCall_0=(Token)match(input,RULE_LEGACY_OCTAL_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueLEGACY_OCTAL_INTTerminalRuleCall_0, grammarAccess.getLegacyOctalIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleHexIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleHexIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleHexIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleHexIntLiteral_return ruleHexIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleHexIntLiteral_return retval = new InternalN4JSParser.ruleHexIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueHEX_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueHEX_INTTerminalRuleCall_0=(Token)match(input,RULE_HEX_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueHEX_INTTerminalRuleCall_0, grammarAccess.getHexIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBinaryIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBinaryIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBinaryIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBinaryIntLiteral_return ruleBinaryIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleBinaryIntLiteral_return retval = new InternalN4JSParser.ruleBinaryIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueBINARY_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueBINARY_INTTerminalRuleCall_0=(Token)match(input,RULE_BINARY_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueBINARY_INTTerminalRuleCall_0, grammarAccess.getBinaryIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScientificIntLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScientificIntLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScientificIntLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScientificIntLiteral_return ruleScientificIntLiteral() throws RecognitionException {
        InternalN4JSParser.ruleScientificIntLiteral_return retval = new InternalN4JSParser.ruleScientificIntLiteral_return();
        retval.start = input.LT(1);

        Token ValueSCIENTIFIC_INTTerminalRuleCall_0=null;


            
        try {
            {
            {
            {
            ValueSCIENTIFIC_INTTerminalRuleCall_0=(Token)match(input,RULE_SCIENTIFIC_INT,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ValueSCIENTIFIC_INTTerminalRuleCall_0, grammarAccess.getScientificIntLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleRegularExpressionLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleRegularExpressionLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleRegularExpressionLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleRegularExpressionLiteral_return ruleRegularExpressionLiteral() throws RecognitionException {
        InternalN4JSParser.ruleRegularExpressionLiteral_return retval = new InternalN4JSParser.ruleRegularExpressionLiteral_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleREGEX_LITERAL_return ValueREGEX_LITERALParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            ValueREGEX_LITERALParserRuleCall_0=ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.start):null), (ValueREGEX_LITERALParserRuleCall_0!=null?((Token)ValueREGEX_LITERALParserRuleCall_0.stop):null), grammarAccess.getRegularExpressionLiteralAccess().getValueAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleNumericLiteralAsString() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleNumericLiteralAsString();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleNumericLiteralAsString_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNumericLiteralAsString_return ruleNumericLiteralAsString() throws RecognitionException {
        InternalN4JSParser.ruleNumericLiteralAsString_return retval = new InternalN4JSParser.ruleNumericLiteralAsString_return();
        retval.start = input.LT(1);


            
        try {
            {
            if ( input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_INT ) {
                input.consume();
                state.errorRecovery=false;state.failed=false;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                MismatchedSetException mse = new MismatchedSetException(null,input);
                throw mse;
            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierOrThis() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierOrThis_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierOrThis_return ruleIdentifierOrThis() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierOrThis_return retval = new InternalN4JSParser.ruleIdentifierOrThis_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token PromisifyKeyword_2=null;
        Token TargetKeyword_3=null;


            
        try {
            {
            int alt404=4;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt404=1;
                }
                break;
            case This:
                {
                alt404=2;
                }
                break;
            case Promisify:
                {
                alt404=3;
                }
                break;
            case Target:
                {
                alt404=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 404, 0, input);

                throw nvae;
            }

            switch (alt404) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getIdentifierOrThisAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    PromisifyKeyword_2=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_2, grammarAccess.getIdentifierOrThisAccess().getPromisifyKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    TargetKeyword_3=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_3, grammarAccess.getIdentifierOrThisAccess().getTargetKeyword_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationName_return ruleAnnotationName() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationName_return retval = new InternalN4JSParser.ruleAnnotationName_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token TargetKeyword_2=null;


            
        try {
            {
            int alt405=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt405=1;
                }
                break;
            case This:
                {
                alt405=2;
                }
                break;
            case Target:
                {
                alt405=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 405, 0, input);

                throw nvae;
            }

            switch (alt405) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getAnnotationNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    TargetKeyword_2=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_2, grammarAccess.getAnnotationNameAccess().getTargetKeyword_2()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingIdentifier_return ruleBindingIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleBindingIdentifier_return retval = new InternalN4JSParser.ruleBindingIdentifier_return();
        retval.start = input.LT(1);

        Token YieldKeyword_1_0=null;


            
        try {
            {
            int alt406=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt406=1;
                }
                break;
            case Yield:
                {
                alt406=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Async:
            case Await_1:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Set:
            case As:
            case Of:
                {
                alt406=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 406, 0, input);

                throw nvae;
            }

            switch (alt406) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    YieldKeyword_1_0=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_1_0, grammarAccess.getBindingIdentifierAccess().getYieldKeyword_1_0()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingIdentifier_return norm1_BindingIdentifier() throws RecognitionException {
        InternalN4JSParser.norm1_BindingIdentifier_return retval = new InternalN4JSParser.norm1_BindingIdentifier_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt407=2;
            int LA407_0 = input.LA(1);

            if ( (LA407_0==RULE_IDENTIFIER) ) {
                alt407=1;
            }
            else if ( ((LA407_0>=Intersection && LA407_0<=Implements)||(LA407_0>=Promisify && LA407_0<=Abstract)||LA407_0==External||(LA407_0>=Private && LA407_0<=Project)||LA407_0==Public||LA407_0==Static||LA407_0==Target||(LA407_0>=Await && LA407_0<=Await_1)||LA407_0==Union||LA407_0==This||LA407_0==From||LA407_0==Type||(LA407_0>=Get && LA407_0<=Let)||LA407_0==Set||LA407_0==As||LA407_0==Of) ) {
                alt407=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 407, 0, input);

                throw nvae;
            }
            switch (alt407) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIdentifierName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIdentifierName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIdentifierName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIdentifierName_return ruleIdentifierName() throws RecognitionException {
        InternalN4JSParser.ruleIdentifierName_return retval = new InternalN4JSParser.ruleIdentifierName_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt408=3;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt408=1;
                }
                break;
            case Instanceof:
            case Continue:
            case Debugger:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Delete:
            case Export:
            case Import:
            case Return:
            case Switch:
            case Typeof:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case While:
            case Yield:
            case Case:
            case Else:
            case Enum:
            case Null:
            case This_1:
            case True:
            case Void:
            case With:
            case For:
            case New:
            case Try:
            case Var:
            case Do:
            case If:
            case In:
                {
                alt408=2;
                }
                break;
            case Intersection:
            case Constructor:
            case Implements:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case External:
            case Private:
            case Project:
            case Public:
            case Static:
            case Target:
            case Await:
            case Async:
            case Await_1:
            case Union:
            case This:
            case From:
            case Type:
            case Get:
            case Let:
            case Set:
            case As:
            case Of:
                {
                alt408=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 408, 0, input);

                throw nvae;
            }

            switch (alt408) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleReservedWord();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleN4Keyword();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleReservedWord() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleReservedWord();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleReservedWord() throws RecognitionException {
        Token BreakKeyword_0=null;
        Token CaseKeyword_1=null;
        Token CatchKeyword_2=null;
        Token ClassKeyword_3=null;
        Token ConstKeyword_4=null;
        Token ContinueKeyword_5=null;
        Token DebuggerKeyword_6=null;
        Token DefaultKeyword_7=null;
        Token DeleteKeyword_8=null;
        Token DoKeyword_9=null;
        Token ElseKeyword_10=null;
        Token ExportKeyword_11=null;
        Token ExtendsKeyword_12=null;
        Token FinallyKeyword_13=null;
        Token ForKeyword_14=null;
        Token FunctionKeyword_15=null;
        Token IfKeyword_16=null;
        Token ImportKeyword_17=null;
        Token InKeyword_18=null;
        Token InstanceofKeyword_19=null;
        Token NewKeyword_20=null;
        Token ReturnKeyword_21=null;
        Token SuperKeyword_22=null;
        Token SwitchKeyword_23=null;
        Token ThisKeyword_24=null;
        Token ThrowKeyword_25=null;
        Token TryKeyword_26=null;
        Token TypeofKeyword_27=null;
        Token VarKeyword_28=null;
        Token VoidKeyword_29=null;
        Token WhileKeyword_30=null;
        Token WithKeyword_31=null;
        Token YieldKeyword_32=null;
        Token NullKeyword_33=null;
        Token TrueKeyword_34=null;
        Token FalseKeyword_35=null;
        Token EnumKeyword_36=null;


            
        try {
            {
            int alt409=37;
            switch ( input.LA(1) ) {
            case Break:
                {
                alt409=1;
                }
                break;
            case Case:
                {
                alt409=2;
                }
                break;
            case Catch:
                {
                alt409=3;
                }
                break;
            case Class:
                {
                alt409=4;
                }
                break;
            case Const:
                {
                alt409=5;
                }
                break;
            case Continue:
                {
                alt409=6;
                }
                break;
            case Debugger:
                {
                alt409=7;
                }
                break;
            case Default:
                {
                alt409=8;
                }
                break;
            case Delete:
                {
                alt409=9;
                }
                break;
            case Do:
                {
                alt409=10;
                }
                break;
            case Else:
                {
                alt409=11;
                }
                break;
            case Export:
                {
                alt409=12;
                }
                break;
            case Extends:
                {
                alt409=13;
                }
                break;
            case Finally:
                {
                alt409=14;
                }
                break;
            case For:
                {
                alt409=15;
                }
                break;
            case Function:
                {
                alt409=16;
                }
                break;
            case If:
                {
                alt409=17;
                }
                break;
            case Import:
                {
                alt409=18;
                }
                break;
            case In:
                {
                alt409=19;
                }
                break;
            case Instanceof:
                {
                alt409=20;
                }
                break;
            case New:
                {
                alt409=21;
                }
                break;
            case Return:
                {
                alt409=22;
                }
                break;
            case Super:
                {
                alt409=23;
                }
                break;
            case Switch:
                {
                alt409=24;
                }
                break;
            case This_1:
                {
                alt409=25;
                }
                break;
            case Throw:
                {
                alt409=26;
                }
                break;
            case Try:
                {
                alt409=27;
                }
                break;
            case Typeof:
                {
                alt409=28;
                }
                break;
            case Var:
                {
                alt409=29;
                }
                break;
            case Void:
                {
                alt409=30;
                }
                break;
            case While:
                {
                alt409=31;
                }
                break;
            case With:
                {
                alt409=32;
                }
                break;
            case Yield:
                {
                alt409=33;
                }
                break;
            case Null:
                {
                alt409=34;
                }
                break;
            case True:
                {
                alt409=35;
                }
                break;
            case False:
                {
                alt409=36;
                }
                break;
            case Enum:
                {
                alt409=37;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 409, 0, input);

                throw nvae;
            }

            switch (alt409) {
                case 1 :
                    {
                    BreakKeyword_0=(Token)match(input,Break,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(BreakKeyword_0, grammarAccess.getReservedWordAccess().getBreakKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    CaseKeyword_1=(Token)match(input,Case,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CaseKeyword_1, grammarAccess.getReservedWordAccess().getCaseKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    CatchKeyword_2=(Token)match(input,Catch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(CatchKeyword_2, grammarAccess.getReservedWordAccess().getCatchKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ClassKeyword_3=(Token)match(input,Class,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ClassKeyword_3, grammarAccess.getReservedWordAccess().getClassKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ConstKeyword_4=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstKeyword_4, grammarAccess.getReservedWordAccess().getConstKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    ContinueKeyword_5=(Token)match(input,Continue,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ContinueKeyword_5, grammarAccess.getReservedWordAccess().getContinueKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    DebuggerKeyword_6=(Token)match(input,Debugger,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DebuggerKeyword_6, grammarAccess.getReservedWordAccess().getDebuggerKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    DefaultKeyword_7=(Token)match(input,Default,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DefaultKeyword_7, grammarAccess.getReservedWordAccess().getDefaultKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    DeleteKeyword_8=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteKeyword_8, grammarAccess.getReservedWordAccess().getDeleteKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    DoKeyword_9=(Token)match(input,Do,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DoKeyword_9, grammarAccess.getReservedWordAccess().getDoKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    ElseKeyword_10=(Token)match(input,Else,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ElseKeyword_10, grammarAccess.getReservedWordAccess().getElseKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    ExportKeyword_11=(Token)match(input,Export,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExportKeyword_11, grammarAccess.getReservedWordAccess().getExportKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    ExtendsKeyword_12=(Token)match(input,Extends,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_12, grammarAccess.getReservedWordAccess().getExtendsKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    FinallyKeyword_13=(Token)match(input,Finally,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FinallyKeyword_13, grammarAccess.getReservedWordAccess().getFinallyKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    ForKeyword_14=(Token)match(input,For,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ForKeyword_14, grammarAccess.getReservedWordAccess().getForKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    FunctionKeyword_15=(Token)match(input,Function,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FunctionKeyword_15, grammarAccess.getReservedWordAccess().getFunctionKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    IfKeyword_16=(Token)match(input,If,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IfKeyword_16, grammarAccess.getReservedWordAccess().getIfKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    ImportKeyword_17=(Token)match(input,Import,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImportKeyword_17, grammarAccess.getReservedWordAccess().getImportKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    InKeyword_18=(Token)match(input,In,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InKeyword_18, grammarAccess.getReservedWordAccess().getInKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    InstanceofKeyword_19=(Token)match(input,Instanceof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InstanceofKeyword_19, grammarAccess.getReservedWordAccess().getInstanceofKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    NewKeyword_20=(Token)match(input,New,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NewKeyword_20, grammarAccess.getReservedWordAccess().getNewKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    ReturnKeyword_21=(Token)match(input,Return,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ReturnKeyword_21, grammarAccess.getReservedWordAccess().getReturnKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    SuperKeyword_22=(Token)match(input,Super,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_22, grammarAccess.getReservedWordAccess().getSuperKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    SwitchKeyword_23=(Token)match(input,Switch,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SwitchKeyword_23, grammarAccess.getReservedWordAccess().getSwitchKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    ThisKeyword_24=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_24, grammarAccess.getReservedWordAccess().getThisKeyword_24()); 
                    }

                    }
                    break;
                case 26 :
                    {
                    ThrowKeyword_25=(Token)match(input,Throw,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThrowKeyword_25, grammarAccess.getReservedWordAccess().getThrowKeyword_25()); 
                    }

                    }
                    break;
                case 27 :
                    {
                    TryKeyword_26=(Token)match(input,Try,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TryKeyword_26, grammarAccess.getReservedWordAccess().getTryKeyword_26()); 
                    }

                    }
                    break;
                case 28 :
                    {
                    TypeofKeyword_27=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofKeyword_27, grammarAccess.getReservedWordAccess().getTypeofKeyword_27()); 
                    }

                    }
                    break;
                case 29 :
                    {
                    VarKeyword_28=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarKeyword_28, grammarAccess.getReservedWordAccess().getVarKeyword_28()); 
                    }

                    }
                    break;
                case 30 :
                    {
                    VoidKeyword_29=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_29, grammarAccess.getReservedWordAccess().getVoidKeyword_29()); 
                    }

                    }
                    break;
                case 31 :
                    {
                    WhileKeyword_30=(Token)match(input,While,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WhileKeyword_30, grammarAccess.getReservedWordAccess().getWhileKeyword_30()); 
                    }

                    }
                    break;
                case 32 :
                    {
                    WithKeyword_31=(Token)match(input,With,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_31, grammarAccess.getReservedWordAccess().getWithKeyword_31()); 
                    }

                    }
                    break;
                case 33 :
                    {
                    YieldKeyword_32=(Token)match(input,Yield,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(YieldKeyword_32, grammarAccess.getReservedWordAccess().getYieldKeyword_32()); 
                    }

                    }
                    break;
                case 34 :
                    {
                    NullKeyword_33=(Token)match(input,Null,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NullKeyword_33, grammarAccess.getReservedWordAccess().getNullKeyword_33()); 
                    }

                    }
                    break;
                case 35 :
                    {
                    TrueKeyword_34=(Token)match(input,True,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TrueKeyword_34, grammarAccess.getReservedWordAccess().getTrueKeyword_34()); 
                    }

                    }
                    break;
                case 36 :
                    {
                    FalseKeyword_35=(Token)match(input,False,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FalseKeyword_35, grammarAccess.getReservedWordAccess().getFalseKeyword_35()); 
                    }

                    }
                    break;
                case 37 :
                    {
                    EnumKeyword_36=(Token)match(input,Enum,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EnumKeyword_36, grammarAccess.getReservedWordAccess().getEnumKeyword_36()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4Keyword() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4Keyword();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Keyword() throws RecognitionException {
        Token GetKeyword_0=null;
        Token SetKeyword_1=null;
        Token LetKeyword_2=null;
        Token ProjectKeyword_3=null;
        Token ExternalKeyword_4=null;
        Token AbstractKeyword_5=null;
        Token StaticKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token ConstructorKeyword_9=null;
        Token OfKeyword_10=null;
        Token TargetKeyword_11=null;
        Token TypeKeyword_12=null;
        Token UnionKeyword_13=null;
        Token IntersectionKeyword_14=null;
        Token ThisKeyword_15=null;
        Token AwaitKeyword_16=null;
        Token PromisifyKeyword_17=null;
        Token AwaitKeyword_18=null;
        Token AsyncKeyword_19=null;
        Token ImplementsKeyword_20=null;
        Token InterfaceKeyword_21=null;
        Token PrivateKeyword_22=null;
        Token ProtectedKeyword_23=null;
        Token PublicKeyword_24=null;


            
        try {
            {
            int alt410=25;
            switch ( input.LA(1) ) {
            case Get:
                {
                alt410=1;
                }
                break;
            case Set:
                {
                alt410=2;
                }
                break;
            case Let:
                {
                alt410=3;
                }
                break;
            case Project:
                {
                alt410=4;
                }
                break;
            case External:
                {
                alt410=5;
                }
                break;
            case Abstract:
                {
                alt410=6;
                }
                break;
            case Static:
                {
                alt410=7;
                }
                break;
            case As:
                {
                alt410=8;
                }
                break;
            case From:
                {
                alt410=9;
                }
                break;
            case Constructor:
                {
                alt410=10;
                }
                break;
            case Of:
                {
                alt410=11;
                }
                break;
            case Target:
                {
                alt410=12;
                }
                break;
            case Type:
                {
                alt410=13;
                }
                break;
            case Union:
                {
                alt410=14;
                }
                break;
            case Intersection:
                {
                alt410=15;
                }
                break;
            case This:
                {
                alt410=16;
                }
                break;
            case Await:
                {
                alt410=17;
                }
                break;
            case Promisify:
                {
                alt410=18;
                }
                break;
            case Await_1:
                {
                alt410=19;
                }
                break;
            case Async:
                {
                alt410=20;
                }
                break;
            case Implements:
                {
                alt410=21;
                }
                break;
            case Interface:
                {
                alt410=22;
                }
                break;
            case Private:
                {
                alt410=23;
                }
                break;
            case Protected:
                {
                alt410=24;
                }
                break;
            case Public:
                {
                alt410=25;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 410, 0, input);

                throw nvae;
            }

            switch (alt410) {
                case 1 :
                    {
                    GetKeyword_0=(Token)match(input,Get,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(GetKeyword_0, grammarAccess.getN4KeywordAccess().getGetKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SetKeyword_1=(Token)match(input,Set,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1, grammarAccess.getN4KeywordAccess().getSetKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    LetKeyword_2=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetKeyword_2, grammarAccess.getN4KeywordAccess().getLetKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    ProjectKeyword_3=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectKeyword_3, grammarAccess.getN4KeywordAccess().getProjectKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ExternalKeyword_4=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalKeyword_4, grammarAccess.getN4KeywordAccess().getExternalKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    AbstractKeyword_5=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractKeyword_5, grammarAccess.getN4KeywordAccess().getAbstractKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticKeyword_6, grammarAccess.getN4KeywordAccess().getStaticKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_7, grammarAccess.getN4KeywordAccess().getAsKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FromKeyword_8, grammarAccess.getN4KeywordAccess().getFromKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    ConstructorKeyword_9=(Token)match(input,Constructor,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstructorKeyword_9, grammarAccess.getN4KeywordAccess().getConstructorKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    OfKeyword_10=(Token)match(input,Of,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(OfKeyword_10, grammarAccess.getN4KeywordAccess().getOfKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    TargetKeyword_11=(Token)match(input,Target,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_11, grammarAccess.getN4KeywordAccess().getTargetKeyword_11()); 
                    }

                    }
                    break;
                case 13 :
                    {
                    TypeKeyword_12=(Token)match(input,Type,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_12, grammarAccess.getN4KeywordAccess().getTypeKeyword_12()); 
                    }

                    }
                    break;
                case 14 :
                    {
                    UnionKeyword_13=(Token)match(input,Union,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(UnionKeyword_13, grammarAccess.getN4KeywordAccess().getUnionKeyword_13()); 
                    }

                    }
                    break;
                case 15 :
                    {
                    IntersectionKeyword_14=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IntersectionKeyword_14, grammarAccess.getN4KeywordAccess().getIntersectionKeyword_14()); 
                    }

                    }
                    break;
                case 16 :
                    {
                    ThisKeyword_15=(Token)match(input,This,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_15, grammarAccess.getN4KeywordAccess().getThisKeyword_15()); 
                    }

                    }
                    break;
                case 17 :
                    {
                    AwaitKeyword_16=(Token)match(input,Await,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_16, grammarAccess.getN4KeywordAccess().getAwaitKeyword_16()); 
                    }

                    }
                    break;
                case 18 :
                    {
                    PromisifyKeyword_17=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_17, grammarAccess.getN4KeywordAccess().getPromisifyKeyword_17()); 
                    }

                    }
                    break;
                case 19 :
                    {
                    AwaitKeyword_18=(Token)match(input,Await_1,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_18, grammarAccess.getN4KeywordAccess().getAwaitKeyword_18()); 
                    }

                    }
                    break;
                case 20 :
                    {
                    AsyncKeyword_19=(Token)match(input,Async,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AsyncKeyword_19, grammarAccess.getN4KeywordAccess().getAsyncKeyword_19()); 
                    }

                    }
                    break;
                case 21 :
                    {
                    ImplementsKeyword_20=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_20, grammarAccess.getN4KeywordAccess().getImplementsKeyword_20()); 
                    }

                    }
                    break;
                case 22 :
                    {
                    InterfaceKeyword_21=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InterfaceKeyword_21, grammarAccess.getN4KeywordAccess().getInterfaceKeyword_21()); 
                    }

                    }
                    break;
                case 23 :
                    {
                    PrivateKeyword_22=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivateKeyword_22, grammarAccess.getN4KeywordAccess().getPrivateKeyword_22()); 
                    }

                    }
                    break;
                case 24 :
                    {
                    ProtectedKeyword_23=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedKeyword_23, grammarAccess.getN4KeywordAccess().getProtectedKeyword_23()); 
                    }

                    }
                    break;
                case 25 :
                    {
                    PublicKeyword_24=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicKeyword_24, grammarAccess.getN4KeywordAccess().getPublicKeyword_24()); 
                    }

                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleSymbolLiteralComputedName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSymbolLiteralComputedName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSymbolLiteralComputedName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSymbolLiteralComputedName_return ruleSymbolLiteralComputedName() throws RecognitionException {
        InternalN4JSParser.ruleSymbolLiteralComputedName_return retval = new InternalN4JSParser.ruleSymbolLiteralComputedName_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_1_0=null;


            
        try {
            {
            {
            pushFollow(FOLLOW_136);
            ruleBindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            int alt411=2;
            int LA411_0 = input.LA(1);

            if ( (LA411_0==FullStop) ) {
                alt411=1;
            }
            switch (alt411) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_1_0, grammarAccess.getSymbolLiteralComputedNameAccess().getFullStopKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SymbolLiteralComputedName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SymbolLiteralComputedName_return norm1_SymbolLiteralComputedName() throws RecognitionException {
        InternalN4JSParser.norm1_SymbolLiteralComputedName_return retval = new InternalN4JSParser.norm1_SymbolLiteralComputedName_return();
        retval.start = input.LT(1);

        Token FullStopKeyword_1_0=null;


            
        try {
            {
            {
            pushFollow(FOLLOW_136);
            norm1_BindingIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            int alt412=2;
            int LA412_0 = input.LA(1);

            if ( (LA412_0==FullStop) ) {
                alt412=1;
            }
            switch (alt412) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_26); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_1_0, grammarAccess.getSymbolLiteralComputedNameAccess().getFullStopKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleREGEX_LITERAL() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleREGEX_LITERAL();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleREGEX_LITERAL_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleREGEX_LITERAL_return ruleREGEX_LITERAL() throws RecognitionException {
        InternalN4JSParser.ruleREGEX_LITERAL_return retval = new InternalN4JSParser.ruleREGEX_LITERAL_return();
        retval.start = input.LT(1);

        Token SolidusKeyword_0_0=null;
        Token SolidusEqualsSignKeyword_0_1=null;


        		setInRegularExpression();
            
        try {
            {
            {
            int alt413=2;
            int LA413_0 = input.LA(1);

            if ( (LA413_0==Solidus) ) {
                alt413=1;
            }
            else if ( (LA413_0==SolidusEqualsSign) ) {
                alt413=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 413, 0, input);

                throw nvae;
            }
            switch (alt413) {
                case 1 :
                    {
                    SolidusKeyword_0_0=(Token)match(input,Solidus,FOLLOW_137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusKeyword_0_0, grammarAccess.getREGEX_LITERALAccess().getSolidusKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    SolidusEqualsSignKeyword_0_1=(Token)match(input,SolidusEqualsSign,FOLLOW_137); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SolidusEqualsSignKeyword_0_1, grammarAccess.getREGEX_LITERALAccess().getSolidusEqualsSignKeyword_0_1()); 
                    }

                    }
                    break;

            }
            int alt414=2;
            int LA414_0 = input.LA(1);

            if ( (LA414_0==RULE_REGEX_TAIL) ) {
                alt414=1;
            }
            switch (alt414) {
                case 1 :
                    {
                    match(input,RULE_REGEX_TAIL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateTailLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateTailLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateTailLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateTailLiteral_return ruleTemplateTailLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateTailLiteral_return retval = new InternalN4JSParser.ruleTemplateTailLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            int alt415=2;
            int LA415_0 = input.LA(1);

            if ( (LA415_0==RULE_TEMPLATE_END) ) {
                alt415=1;
            }
            switch (alt415) {
                case 1 :
                    {
                    match(input,RULE_TEMPLATE_END,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTemplateMiddleLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTemplateMiddleLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTemplateMiddleLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTemplateMiddleLiteral_return ruleTemplateMiddleLiteral() throws RecognitionException {
        InternalN4JSParser.ruleTemplateMiddleLiteral_return retval = new InternalN4JSParser.ruleTemplateMiddleLiteral_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_TEMPLATE_MIDDLE,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSemi() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSemi();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSemi_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSemi_return ruleSemi() throws RecognitionException {
        InternalN4JSParser.ruleSemi_return retval = new InternalN4JSParser.ruleSemi_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword=null;


        		int marker = input.mark();
        		promoteEOL();
            
        try {
            int alt416=5;
            switch ( input.LA(1) ) {
            case Semicolon:
                {
                alt416=1;
                }
                break;
            case EOF:
                {
                alt416=2;
                }
                break;
            case RULE_EOL:
                {
                alt416=3;
                }
                break;
            case RULE_ML_COMMENT:
                {
                alt416=4;
                }
                break;
            case RightCurlyBracket:
                {
                alt416=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 416, 0, input);

                throw nvae;
            }

            switch (alt416) {
                case 1 :
                    {
                    SemicolonKeyword=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword, grammarAccess.getSemiAccess().getSemicolonKeyword()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,EOF,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 3 :
                    {
                    match(input,RULE_EOL,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 4 :
                    {
                    match(input,RULE_ML_COMMENT,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 5 :
                    {
                    match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( !(( forcedRewind(marker) )) ) {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        throw new FailedPredicateException(input, "ruleSemi", " forcedRewind(marker) ");
                    }

                    }
                    break;

            }
            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleNoLineTerminator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleNoLineTerminator_return ruleNoLineTerminator() throws RecognitionException {
        InternalN4JSParser.ruleNoLineTerminator_return retval = new InternalN4JSParser.ruleNoLineTerminator_return();
        retval.start = input.LT(1);

        Token NO_LINE_TERMINATORTerminalRuleCall=null;


            
        try {
            {
            int alt417=2;
            int LA417_0 = input.LA(1);

            if ( (LA417_0==RULE_NO_LINE_TERMINATOR) ) {
                alt417=1;
            }
            switch (alt417) {
                case 1 :
                    {
                    NO_LINE_TERMINATORTerminalRuleCall=(Token)match(input,RULE_NO_LINE_TERMINATOR,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NO_LINE_TERMINATORTerminalRuleCall, grammarAccess.getNoLineTerminatorAccess().getNO_LINE_TERMINATORTerminalRuleCall()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotation_return ruleAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleAnnotation_return retval = new InternalN4JSParser.ruleAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtKeyword_0=(Token)match(input,CommercialAt,FOLLOW_138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0, grammarAccess.getAnnotationAccess().getCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleScriptAnnotation() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleScriptAnnotation();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleScriptAnnotation_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleScriptAnnotation_return ruleScriptAnnotation() throws RecognitionException {
        InternalN4JSParser.ruleScriptAnnotation_return retval = new InternalN4JSParser.ruleScriptAnnotation_return();
        retval.start = input.LT(1);

        Token CommercialAtCommercialAtKeyword_0=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationNoAtSignParserRuleCall_1 = null;



            
        try {
            {
            {
            CommercialAtCommercialAtKeyword_0=(Token)match(input,CommercialAtCommercialAt,FOLLOW_138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtCommercialAtKeyword_0, grammarAccess.getScriptAnnotationAccess().getCommercialAtCommercialAtKeyword_0()); 
            }
            pushFollow(FOLLOW_2);
            AnnotationNoAtSignParserRuleCall_1=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.start):null), (AnnotationNoAtSignParserRuleCall_1!=null?((Token)AnnotationNoAtSignParserRuleCall_1.stop):null), grammarAccess.getScriptAnnotationAccess().getAnnotationNoAtSignParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationNoAtSign() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationNoAtSign_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationNoAtSign_return ruleAnnotationNoAtSign() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationNoAtSign_return retval = new InternalN4JSParser.ruleAnnotationNoAtSign_return();
        retval.start = input.LT(1);

        Token LeftParenthesisKeyword_1_0=null;
        Token CommaKeyword_1_1_1_0=null;
        Token RightParenthesisKeyword_1_2=null;
        InternalN4JSParser.ruleAnnotationName_return NameAnnotationNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_0_0 = null;

        InternalN4JSParser.ruleAnnotationArgument_return ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_103);
            NameAnnotationNameParserRuleCall_0_0=ruleAnnotationName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.start):null), (NameAnnotationNameParserRuleCall_0_0!=null?((Token)NameAnnotationNameParserRuleCall_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt420=2;
            alt420 = dfa420.predict(input);
            switch (alt420) {
                case 1 :
                    {
                    {
                    LeftParenthesisKeyword_1_0=(Token)match(input,LeftParenthesis,FOLLOW_139); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_0, grammarAccess.getAnnotationNoAtSignAccess().getLeftParenthesisKeyword_1_0()); 
                    }

                    }
                    int alt419=2;
                    int LA419_0 = input.LA(1);

                    if ( ((LA419_0>=Intersection && LA419_0<=Constructor)||LA419_0==Promisify||LA419_0==Target||LA419_0==Await_1||LA419_0==False||LA419_0==Union||LA419_0==This||(LA419_0>=Null && LA419_0<=Void)||LA419_0==SolidusEqualsSign||LA419_0==Solidus||LA419_0==QuestionMark||LA419_0==LeftCurlyBracket||LA419_0==Tilde||LA419_0==RULE_DOUBLE||(LA419_0>=RULE_HEX_INT && LA419_0<=RULE_LEGACY_OCTAL_INT)||LA419_0==RULE_SCIENTIFIC_INT||LA419_0==RULE_IDENTIFIER||LA419_0==RULE_STRING||LA419_0==RULE_INT) ) {
                        alt419=1;
                    }
                    switch (alt419) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_52);
                            ArgsAnnotationArgumentParserRuleCall_1_1_0_0=ruleAnnotationArgument();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_0_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_0_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_0()); 
                            }

                            }


                            }
                            loop418:
                            do {
                                int alt418=2;
                                int LA418_0 = input.LA(1);

                                if ( (LA418_0==Comma) ) {
                                    alt418=1;
                                }


                                switch (alt418) {
                            	case 1 :
                            	    {
                            	    CommaKeyword_1_1_1_0=(Token)match(input,Comma,FOLLOW_140); if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce(CommaKeyword_1_1_1_0, grammarAccess.getAnnotationNoAtSignAccess().getCommaKeyword_1_1_1_0()); 
                            	    }
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_52);
                            	    ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0=ruleAnnotationArgument();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.start):null), (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0!=null?((Token)ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0.stop):null), grammarAccess.getAnnotationNoAtSignAccess().getArgsAssignment_1_1_1_1()); 
                            	    }

                            	    }


                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop418;
                                }
                            } while (true);


                            }
                            break;

                    }

                    RightParenthesisKeyword_1_2=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_2, grammarAccess.getAnnotationNoAtSignAccess().getRightParenthesisKeyword_1_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationArgument_return ruleAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationArgument_return retval = new InternalN4JSParser.ruleAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLiteralAnnotationArgument_return LiteralAnnotationArgumentParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRefAnnotationArgument_return TypeRefAnnotationArgumentParserRuleCall_1 = null;



            
        try {
            {
            int alt421=2;
            int LA421_0 = input.LA(1);

            if ( (LA421_0==False||LA421_0==Null||LA421_0==True||LA421_0==SolidusEqualsSign||LA421_0==Solidus||LA421_0==RULE_DOUBLE||(LA421_0>=RULE_HEX_INT && LA421_0<=RULE_LEGACY_OCTAL_INT)||LA421_0==RULE_SCIENTIFIC_INT||LA421_0==RULE_STRING||LA421_0==RULE_INT) ) {
                alt421=1;
            }
            else if ( ((LA421_0>=Intersection && LA421_0<=Constructor)||LA421_0==Promisify||LA421_0==Target||LA421_0==Await_1||LA421_0==Union||LA421_0==This||LA421_0==This_1||(LA421_0>=Type && LA421_0<=Void)||LA421_0==QuestionMark||LA421_0==LeftCurlyBracket||LA421_0==Tilde||LA421_0==RULE_IDENTIFIER) ) {
                alt421=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 421, 0, input);

                throw nvae;
            }
            switch (alt421) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    LiteralAnnotationArgumentParserRuleCall_0=ruleLiteralAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.start):null), (LiteralAnnotationArgumentParserRuleCall_0!=null?((Token)LiteralAnnotationArgumentParserRuleCall_0.stop):null), grammarAccess.getAnnotationArgumentAccess().getLiteralAnnotationArgumentParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefAnnotationArgumentParserRuleCall_1=ruleTypeRefAnnotationArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.start):null), (TypeRefAnnotationArgumentParserRuleCall_1!=null?((Token)TypeRefAnnotationArgumentParserRuleCall_1.stop):null), grammarAccess.getAnnotationArgumentAccess().getTypeRefAnnotationArgumentParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleLiteralAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleLiteralAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleLiteralAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralAnnotationArgument_return ruleLiteralAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleLiteralAnnotationArgument_return retval = new InternalN4JSParser.ruleLiteralAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleLiteral_return LiteralLiteralParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            LiteralLiteralParserRuleCall_0=ruleLiteral();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.start):null), (LiteralLiteralParserRuleCall_0!=null?((Token)LiteralLiteralParserRuleCall_0.stop):null), grammarAccess.getLiteralAnnotationArgumentAccess().getLiteralAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefAnnotationArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefAnnotationArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefAnnotationArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefAnnotationArgument_return ruleTypeRefAnnotationArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefAnnotationArgument_return retval = new InternalN4JSParser.ruleTypeRefAnnotationArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.start):null), (TypeRefTypeRefParserRuleCall_0!=null?((Token)TypeRefTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefAnnotationArgumentAccess().getTypeRefAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotationList_return ruleAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleAnnotationList_return retval = new InternalN4JSParser.ruleAnnotationList_return();
        retval.start = input.LT(1);

        Token CommercialAtKeyword_0_0_1=null;
        InternalN4JSParser.ruleAnnotationNoAtSign_return AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            CommercialAtKeyword_0_0_1=(Token)match(input,CommercialAt,FOLLOW_138); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommercialAtKeyword_0_0_1, grammarAccess.getAnnotationListAccess().getCommercialAtKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_141);
            AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0=ruleAnnotationNoAtSign();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.start):null), (AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0!=null?((Token)AnnotationsAnnotationNoAtSignParserRuleCall_0_0_2_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_0_0_2()); 
            }

            }


            }


            }


            }
            loop422:
            do {
                int alt422=2;
                int LA422_0 = input.LA(1);

                if ( (LA422_0==CommercialAt) ) {
                    alt422=1;
                }


                switch (alt422) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop422;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleExpressionAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleExpressionAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleExpressionAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleExpressionAnnotationList_return ruleExpressionAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleExpressionAnnotationList_return retval = new InternalN4JSParser.ruleExpressionAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt423=0;
            loop423:
            do {
                int alt423=2;
                int LA423_0 = input.LA(1);

                if ( (LA423_0==CommercialAt) ) {
                    alt423=1;
                }


                switch (alt423) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getExpressionAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt423 >= 1 ) break loop423;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(423, input);
                        throw eee;
                }
                cnt423++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRulePropertyAssignmentAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            rulePropertyAssignmentAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class rulePropertyAssignmentAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.rulePropertyAssignmentAnnotationList_return rulePropertyAssignmentAnnotationList() throws RecognitionException {
        InternalN4JSParser.rulePropertyAssignmentAnnotationList_return retval = new InternalN4JSParser.rulePropertyAssignmentAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt424=0;
            loop424:
            do {
                int alt424=2;
                int LA424_0 = input.LA(1);

                if ( (LA424_0==CommercialAt) ) {
                    alt424=1;
                }


                switch (alt424) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getPropertyAssignmentAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt424 >= 1 ) break loop424;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(424, input);
                        throw eee;
                }
                cnt424++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberAnnotationList() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberAnnotationList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberAnnotationList_return ruleN4MemberAnnotationList() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberAnnotationList_return retval = new InternalN4JSParser.ruleN4MemberAnnotationList_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotation_return AnnotationsAnnotationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            int cnt425=0;
            loop425:
            do {
                int alt425=2;
                int LA425_0 = input.LA(1);

                if ( (LA425_0==CommercialAt) ) {
                    alt425=1;
                }


                switch (alt425) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_141);
            	    AnnotationsAnnotationParserRuleCall_1_0=ruleAnnotation();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.start):null), (AnnotationsAnnotationParserRuleCall_1_0!=null?((Token)AnnotationsAnnotationParserRuleCall_1_0.stop):null), grammarAccess.getN4MemberAnnotationListAccess().getAnnotationsAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    if ( cnt425 >= 1 ) break loop425;
            	    if (state.backtracking>0) {state.failed=true; return retval;}
                        EarlyExitException eee =
                            new EarlyExitException(425, input);
                        throw eee;
                }
                cnt425++;
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeReferenceName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeReferenceName_return ruleTypeReferenceName() throws RecognitionException {
        InternalN4JSParser.ruleTypeReferenceName_return retval = new InternalN4JSParser.ruleTypeReferenceName_return();
        retval.start = input.LT(1);

        Token VoidKeyword_0=null;
        Token ThisKeyword_1=null;
        Token AwaitKeyword_2=null;
        Token PromisifyKeyword_3=null;
        Token TargetKeyword_4=null;


            
        try {
            {
            int alt426=6;
            switch ( input.LA(1) ) {
            case Void:
                {
                alt426=1;
                }
                break;
            case This:
                {
                alt426=2;
                }
                break;
            case Await_1:
                {
                alt426=3;
                }
                break;
            case Promisify:
                {
                alt426=4;
                }
                break;
            case Target:
                {
                alt426=5;
                }
                break;
            case RULE_IDENTIFIER:
                {
                alt426=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 426, 0, input);

                throw nvae;
            }

            switch (alt426) {
                case 1 :
                    {
                    VoidKeyword_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_0, grammarAccess.getTypeReferenceNameAccess().getVoidKeyword_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ThisKeyword_1=(Token)match(input,This,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ThisKeyword_1, grammarAccess.getTypeReferenceNameAccess().getThisKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    AwaitKeyword_2=(Token)match(input,Await_1,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AwaitKeyword_2, grammarAccess.getTypeReferenceNameAccess().getAwaitKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PromisifyKeyword_3=(Token)match(input,Promisify,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PromisifyKeyword_3, grammarAccess.getTypeReferenceNameAccess().getPromisifyKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    TargetKeyword_4=(Token)match(input,Target,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TargetKeyword_4, grammarAccess.getTypeReferenceNameAccess().getTargetKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleQualifiedTypeReferenceName();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleQualifiedTypeReferenceName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleQualifiedTypeReferenceName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleQualifiedTypeReferenceName() throws RecognitionException {
        Token FullStopKeyword_1_0=null;


            
        try {
            {
            {
            match(input,RULE_IDENTIFIER,FOLLOW_136); if (state.failed) return ;
            int alt427=2;
            int LA427_0 = input.LA(1);

            if ( (LA427_0==FullStop) ) {
                alt427=1;
            }
            switch (alt427) {
                case 1 :
                    {
                    FullStopKeyword_1_0=(Token)match(input,FullStop,FOLLOW_142); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(FullStopKeyword_1_0, grammarAccess.getQualifiedTypeReferenceNameAccess().getFullStopKeyword_1_0()); 
                    }
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return ;

                    }
                    break;

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleN4ClassDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassDeclaration_return ruleN4ClassDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassDeclaration_return retval = new InternalN4JSParser.ruleN4ClassDeclaration_return();
        retval.start = input.LT(1);

        Token ClassKeyword_0_0_2=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_2 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop428:
            do {
                int alt428=2;
                int LA428_0 = input.LA(1);

                if ( ((LA428_0>=Protected && LA428_0<=Abstract)||LA428_0==External||(LA428_0>=Private && LA428_0<=Project)||LA428_0==Public||LA428_0==Static||LA428_0==Const) ) {
                    alt428=1;
                }


                switch (alt428) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_7);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop428;
                }
            } while (true);

            ClassKeyword_0_0_2=(Token)match(input,Class,FOLLOW_143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_0_0_2, grammarAccess.getN4ClassDeclarationAccess().getClassKeyword_0_0_2()); 
            }
            int alt429=2;
            int LA429_0 = input.LA(1);

            if ( (LA429_0==Tilde) ) {
                alt429=1;
            }
            switch (alt429) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_64);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt430=2;
            int LA430_0 = input.LA(1);

            if ( ((LA430_0>=Intersection && LA430_0<=Constructor)||(LA430_0>=Promisify && LA430_0<=Abstract)||LA430_0==External||(LA430_0>=Private && LA430_0<=Project)||LA430_0==Public||LA430_0==Static||LA430_0==Target||(LA430_0>=Await && LA430_0<=Await_1)||LA430_0==Union||(LA430_0>=Yield && LA430_0<=This)||LA430_0==From||LA430_0==Type||(LA430_0>=Get && LA430_0<=Let)||LA430_0==Set||LA430_0==As||LA430_0==Of||LA430_0==RULE_IDENTIFIER) ) {
                alt430=1;
            }
            else if ( (LA430_0==Implements) ) {
                int LA430_2 = input.LA(2);

                if ( (LA430_2==Implements||LA430_2==Extends||LA430_2==LessThanSign||LA430_2==LeftCurlyBracket) ) {
                    alt430=1;
                }
            }
            switch (alt430) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4ClassDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt431=2;
            int LA431_0 = input.LA(1);

            if ( (LA431_0==LessThanSign) ) {
                alt431=1;
            }
            switch (alt431) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4ClassDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt432=2;
            int LA432_0 = input.LA(1);

            if ( (LA432_0==Implements||LA432_0==Extends) ) {
                alt432=1;
            }
            switch (alt432) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    ClassExtendsClauseParserRuleCall_2=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.start):null), (ClassExtendsClauseParserRuleCall_2!=null?((Token)ClassExtendsClauseParserRuleCall_2.stop):null), grammarAccess.getN4ClassDeclarationAccess().getClassExtendsClauseParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4ClassDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMembers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMembers_return ruleMembers() throws RecognitionException {
        InternalN4JSParser.ruleMembers_return retval = new InternalN4JSParser.ruleMembers_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleN4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop433:
            do {
                int alt433=2;
                int LA433_0 = input.LA(1);

                if ( ((LA433_0>=Intersection && LA433_0<=With)||(LA433_0>=For && LA433_0<=Var)||(LA433_0>=As && LA433_0<=Of)||LA433_0==LeftParenthesis||LA433_0==Asterisk||LA433_0==LessThanSign||(LA433_0>=CommercialAt && LA433_0<=LeftSquareBracket)||LA433_0==RULE_DOUBLE||LA433_0==RULE_HEX_INT||LA433_0==RULE_OCTAL_INT||LA433_0==RULE_SCIENTIFIC_INT||LA433_0==RULE_IDENTIFIER||LA433_0==RULE_STRING||LA433_0==RULE_INT) ) {
                    alt433=1;
                }


                switch (alt433) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=ruleN4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop433;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_Members_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_Members_return norm1_Members() throws RecognitionException {
        InternalN4JSParser.norm1_Members_return retval = new InternalN4JSParser.norm1_Members_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.norm1_N4MemberDeclaration_return OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_144); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getMembersAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop434:
            do {
                int alt434=2;
                int LA434_0 = input.LA(1);

                if ( ((LA434_0>=Intersection && LA434_0<=With)||(LA434_0>=For && LA434_0<=Var)||(LA434_0>=As && LA434_0<=Of)||LA434_0==LeftParenthesis||LA434_0==Asterisk||LA434_0==LessThanSign||(LA434_0>=CommercialAt && LA434_0<=LeftSquareBracket)||LA434_0==RULE_DOUBLE||LA434_0==RULE_HEX_INT||LA434_0==RULE_OCTAL_INT||LA434_0==RULE_SCIENTIFIC_INT||LA434_0==RULE_IDENTIFIER||LA434_0==RULE_STRING||LA434_0==RULE_INT) ) {
                    alt434=1;
                }


                switch (alt434) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_144);
            	    OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0=norm1_N4MemberDeclaration();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.start):null), (OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0!=null?((Token)OwnedMembersRawN4MemberDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getMembersAccess().getOwnedMembersRawAssignment_1()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop434;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getMembersAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassExtendsClause_return ruleClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.ruleClassExtendsClause_return retval = new InternalN4JSParser.ruleClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSParser.ruleLeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt438=2;
            int LA438_0 = input.LA(1);

            if ( (LA438_0==Extends) ) {
                alt438=1;
            }
            else if ( (LA438_0==Implements) ) {
                alt438=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 438, 0, input);

                throw nvae;
            }
            switch (alt438) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt437=2;
                    int LA437_0 = input.LA(1);

                    if ( (LA437_0==Void) && (synpred255_InternalN4JSParser())) {
                        alt437=1;
                    }
                    else if ( (LA437_0==This) ) {
                        int LA437_2 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Await_1) ) {
                        int LA437_3 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Promisify) ) {
                        int LA437_4 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==Target) ) {
                        int LA437_5 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA437_0==RULE_IDENTIFIER) ) {
                        int LA437_6 = input.LA(2);

                        if ( (synpred255_InternalN4JSParser()) ) {
                            alt437=1;
                        }
                        else if ( (true) ) {
                            alt437=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 437, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA437_0>=Intersection && LA437_0<=Implements)||(LA437_0>=Interface && LA437_0<=Abstract)||(LA437_0>=External && LA437_0<=Function)||(LA437_0>=Private && LA437_0<=Project)||LA437_0==Public||LA437_0==Static||(LA437_0>=Await && LA437_0<=Async)||LA437_0==Class||(LA437_0>=False && LA437_0<=Super)||LA437_0==Union||LA437_0==Yield||(LA437_0>=From && LA437_0<=Type)||(LA437_0>=Get && LA437_0<=Set)||LA437_0==SolidusEqualsSign||LA437_0==As||LA437_0==Of||LA437_0==LeftParenthesis||LA437_0==Solidus||LA437_0==LessThanSign||(LA437_0>=CommercialAt && LA437_0<=LeftSquareBracket)||LA437_0==LeftCurlyBracket||LA437_0==RULE_DOUBLE||(LA437_0>=RULE_HEX_INT && LA437_0<=RULE_LEGACY_OCTAL_INT)||LA437_0==RULE_SCIENTIFIC_INT||LA437_0==RULE_STRING||(LA437_0>=RULE_TEMPLATE_HEAD && LA437_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA437_0==RULE_INT) ) {
                        alt437=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 437, 0, input);

                        throw nvae;
                    }
                    switch (alt437) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_146);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt436=2;
                            int LA436_0 = input.LA(1);

                            if ( (LA436_0==Implements||LA436_0==Extends) ) {
                                alt436=1;
                            }
                            switch (alt436) {
                                case 1 :
                                    {
                                    int alt435=2;
                                    int LA435_0 = input.LA(1);

                                    if ( (LA435_0==Implements) ) {
                                        alt435=1;
                                    }
                                    else if ( (LA435_0==Extends) ) {
                                        alt435=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 435, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt435) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_67); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_67); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=ruleLeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ClassExtendsClause_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ClassExtendsClause_return norm1_ClassExtendsClause() throws RecognitionException {
        InternalN4JSParser.norm1_ClassExtendsClause_return retval = new InternalN4JSParser.norm1_ClassExtendsClause_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1_0_1_0_0=null;
        Token ExtendsKeyword_0_1_0_1_0_1=null;
        Token ImplementsKeyword_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_0_1_0_1_1 = null;

        InternalN4JSParser.norm1_LeftHandSideExpression_return SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.ruleClassImplementsList_return ClassImplementsListParserRuleCall_1_1 = null;



            
        try {
            {
            int alt442=2;
            int LA442_0 = input.LA(1);

            if ( (LA442_0==Extends) ) {
                alt442=1;
            }
            else if ( (LA442_0==Implements) ) {
                alt442=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 442, 0, input);

                throw nvae;
            }
            switch (alt442) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_145); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_0()); 
                    }
                    int alt441=2;
                    int LA441_0 = input.LA(1);

                    if ( (LA441_0==Void) && (synpred256_InternalN4JSParser())) {
                        alt441=1;
                    }
                    else if ( (LA441_0==This) ) {
                        int LA441_2 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 2, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA441_0==Await_1) ) {
                        int LA441_3 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 3, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA441_0==Promisify) ) {
                        int LA441_4 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 4, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA441_0==Target) ) {
                        int LA441_5 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 5, input);

                            throw nvae;
                        }
                    }
                    else if ( (LA441_0==RULE_IDENTIFIER) ) {
                        int LA441_6 = input.LA(2);

                        if ( (synpred256_InternalN4JSParser()) ) {
                            alt441=1;
                        }
                        else if ( (true) ) {
                            alt441=2;
                        }
                        else {
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 441, 6, input);

                            throw nvae;
                        }
                    }
                    else if ( ((LA441_0>=Intersection && LA441_0<=Implements)||(LA441_0>=Interface && LA441_0<=Abstract)||(LA441_0>=External && LA441_0<=Function)||(LA441_0>=Private && LA441_0<=Project)||LA441_0==Public||LA441_0==Static||(LA441_0>=Await && LA441_0<=Async)||LA441_0==Class||(LA441_0>=False && LA441_0<=Super)||LA441_0==Union||(LA441_0>=From && LA441_0<=Type)||(LA441_0>=Get && LA441_0<=Set)||LA441_0==SolidusEqualsSign||LA441_0==As||LA441_0==Of||LA441_0==LeftParenthesis||LA441_0==Solidus||LA441_0==LessThanSign||(LA441_0>=CommercialAt && LA441_0<=LeftSquareBracket)||LA441_0==LeftCurlyBracket||LA441_0==RULE_DOUBLE||(LA441_0>=RULE_HEX_INT && LA441_0<=RULE_LEGACY_OCTAL_INT)||LA441_0==RULE_SCIENTIFIC_INT||LA441_0==RULE_STRING||(LA441_0>=RULE_TEMPLATE_HEAD && LA441_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA441_0==RULE_INT) ) {
                        alt441=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 441, 0, input);

                        throw nvae;
                    }
                    switch (alt441) {
                        case 1 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_146);
                            SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0=ruleParameterizedTypeRefNominal();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.start):null), (SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0!=null?((Token)SuperClassRefParameterizedTypeRefNominalParserRuleCall_0_1_0_0_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassRefAssignment_0_1_0_0()); 
                            }

                            }


                            }
                            int alt440=2;
                            int LA440_0 = input.LA(1);

                            if ( (LA440_0==Implements||LA440_0==Extends) ) {
                                alt440=1;
                            }
                            switch (alt440) {
                                case 1 :
                                    {
                                    int alt439=2;
                                    int LA439_0 = input.LA(1);

                                    if ( (LA439_0==Implements) ) {
                                        alt439=1;
                                    }
                                    else if ( (LA439_0==Extends) ) {
                                        alt439=2;
                                    }
                                    else {
                                        if (state.backtracking>0) {state.failed=true; return retval;}
                                        NoViableAltException nvae =
                                            new NoViableAltException("", 439, 0, input);

                                        throw nvae;
                                    }
                                    switch (alt439) {
                                        case 1 :
                                            {
                                            ImplementsKeyword_0_1_0_1_0_0=(Token)match(input,Implements,FOLLOW_67); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ImplementsKeyword_0_1_0_1_0_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_0_1_0_1_0_0()); 
                                            }

                                            }
                                            break;
                                        case 2 :
                                            {
                                            ExtendsKeyword_0_1_0_1_0_1=(Token)match(input,Extends,FOLLOW_67); if (state.failed) return retval;
                                            if ( state.backtracking==0 ) {
                                               announce(ExtendsKeyword_0_1_0_1_0_1, grammarAccess.getClassExtendsClauseAccess().getExtendsKeyword_0_1_0_1_0_1()); 
                                            }

                                            }
                                            break;

                                    }

                                    pushFollow(FOLLOW_2);
                                    ClassImplementsListParserRuleCall_0_1_0_1_1=ruleClassImplementsList();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.start):null), (ClassImplementsListParserRuleCall_0_1_0_1_1!=null?((Token)ClassImplementsListParserRuleCall_0_1_0_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_0_1_0_1_1()); 
                                    }

                                    }
                                    break;

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_2);
                            SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0=norm1_LeftHandSideExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.start):null), (SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0!=null?((Token)SuperClassExpressionLeftHandSideExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getClassExtendsClauseAccess().getSuperClassExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ImplementsKeyword_1_0=(Token)match(input,Implements,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1_0, grammarAccess.getClassExtendsClauseAccess().getImplementsKeyword_1_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    ClassImplementsListParserRuleCall_1_1=ruleClassImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.start):null), (ClassImplementsListParserRuleCall_1_1!=null?((Token)ClassImplementsListParserRuleCall_1_1.stop):null), grammarAccess.getClassExtendsClauseAccess().getClassImplementsListParserRuleCall_1_1()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleClassImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassImplementsList_return ruleClassImplementsList() throws RecognitionException {
        InternalN4JSParser.ruleClassImplementsList_return retval = new InternalN4JSParser.ruleClassImplementsList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0_0=null;
        Token ImplementsKeyword_1_0_1=null;
        Token ExtendsKeyword_1_0_2=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_147);
            ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_0_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_0()); 
            }

            }


            }
            loop444:
            do {
                int alt444=2;
                int LA444_0 = input.LA(1);

                if ( (LA444_0==Implements||LA444_0==Extends||LA444_0==Comma) ) {
                    alt444=1;
                }


                switch (alt444) {
            	case 1 :
            	    {
            	    int alt443=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt443=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt443=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt443=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 443, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt443) {
            	        case 1 :
            	            {
            	            CommaKeyword_1_0_0=(Token)match(input,Comma,FOLLOW_67); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_0_0, grammarAccess.getClassImplementsListAccess().getCommaKeyword_1_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_1_0_1=(Token)match(input,Implements,FOLLOW_67); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_1_0_1, grammarAccess.getClassImplementsListAccess().getImplementsKeyword_1_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_1_0_2=(Token)match(input,Extends,FOLLOW_67); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_1_0_2, grammarAccess.getClassImplementsListAccess().getExtendsKeyword_1_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_147);
            	    ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.start):null), (ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0!=null?((Token)ImplementedInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_1_0.stop):null), grammarAccess.getClassImplementsListAccess().getImplementedInterfaceRefsAssignment_1_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop444;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4ClassExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4ClassExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4ClassExpression_return ruleN4ClassExpression() throws RecognitionException {
        InternalN4JSParser.ruleN4ClassExpression_return retval = new InternalN4JSParser.ruleN4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_64); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt445=2;
            int LA445_0 = input.LA(1);

            if ( ((LA445_0>=Intersection && LA445_0<=Constructor)||(LA445_0>=Promisify && LA445_0<=Abstract)||LA445_0==External||(LA445_0>=Private && LA445_0<=Project)||LA445_0==Public||LA445_0==Static||LA445_0==Target||(LA445_0>=Await && LA445_0<=Await_1)||LA445_0==Union||(LA445_0>=Yield && LA445_0<=This)||LA445_0==From||LA445_0==Type||(LA445_0>=Get && LA445_0<=Let)||LA445_0==Set||LA445_0==As||LA445_0==Of||LA445_0==RULE_IDENTIFIER) ) {
                alt445=1;
            }
            else if ( (LA445_0==Implements) ) {
                int LA445_2 = input.LA(2);

                if ( (LA445_2==Implements||LA445_2==Extends||LA445_2==LeftCurlyBracket) ) {
                    alt445=1;
                }
            }
            switch (alt445) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_2_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt446=2;
            int LA446_0 = input.LA(1);

            if ( (LA446_0==Implements||LA446_0==Extends) ) {
                alt446=1;
            }
            switch (alt446) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    ClassExtendsClauseParserRuleCall_3=ruleClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4ClassExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4ClassExpression_return norm1_N4ClassExpression() throws RecognitionException {
        InternalN4JSParser.norm1_N4ClassExpression_return retval = new InternalN4JSParser.norm1_N4ClassExpression_return();
        retval.start = input.LT(1);

        Token ClassKeyword_1=null;
        InternalN4JSParser.norm1_BindingIdentifier_return NameBindingIdentifierParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_ClassExtendsClause_return ClassExtendsClauseParserRuleCall_3 = null;

        InternalN4JSParser.norm1_Members_return MembersParserRuleCall_4 = null;



            
        try {
            {
            {
            ClassKeyword_1=(Token)match(input,Class,FOLLOW_65); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ClassKeyword_1, grammarAccess.getN4ClassExpressionAccess().getClassKeyword_1()); 
            }
            int alt447=2;
            int LA447_0 = input.LA(1);

            if ( ((LA447_0>=Intersection && LA447_0<=Constructor)||(LA447_0>=Promisify && LA447_0<=Abstract)||LA447_0==External||(LA447_0>=Private && LA447_0<=Project)||LA447_0==Public||LA447_0==Static||LA447_0==Target||(LA447_0>=Await && LA447_0<=Await_1)||LA447_0==Union||LA447_0==This||LA447_0==From||LA447_0==Type||(LA447_0>=Get && LA447_0<=Let)||LA447_0==Set||LA447_0==As||LA447_0==Of||LA447_0==RULE_IDENTIFIER) ) {
                alt447=1;
            }
            else if ( (LA447_0==Implements) ) {
                int LA447_2 = input.LA(2);

                if ( (LA447_2==Implements||LA447_2==Extends||LA447_2==LeftCurlyBracket) ) {
                    alt447=1;
                }
            }
            switch (alt447) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_65);
                    NameBindingIdentifierParserRuleCall_2_0=norm1_BindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.start):null), (NameBindingIdentifierParserRuleCall_2_0!=null?((Token)NameBindingIdentifierParserRuleCall_2_0.stop):null), grammarAccess.getN4ClassExpressionAccess().getNameAssignment_2()); 
                    }

                    }


                    }
                    break;

            }
            int alt448=2;
            int LA448_0 = input.LA(1);

            if ( (LA448_0==Implements||LA448_0==Extends) ) {
                alt448=1;
            }
            switch (alt448) {
                case 1 :
                    {
                    pushFollow(FOLLOW_65);
                    ClassExtendsClauseParserRuleCall_3=norm1_ClassExtendsClause();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.start):null), (ClassExtendsClauseParserRuleCall_3!=null?((Token)ClassExtendsClauseParserRuleCall_3.stop):null), grammarAccess.getN4ClassExpressionAccess().getClassExtendsClauseParserRuleCall_3()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_4=norm1_Members();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.start):null), (MembersParserRuleCall_4!=null?((Token)MembersParserRuleCall_4.stop):null), grammarAccess.getN4ClassExpressionAccess().getMembersParserRuleCall_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4InterfaceDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4InterfaceDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4InterfaceDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4InterfaceDeclaration_return ruleN4InterfaceDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4InterfaceDeclaration_return retval = new InternalN4JSParser.ruleN4InterfaceDeclaration_return();
        retval.start = input.LT(1);

        Token InterfaceKeyword_0_0_2=null;
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1 = null;

        InternalN4JSParser.ruleInterfaceImplementsList_return InterfaceImplementsListParserRuleCall_2 = null;

        InternalN4JSParser.ruleMembers_return MembersParserRuleCall_3 = null;



            
        try {
            {
            {
            {
            {
            loop449:
            do {
                int alt449=2;
                int LA449_0 = input.LA(1);

                if ( ((LA449_0>=Protected && LA449_0<=Abstract)||LA449_0==External||(LA449_0>=Private && LA449_0<=Project)||LA449_0==Public||LA449_0==Static||LA449_0==Const) ) {
                    alt449=1;
                }


                switch (alt449) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_11);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop449;
                }
            } while (true);

            InterfaceKeyword_0_0_2=(Token)match(input,Interface,FOLLOW_143); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(InterfaceKeyword_0_0_2, grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceKeyword_0_0_2()); 
            }
            int alt450=2;
            int LA450_0 = input.LA(1);

            if ( (LA450_0==Tilde) ) {
                alt450=1;
            }
            switch (alt450) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_64);
                    TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0=ruleTypingStrategyDefSiteOperator();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.start):null), (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0!=null?((Token)TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypingStrategyAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }
            int alt451=2;
            int LA451_0 = input.LA(1);

            if ( ((LA451_0>=Intersection && LA451_0<=Constructor)||(LA451_0>=Promisify && LA451_0<=Abstract)||LA451_0==External||(LA451_0>=Private && LA451_0<=Project)||LA451_0==Public||LA451_0==Static||LA451_0==Target||(LA451_0>=Await && LA451_0<=Await_1)||LA451_0==Union||(LA451_0>=Yield && LA451_0<=This)||LA451_0==From||LA451_0==Type||(LA451_0>=Get && LA451_0<=Let)||LA451_0==Set||LA451_0==As||LA451_0==Of||LA451_0==RULE_IDENTIFIER) ) {
                alt451=1;
            }
            else if ( (LA451_0==Implements) ) {
                int LA451_2 = input.LA(2);

                if ( (LA451_2==Implements||LA451_2==Extends||LA451_2==LessThanSign||LA451_2==LeftCurlyBracket) ) {
                    alt451=1;
                }
            }
            switch (alt451) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_10);
                    NameBindingIdentifierParserRuleCall_0_0_4_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_4_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_4_0.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getNameAssignment_0_0_4()); 
                    }

                    }


                    }
                    break;

            }


            }


            }
            int alt452=2;
            int LA452_0 = input.LA(1);

            if ( (LA452_0==LessThanSign) ) {
                alt452=1;
            }
            switch (alt452) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    TypeVariablesParserRuleCall_1=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.start):null), (TypeVariablesParserRuleCall_1!=null?((Token)TypeVariablesParserRuleCall_1.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getTypeVariablesParserRuleCall_1()); 
                    }

                    }
                    break;

            }
            int alt453=2;
            int LA453_0 = input.LA(1);

            if ( (LA453_0==Implements||LA453_0==Extends) ) {
                alt453=1;
            }
            switch (alt453) {
                case 1 :
                    {
                    pushFollow(FOLLOW_10);
                    InterfaceImplementsListParserRuleCall_2=ruleInterfaceImplementsList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.start):null), (InterfaceImplementsListParserRuleCall_2!=null?((Token)InterfaceImplementsListParserRuleCall_2.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getInterfaceImplementsListParserRuleCall_2()); 
                    }

                    }
                    break;

            }

            pushFollow(FOLLOW_2);
            MembersParserRuleCall_3=ruleMembers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.start):null), (MembersParserRuleCall_3!=null?((Token)MembersParserRuleCall_3.stop):null), grammarAccess.getN4InterfaceDeclarationAccess().getMembersParserRuleCall_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleInterfaceImplementsList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleInterfaceImplementsList_return ruleInterfaceImplementsList() throws RecognitionException {
        InternalN4JSParser.ruleInterfaceImplementsList_return retval = new InternalN4JSParser.ruleInterfaceImplementsList_return();
        retval.start = input.LT(1);

        Token ExtendsKeyword_0_0=null;
        Token ImplementsKeyword_0_1=null;
        Token CommaKeyword_2_0_0=null;
        Token ImplementsKeyword_2_0_1=null;
        Token ExtendsKeyword_2_0_2=null;
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0 = null;



            
        try {
            {
            {
            int alt454=2;
            int LA454_0 = input.LA(1);

            if ( (LA454_0==Extends) ) {
                alt454=1;
            }
            else if ( (LA454_0==Implements) ) {
                alt454=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 454, 0, input);

                throw nvae;
            }
            switch (alt454) {
                case 1 :
                    {
                    ExtendsKeyword_0_0=(Token)match(input,Extends,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_0_0, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_0_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_0_1=(Token)match(input,Implements,FOLLOW_67); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_0_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_147);
            SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0=ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_1()); 
            }

            }


            }
            loop456:
            do {
                int alt456=2;
                int LA456_0 = input.LA(1);

                if ( (LA456_0==Implements||LA456_0==Extends||LA456_0==Comma) ) {
                    alt456=1;
                }


                switch (alt456) {
            	case 1 :
            	    {
            	    int alt455=3;
            	    switch ( input.LA(1) ) {
            	    case Comma:
            	        {
            	        alt455=1;
            	        }
            	        break;
            	    case Implements:
            	        {
            	        alt455=2;
            	        }
            	        break;
            	    case Extends:
            	        {
            	        alt455=3;
            	        }
            	        break;
            	    default:
            	        if (state.backtracking>0) {state.failed=true; return retval;}
            	        NoViableAltException nvae =
            	            new NoViableAltException("", 455, 0, input);

            	        throw nvae;
            	    }

            	    switch (alt455) {
            	        case 1 :
            	            {
            	            CommaKeyword_2_0_0=(Token)match(input,Comma,FOLLOW_67); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_2_0_0, grammarAccess.getInterfaceImplementsListAccess().getCommaKeyword_2_0_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            ImplementsKeyword_2_0_1=(Token)match(input,Implements,FOLLOW_67); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ImplementsKeyword_2_0_1, grammarAccess.getInterfaceImplementsListAccess().getImplementsKeyword_2_0_1()); 
            	            }

            	            }
            	            break;
            	        case 3 :
            	            {
            	            ExtendsKeyword_2_0_2=(Token)match(input,Extends,FOLLOW_67); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(ExtendsKeyword_2_0_2, grammarAccess.getInterfaceImplementsListAccess().getExtendsKeyword_2_0_2()); 
            	            }

            	            }
            	            break;

            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_147);
            	    SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0=ruleParameterizedTypeRefNominal();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.start):null), (SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0!=null?((Token)SuperInterfaceRefsParameterizedTypeRefNominalParserRuleCall_2_1_0.stop):null), grammarAccess.getInterfaceImplementsListAccess().getSuperInterfaceRefsAssignment_2_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop456;
                }
            } while (true);


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumDeclaration_return ruleN4EnumDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumDeclaration_return retval = new InternalN4JSParser.ruleN4EnumDeclaration_return();
        retval.start = input.LT(1);

        Token EnumKeyword_0_0_2=null;
        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingIdentifier_return NameBindingIdentifierParserRuleCall_0_0_3_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_0_0 = null;

        InternalN4JSParser.ruleN4EnumLiteral_return LiteralsN4EnumLiteralParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop457:
            do {
                int alt457=2;
                int LA457_0 = input.LA(1);

                if ( ((LA457_0>=Protected && LA457_0<=Abstract)||LA457_0==External||(LA457_0>=Private && LA457_0<=Project)||LA457_0==Public||LA457_0==Static||LA457_0==Const) ) {
                    alt457=1;
                }


                switch (alt457) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_12);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop457;
                }
            } while (true);

            EnumKeyword_0_0_2=(Token)match(input,Enum,FOLLOW_148); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(EnumKeyword_0_0_2, grammarAccess.getN4EnumDeclarationAccess().getEnumKeyword_0_0_2()); 
            }
            int alt458=2;
            int LA458_0 = input.LA(1);

            if ( ((LA458_0>=Intersection && LA458_0<=Implements)||(LA458_0>=Promisify && LA458_0<=Abstract)||LA458_0==External||(LA458_0>=Private && LA458_0<=Project)||LA458_0==Public||LA458_0==Static||LA458_0==Target||(LA458_0>=Await && LA458_0<=Await_1)||LA458_0==Union||(LA458_0>=Yield && LA458_0<=This)||LA458_0==From||LA458_0==Type||(LA458_0>=Get && LA458_0<=Let)||LA458_0==Set||LA458_0==As||LA458_0==Of||LA458_0==RULE_IDENTIFIER) ) {
                alt458=1;
            }
            switch (alt458) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_13);
                    NameBindingIdentifierParserRuleCall_0_0_3_0=ruleBindingIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.start):null), (NameBindingIdentifierParserRuleCall_0_0_3_0!=null?((Token)NameBindingIdentifierParserRuleCall_0_0_3_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getNameAssignment_0_0_3()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_149); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getN4EnumDeclarationAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt460=2;
            int LA460_0 = input.LA(1);

            if ( (LA460_0==Promisify||LA460_0==Target||LA460_0==This||LA460_0==RULE_IDENTIFIER) ) {
                alt460=1;
            }
            switch (alt460) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    LiteralsN4EnumLiteralParserRuleCall_2_0_0=ruleN4EnumLiteral();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_0_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_0_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_0()); 
                    }

                    }


                    }
                    loop459:
                    do {
                        int alt459=2;
                        int LA459_0 = input.LA(1);

                        if ( (LA459_0==Comma) ) {
                            alt459=1;
                        }


                        switch (alt459) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getN4EnumDeclarationAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    LiteralsN4EnumLiteralParserRuleCall_2_1_1_0=ruleN4EnumLiteral();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.start):null), (LiteralsN4EnumLiteralParserRuleCall_2_1_1_0!=null?((Token)LiteralsN4EnumLiteralParserRuleCall_2_1_1_0.stop):null), grammarAccess.getN4EnumDeclarationAccess().getLiteralsAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop459;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getN4EnumDeclarationAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4EnumLiteral() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4EnumLiteral();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4EnumLiteral_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4EnumLiteral_return ruleN4EnumLiteral() throws RecognitionException {
        InternalN4JSParser.ruleN4EnumLiteral_return retval = new InternalN4JSParser.ruleN4EnumLiteral_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        Token ValueSTRINGTerminalRuleCall_1_1_0=null;
        InternalN4JSParser.ruleIdentifierOrThis_return NameIdentifierOrThisParserRuleCall_0_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_42);
            NameIdentifierOrThisParserRuleCall_0_0=ruleIdentifierOrThis();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.start):null), (NameIdentifierOrThisParserRuleCall_0_0!=null?((Token)NameIdentifierOrThisParserRuleCall_0_0.stop):null), grammarAccess.getN4EnumLiteralAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt461=2;
            int LA461_0 = input.LA(1);

            if ( (LA461_0==Colon) ) {
                alt461=1;
            }
            switch (alt461) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_22); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getN4EnumLiteralAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    ValueSTRINGTerminalRuleCall_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ValueSTRINGTerminalRuleCall_1_1_0, grammarAccess.getN4EnumLiteralAccess().getValueAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MemberDeclaration_return ruleN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MemberDeclaration_return retval = new InternalN4JSParser.ruleN4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.ruleN4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.ruleN4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.ruleN4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.ruleN4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt462=6;
            alt462 = dfa462.predict(input);
            switch (alt462) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=ruleAnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=ruleN4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=ruleN4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=ruleN4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=ruleN4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=ruleN4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MemberDeclaration_return norm1_N4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MemberDeclaration_return retval = new InternalN4JSParser.norm1_N4MemberDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return AnnotatedN4MemberDeclarationParserRuleCall_0 = null;

        InternalN4JSParser.norm1_N4GetterDeclaration_return N4GetterDeclarationParserRuleCall_1 = null;

        InternalN4JSParser.norm1_N4SetterDeclaration_return N4SetterDeclarationParserRuleCall_2 = null;

        InternalN4JSParser.norm1_N4MethodDeclaration_return N4MethodDeclarationParserRuleCall_3 = null;

        InternalN4JSParser.norm1_N4FieldDeclaration_return N4FieldDeclarationParserRuleCall_4 = null;

        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return N4CallableConstructorDeclarationParserRuleCall_5 = null;



            
        try {
            {
            int alt463=6;
            alt463 = dfa463.predict(input);
            switch (alt463) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    AnnotatedN4MemberDeclarationParserRuleCall_0=norm1_AnnotatedN4MemberDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.start):null), (AnnotatedN4MemberDeclarationParserRuleCall_0!=null?((Token)AnnotatedN4MemberDeclarationParserRuleCall_0.stop):null), grammarAccess.getN4MemberDeclarationAccess().getAnnotatedN4MemberDeclarationParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4GetterDeclarationParserRuleCall_1=norm1_N4GetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.start):null), (N4GetterDeclarationParserRuleCall_1!=null?((Token)N4GetterDeclarationParserRuleCall_1.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4GetterDeclarationParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4SetterDeclarationParserRuleCall_2=norm1_N4SetterDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.start):null), (N4SetterDeclarationParserRuleCall_2!=null?((Token)N4SetterDeclarationParserRuleCall_2.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4SetterDeclarationParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    N4MethodDeclarationParserRuleCall_3=norm1_N4MethodDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.start):null), (N4MethodDeclarationParserRuleCall_3!=null?((Token)N4MethodDeclarationParserRuleCall_3.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4MethodDeclarationParserRuleCall_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    N4FieldDeclarationParserRuleCall_4=norm1_N4FieldDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.start):null), (N4FieldDeclarationParserRuleCall_4!=null?((Token)N4FieldDeclarationParserRuleCall_4.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4FieldDeclarationParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    N4CallableConstructorDeclarationParserRuleCall_5=norm1_N4CallableConstructorDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.start):null), (N4CallableConstructorDeclarationParserRuleCall_5!=null?((Token)N4CallableConstructorDeclarationParserRuleCall_5.stop):null), grammarAccess.getN4MemberDeclarationAccess().getN4CallableConstructorDeclarationParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleAnnotatedN4MemberDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleAnnotatedN4MemberDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleAnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return ruleAnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.ruleAnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2 = null;

        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_99);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt474=4;
            alt474 = dfa474.predict(input);
            switch (alt474) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop464:
                    do {
                        int alt464=2;
                        int LA464_0 = input.LA(1);

                        if ( ((LA464_0>=Protected && LA464_0<=Abstract)||LA464_0==External||(LA464_0>=Private && LA464_0<=Project)||LA464_0==Public||LA464_0==Static||LA464_0==Const) ) {
                            alt464=1;
                        }


                        switch (alt464) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_150);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop464;
                        }
                    } while (true);

                    pushFollow(FOLLOW_151);
                    GetterHeaderParserRuleCall_1_0_0_0_2=ruleGetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt465=2;
                    int LA465_0 = input.LA(1);

                    if ( (LA465_0==LeftCurlyBracket) && (synpred266_InternalN4JSParser())) {
                        alt465=1;
                    }
                    switch (alt465) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            BodyBlockParserRuleCall_1_0_1_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt466=2;
                    int LA466_0 = input.LA(1);

                    if ( (LA466_0==Semicolon) ) {
                        alt466=1;
                    }
                    switch (alt466) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop467:
                    do {
                        int alt467=2;
                        int LA467_0 = input.LA(1);

                        if ( ((LA467_0>=Protected && LA467_0<=Abstract)||LA467_0==External||(LA467_0>=Private && LA467_0<=Project)||LA467_0==Public||LA467_0==Static||LA467_0==Const) ) {
                            alt467=1;
                        }


                        switch (alt467) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_152);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop467;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    pushFollow(FOLLOW_46);
                    LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3()); 
                    }

                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_48);
                    FparFormalParameterParserRuleCall_1_1_2_0=ruleFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt468=2;
                    int LA468_0 = input.LA(1);

                    if ( (LA468_0==LeftCurlyBracket) && (synpred269_InternalN4JSParser())) {
                        alt468=1;
                    }
                    switch (alt468) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            BodyBlockParserRuleCall_1_1_4_0=ruleBlock();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt469=2;
                    int LA469_0 = input.LA(1);

                    if ( (LA469_0==Semicolon) ) {
                        alt469=1;
                    }
                    switch (alt469) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop470:
                    do {
                        int alt470=2;
                        alt470 = dfa470.predict(input);
                        switch (alt470) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop470;
                        }
                    } while (true);
                    int alt471=2;
                    int LA471_0 = input.LA(1);

                    if ( (LA471_0==LessThanSign) ) {
                        alt471=1;
                    }
                    switch (alt471) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_101);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt472=2;
                    int LA472_0 = input.LA(1);

                    if ( (LA472_0==Asterisk) ) {
                        alt472=1;
                    }
                    else if ( ((LA472_0>=Intersection && LA472_0<=With)||(LA472_0>=For && LA472_0<=Var)||(LA472_0>=As && LA472_0<=Of)||LA472_0==LeftSquareBracket||LA472_0==RULE_DOUBLE||LA472_0==RULE_HEX_INT||LA472_0==RULE_OCTAL_INT||LA472_0==RULE_SCIENTIFIC_INT||LA472_0==RULE_IDENTIFIER||LA472_0==RULE_STRING||LA472_0==RULE_INT) ) {
                        alt472=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 472, 0, input);

                        throw nvae;
                    }
                    switch (alt472) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_41);
                            LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1()); 
                            }
                            {
                            pushFollow(FOLLOW_102);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_100);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0()); 
                            }
                            pushFollow(FOLLOW_153);
                            LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1=ruleLiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1()); 
                            }
                            {
                            pushFollow(FOLLOW_102);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt473=2;
                    int LA473_0 = input.LA(1);

                    if ( (LA473_0==Semicolon) ) {
                        alt473=1;
                    }
                    switch (alt473) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=ruleFieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_AnnotatedN4MemberDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return norm1_AnnotatedN4MemberDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return retval = new InternalN4JSParser.norm1_AnnotatedN4MemberDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1_0_2=null;
        Token SetKeyword_1_1_0_0_2=null;
        Token LeftParenthesisKeyword_1_1_1=null;
        Token RightParenthesisKeyword_1_1_3=null;
        Token SemicolonKeyword_1_1_5=null;
        Token GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1_2_1=null;
        InternalN4JSParser.ruleN4MemberAnnotationList_return N4MemberAnnotationListParserRuleCall_0 = null;

        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_1_0_0_0_2 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_1_1_2_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_1_4_0 = null;

        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_1_2_0_0_2 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2 = null;

        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1_3_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_99);
            N4MemberAnnotationListParserRuleCall_0=ruleN4MemberAnnotationList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.start):null), (N4MemberAnnotationListParserRuleCall_0!=null?((Token)N4MemberAnnotationListParserRuleCall_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getN4MemberAnnotationListParserRuleCall_0()); 
            }
            int alt485=4;
            alt485 = dfa485.predict(input);
            switch (alt485) {
                case 1 :
                    {
                    {
                    {
                    {
                    loop475:
                    do {
                        int alt475=2;
                        int LA475_0 = input.LA(1);

                        if ( ((LA475_0>=Protected && LA475_0<=Abstract)||LA475_0==External||(LA475_0>=Private && LA475_0<=Project)||LA475_0==Public||LA475_0==Static||LA475_0==Const) ) {
                            alt475=1;
                        }


                        switch (alt475) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_150);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop475;
                        }
                    } while (true);

                    pushFollow(FOLLOW_151);
                    GetterHeaderParserRuleCall_1_0_0_0_2=norm1_GetterHeader();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.start):null), (GetterHeaderParserRuleCall_1_0_0_0_2!=null?((Token)GetterHeaderParserRuleCall_1_0_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGetterHeaderParserRuleCall_1_0_0_0_2()); 
                    }

                    }


                    }
                    int alt476=2;
                    int LA476_0 = input.LA(1);

                    if ( (LA476_0==LeftCurlyBracket) && (synpred274_InternalN4JSParser())) {
                        alt476=1;
                    }
                    switch (alt476) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            BodyBlockParserRuleCall_1_0_1_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.start):null), (BodyBlockParserRuleCall_1_0_1_0!=null?((Token)BodyBlockParserRuleCall_1_0_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_0_1()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt477=2;
                    int LA477_0 = input.LA(1);

                    if ( (LA477_0==Semicolon) ) {
                        alt477=1;
                    }
                    switch (alt477) {
                        case 1 :
                            {
                            SemicolonKeyword_1_0_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_0_2()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    loop478:
                    do {
                        int alt478=2;
                        int LA478_0 = input.LA(1);

                        if ( ((LA478_0>=Protected && LA478_0<=Abstract)||LA478_0==External||(LA478_0>=Private && LA478_0<=Project)||LA478_0==Public||LA478_0==Static||LA478_0==Const) ) {
                            alt478=1;
                        }


                        switch (alt478) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_152);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop478;
                        }
                    } while (true);

                    SetKeyword_1_1_0_0_2=(Token)match(input,Set,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_1_1_0_0_2, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSetKeyword_1_1_0_0_2()); 
                    }
                    {
                    pushFollow(FOLLOW_46);
                    LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3()); 
                    }

                    }


                    }


                    }

                    LeftParenthesisKeyword_1_1_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftParenthesisKeyword_1_1_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLeftParenthesisKeyword_1_1_1()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_48);
                    FparFormalParameterParserRuleCall_1_1_2_0=norm1_FormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.start):null), (FparFormalParameterParserRuleCall_1_1_2_0!=null?((Token)FparFormalParameterParserRuleCall_1_1_2_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFparAssignment_1_1_2()); 
                    }

                    }


                    }

                    RightParenthesisKeyword_1_1_3=(Token)match(input,RightParenthesis,FOLLOW_151); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightParenthesisKeyword_1_1_3, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getRightParenthesisKeyword_1_1_3()); 
                    }
                    int alt479=2;
                    int LA479_0 = input.LA(1);

                    if ( (LA479_0==LeftCurlyBracket) && (synpred277_InternalN4JSParser())) {
                        alt479=1;
                    }
                    switch (alt479) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_102);
                            BodyBlockParserRuleCall_1_1_4_0=norm1_Block();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.start):null), (BodyBlockParserRuleCall_1_1_4_0!=null?((Token)BodyBlockParserRuleCall_1_1_4_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getBodyAssignment_1_1_4()); 
                            }

                            }


                            }
                            break;

                    }
                    int alt480=2;
                    int LA480_0 = input.LA(1);

                    if ( (LA480_0==Semicolon) ) {
                        alt480=1;
                    }
                    switch (alt480) {
                        case 1 :
                            {
                            SemicolonKeyword_1_1_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_1_5, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_1_5()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    {
                    loop481:
                    do {
                        int alt481=2;
                        alt481 = dfa481.predict(input);
                        switch (alt481) {
                    	case 1 :
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_99);
                    	    ruleN4Modifier();

                    	    state._fsp--;
                    	    if (state.failed) return retval;

                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop481;
                        }
                    } while (true);
                    int alt482=2;
                    int LA482_0 = input.LA(1);

                    if ( (LA482_0==LessThanSign) ) {
                        alt482=1;
                    }
                    switch (alt482) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_101);
                            TypeVariablesParserRuleCall_1_2_0_0_2=ruleTypeVariables();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.start):null), (TypeVariablesParserRuleCall_1_2_0_0_2!=null?((Token)TypeVariablesParserRuleCall_1_2_0_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getTypeVariablesParserRuleCall_1_2_0_0_2()); 
                            }

                            }
                            break;

                    }
                    int alt483=2;
                    int LA483_0 = input.LA(1);

                    if ( (LA483_0==Asterisk) ) {
                        alt483=1;
                    }
                    else if ( ((LA483_0>=Intersection && LA483_0<=With)||(LA483_0>=For && LA483_0<=Var)||(LA483_0>=As && LA483_0<=Of)||LA483_0==LeftSquareBracket||LA483_0==RULE_DOUBLE||LA483_0==RULE_HEX_INT||LA483_0==RULE_OCTAL_INT||LA483_0==RULE_SCIENTIFIC_INT||LA483_0==RULE_IDENTIFIER||LA483_0==RULE_STRING||LA483_0==RULE_INT) ) {
                        alt483=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 483, 0, input);

                        throw nvae;
                    }
                    switch (alt483) {
                        case 1 :
                            {
                            {
                            {
                            {
                            GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_100); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getGeneratorAsteriskKeyword_1_2_0_0_3_0_0_0()); 
                            }

                            }


                            }

                            pushFollow(FOLLOW_41);
                            LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1()); 
                            }
                            {
                            pushFollow(FOLLOW_102);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2=norm1_MethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            pushFollow(FOLLOW_100);
                            AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0()); 
                            }
                            pushFollow(FOLLOW_153);
                            LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1=norm1_LiteralOrComputedPropertyName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1()); 
                            }
                            {
                            pushFollow(FOLLOW_102);
                            MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2=ruleMethodParamsReturnAndBody();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    int alt484=2;
                    int LA484_0 = input.LA(1);

                    if ( (LA484_0==Semicolon) ) {
                        alt484=1;
                    }
                    switch (alt484) {
                        case 1 :
                            {
                            SemicolonKeyword_1_2_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(SemicolonKeyword_1_2_1, grammarAccess.getAnnotatedN4MemberDeclarationAccess().getSemicolonKeyword_1_2_1()); 
                            }

                            }
                            break;

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    FieldDeclarationImplParserRuleCall_1_3_1=norm1_FieldDeclarationImpl();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.start):null), (FieldDeclarationImplParserRuleCall_1_3_1!=null?((Token)FieldDeclarationImplParserRuleCall_1_3_1.stop):null), grammarAccess.getAnnotatedN4MemberDeclarationAccess().getFieldDeclarationImplParserRuleCall_1_3_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleLiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralOrComputedPropertyName_return ruleLiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return retval = new InternalN4JSParser.ruleLiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token NameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_1_0_0_1=null;
        Token RightSquareBracketKeyword_3_1_1_1=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return NameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSymbolLiteralComputedName_return NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleStringLiteralAsName_return NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0 = null;



            
        try {
            {
            int alt488=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Await:
            case Async:
            case Await_1:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt488=1;
                }
                break;
            case RULE_STRING:
                {
                alt488=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt488=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt488=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 488, 0, input);

                throw nvae;
            }

            switch (alt488) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    NameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)NameNumericLiteralAsStringParserRuleCall_2_0.start):null), (NameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)NameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    int alt487=2;
                    alt487 = dfa487.predict(input);
                    switch (alt487) {
                        case 1 :
                            {
                            {
                            {
                            int alt486=2;
                            int LA486_0 = input.LA(1);

                            if ( ((LA486_0>=Intersection && LA486_0<=Implements)||(LA486_0>=Promisify && LA486_0<=Abstract)||LA486_0==External||(LA486_0>=Private && LA486_0<=Project)||LA486_0==Public||LA486_0==Static||LA486_0==Target||(LA486_0>=Await && LA486_0<=Await_1)||LA486_0==Union||(LA486_0>=Yield && LA486_0<=This)||LA486_0==From||LA486_0==Type||(LA486_0>=Get && LA486_0<=Let)||LA486_0==Set||LA486_0==As||LA486_0==Of||LA486_0==RULE_IDENTIFIER) ) {
                                alt486=1;
                            }
                            else if ( (LA486_0==RULE_STRING) ) {
                                alt486=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 486, 0, input);

                                throw nvae;
                            }
                            switch (alt486) {
                                case 1 :
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_111);
                                    NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0=ruleSymbolLiteralComputedName();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0!=null?((Token)NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0.start):null), (NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0!=null?((Token)NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_3_1_0_0_0_0()); 
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_111);
                                    NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0=ruleStringLiteralAsName();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0!=null?((Token)NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0.start):null), (NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0!=null?((Token)NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_3_1_0_0_0_1()); 
                                    }

                                    }


                                    }


                                    }
                                    break;

                            }

                            RightSquareBracketKeyword_3_1_0_0_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightSquareBracketKeyword_3_1_0_0_1, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_1_0_0_1()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_111);
                            ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0!=null?((Token)ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0.start):null), (ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0!=null?((Token)ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getComputeNameFromAssignment_3_1_1_0()); 
                            }

                            }


                            }

                            RightSquareBracketKeyword_3_1_1_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightSquareBracketKeyword_3_1_1_1, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralOrComputedPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return norm1_LiteralOrComputedPropertyName() throws RecognitionException {
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return retval = new InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return();
        retval.start = input.LT(1);

        Token NameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_1_0_0_1=null;
        Token RightSquareBracketKeyword_3_1_1_1=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return NameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_SymbolLiteralComputedName_return NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0 = null;

        InternalN4JSParser.ruleStringLiteralAsName_return NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0 = null;



            
        try {
            {
            int alt491=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Await:
            case Async:
            case Await_1:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt491=1;
                }
                break;
            case RULE_STRING:
                {
                alt491=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt491=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt491=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 491, 0, input);

                throw nvae;
            }

            switch (alt491) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    NameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)NameNumericLiteralAsStringParserRuleCall_2_0.start):null), (NameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)NameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralOrComputedPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    int alt490=2;
                    alt490 = dfa490.predict(input);
                    switch (alt490) {
                        case 1 :
                            {
                            {
                            {
                            int alt489=2;
                            int LA489_0 = input.LA(1);

                            if ( ((LA489_0>=Intersection && LA489_0<=Implements)||(LA489_0>=Promisify && LA489_0<=Abstract)||LA489_0==External||(LA489_0>=Private && LA489_0<=Project)||LA489_0==Public||LA489_0==Static||LA489_0==Target||(LA489_0>=Await && LA489_0<=Await_1)||LA489_0==Union||LA489_0==This||LA489_0==From||LA489_0==Type||(LA489_0>=Get && LA489_0<=Let)||LA489_0==Set||LA489_0==As||LA489_0==Of||LA489_0==RULE_IDENTIFIER) ) {
                                alt489=1;
                            }
                            else if ( (LA489_0==RULE_STRING) ) {
                                alt489=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 489, 0, input);

                                throw nvae;
                            }
                            switch (alt489) {
                                case 1 :
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_111);
                                    NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0=norm1_SymbolLiteralComputedName();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0!=null?((Token)NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0.start):null), (NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0!=null?((Token)NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_3_1_0_0_0_0()); 
                                    }

                                    }


                                    }


                                    }
                                    break;
                                case 2 :
                                    {
                                    {
                                    {
                                    pushFollow(FOLLOW_111);
                                    NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0=ruleStringLiteralAsName();

                                    state._fsp--;
                                    if (state.failed) return retval;
                                    if ( state.backtracking==0 ) {
                                       announce((NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0!=null?((Token)NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0.start):null), (NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0!=null?((Token)NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getNameAssignment_3_1_0_0_0_1()); 
                                    }

                                    }


                                    }


                                    }
                                    break;

                            }

                            RightSquareBracketKeyword_3_1_0_0_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightSquareBracketKeyword_3_1_0_0_1, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_1_0_0_1()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            {
                            pushFollow(FOLLOW_111);
                            ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0!=null?((Token)ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0.start):null), (ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0!=null?((Token)ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0.stop):null), grammarAccess.getLiteralOrComputedPropertyNameAccess().getComputeNameFromAssignment_3_1_1_0()); 
                            }

                            }


                            }

                            RightSquareBracketKeyword_3_1_1_1=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(RightSquareBracketKeyword_3_1_1_1, grammarAccess.getLiteralOrComputedPropertyNameAccess().getRightSquareBracketKeyword_3_1_1_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleLiteralPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralPropertyName_return ruleLiteralPropertyName() throws RecognitionException {
        InternalN4JSParser.ruleLiteralPropertyName_return retval = new InternalN4JSParser.ruleLiteralPropertyName_return();
        retval.start = input.LT(1);

        Token NameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return NameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSymbolLiteralComputedName_return NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0 = null;

        InternalN4JSParser.ruleStringLiteralAsName_return NameStringLiteralAsNameParserRuleCall_3_1_1_0 = null;



            
        try {
            {
            int alt493=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Await:
            case Async:
            case Await_1:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt493=1;
                }
                break;
            case RULE_STRING:
                {
                alt493=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt493=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt493=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 493, 0, input);

                throw nvae;
            }

            switch (alt493) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    NameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)NameNumericLiteralAsStringParserRuleCall_2_0.start):null), (NameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)NameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    int alt492=2;
                    int LA492_0 = input.LA(1);

                    if ( ((LA492_0>=Intersection && LA492_0<=Implements)||(LA492_0>=Promisify && LA492_0<=Abstract)||LA492_0==External||(LA492_0>=Private && LA492_0<=Project)||LA492_0==Public||LA492_0==Static||LA492_0==Target||(LA492_0>=Await && LA492_0<=Await_1)||LA492_0==Union||(LA492_0>=Yield && LA492_0<=This)||LA492_0==From||LA492_0==Type||(LA492_0>=Get && LA492_0<=Let)||LA492_0==Set||LA492_0==As||LA492_0==Of||LA492_0==RULE_IDENTIFIER) ) {
                        alt492=1;
                    }
                    else if ( (LA492_0==RULE_STRING) ) {
                        alt492=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 492, 0, input);

                        throw nvae;
                    }
                    switch (alt492) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_111);
                            NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0=ruleSymbolLiteralComputedName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0!=null?((Token)NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0.start):null), (NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0!=null?((Token)NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0.stop):null), grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_111);
                            NameStringLiteralAsNameParserRuleCall_3_1_1_0=ruleStringLiteralAsName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameStringLiteralAsNameParserRuleCall_3_1_1_0!=null?((Token)NameStringLiteralAsNameParserRuleCall_3_1_1_0.start):null), (NameStringLiteralAsNameParserRuleCall_3_1_1_0!=null?((Token)NameStringLiteralAsNameParserRuleCall_3_1_1_0.stop):null), grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LiteralPropertyName_return norm1_LiteralPropertyName() throws RecognitionException {
        InternalN4JSParser.norm1_LiteralPropertyName_return retval = new InternalN4JSParser.norm1_LiteralPropertyName_return();
        retval.start = input.LT(1);

        Token NameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return NameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return NameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_SymbolLiteralComputedName_return NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0 = null;

        InternalN4JSParser.ruleStringLiteralAsName_return NameStringLiteralAsNameParserRuleCall_3_1_1_0 = null;



            
        try {
            {
            int alt495=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Await:
            case Async:
            case Await_1:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt495=1;
                }
                break;
            case RULE_STRING:
                {
                alt495=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt495=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt495=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 495, 0, input);

                throw nvae;
            }

            switch (alt495) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.start):null), (NameIdentifierNameParserRuleCall_0_0!=null?((Token)NameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    NameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    NameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)NameNumericLiteralAsStringParserRuleCall_2_0.start):null), (NameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)NameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    int alt494=2;
                    int LA494_0 = input.LA(1);

                    if ( ((LA494_0>=Intersection && LA494_0<=Implements)||(LA494_0>=Promisify && LA494_0<=Abstract)||LA494_0==External||(LA494_0>=Private && LA494_0<=Project)||LA494_0==Public||LA494_0==Static||LA494_0==Target||(LA494_0>=Await && LA494_0<=Await_1)||LA494_0==Union||LA494_0==This||LA494_0==From||LA494_0==Type||(LA494_0>=Get && LA494_0<=Let)||LA494_0==Set||LA494_0==As||LA494_0==Of||LA494_0==RULE_IDENTIFIER) ) {
                        alt494=1;
                    }
                    else if ( (LA494_0==RULE_STRING) ) {
                        alt494=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 494, 0, input);

                        throw nvae;
                    }
                    switch (alt494) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_111);
                            NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0=norm1_SymbolLiteralComputedName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0!=null?((Token)NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0.start):null), (NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0!=null?((Token)NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0.stop):null), grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_111);
                            NameStringLiteralAsNameParserRuleCall_3_1_1_0=ruleStringLiteralAsName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((NameStringLiteralAsNameParserRuleCall_3_1_1_0!=null?((Token)NameStringLiteralAsNameParserRuleCall_3_1_1_0.start):null), (NameStringLiteralAsNameParserRuleCall_3_1_1_0!=null?((Token)NameStringLiteralAsNameParserRuleCall_3_1_1_0.stop):null), grammarAccess.getLiteralPropertyNameAccess().getNameAssignment_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleStringLiteralAsName() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleStringLiteralAsName();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleStringLiteralAsName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleStringLiteralAsName_return ruleStringLiteralAsName() throws RecognitionException {
        InternalN4JSParser.ruleStringLiteralAsName_return retval = new InternalN4JSParser.ruleStringLiteralAsName_return();
        retval.start = input.LT(1);


            
        try {
            {
            match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleFieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleFieldDeclarationImpl_return ruleFieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.ruleFieldDeclarationImpl_return retval = new InternalN4JSParser.ruleFieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_3_0=null;
        Token SemicolonKeyword_4=null;
        InternalN4JSParser.ruleLiteralPropertyName_return LiteralPropertyNameParserRuleCall_1 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.norm1_Expression_return ExpressionExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            loop496:
            do {
                int alt496=2;
                alt496 = dfa496.predict(input);
                switch (alt496) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop496;
                }
            } while (true);

            pushFollow(FOLLOW_156);
            LiteralPropertyNameParserRuleCall_1=ruleLiteralPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralPropertyNameParserRuleCall_1!=null?((Token)LiteralPropertyNameParserRuleCall_1.start):null), (LiteralPropertyNameParserRuleCall_1!=null?((Token)LiteralPropertyNameParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getLiteralPropertyNameParserRuleCall_1()); 
            }
            int alt497=2;
            int LA497_0 = input.LA(1);

            if ( (LA497_0==Colon) ) {
                alt497=1;
            }
            switch (alt497) {
                case 1 :
                    {
                    pushFollow(FOLLOW_157);
                    ColonSepTypeRefParserRuleCall_2=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_2!=null?((Token)ColonSepTypeRefParserRuleCall_2.start):null), (ColonSepTypeRefParserRuleCall_2!=null?((Token)ColonSepTypeRefParserRuleCall_2.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;

            }
            int alt498=2;
            int LA498_0 = input.LA(1);

            if ( (LA498_0==EqualsSign) ) {
                alt498=1;
            }
            switch (alt498) {
                case 1 :
                    {
                    EqualsSignKeyword_3_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_3_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_84);
                    ExpressionExpressionParserRuleCall_3_1_0=norm1_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            SemicolonKeyword_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SemicolonKeyword_4, grammarAccess.getFieldDeclarationImplAccess().getSemicolonKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_FieldDeclarationImpl_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_FieldDeclarationImpl_return norm1_FieldDeclarationImpl() throws RecognitionException {
        InternalN4JSParser.norm1_FieldDeclarationImpl_return retval = new InternalN4JSParser.norm1_FieldDeclarationImpl_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_3_0=null;
        Token SemicolonKeyword_4=null;
        InternalN4JSParser.norm1_LiteralPropertyName_return LiteralPropertyNameParserRuleCall_1 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.norm3_Expression_return ExpressionExpressionParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            loop499:
            do {
                int alt499=2;
                alt499 = dfa499.predict(input);
                switch (alt499) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_155);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop499;
                }
            } while (true);

            pushFollow(FOLLOW_156);
            LiteralPropertyNameParserRuleCall_1=norm1_LiteralPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralPropertyNameParserRuleCall_1!=null?((Token)LiteralPropertyNameParserRuleCall_1.start):null), (LiteralPropertyNameParserRuleCall_1!=null?((Token)LiteralPropertyNameParserRuleCall_1.stop):null), grammarAccess.getFieldDeclarationImplAccess().getLiteralPropertyNameParserRuleCall_1()); 
            }
            int alt500=2;
            int LA500_0 = input.LA(1);

            if ( (LA500_0==Colon) ) {
                alt500=1;
            }
            switch (alt500) {
                case 1 :
                    {
                    pushFollow(FOLLOW_157);
                    ColonSepTypeRefParserRuleCall_2=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_2!=null?((Token)ColonSepTypeRefParserRuleCall_2.start):null), (ColonSepTypeRefParserRuleCall_2!=null?((Token)ColonSepTypeRefParserRuleCall_2.stop):null), grammarAccess.getFieldDeclarationImplAccess().getColonSepTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;

            }
            int alt501=2;
            int LA501_0 = input.LA(1);

            if ( (LA501_0==EqualsSign) ) {
                alt501=1;
            }
            switch (alt501) {
                case 1 :
                    {
                    EqualsSignKeyword_3_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(EqualsSignKeyword_3_0, grammarAccess.getFieldDeclarationImplAccess().getEqualsSignKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_84);
                    ExpressionExpressionParserRuleCall_3_1_0=norm3_Expression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ExpressionExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0.start):null), (ExpressionExpressionParserRuleCall_3_1_0!=null?((Token)ExpressionExpressionParserRuleCall_3_1_0.stop):null), grammarAccess.getFieldDeclarationImplAccess().getExpressionAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }

            SemicolonKeyword_4=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SemicolonKeyword_4, grammarAccess.getFieldDeclarationImplAccess().getSemicolonKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4FieldDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4FieldDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4FieldDeclaration_return ruleN4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4FieldDeclaration_return retval = new InternalN4JSParser.ruleN4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleFieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=ruleFieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4FieldDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4FieldDeclaration_return norm1_N4FieldDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4FieldDeclaration_return retval = new InternalN4JSParser.norm1_N4FieldDeclaration_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_FieldDeclarationImpl_return FieldDeclarationImplParserRuleCall_1 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_2);
            FieldDeclarationImplParserRuleCall_1=norm1_FieldDeclarationImpl();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.start):null), (FieldDeclarationImplParserRuleCall_1!=null?((Token)FieldDeclarationImplParserRuleCall_1.stop):null), grammarAccess.getN4FieldDeclarationAccess().getFieldDeclarationImplParserRuleCall_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4MethodDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4MethodDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4MethodDeclaration_return ruleN4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4MethodDeclaration_return retval = new InternalN4JSParser.ruleN4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0 = null;

        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop502:
            do {
                int alt502=2;
                alt502 = dfa502.predict(input);
                switch (alt502) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_99);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop502;
                }
            } while (true);
            int alt503=2;
            int LA503_0 = input.LA(1);

            if ( (LA503_0==LessThanSign) ) {
                alt503=1;
            }
            switch (alt503) {
                case 1 :
                    {
                    pushFollow(FOLLOW_101);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt504=2;
            int LA504_0 = input.LA(1);

            if ( (LA504_0==Asterisk) ) {
                alt504=1;
            }
            else if ( ((LA504_0>=Intersection && LA504_0<=With)||(LA504_0>=For && LA504_0<=Var)||(LA504_0>=As && LA504_0<=Of)||LA504_0==LeftSquareBracket||LA504_0==RULE_DOUBLE||LA504_0==RULE_HEX_INT||LA504_0==RULE_OCTAL_INT||LA504_0==RULE_SCIENTIFIC_INT||LA504_0==RULE_IDENTIFIER||LA504_0==RULE_STRING||LA504_0==RULE_INT) ) {
                alt504=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 504, 0, input);

                throw nvae;
            }
            switch (alt504) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_41);
                    LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1.stop):null), grammarAccess.getN4MethodDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_102);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_100);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0()); 
                    }
                    pushFollow(FOLLOW_153);
                    LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1=ruleLiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getN4MethodDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_102);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt505=2;
            int LA505_0 = input.LA(1);

            if ( (LA505_0==Semicolon) ) {
                alt505=1;
            }
            switch (alt505) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4MethodDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4MethodDeclaration_return norm1_N4MethodDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4MethodDeclaration_return retval = new InternalN4JSParser.norm1_N4MethodDeclaration_return();
        retval.start = input.LT(1);

        Token GeneratorAsteriskKeyword_0_0_3_0_0_0=null;
        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleTypeVariables_return TypeVariablesParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1 = null;

        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2 = null;

        InternalN4JSParser.ruleAsyncNoTrailingLineBreak_return AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0 = null;

        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1 = null;

        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2 = null;



            
        try {
            {
            {
            {
            {
            loop506:
            do {
                int alt506=2;
                alt506 = dfa506.predict(input);
                switch (alt506) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_99);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop506;
                }
            } while (true);
            int alt507=2;
            int LA507_0 = input.LA(1);

            if ( (LA507_0==LessThanSign) ) {
                alt507=1;
            }
            switch (alt507) {
                case 1 :
                    {
                    pushFollow(FOLLOW_101);
                    TypeVariablesParserRuleCall_0_0_2=ruleTypeVariables();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.start):null), (TypeVariablesParserRuleCall_0_0_2!=null?((Token)TypeVariablesParserRuleCall_0_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getTypeVariablesParserRuleCall_0_0_2()); 
                    }

                    }
                    break;

            }
            int alt508=2;
            int LA508_0 = input.LA(1);

            if ( (LA508_0==Asterisk) ) {
                alt508=1;
            }
            else if ( ((LA508_0>=Intersection && LA508_0<=With)||(LA508_0>=For && LA508_0<=Var)||(LA508_0>=As && LA508_0<=Of)||LA508_0==LeftSquareBracket||LA508_0==RULE_DOUBLE||LA508_0==RULE_HEX_INT||LA508_0==RULE_OCTAL_INT||LA508_0==RULE_SCIENTIFIC_INT||LA508_0==RULE_IDENTIFIER||LA508_0==RULE_STRING||LA508_0==RULE_INT) ) {
                alt508=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 508, 0, input);

                throw nvae;
            }
            switch (alt508) {
                case 1 :
                    {
                    {
                    {
                    {
                    GeneratorAsteriskKeyword_0_0_3_0_0_0=(Token)match(input,Asterisk,FOLLOW_100); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GeneratorAsteriskKeyword_0_0_3_0_0_0, grammarAccess.getN4MethodDeclarationAccess().getGeneratorAsteriskKeyword_0_0_3_0_0_0()); 
                    }

                    }


                    }

                    pushFollow(FOLLOW_41);
                    LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1.stop):null), grammarAccess.getN4MethodDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3_0_1()); 
                    }
                    {
                    pushFollow(FOLLOW_102);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2=norm1_MethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_3_0_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_100);
                    AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0=ruleAsyncNoTrailingLineBreak();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0.start):null), (AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0!=null?((Token)AsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0.stop):null), grammarAccess.getN4MethodDeclarationAccess().getAsyncNoTrailingLineBreakParserRuleCall_0_0_3_1_0()); 
                    }
                    pushFollow(FOLLOW_153);
                    LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1=norm1_LiteralOrComputedPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1.stop):null), grammarAccess.getN4MethodDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3_1_1()); 
                    }
                    {
                    pushFollow(FOLLOW_102);
                    MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2=ruleMethodParamsReturnAndBody();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2.start):null), (MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2.stop):null), grammarAccess.getN4MethodDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0_0_3_1_2()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }
            int alt509=2;
            int LA509_0 = input.LA(1);

            if ( (LA509_0==Semicolon) ) {
                alt509=1;
            }
            switch (alt509) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4MethodDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4CallableConstructorDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4CallableConstructorDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4CallableConstructorDeclaration_return ruleN4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4CallableConstructorDeclaration_return retval = new InternalN4JSParser.ruleN4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_102);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt510=2;
            int LA510_0 = input.LA(1);

            if ( (LA510_0==Semicolon) ) {
                alt510=1;
            }
            switch (alt510) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4CallableConstructorDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return norm1_N4CallableConstructorDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return retval = new InternalN4JSParser.norm1_N4CallableConstructorDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_1=null;
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return MethodParamsReturnAndBodyParserRuleCall_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_102);
            MethodParamsReturnAndBodyParserRuleCall_0=ruleMethodParamsReturnAndBody();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.start):null), (MethodParamsReturnAndBodyParserRuleCall_0!=null?((Token)MethodParamsReturnAndBodyParserRuleCall_0.stop):null), grammarAccess.getN4CallableConstructorDeclarationAccess().getMethodParamsReturnAndBodyParserRuleCall_0()); 
            }
            int alt511=2;
            int LA511_0 = input.LA(1);

            if ( (LA511_0==Semicolon) ) {
                alt511=1;
            }
            switch (alt511) {
                case 1 :
                    {
                    SemicolonKeyword_1=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_1, grammarAccess.getN4CallableConstructorDeclarationAccess().getSemicolonKeyword_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsAndBody_return ruleMethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsAndBody_return retval = new InternalN4JSParser.ruleMethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_158);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt512=2;
            int LA512_0 = input.LA(1);

            if ( (LA512_0==LeftCurlyBracket) && (synpred289_InternalN4JSParser())) {
                alt512=1;
            }
            switch (alt512) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsAndBody_return norm1_MethodParamsAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsAndBody_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_158);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt513=2;
            int LA513_0 = input.LA(1);

            if ( (LA513_0==LeftCurlyBracket) && (synpred290_InternalN4JSParser())) {
                alt513=1;
            }
            switch (alt513) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getMethodParamsAndBodyAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleMethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleMethodParamsReturnAndBody_return ruleMethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.ruleMethodParamsReturnAndBody_return retval = new InternalN4JSParser.ruleMethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.ruleStrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_159);
            StrictFormalParametersParserRuleCall_0=ruleStrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt514=2;
            int LA514_0 = input.LA(1);

            if ( (LA514_0==Colon) ) {
                alt514=1;
            }
            switch (alt514) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_158);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt515=2;
            int LA515_0 = input.LA(1);

            if ( (LA515_0==LeftCurlyBracket) && (synpred291_InternalN4JSParser())) {
                alt515=1;
            }
            switch (alt515) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_MethodParamsReturnAndBody_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_MethodParamsReturnAndBody_return norm1_MethodParamsReturnAndBody() throws RecognitionException {
        InternalN4JSParser.norm1_MethodParamsReturnAndBody_return retval = new InternalN4JSParser.norm1_MethodParamsReturnAndBody_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.norm1_StrictFormalParameters_return StrictFormalParametersParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_1_1_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_2_0 = null;



            
        try {
            {
            {
            pushFollow(FOLLOW_159);
            StrictFormalParametersParserRuleCall_0=norm1_StrictFormalParameters();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.start):null), (StrictFormalParametersParserRuleCall_0!=null?((Token)StrictFormalParametersParserRuleCall_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getStrictFormalParametersParserRuleCall_0()); 
            }
            int alt516=2;
            int LA516_0 = input.LA(1);

            if ( (LA516_0==Colon) ) {
                alt516=1;
            }
            switch (alt516) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getMethodParamsReturnAndBodyAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_158);
                    ReturnTypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getReturnTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }
            int alt517=2;
            int LA517_0 = input.LA(1);

            if ( (LA517_0==LeftCurlyBracket) && (synpred292_InternalN4JSParser())) {
                alt517=1;
            }
            switch (alt517) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    BodyBlockParserRuleCall_2_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.start):null), (BodyBlockParserRuleCall_2_0!=null?((Token)BodyBlockParserRuleCall_2_0.stop):null), grammarAccess.getMethodParamsReturnAndBodyAccess().getBodyAssignment_2()); 
                    }

                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4GetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4GetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4GetterDeclaration_return ruleN4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4GetterDeclaration_return retval = new InternalN4JSParser.ruleN4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSParser.ruleGetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop518:
            do {
                int alt518=2;
                int LA518_0 = input.LA(1);

                if ( ((LA518_0>=Protected && LA518_0<=Abstract)||LA518_0==External||(LA518_0>=Private && LA518_0<=Project)||LA518_0==Public||LA518_0==Static||LA518_0==Const) ) {
                    alt518=1;
                }


                switch (alt518) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_150);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop518;
                }
            } while (true);

            pushFollow(FOLLOW_151);
            GetterHeaderParserRuleCall_0_0_2=ruleGetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt519=2;
            int LA519_0 = input.LA(1);

            if ( (LA519_0==LeftCurlyBracket) && (synpred294_InternalN4JSParser())) {
                alt519=1;
            }
            switch (alt519) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    BodyBlockParserRuleCall_1_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt520=2;
            int LA520_0 = input.LA(1);

            if ( (LA520_0==Semicolon) ) {
                alt520=1;
            }
            switch (alt520) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4GetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4GetterDeclaration_return norm1_N4GetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4GetterDeclaration_return retval = new InternalN4JSParser.norm1_N4GetterDeclaration_return();
        retval.start = input.LT(1);

        Token SemicolonKeyword_2=null;
        InternalN4JSParser.norm1_GetterHeader_return GetterHeaderParserRuleCall_0_0_2 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_1_0 = null;



            
        try {
            {
            {
            {
            {
            loop521:
            do {
                int alt521=2;
                int LA521_0 = input.LA(1);

                if ( ((LA521_0>=Protected && LA521_0<=Abstract)||LA521_0==External||(LA521_0>=Private && LA521_0<=Project)||LA521_0==Public||LA521_0==Static||LA521_0==Const) ) {
                    alt521=1;
                }


                switch (alt521) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_150);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop521;
                }
            } while (true);

            pushFollow(FOLLOW_151);
            GetterHeaderParserRuleCall_0_0_2=norm1_GetterHeader();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.start):null), (GetterHeaderParserRuleCall_0_0_2!=null?((Token)GetterHeaderParserRuleCall_0_0_2.stop):null), grammarAccess.getN4GetterDeclarationAccess().getGetterHeaderParserRuleCall_0_0_2()); 
            }

            }


            }
            int alt522=2;
            int LA522_0 = input.LA(1);

            if ( (LA522_0==LeftCurlyBracket) && (synpred296_InternalN4JSParser())) {
                alt522=1;
            }
            switch (alt522) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    BodyBlockParserRuleCall_1_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.start):null), (BodyBlockParserRuleCall_1_0!=null?((Token)BodyBlockParserRuleCall_1_0.stop):null), grammarAccess.getN4GetterDeclarationAccess().getBodyAssignment_1()); 
                    }

                    }


                    }
                    break;

            }
            int alt523=2;
            int LA523_0 = input.LA(1);

            if ( (LA523_0==Semicolon) ) {
                alt523=1;
            }
            switch (alt523) {
                case 1 :
                    {
                    SemicolonKeyword_2=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_2, grammarAccess.getN4GetterDeclarationAccess().getSemicolonKeyword_2()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleGetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleGetterHeader_return ruleGetterHeader() throws RecognitionException {
        InternalN4JSParser.ruleGetterHeader_return retval = new InternalN4JSParser.ruleGetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_4 = null;



            
        try {
            {
            {
            GetKeyword_0=(Token)match(input,Get,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0()); 
            }
            {
            pushFollow(FOLLOW_46);
            LiteralOrComputedPropertyNameParserRuleCall_1=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralOrComputedPropertyNameParserRuleCall_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1.stop):null), grammarAccess.getGetterHeaderAccess().getLiteralOrComputedPropertyNameParserRuleCall_1()); 
            }

            }

            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_48); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_2()); 
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_3()); 
            }
            int alt524=2;
            int LA524_0 = input.LA(1);

            if ( (LA524_0==Colon) ) {
                alt524=1;
            }
            switch (alt524) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_4=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.start):null), (ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_GetterHeader_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_GetterHeader_return norm1_GetterHeader() throws RecognitionException {
        InternalN4JSParser.norm1_GetterHeader_return retval = new InternalN4JSParser.norm1_GetterHeader_return();
        retval.start = input.LT(1);

        Token GetKeyword_0=null;
        Token LeftParenthesisKeyword_2=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_1 = null;

        InternalN4JSParser.ruleColonSepTypeRef_return ColonSepTypeRefParserRuleCall_4 = null;



            
        try {
            {
            {
            GetKeyword_0=(Token)match(input,Get,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_0, grammarAccess.getGetterHeaderAccess().getGetKeyword_0()); 
            }
            {
            pushFollow(FOLLOW_46);
            LiteralOrComputedPropertyNameParserRuleCall_1=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralOrComputedPropertyNameParserRuleCall_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1.start):null), (LiteralOrComputedPropertyNameParserRuleCall_1!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_1.stop):null), grammarAccess.getGetterHeaderAccess().getLiteralOrComputedPropertyNameParserRuleCall_1()); 
            }

            }

            LeftParenthesisKeyword_2=(Token)match(input,LeftParenthesis,FOLLOW_48); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_2, grammarAccess.getGetterHeaderAccess().getLeftParenthesisKeyword_2()); 
            }
            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getGetterHeaderAccess().getRightParenthesisKeyword_3()); 
            }
            int alt525=2;
            int LA525_0 = input.LA(1);

            if ( (LA525_0==Colon) ) {
                alt525=1;
            }
            switch (alt525) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ColonSepTypeRefParserRuleCall_4=ruleColonSepTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.start):null), (ColonSepTypeRefParserRuleCall_4!=null?((Token)ColonSepTypeRefParserRuleCall_4.stop):null), grammarAccess.getGetterHeaderAccess().getColonSepTypeRefParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleN4SetterDeclaration() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleN4SetterDeclaration();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleN4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleN4SetterDeclaration_return ruleN4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.ruleN4SetterDeclaration_return retval = new InternalN4JSParser.ruleN4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSParser.ruleLiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3 = null;

        InternalN4JSParser.ruleFormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBlock_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop526:
            do {
                int alt526=2;
                int LA526_0 = input.LA(1);

                if ( ((LA526_0>=Protected && LA526_0<=Abstract)||LA526_0==External||(LA526_0>=Private && LA526_0<=Project)||LA526_0==Public||LA526_0==Static||LA526_0==Const) ) {
                    alt526=1;
                }


                switch (alt526) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_152);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop526;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_46);
            LiteralOrComputedPropertyNameParserRuleCall_0_0_3=ruleLiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3.stop):null), grammarAccess.getN4SetterDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3()); 
            }

            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            FparFormalParameterParserRuleCall_2_0=ruleFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt527=2;
            int LA527_0 = input.LA(1);

            if ( (LA527_0==LeftCurlyBracket) && (synpred301_InternalN4JSParser())) {
                alt527=1;
            }
            switch (alt527) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    BodyBlockParserRuleCall_4_0=ruleBlock();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt528=2;
            int LA528_0 = input.LA(1);

            if ( (LA528_0==Semicolon) ) {
                alt528=1;
            }
            switch (alt528) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_N4SetterDeclaration_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_N4SetterDeclaration_return norm1_N4SetterDeclaration() throws RecognitionException {
        InternalN4JSParser.norm1_N4SetterDeclaration_return retval = new InternalN4JSParser.norm1_N4SetterDeclaration_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_2=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        Token SemicolonKeyword_5=null;
        InternalN4JSParser.norm1_LiteralOrComputedPropertyName_return LiteralOrComputedPropertyNameParserRuleCall_0_0_3 = null;

        InternalN4JSParser.norm1_FormalParameter_return FparFormalParameterParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_Block_return BodyBlockParserRuleCall_4_0 = null;



            
        try {
            {
            {
            {
            {
            loop529:
            do {
                int alt529=2;
                int LA529_0 = input.LA(1);

                if ( ((LA529_0>=Protected && LA529_0<=Abstract)||LA529_0==External||(LA529_0>=Private && LA529_0<=Project)||LA529_0==Public||LA529_0==Static||LA529_0==Const) ) {
                    alt529=1;
                }


                switch (alt529) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_152);
            	    ruleN4Modifier();

            	    state._fsp--;
            	    if (state.failed) return retval;

            	    }


            	    }
            	    break;

            	default :
            	    break loop529;
                }
            } while (true);

            SetKeyword_0_0_2=(Token)match(input,Set,FOLLOW_100); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_2, grammarAccess.getN4SetterDeclarationAccess().getSetKeyword_0_0_2()); 
            }
            {
            pushFollow(FOLLOW_46);
            LiteralOrComputedPropertyNameParserRuleCall_0_0_3=norm1_LiteralOrComputedPropertyName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((LiteralOrComputedPropertyNameParserRuleCall_0_0_3!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3.start):null), (LiteralOrComputedPropertyNameParserRuleCall_0_0_3!=null?((Token)LiteralOrComputedPropertyNameParserRuleCall_0_0_3.stop):null), grammarAccess.getN4SetterDeclarationAccess().getLiteralOrComputedPropertyNameParserRuleCall_0_0_3()); 
            }

            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_57); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getN4SetterDeclarationAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            FparFormalParameterParserRuleCall_2_0=norm1_FormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.start):null), (FparFormalParameterParserRuleCall_2_0!=null?((Token)FparFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_151); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getN4SetterDeclarationAccess().getRightParenthesisKeyword_3()); 
            }
            int alt530=2;
            int LA530_0 = input.LA(1);

            if ( (LA530_0==LeftCurlyBracket) && (synpred304_InternalN4JSParser())) {
                alt530=1;
            }
            switch (alt530) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_102);
                    BodyBlockParserRuleCall_4_0=norm1_Block();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.start):null), (BodyBlockParserRuleCall_4_0!=null?((Token)BodyBlockParserRuleCall_4_0.stop):null), grammarAccess.getN4SetterDeclarationAccess().getBodyAssignment_4()); 
                    }

                    }


                    }
                    break;

            }
            int alt531=2;
            int LA531_0 = input.LA(1);

            if ( (LA531_0==Semicolon) ) {
                alt531=1;
            }
            switch (alt531) {
                case 1 :
                    {
                    SemicolonKeyword_5=(Token)match(input,Semicolon,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SemicolonKeyword_5, grammarAccess.getN4SetterDeclarationAccess().getSemicolonKeyword_5()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingPattern_return ruleBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleBindingPattern_return retval = new InternalN4JSParser.ruleBindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSParser.ruleArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt532=2;
            int LA532_0 = input.LA(1);

            if ( (LA532_0==LeftCurlyBracket) ) {
                alt532=1;
            }
            else if ( (LA532_0==LeftSquareBracket) ) {
                alt532=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 532, 0, input);

                throw nvae;
            }
            switch (alt532) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=ruleObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=ruleArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingPattern_return norm1_BindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_BindingPattern_return retval = new InternalN4JSParser.norm1_BindingPattern_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_ObjectBindingPattern_return ObjectBindingPatternParserRuleCall_0 = null;

        InternalN4JSParser.norm1_ArrayBindingPattern_return ArrayBindingPatternParserRuleCall_1 = null;



            
        try {
            {
            int alt533=2;
            int LA533_0 = input.LA(1);

            if ( (LA533_0==LeftCurlyBracket) ) {
                alt533=1;
            }
            else if ( (LA533_0==LeftSquareBracket) ) {
                alt533=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 533, 0, input);

                throw nvae;
            }
            switch (alt533) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ObjectBindingPatternParserRuleCall_0=norm1_ObjectBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.start):null), (ObjectBindingPatternParserRuleCall_0!=null?((Token)ObjectBindingPatternParserRuleCall_0.stop):null), grammarAccess.getBindingPatternAccess().getObjectBindingPatternParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ArrayBindingPatternParserRuleCall_1=norm1_ArrayBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.start):null), (ArrayBindingPatternParserRuleCall_1!=null?((Token)ArrayBindingPatternParserRuleCall_1.stop):null), grammarAccess.getBindingPatternAccess().getArrayBindingPatternParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleObjectBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleObjectBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleObjectBindingPattern_return ruleObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleObjectBindingPattern_return retval = new InternalN4JSParser.ruleObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSParser.ruleBindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt535=2;
            int LA535_0 = input.LA(1);

            if ( ((LA535_0>=Intersection && LA535_0<=With)||(LA535_0>=For && LA535_0<=Var)||(LA535_0>=As && LA535_0<=Of)||(LA535_0>=CommercialAt && LA535_0<=LeftSquareBracket)||LA535_0==RULE_DOUBLE||LA535_0==RULE_HEX_INT||LA535_0==RULE_OCTAL_INT||LA535_0==RULE_SCIENTIFIC_INT||LA535_0==RULE_IDENTIFIER||LA535_0==RULE_STRING||LA535_0==RULE_INT) ) {
                alt535=1;
            }
            switch (alt535) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=ruleBindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop534:
                    do {
                        int alt534=2;
                        int LA534_0 = input.LA(1);

                        if ( (LA534_0==Comma) ) {
                            alt534=1;
                        }


                        switch (alt534) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_161); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=ruleBindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop534;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ObjectBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ObjectBindingPattern_return norm1_ObjectBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ObjectBindingPattern_return retval = new InternalN4JSParser.norm1_ObjectBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_1=null;
        Token CommaKeyword_2_1_0=null;
        Token RightCurlyBracketKeyword_3=null;
        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_0_0 = null;

        InternalN4JSParser.norm1_BindingProperty_return PropertiesBindingPropertyParserRuleCall_2_1_1_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_1=(Token)match(input,LeftCurlyBracket,FOLLOW_160); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_1, grammarAccess.getObjectBindingPatternAccess().getLeftCurlyBracketKeyword_1()); 
            }
            int alt537=2;
            int LA537_0 = input.LA(1);

            if ( ((LA537_0>=Intersection && LA537_0<=With)||(LA537_0>=For && LA537_0<=Var)||(LA537_0>=As && LA537_0<=Of)||(LA537_0>=CommercialAt && LA537_0<=LeftSquareBracket)||LA537_0==RULE_DOUBLE||LA537_0==RULE_HEX_INT||LA537_0==RULE_OCTAL_INT||LA537_0==RULE_SCIENTIFIC_INT||LA537_0==RULE_IDENTIFIER||LA537_0==RULE_STRING||LA537_0==RULE_INT) ) {
                alt537=1;
            }
            switch (alt537) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_15);
                    PropertiesBindingPropertyParserRuleCall_2_0_0=norm1_BindingProperty();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_0_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_0_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_0()); 
                    }

                    }


                    }
                    loop536:
                    do {
                        int alt536=2;
                        int LA536_0 = input.LA(1);

                        if ( (LA536_0==Comma) ) {
                            alt536=1;
                        }


                        switch (alt536) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_1_0=(Token)match(input,Comma,FOLLOW_161); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_1_0, grammarAccess.getObjectBindingPatternAccess().getCommaKeyword_2_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_15);
                    	    PropertiesBindingPropertyParserRuleCall_2_1_1_0=norm1_BindingProperty();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.start):null), (PropertiesBindingPropertyParserRuleCall_2_1_1_0!=null?((Token)PropertiesBindingPropertyParserRuleCall_2_1_1_0.stop):null), grammarAccess.getObjectBindingPatternAccess().getPropertiesAssignment_2_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop536;
                        }
                    } while (true);


                    }
                    break;

            }

            RightCurlyBracketKeyword_3=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_3, grammarAccess.getObjectBindingPatternAccess().getRightCurlyBracketKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleArrayBindingPattern() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleArrayBindingPattern();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleArrayBindingPattern_return ruleArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.ruleArrayBindingPattern_return retval = new InternalN4JSParser.ruleArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.ruleBindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop538:
            do {
                int alt538=2;
                int LA538_0 = input.LA(1);

                if ( (LA538_0==Comma) ) {
                    alt538=1;
                }


                switch (alt538) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_162);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop538;
                }
            } while (true);
            int alt543=2;
            int LA543_0 = input.LA(1);

            if ( ((LA543_0>=Intersection && LA543_0<=Implements)||(LA543_0>=Promisify && LA543_0<=Abstract)||LA543_0==External||(LA543_0>=Private && LA543_0<=Project)||LA543_0==Public||LA543_0==Static||LA543_0==Target||(LA543_0>=Await && LA543_0<=Await_1)||LA543_0==Union||(LA543_0>=Yield && LA543_0<=This)||LA543_0==From||LA543_0==Type||LA543_0==FullStopFullStopFullStop||(LA543_0>=Get && LA543_0<=Let)||LA543_0==Set||LA543_0==As||LA543_0==Of||(LA543_0>=CommercialAt && LA543_0<=LeftSquareBracket)||LA543_0==LeftCurlyBracket||LA543_0==RULE_IDENTIFIER) ) {
                alt543=1;
            }
            switch (alt543) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    ElementsBindingRestElementParserRuleCall_3_0_0=ruleBindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop540:
                    do {
                        int alt540=2;
                        alt540 = dfa540.predict(input);
                        switch (alt540) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_163); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop539:
                    	    do {
                    	        int alt539=2;
                    	        int LA539_0 = input.LA(1);

                    	        if ( (LA539_0==Comma) ) {
                    	            alt539=1;
                    	        }


                    	        switch (alt539) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_163);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop539;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_95);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=ruleBindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop540;
                        }
                    } while (true);
                    int alt542=2;
                    int LA542_0 = input.LA(1);

                    if ( (LA542_0==Comma) ) {
                        alt542=1;
                    }
                    switch (alt542) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_95); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop541:
                            do {
                                int alt541=2;
                                int LA541_0 = input.LA(1);

                                if ( (LA541_0==Comma) ) {
                                    alt541=1;
                                }


                                switch (alt541) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_95);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop541;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_ArrayBindingPattern_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_ArrayBindingPattern_return norm1_ArrayBindingPattern() throws RecognitionException {
        InternalN4JSParser.norm1_ArrayBindingPattern_return retval = new InternalN4JSParser.norm1_ArrayBindingPattern_return();
        retval.start = input.LT(1);

        Token LeftSquareBracketKeyword_1=null;
        Token CommaKeyword_3_1_0=null;
        Token CommaKeyword_3_2_0=null;
        Token RightSquareBracketKeyword_4=null;
        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_0_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_1_1_0 = null;

        InternalN4JSParser.norm1_BindingRestElement_return ElementsBindingRestElementParserRuleCall_3_1_2_0 = null;

        InternalN4JSParser.ruleElision_return ElementsElisionParserRuleCall_3_2_1_0 = null;



            
        try {
            {
            {
            LeftSquareBracketKeyword_1=(Token)match(input,LeftSquareBracket,FOLLOW_162); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftSquareBracketKeyword_1, grammarAccess.getArrayBindingPatternAccess().getLeftSquareBracketKeyword_1()); 
            }
            loop544:
            do {
                int alt544=2;
                int LA544_0 = input.LA(1);

                if ( (LA544_0==Comma) ) {
                    alt544=1;
                }


                switch (alt544) {
            	case 1 :
            	    {
            	    {
            	    pushFollow(FOLLOW_162);
            	    ElementsElisionParserRuleCall_2_0=ruleElision();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.start):null), (ElementsElisionParserRuleCall_2_0!=null?((Token)ElementsElisionParserRuleCall_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_2()); 
            	    }

            	    }


            	    }
            	    break;

            	default :
            	    break loop544;
                }
            } while (true);
            int alt549=2;
            int LA549_0 = input.LA(1);

            if ( ((LA549_0>=Intersection && LA549_0<=Implements)||(LA549_0>=Promisify && LA549_0<=Abstract)||LA549_0==External||(LA549_0>=Private && LA549_0<=Project)||LA549_0==Public||LA549_0==Static||LA549_0==Target||(LA549_0>=Await && LA549_0<=Await_1)||LA549_0==Union||LA549_0==This||LA549_0==From||LA549_0==Type||LA549_0==FullStopFullStopFullStop||(LA549_0>=Get && LA549_0<=Let)||LA549_0==Set||LA549_0==As||LA549_0==Of||(LA549_0>=CommercialAt && LA549_0<=LeftSquareBracket)||LA549_0==LeftCurlyBracket||LA549_0==RULE_IDENTIFIER) ) {
                alt549=1;
            }
            switch (alt549) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_95);
                    ElementsBindingRestElementParserRuleCall_3_0_0=norm1_BindingRestElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.start):null), (ElementsBindingRestElementParserRuleCall_3_0_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_0_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_0()); 
                    }

                    }


                    }
                    loop546:
                    do {
                        int alt546=2;
                        alt546 = dfa546.predict(input);
                        switch (alt546) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_3_1_0=(Token)match(input,Comma,FOLLOW_163); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_3_1_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_1_0()); 
                    	    }
                    	    loop545:
                    	    do {
                    	        int alt545=2;
                    	        int LA545_0 = input.LA(1);

                    	        if ( (LA545_0==Comma) ) {
                    	            alt545=1;
                    	        }


                    	        switch (alt545) {
                    	    	case 1 :
                    	    	    {
                    	    	    {
                    	    	    pushFollow(FOLLOW_163);
                    	    	    ElementsElisionParserRuleCall_3_1_1_0=ruleElision();

                    	    	    state._fsp--;
                    	    	    if (state.failed) return retval;
                    	    	    if ( state.backtracking==0 ) {
                    	    	       announce((ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.start):null), (ElementsElisionParserRuleCall_3_1_1_0!=null?((Token)ElementsElisionParserRuleCall_3_1_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_1()); 
                    	    	    }

                    	    	    }


                    	    	    }
                    	    	    break;

                    	    	default :
                    	    	    break loop545;
                    	        }
                    	    } while (true);
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_95);
                    	    ElementsBindingRestElementParserRuleCall_3_1_2_0=norm1_BindingRestElement();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.start):null), (ElementsBindingRestElementParserRuleCall_3_1_2_0!=null?((Token)ElementsBindingRestElementParserRuleCall_3_1_2_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_1_2()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop546;
                        }
                    } while (true);
                    int alt548=2;
                    int LA548_0 = input.LA(1);

                    if ( (LA548_0==Comma) ) {
                        alt548=1;
                    }
                    switch (alt548) {
                        case 1 :
                            {
                            CommaKeyword_3_2_0=(Token)match(input,Comma,FOLLOW_95); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(CommaKeyword_3_2_0, grammarAccess.getArrayBindingPatternAccess().getCommaKeyword_3_2_0()); 
                            }
                            loop547:
                            do {
                                int alt547=2;
                                int LA547_0 = input.LA(1);

                                if ( (LA547_0==Comma) ) {
                                    alt547=1;
                                }


                                switch (alt547) {
                            	case 1 :
                            	    {
                            	    {
                            	    pushFollow(FOLLOW_95);
                            	    ElementsElisionParserRuleCall_3_2_1_0=ruleElision();

                            	    state._fsp--;
                            	    if (state.failed) return retval;
                            	    if ( state.backtracking==0 ) {
                            	       announce((ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.start):null), (ElementsElisionParserRuleCall_3_2_1_0!=null?((Token)ElementsElisionParserRuleCall_3_2_1_0.stop):null), grammarAccess.getArrayBindingPatternAccess().getElementsAssignment_3_2_1()); 
                            	    }

                            	    }


                            	    }
                            	    break;

                            	default :
                            	    break loop547;
                                }
                            } while (true);


                            }
                            break;

                    }


                    }
                    break;

            }

            RightSquareBracketKeyword_4=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightSquareBracketKeyword_4, grammarAccess.getArrayBindingPatternAccess().getRightSquareBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingProperty() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingProperty();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingProperty_return ruleBindingProperty() throws RecognitionException {
        InternalN4JSParser.ruleBindingProperty_return retval = new InternalN4JSParser.ruleBindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.ruleLiteralBindingPropertyName_return LiteralBindingPropertyNameParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.ruleBindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleSingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt550=2;
            alt550 = dfa550.predict(input);
            switch (alt550) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    LiteralBindingPropertyNameParserRuleCall_0_0_0_0=ruleLiteralBindingPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralBindingPropertyNameParserRuleCall_0_0_0_0!=null?((Token)LiteralBindingPropertyNameParserRuleCall_0_0_0_0.start):null), (LiteralBindingPropertyNameParserRuleCall_0_0_0_0!=null?((Token)LiteralBindingPropertyNameParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getLiteralBindingPropertyNameParserRuleCall_0_0_0_0()); 
                    }
                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_29); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=ruleBindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=ruleSingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingProperty_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingProperty_return norm1_BindingProperty() throws RecognitionException {
        InternalN4JSParser.norm1_BindingProperty_return retval = new InternalN4JSParser.norm1_BindingProperty_return();
        retval.start = input.LT(1);

        Token ColonKeyword_0_0_0_1=null;
        InternalN4JSParser.norm1_LiteralBindingPropertyName_return LiteralBindingPropertyNameParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm1_BindingElement_return ValueBindingElementParserRuleCall_0_1_0 = null;

        InternalN4JSParser.norm1_SingleNameBinding_return ValueSingleNameBindingParserRuleCall_1_0 = null;



            
        try {
            {
            int alt551=2;
            alt551 = dfa551.predict(input);
            switch (alt551) {
                case 1 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    LiteralBindingPropertyNameParserRuleCall_0_0_0_0=norm1_LiteralBindingPropertyName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((LiteralBindingPropertyNameParserRuleCall_0_0_0_0!=null?((Token)LiteralBindingPropertyNameParserRuleCall_0_0_0_0.start):null), (LiteralBindingPropertyNameParserRuleCall_0_0_0_0!=null?((Token)LiteralBindingPropertyNameParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingPropertyAccess().getLiteralBindingPropertyNameParserRuleCall_0_0_0_0()); 
                    }
                    ColonKeyword_0_0_0_1=(Token)match(input,Colon,FOLLOW_29); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_0_0_0_1, grammarAccess.getBindingPropertyAccess().getColonKeyword_0_0_0_1()); 
                    }

                    }


                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueBindingElementParserRuleCall_0_1_0=norm1_BindingElement();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.start):null), (ValueBindingElementParserRuleCall_0_1_0!=null?((Token)ValueBindingElementParserRuleCall_0_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ValueSingleNameBindingParserRuleCall_1_0=norm1_SingleNameBinding();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.start):null), (ValueSingleNameBindingParserRuleCall_1_0!=null?((Token)ValueSingleNameBindingParserRuleCall_1_0.stop):null), grammarAccess.getBindingPropertyAccess().getValueAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleLiteralBindingPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleLiteralBindingPropertyName_return ruleLiteralBindingPropertyName() throws RecognitionException {
        InternalN4JSParser.ruleLiteralBindingPropertyName_return retval = new InternalN4JSParser.ruleLiteralBindingPropertyName_return();
        retval.start = input.LT(1);

        Token DeclaredNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token DeclaredNameSTRINGTerminalRuleCall_3_1_1_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return DeclaredNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return DeclaredNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.ruleSymbolLiteralComputedName_return DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0 = null;



            
        try {
            {
            int alt553=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Await:
            case Async:
            case Await_1:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt553=1;
                }
                break;
            case RULE_STRING:
                {
                alt553=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt553=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt553=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 553, 0, input);

                throw nvae;
            }

            switch (alt553) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameIdentifierNameParserRuleCall_0_0!=null?((Token)DeclaredNameIdentifierNameParserRuleCall_0_0.start):null), (DeclaredNameIdentifierNameParserRuleCall_0_0!=null?((Token)DeclaredNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)DeclaredNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (DeclaredNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)DeclaredNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralBindingPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    int alt552=2;
                    int LA552_0 = input.LA(1);

                    if ( ((LA552_0>=Intersection && LA552_0<=Implements)||(LA552_0>=Promisify && LA552_0<=Abstract)||LA552_0==External||(LA552_0>=Private && LA552_0<=Project)||LA552_0==Public||LA552_0==Static||LA552_0==Target||(LA552_0>=Await && LA552_0<=Await_1)||LA552_0==Union||(LA552_0>=Yield && LA552_0<=This)||LA552_0==From||LA552_0==Type||(LA552_0>=Get && LA552_0<=Let)||LA552_0==Set||LA552_0==As||LA552_0==Of||LA552_0==RULE_IDENTIFIER) ) {
                        alt552=1;
                    }
                    else if ( (LA552_0==RULE_STRING) ) {
                        alt552=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 552, 0, input);

                        throw nvae;
                    }
                    switch (alt552) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_111);
                            DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0=ruleSymbolLiteralComputedName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0!=null?((Token)DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0.start):null), (DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0!=null?((Token)DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0.stop):null), grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            DeclaredNameSTRINGTerminalRuleCall_3_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_111); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(DeclaredNameSTRINGTerminalRuleCall_3_1_1_0, grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralBindingPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_LiteralBindingPropertyName_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_LiteralBindingPropertyName_return norm1_LiteralBindingPropertyName() throws RecognitionException {
        InternalN4JSParser.norm1_LiteralBindingPropertyName_return retval = new InternalN4JSParser.norm1_LiteralBindingPropertyName_return();
        retval.start = input.LT(1);

        Token DeclaredNameSTRINGTerminalRuleCall_1_0=null;
        Token LeftSquareBracketKeyword_3_0=null;
        Token DeclaredNameSTRINGTerminalRuleCall_3_1_1_0=null;
        Token RightSquareBracketKeyword_3_2=null;
        InternalN4JSParser.ruleIdentifierName_return DeclaredNameIdentifierNameParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleNumericLiteralAsString_return DeclaredNameNumericLiteralAsStringParserRuleCall_2_0 = null;

        InternalN4JSParser.norm1_SymbolLiteralComputedName_return DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0 = null;



            
        try {
            {
            int alt555=4;
            switch ( input.LA(1) ) {
            case Intersection:
            case Constructor:
            case Implements:
            case Instanceof:
            case Promisify:
            case Interface:
            case Protected:
            case Abstract:
            case Continue:
            case Debugger:
            case External:
            case Function:
            case Default:
            case Extends:
            case Finally:
            case Private:
            case Project:
            case Delete:
            case Export:
            case Import:
            case Public:
            case Return:
            case Static:
            case Switch:
            case Target:
            case Typeof:
            case Await:
            case Async:
            case Await_1:
            case Break:
            case Catch:
            case Class:
            case Const:
            case False:
            case Super:
            case Throw:
            case Union:
            case While:
            case Yield:
            case This:
            case Case:
            case Else:
            case Enum:
            case From:
            case Null:
            case This_1:
            case True:
            case Type:
            case Void:
            case With:
            case For:
            case Get:
            case Let:
            case New:
            case Set:
            case Try:
            case Var:
            case As:
            case Do:
            case If:
            case In:
            case Of:
            case RULE_IDENTIFIER:
                {
                alt555=1;
                }
                break;
            case RULE_STRING:
                {
                alt555=2;
                }
                break;
            case RULE_DOUBLE:
            case RULE_HEX_INT:
            case RULE_OCTAL_INT:
            case RULE_SCIENTIFIC_INT:
            case RULE_INT:
                {
                alt555=3;
                }
                break;
            case LeftSquareBracket:
                {
                alt555=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 555, 0, input);

                throw nvae;
            }

            switch (alt555) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredNameIdentifierNameParserRuleCall_0_0=ruleIdentifierName();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameIdentifierNameParserRuleCall_0_0!=null?((Token)DeclaredNameIdentifierNameParserRuleCall_0_0.start):null), (DeclaredNameIdentifierNameParserRuleCall_0_0!=null?((Token)DeclaredNameIdentifierNameParserRuleCall_0_0.stop):null), grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_0()); 
                    }

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    DeclaredNameSTRINGTerminalRuleCall_1_0=(Token)match(input,RULE_STRING,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(DeclaredNameSTRINGTerminalRuleCall_1_0, grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredNameNumericLiteralAsStringParserRuleCall_2_0=ruleNumericLiteralAsString();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)DeclaredNameNumericLiteralAsStringParserRuleCall_2_0.start):null), (DeclaredNameNumericLiteralAsStringParserRuleCall_2_0!=null?((Token)DeclaredNameNumericLiteralAsStringParserRuleCall_2_0.stop):null), grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_2()); 
                    }

                    }


                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    LeftSquareBracketKeyword_3_0=(Token)match(input,LeftSquareBracket,FOLLOW_154); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LeftSquareBracketKeyword_3_0, grammarAccess.getLiteralBindingPropertyNameAccess().getLeftSquareBracketKeyword_3_0()); 
                    }
                    int alt554=2;
                    int LA554_0 = input.LA(1);

                    if ( ((LA554_0>=Intersection && LA554_0<=Implements)||(LA554_0>=Promisify && LA554_0<=Abstract)||LA554_0==External||(LA554_0>=Private && LA554_0<=Project)||LA554_0==Public||LA554_0==Static||LA554_0==Target||(LA554_0>=Await && LA554_0<=Await_1)||LA554_0==Union||LA554_0==This||LA554_0==From||LA554_0==Type||(LA554_0>=Get && LA554_0<=Let)||LA554_0==Set||LA554_0==As||LA554_0==Of||LA554_0==RULE_IDENTIFIER) ) {
                        alt554=1;
                    }
                    else if ( (LA554_0==RULE_STRING) ) {
                        alt554=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 554, 0, input);

                        throw nvae;
                    }
                    switch (alt554) {
                        case 1 :
                            {
                            {
                            {
                            pushFollow(FOLLOW_111);
                            DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0=norm1_SymbolLiteralComputedName();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0!=null?((Token)DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0.start):null), (DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0!=null?((Token)DeclaredNameSymbolLiteralComputedNameParserRuleCall_3_1_0_0.stop):null), grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_3_1_0()); 
                            }

                            }


                            }


                            }
                            break;
                        case 2 :
                            {
                            {
                            {
                            DeclaredNameSTRINGTerminalRuleCall_3_1_1_0=(Token)match(input,RULE_STRING,FOLLOW_111); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(DeclaredNameSTRINGTerminalRuleCall_3_1_1_0, grammarAccess.getLiteralBindingPropertyNameAccess().getDeclaredNameAssignment_3_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }

                    RightSquareBracketKeyword_3_2=(Token)match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RightSquareBracketKeyword_3_2, grammarAccess.getLiteralBindingPropertyNameAccess().getRightSquareBracketKeyword_3_2()); 
                    }

                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleSingleNameBinding() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleSingleNameBinding();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleSingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleSingleNameBinding_return ruleSingleNameBinding() throws RecognitionException {
        InternalN4JSParser.ruleSingleNameBinding_return retval = new InternalN4JSParser.ruleSingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm1_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm1_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_SingleNameBinding_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_SingleNameBinding_return norm1_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm1_SingleNameBinding_return retval = new InternalN4JSParser.norm1_SingleNameBinding_return();
        retval.start = input.LT(1);

        InternalN4JSParser.norm3_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm3_VariableDeclaration();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void norm2_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm5_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void norm3_SingleNameBinding() throws RecognitionException {
        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_0 = null;



            
        try {
            {
            {
            {
            pushFollow(FOLLOW_2);
            VarDeclVariableDeclarationParserRuleCall_0=norm7_VariableDeclaration();

            state._fsp--;
            if (state.failed) return ;
            if ( state.backtracking==0 ) {
               announce((VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.start):null), (VarDeclVariableDeclarationParserRuleCall_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_0.stop):null), grammarAccess.getSingleNameBindingAccess().getVarDeclAssignment()); 
            }

            }


            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void entryRuleBindingElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingElement_return ruleBindingElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingElement_return retval = new InternalN4JSParser.ruleBindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt557=2;
            int LA557_0 = input.LA(1);

            if ( (LA557_0==LeftCurlyBracket) && (synpred307_InternalN4JSParser())) {
                alt557=1;
            }
            else if ( (LA557_0==LeftSquareBracket) && (synpred307_InternalN4JSParser())) {
                alt557=1;
            }
            else if ( ((LA557_0>=Intersection && LA557_0<=Implements)||(LA557_0>=Promisify && LA557_0<=Abstract)||LA557_0==External||(LA557_0>=Private && LA557_0<=Project)||LA557_0==Public||LA557_0==Static||LA557_0==Target||(LA557_0>=Await && LA557_0<=Await_1)||LA557_0==Union||(LA557_0>=Yield && LA557_0<=This)||LA557_0==From||LA557_0==Type||(LA557_0>=Get && LA557_0<=Let)||LA557_0==Set||LA557_0==As||LA557_0==Of||LA557_0==CommercialAt||LA557_0==RULE_IDENTIFIER) ) {
                alt557=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 557, 0, input);

                throw nvae;
            }
            switch (alt557) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_69);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt556=2;
                    int LA556_0 = input.LA(1);

                    if ( (LA556_0==EqualsSign) ) {
                        alt556=1;
                    }
                    switch (alt556) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingElement_return norm1_BindingElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingElement_return retval = new InternalN4JSParser.norm1_BindingElement_return();
        retval.start = input.LT(1);

        Token EqualsSignKeyword_0_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_0_1_1_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_0 = null;



            
        try {
            {
            int alt559=2;
            int LA559_0 = input.LA(1);

            if ( (LA559_0==LeftCurlyBracket) && (synpred308_InternalN4JSParser())) {
                alt559=1;
            }
            else if ( (LA559_0==LeftSquareBracket) && (synpred308_InternalN4JSParser())) {
                alt559=1;
            }
            else if ( ((LA559_0>=Intersection && LA559_0<=Implements)||(LA559_0>=Promisify && LA559_0<=Abstract)||LA559_0==External||(LA559_0>=Private && LA559_0<=Project)||LA559_0==Public||LA559_0==Static||LA559_0==Target||(LA559_0>=Await && LA559_0<=Await_1)||LA559_0==Union||LA559_0==This||LA559_0==From||LA559_0==Type||(LA559_0>=Get && LA559_0<=Let)||LA559_0==Set||LA559_0==As||LA559_0==Of||LA559_0==CommercialAt||LA559_0==RULE_IDENTIFIER) ) {
                alt559=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 559, 0, input);

                throw nvae;
            }
            switch (alt559) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_69);
                    NestedPatternBindingPatternParserRuleCall_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_0_0_0_0.stop):null), grammarAccess.getBindingElementAccess().getNestedPatternAssignment_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt558=2;
                    int LA558_0 = input.LA(1);

                    if ( (LA558_0==EqualsSign) ) {
                        alt558=1;
                    }
                    switch (alt558) {
                        case 1 :
                            {
                            EqualsSignKeyword_0_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_0_1_0, grammarAccess.getBindingElementAccess().getEqualsSignKeyword_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_0_1_1_0.stop):null), grammarAccess.getBindingElementAccess().getExpressionAssignment_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_0.stop):null), grammarAccess.getBindingElementAccess().getVarDeclAssignment_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleBindingRestElement() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleBindingRestElement();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleBindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleBindingRestElement_return ruleBindingRestElement() throws RecognitionException {
        InternalN4JSParser.ruleBindingRestElement_return retval = new InternalN4JSParser.ruleBindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.ruleBindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSParser.norm1_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSParser.norm5_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt560=2;
            int LA560_0 = input.LA(1);

            if ( (LA560_0==FullStopFullStopFullStop) ) {
                alt560=1;
            }
            switch (alt560) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_29); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt562=2;
            int LA562_0 = input.LA(1);

            if ( (LA562_0==LeftCurlyBracket) && (synpred309_InternalN4JSParser())) {
                alt562=1;
            }
            else if ( (LA562_0==LeftSquareBracket) && (synpred309_InternalN4JSParser())) {
                alt562=1;
            }
            else if ( ((LA562_0>=Intersection && LA562_0<=Implements)||(LA562_0>=Promisify && LA562_0<=Abstract)||LA562_0==External||(LA562_0>=Private && LA562_0<=Project)||LA562_0==Public||LA562_0==Static||LA562_0==Target||(LA562_0>=Await && LA562_0<=Await_1)||LA562_0==Union||(LA562_0>=Yield && LA562_0<=This)||LA562_0==From||LA562_0==Type||(LA562_0>=Get && LA562_0<=Let)||LA562_0==Set||LA562_0==As||LA562_0==Of||LA562_0==CommercialAt||LA562_0==RULE_IDENTIFIER) ) {
                alt562=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 562, 0, input);

                throw nvae;
            }
            switch (alt562) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_69);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=ruleBindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt561=2;
                    int LA561_0 = input.LA(1);

                    if ( (LA561_0==EqualsSign) ) {
                        alt561=1;
                    }
                    switch (alt561) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm1_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm5_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class norm1_BindingRestElement_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.norm1_BindingRestElement_return norm1_BindingRestElement() throws RecognitionException {
        InternalN4JSParser.norm1_BindingRestElement_return retval = new InternalN4JSParser.norm1_BindingRestElement_return();
        retval.start = input.LT(1);

        Token RestFullStopFullStopFullStopKeyword_0_0=null;
        Token EqualsSignKeyword_1_0_1_0=null;
        InternalN4JSParser.norm1_BindingPattern_return NestedPatternBindingPatternParserRuleCall_1_0_0_0_0 = null;

        InternalN4JSParser.norm3_AssignmentExpression_return ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0 = null;

        InternalN4JSParser.norm7_VariableDeclaration_return VarDeclVariableDeclarationParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            int alt563=2;
            int LA563_0 = input.LA(1);

            if ( (LA563_0==FullStopFullStopFullStop) ) {
                alt563=1;
            }
            switch (alt563) {
                case 1 :
                    {
                    {
                    RestFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_29); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(RestFullStopFullStopFullStopKeyword_0_0, grammarAccess.getBindingRestElementAccess().getRestFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt565=2;
            int LA565_0 = input.LA(1);

            if ( (LA565_0==LeftCurlyBracket) && (synpred310_InternalN4JSParser())) {
                alt565=1;
            }
            else if ( (LA565_0==LeftSquareBracket) && (synpred310_InternalN4JSParser())) {
                alt565=1;
            }
            else if ( ((LA565_0>=Intersection && LA565_0<=Implements)||(LA565_0>=Promisify && LA565_0<=Abstract)||LA565_0==External||(LA565_0>=Private && LA565_0<=Project)||LA565_0==Public||LA565_0==Static||LA565_0==Target||(LA565_0>=Await && LA565_0<=Await_1)||LA565_0==Union||LA565_0==This||LA565_0==From||LA565_0==Type||(LA565_0>=Get && LA565_0<=Let)||LA565_0==Set||LA565_0==As||LA565_0==Of||LA565_0==CommercialAt||LA565_0==RULE_IDENTIFIER) ) {
                alt565=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 565, 0, input);

                throw nvae;
            }
            switch (alt565) {
                case 1 :
                    {
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_69);
                    NestedPatternBindingPatternParserRuleCall_1_0_0_0_0=norm1_BindingPattern();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.start):null), (NestedPatternBindingPatternParserRuleCall_1_0_0_0_0!=null?((Token)NestedPatternBindingPatternParserRuleCall_1_0_0_0_0.stop):null), grammarAccess.getBindingRestElementAccess().getNestedPatternAssignment_1_0_0_0()); 
                    }

                    }


                    }


                    }
                    int alt564=2;
                    int LA564_0 = input.LA(1);

                    if ( (LA564_0==EqualsSign) ) {
                        alt564=1;
                    }
                    switch (alt564) {
                        case 1 :
                            {
                            EqualsSignKeyword_1_0_1_0=(Token)match(input,EqualsSign,FOLLOW_61); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(EqualsSignKeyword_1_0_1_0, grammarAccess.getBindingRestElementAccess().getEqualsSignKeyword_1_0_1_0()); 
                            }
                            {
                            {
                            pushFollow(FOLLOW_2);
                            ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0=norm3_AssignmentExpression();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.start):null), (ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0!=null?((Token)ExpressionAssignmentExpressionParserRuleCall_1_0_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getExpressionAssignment_1_0_1_1()); 
                            }

                            }


                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    VarDeclVariableDeclarationParserRuleCall_1_1_0=norm7_VariableDeclaration();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.start):null), (VarDeclVariableDeclarationParserRuleCall_1_1_0!=null?((Token)VarDeclVariableDeclarationParserRuleCall_1_1_0.stop):null), grammarAccess.getBindingRestElementAccess().getVarDeclAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleElision() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleElision();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleElision_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleElision_return ruleElision() throws RecognitionException {
        InternalN4JSParser.ruleElision_return retval = new InternalN4JSParser.ruleElision_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1=null;


            
        try {
            {
            {
            CommaKeyword_1=(Token)match(input,Comma,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(CommaKeyword_1, grammarAccess.getElisionAccess().getCommaKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRef_return ruleTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleTypeRef_return retval = new InternalN4JSParser.ruleTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefWithoutModifiersParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_0_1_0 = null;

        InternalN4JSParser.ruleUndefModifierToken_return UndefModifierUndefModifierTokenParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt567=2;
            int LA567_0 = input.LA(1);

            if ( ((LA567_0>=Intersection && LA567_0<=Constructor)||LA567_0==Promisify||LA567_0==Target||LA567_0==Await_1||LA567_0==Union||LA567_0==This||LA567_0==This_1||(LA567_0>=Type && LA567_0<=Void)||LA567_0==LeftCurlyBracket||LA567_0==Tilde||LA567_0==RULE_IDENTIFIER) ) {
                alt567=1;
            }
            else if ( (LA567_0==QuestionMark) ) {
                alt567=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 567, 0, input);

                throw nvae;
            }
            switch (alt567) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_164);
                    TypeRefWithoutModifiersParserRuleCall_0_0=ruleTypeRefWithoutModifiers();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.start):null), (TypeRefWithoutModifiersParserRuleCall_0_0!=null?((Token)TypeRefWithoutModifiersParserRuleCall_0_0.stop):null), grammarAccess.getTypeRefAccess().getTypeRefWithoutModifiersParserRuleCall_0_0()); 
                    }
                    int alt566=2;
                    int LA566_0 = input.LA(1);

                    if ( (LA566_0==QuestionMark) && (synpred311_InternalN4JSParser())) {
                        alt566=1;
                    }
                    switch (alt566) {
                        case 1 :
                            {
                            {
                            pushFollow(FOLLOW_2);
                            UndefModifierUndefModifierTokenParserRuleCall_0_1_0=ruleUndefModifierToken();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_0_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_0_1_0.stop):null), grammarAccess.getTypeRefAccess().getUndefModifierAssignment_0_1()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    {
                    {
                    pushFollow(FOLLOW_2);
                    UndefModifierUndefModifierTokenParserRuleCall_1_1_0=ruleUndefModifierToken();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.start):null), (UndefModifierUndefModifierTokenParserRuleCall_1_1_0!=null?((Token)UndefModifierUndefModifierTokenParserRuleCall_1_1_0.stop):null), grammarAccess.getTypeRefAccess().getUndefModifierAssignment_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefWithoutModifiers() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefWithoutModifiers_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefWithoutModifiers_return ruleTypeRefWithoutModifiers() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return retval = new InternalN4JSParser.ruleTypeRefWithoutModifiers_return();
        retval.start = input.LT(1);

        Token DynamicPlusSignKeyword_0_1_0=null;
        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0_0_0 = null;

        InternalN4JSParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleConstructorTypeRef_return ConstructorTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleClassifierTypeRef_return ClassifierTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleFunctionTypeExpression_return FunctionTypeExpressionParserRuleCall_3 = null;

        InternalN4JSParser.ruleUnionTypeExpression_return UnionTypeExpressionParserRuleCall_4 = null;

        InternalN4JSParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_5 = null;



            
        try {
            {
            int alt570=6;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await_1:
            case This:
            case This_1:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt570=1;
                }
                break;
            case Constructor:
                {
                alt570=2;
                }
                break;
            case Type:
                {
                alt570=3;
                }
                break;
            case LeftCurlyBracket:
                {
                alt570=4;
                }
                break;
            case Union:
                {
                alt570=5;
                }
                break;
            case Intersection:
                {
                alt570=6;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 570, 0, input);

                throw nvae;
            }

            switch (alt570) {
                case 1 :
                    {
                    {
                    int alt568=2;
                    switch ( input.LA(1) ) {
                    case Promisify:
                    case Target:
                    case Await_1:
                    case This:
                    case Void:
                    case RULE_IDENTIFIER:
                        {
                        alt568=1;
                        }
                        break;
                    case Tilde:
                        {
                        switch ( input.LA(2) ) {
                        case Tilde:
                            {
                            int LA568_4 = input.LA(3);

                            if ( (LA568_4==Promisify||LA568_4==Target||LA568_4==Await_1||LA568_4==This||LA568_4==Void||LA568_4==RULE_IDENTIFIER) ) {
                                alt568=1;
                            }
                            else if ( (LA568_4==This_1) ) {
                                alt568=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 568, 4, input);

                                throw nvae;
                            }
                            }
                            break;
                        case RULE_STRUCTMODSUFFIX:
                            {
                            int LA568_5 = input.LA(3);

                            if ( (LA568_5==Promisify||LA568_5==Target||LA568_5==Await_1||LA568_5==This||LA568_5==Void||LA568_5==RULE_IDENTIFIER) ) {
                                alt568=1;
                            }
                            else if ( (LA568_5==This_1) ) {
                                alt568=2;
                            }
                            else {
                                if (state.backtracking>0) {state.failed=true; return retval;}
                                NoViableAltException nvae =
                                    new NoViableAltException("", 568, 5, input);

                                throw nvae;
                            }
                            }
                            break;
                        case This_1:
                            {
                            alt568=2;
                            }
                            break;
                        case Promisify:
                        case Target:
                        case Await_1:
                        case This:
                        case Void:
                        case RULE_IDENTIFIER:
                            {
                            alt568=1;
                            }
                            break;
                        default:
                            if (state.backtracking>0) {state.failed=true; return retval;}
                            NoViableAltException nvae =
                                new NoViableAltException("", 568, 2, input);

                            throw nvae;
                        }

                        }
                        break;
                    case This_1:
                        {
                        alt568=2;
                        }
                        break;
                    default:
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 568, 0, input);

                        throw nvae;
                    }

                    switch (alt568) {
                        case 1 :
                            {
                            pushFollow(FOLLOW_36);
                            ParameterizedTypeRefParserRuleCall_0_0_0=ruleParameterizedTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.start):null), (ParameterizedTypeRefParserRuleCall_0_0_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0_0_0.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getParameterizedTypeRefParserRuleCall_0_0_0()); 
                            }

                            }
                            break;
                        case 2 :
                            {
                            pushFollow(FOLLOW_36);
                            ThisTypeRefParserRuleCall_0_0_1=ruleThisTypeRef();

                            state._fsp--;
                            if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce((ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.start):null), (ThisTypeRefParserRuleCall_0_0_1!=null?((Token)ThisTypeRefParserRuleCall_0_0_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getThisTypeRefParserRuleCall_0_0_1()); 
                            }

                            }
                            break;

                    }
                    int alt569=2;
                    alt569 = dfa569.predict(input);
                    switch (alt569) {
                        case 1 :
                            {
                            {
                            DynamicPlusSignKeyword_0_1_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return retval;
                            if ( state.backtracking==0 ) {
                               announce(DynamicPlusSignKeyword_0_1_0, grammarAccess.getTypeRefWithoutModifiersAccess().getDynamicPlusSignKeyword_0_1_0()); 
                            }

                            }


                            }
                            break;

                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ConstructorTypeRefParserRuleCall_1=ruleConstructorTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConstructorTypeRefParserRuleCall_1!=null?((Token)ConstructorTypeRefParserRuleCall_1.start):null), (ConstructorTypeRefParserRuleCall_1!=null?((Token)ConstructorTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getConstructorTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ClassifierTypeRefParserRuleCall_2=ruleClassifierTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassifierTypeRefParserRuleCall_2!=null?((Token)ClassifierTypeRefParserRuleCall_2.start):null), (ClassifierTypeRefParserRuleCall_2!=null?((Token)ClassifierTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getClassifierTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionParserRuleCall_3=ruleFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionParserRuleCall_3!=null?((Token)FunctionTypeExpressionParserRuleCall_3.start):null), (FunctionTypeExpressionParserRuleCall_3!=null?((Token)FunctionTypeExpressionParserRuleCall_3.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getFunctionTypeExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionParserRuleCall_4=ruleUnionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionParserRuleCall_4!=null?((Token)UnionTypeExpressionParserRuleCall_4.start):null), (UnionTypeExpressionParserRuleCall_4!=null?((Token)UnionTypeExpressionParserRuleCall_4.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getUnionTypeExpressionParserRuleCall_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionParserRuleCall_5=ruleIntersectionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionParserRuleCall_5!=null?((Token)IntersectionTypeExpressionParserRuleCall_5.start):null), (IntersectionTypeExpressionParserRuleCall_5!=null?((Token)IntersectionTypeExpressionParserRuleCall_5.stop):null), grammarAccess.getTypeRefWithoutModifiersAccess().getIntersectionTypeExpressionParserRuleCall_5()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefFunctionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefFunctionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefFunctionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return ruleTypeRefFunctionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return retval = new InternalN4JSParser.ruleTypeRefFunctionTypeExpression_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSParser.ruleConstructorTypeRef_return ConstructorTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleClassifierTypeRef_return ClassifierTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleUnionTypeExpression_return UnionTypeExpressionParserRuleCall_3 = null;

        InternalN4JSParser.ruleIntersectionTypeExpression_return IntersectionTypeExpressionParserRuleCall_4 = null;



            
        try {
            {
            int alt571=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await_1:
            case This:
            case Void:
            case Tilde:
            case RULE_IDENTIFIER:
                {
                alt571=1;
                }
                break;
            case Constructor:
                {
                alt571=2;
                }
                break;
            case Type:
                {
                alt571=3;
                }
                break;
            case Union:
                {
                alt571=4;
                }
                break;
            case Intersection:
                {
                alt571=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 571, 0, input);

                throw nvae;
            }

            switch (alt571) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ConstructorTypeRefParserRuleCall_1=ruleConstructorTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConstructorTypeRefParserRuleCall_1!=null?((Token)ConstructorTypeRefParserRuleCall_1.start):null), (ConstructorTypeRefParserRuleCall_1!=null?((Token)ConstructorTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getConstructorTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ClassifierTypeRefParserRuleCall_2=ruleClassifierTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassifierTypeRefParserRuleCall_2!=null?((Token)ClassifierTypeRefParserRuleCall_2.start):null), (ClassifierTypeRefParserRuleCall_2!=null?((Token)ClassifierTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getClassifierTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    UnionTypeExpressionParserRuleCall_3=ruleUnionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((UnionTypeExpressionParserRuleCall_3!=null?((Token)UnionTypeExpressionParserRuleCall_3.start):null), (UnionTypeExpressionParserRuleCall_3!=null?((Token)UnionTypeExpressionParserRuleCall_3.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getUnionTypeExpressionParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    IntersectionTypeExpressionParserRuleCall_4=ruleIntersectionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((IntersectionTypeExpressionParserRuleCall_4!=null?((Token)IntersectionTypeExpressionParserRuleCall_4.start):null), (IntersectionTypeExpressionParserRuleCall_4!=null?((Token)IntersectionTypeExpressionParserRuleCall_4.stop):null), grammarAccess.getTypeRefFunctionTypeExpressionAccess().getIntersectionTypeExpressionParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefForCast() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefForCast();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefForCast_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefForCast_return ruleTypeRefForCast() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefForCast_return retval = new InternalN4JSParser.ruleTypeRefForCast_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRef_return ParameterizedTypeRefParserRuleCall_0 = null;

        InternalN4JSParser.ruleThisTypeRef_return ThisTypeRefParserRuleCall_1 = null;

        InternalN4JSParser.ruleConstructorTypeRef_return ConstructorTypeRefParserRuleCall_2 = null;

        InternalN4JSParser.ruleClassifierTypeRef_return ClassifierTypeRefParserRuleCall_3 = null;

        InternalN4JSParser.ruleFunctionTypeExpression_return FunctionTypeExpressionParserRuleCall_4 = null;



            
        try {
            {
            int alt572=5;
            switch ( input.LA(1) ) {
            case Promisify:
            case Target:
            case Await_1:
            case This:
            case Void:
            case RULE_IDENTIFIER:
                {
                alt572=1;
                }
                break;
            case Tilde:
                {
                switch ( input.LA(2) ) {
                case Tilde:
                    {
                    int LA572_7 = input.LA(3);

                    if ( (LA572_7==Promisify||LA572_7==Target||LA572_7==Await_1||LA572_7==This||LA572_7==Void||LA572_7==RULE_IDENTIFIER) ) {
                        alt572=1;
                    }
                    else if ( (LA572_7==This_1) ) {
                        alt572=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 572, 7, input);

                        throw nvae;
                    }
                    }
                    break;
                case RULE_STRUCTMODSUFFIX:
                    {
                    int LA572_8 = input.LA(3);

                    if ( (LA572_8==Promisify||LA572_8==Target||LA572_8==Await_1||LA572_8==This||LA572_8==Void||LA572_8==RULE_IDENTIFIER) ) {
                        alt572=1;
                    }
                    else if ( (LA572_8==This_1) ) {
                        alt572=2;
                    }
                    else {
                        if (state.backtracking>0) {state.failed=true; return retval;}
                        NoViableAltException nvae =
                            new NoViableAltException("", 572, 8, input);

                        throw nvae;
                    }
                    }
                    break;
                case This_1:
                    {
                    alt572=2;
                    }
                    break;
                case Promisify:
                case Target:
                case Await_1:
                case This:
                case Void:
                case RULE_IDENTIFIER:
                    {
                    alt572=1;
                    }
                    break;
                default:
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 572, 2, input);

                    throw nvae;
                }

                }
                break;
            case This_1:
                {
                alt572=2;
                }
                break;
            case Constructor:
                {
                alt572=3;
                }
                break;
            case Type:
                {
                alt572=4;
                }
                break;
            case LeftCurlyBracket:
                {
                alt572=5;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 572, 0, input);

                throw nvae;
            }

            switch (alt572) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefParserRuleCall_0=ruleParameterizedTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.start):null), (ParameterizedTypeRefParserRuleCall_0!=null?((Token)ParameterizedTypeRefParserRuleCall_0.stop):null), grammarAccess.getTypeRefForCastAccess().getParameterizedTypeRefParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefParserRuleCall_1=ruleThisTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefParserRuleCall_1!=null?((Token)ThisTypeRefParserRuleCall_1.start):null), (ThisTypeRefParserRuleCall_1!=null?((Token)ThisTypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeRefForCastAccess().getThisTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    pushFollow(FOLLOW_2);
                    ConstructorTypeRefParserRuleCall_2=ruleConstructorTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ConstructorTypeRefParserRuleCall_2!=null?((Token)ConstructorTypeRefParserRuleCall_2.start):null), (ConstructorTypeRefParserRuleCall_2!=null?((Token)ConstructorTypeRefParserRuleCall_2.stop):null), grammarAccess.getTypeRefForCastAccess().getConstructorTypeRefParserRuleCall_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    ClassifierTypeRefParserRuleCall_3=ruleClassifierTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ClassifierTypeRefParserRuleCall_3!=null?((Token)ClassifierTypeRefParserRuleCall_3.start):null), (ClassifierTypeRefParserRuleCall_3!=null?((Token)ClassifierTypeRefParserRuleCall_3.stop):null), grammarAccess.getTypeRefForCastAccess().getClassifierTypeRefParserRuleCall_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    pushFollow(FOLLOW_2);
                    FunctionTypeExpressionParserRuleCall_4=ruleFunctionTypeExpression();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FunctionTypeExpressionParserRuleCall_4!=null?((Token)FunctionTypeExpressionParserRuleCall_4.start):null), (FunctionTypeExpressionParserRuleCall_4!=null?((Token)FunctionTypeExpressionParserRuleCall_4.stop):null), grammarAccess.getTypeRefForCastAccess().getFunctionTypeExpressionParserRuleCall_4()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeRefInClassifierType() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeRefInClassifierType();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeRefInClassifierType_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeRefInClassifierType_return ruleTypeRefInClassifierType() throws RecognitionException {
        InternalN4JSParser.ruleTypeRefInClassifierType_return retval = new InternalN4JSParser.ruleTypeRefInClassifierType_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_1 = null;



            
        try {
            {
            int alt573=2;
            int LA573_0 = input.LA(1);

            if ( (LA573_0==Promisify||LA573_0==Target||LA573_0==Await_1||LA573_0==This||LA573_0==Void||LA573_0==RULE_IDENTIFIER) ) {
                alt573=1;
            }
            else if ( (LA573_0==This_1) ) {
                alt573=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 573, 0, input);

                throw nvae;
            }
            switch (alt573) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getTypeRefInClassifierTypeAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_1=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.start):null), (ThisTypeRefNominalParserRuleCall_1!=null?((Token)ThisTypeRefNominalParserRuleCall_1.stop):null), grammarAccess.getTypeRefInClassifierTypeAccess().getThisTypeRefNominalParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRef_return ruleThisTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRef_return retval = new InternalN4JSParser.ruleThisTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleThisTypeRefNominal_return ThisTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleThisTypeRefStructural_return ThisTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt574=2;
            int LA574_0 = input.LA(1);

            if ( (LA574_0==This_1) ) {
                alt574=1;
            }
            else if ( (LA574_0==Tilde) ) {
                alt574=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 574, 0, input);

                throw nvae;
            }
            switch (alt574) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefNominalParserRuleCall_0=ruleThisTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.start):null), (ThisTypeRefNominalParserRuleCall_0!=null?((Token)ThisTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ThisTypeRefStructuralParserRuleCall_1=ruleThisTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.start):null), (ThisTypeRefStructuralParserRuleCall_1!=null?((Token)ThisTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getThisTypeRefAccess().getThisTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefNominal_return ruleThisTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefNominal_return retval = new InternalN4JSParser.ruleThisTypeRefNominal_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;


            
        try {
            {
            {
            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefNominalAccess().getThisKeyword_1()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleThisTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleThisTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleThisTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleThisTypeRefStructural_return ruleThisTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleThisTypeRefStructural_return retval = new InternalN4JSParser.ruleThisTypeRefStructural_return();
        retval.start = input.LT(1);

        Token ThisKeyword_1=null;
        Token WithKeyword_2_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_2_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_165);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }

            ThisKeyword_1=(Token)match(input,This_1,FOLLOW_166); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ThisKeyword_1, grammarAccess.getThisTypeRefStructuralAccess().getThisKeyword_1()); 
            }
            int alt575=2;
            int LA575_0 = input.LA(1);

            if ( (LA575_0==With) ) {
                int LA575_1 = input.LA(2);

                if ( (LA575_1==LeftCurlyBracket) ) {
                    alt575=1;
                }
            }
            switch (alt575) {
                case 1 :
                    {
                    WithKeyword_2_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_2_0, grammarAccess.getThisTypeRefStructuralAccess().getWithKeyword_2_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_2_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.start):null), (TStructMemberListParserRuleCall_2_1!=null?((Token)TStructMemberListParserRuleCall_2_1.stop):null), grammarAccess.getThisTypeRefStructuralAccess().getTStructMemberListParserRuleCall_2_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTAnonymousFormalParameterList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameterList_return ruleTAnonymousFormalParameterList() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameterList_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameterList_return();
        retval.start = input.LT(1);

        Token CommaKeyword_1_0=null;
        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparsTAnonymousFormalParameterParserRuleCall_1_1_0 = null;



            
        try {
            {
            int alt577=2;
            int LA577_0 = input.LA(1);

            if ( ((LA577_0>=Intersection && LA577_0<=Implements)||(LA577_0>=Promisify && LA577_0<=Abstract)||(LA577_0>=Private && LA577_0<=Project)||LA577_0==Public||LA577_0==Static||LA577_0==Target||LA577_0==Await_1||LA577_0==Union||LA577_0==This||(LA577_0>=From && LA577_0<=This_1)||(LA577_0>=Type && LA577_0<=Void)||LA577_0==FullStopFullStopFullStop||LA577_0==Get||LA577_0==Set||LA577_0==As||LA577_0==QuestionMark||LA577_0==LeftCurlyBracket||LA577_0==Tilde||LA577_0==RULE_IDENTIFIER) ) {
                alt577=1;
            }
            switch (alt577) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_32);
                    FparsTAnonymousFormalParameterParserRuleCall_0_0=ruleTAnonymousFormalParameter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_0_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_0()); 
                    }

                    }


                    }
                    loop576:
                    do {
                        int alt576=2;
                        int LA576_0 = input.LA(1);

                        if ( (LA576_0==Comma) ) {
                            alt576=1;
                        }


                        switch (alt576) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_0=(Token)match(input,Comma,FOLLOW_53); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_0, grammarAccess.getTAnonymousFormalParameterListAccess().getCommaKeyword_1_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_32);
                    	    FparsTAnonymousFormalParameterParserRuleCall_1_1_0=ruleTAnonymousFormalParameter();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.start):null), (FparsTAnonymousFormalParameterParserRuleCall_1_1_0!=null?((Token)FparsTAnonymousFormalParameterParserRuleCall_1_1_0.stop):null), grammarAccess.getTAnonymousFormalParameterListAccess().getFparsAssignment_1_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop576;
                        }
                    } while (true);


                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTAnonymousFormalParameter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTAnonymousFormalParameter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTAnonymousFormalParameter_return ruleTAnonymousFormalParameter() throws RecognitionException {
        InternalN4JSParser.ruleTAnonymousFormalParameter_return retval = new InternalN4JSParser.ruleTAnonymousFormalParameter_return();
        retval.start = input.LT(1);

        Token VariadicFullStopFullStopFullStopKeyword_0_0=null;
        Token ColonKeyword_1_1=null;
        InternalN4JSParser.ruleTIdentifier_return NameTIdentifierParserRuleCall_1_0_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_2_0 = null;



            
        try {
            {
            {
            int alt578=2;
            int LA578_0 = input.LA(1);

            if ( (LA578_0==FullStopFullStopFullStop) ) {
                alt578=1;
            }
            switch (alt578) {
                case 1 :
                    {
                    {
                    VariadicFullStopFullStopFullStopKeyword_0_0=(Token)match(input,FullStopFullStopFullStop,FOLLOW_167); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VariadicFullStopFullStopFullStopKeyword_0_0, grammarAccess.getTAnonymousFormalParameterAccess().getVariadicFullStopFullStopFullStopKeyword_0_0()); 
                    }

                    }


                    }
                    break;

            }
            int alt579=2;
            alt579 = dfa579.predict(input);
            switch (alt579) {
                case 1 :
                    {
                    {
                    {
                    pushFollow(FOLLOW_90);
                    NameTIdentifierParserRuleCall_1_0_0=ruleTIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((NameTIdentifierParserRuleCall_1_0_0!=null?((Token)NameTIdentifierParserRuleCall_1_0_0.start):null), (NameTIdentifierParserRuleCall_1_0_0!=null?((Token)NameTIdentifierParserRuleCall_1_0_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getNameAssignment_1_0()); 
                    }

                    }


                    }

                    ColonKeyword_1_1=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_1, grammarAccess.getTAnonymousFormalParameterAccess().getColonKeyword_1_1()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_2);
            TypeRefTypeRefParserRuleCall_2_0=ruleTypeRef();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.start):null), (TypeRefTypeRefParserRuleCall_2_0!=null?((Token)TypeRefTypeRefParserRuleCall_2_0.stop):null), grammarAccess.getTAnonymousFormalParameterAccess().getTypeRefAssignment_2()); 
            }

            }


            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUnionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUnionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUnionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUnionTypeExpression_return ruleUnionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleUnionTypeExpression_return retval = new InternalN4JSParser.ruleUnionTypeExpression_return();
        retval.start = input.LT(1);

        Token UnionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            UnionKeyword_1=(Token)match(input,Union,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(UnionKeyword_1, grammarAccess.getUnionTypeExpressionAccess().getUnionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getUnionTypeExpressionAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop580:
            do {
                int alt580=2;
                int LA580_0 = input.LA(1);

                if ( (LA580_0==Comma) ) {
                    alt580=1;
                }


                switch (alt580) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_47); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getUnionTypeExpressionAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getUnionTypeExpressionAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop580;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getUnionTypeExpressionAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleIntersectionTypeExpression() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleIntersectionTypeExpression();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleIntersectionTypeExpression_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleIntersectionTypeExpression_return ruleIntersectionTypeExpression() throws RecognitionException {
        InternalN4JSParser.ruleIntersectionTypeExpression_return retval = new InternalN4JSParser.ruleIntersectionTypeExpression_return();
        retval.start = input.LT(1);

        Token IntersectionKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token CommaKeyword_4_0=null;
        Token RightCurlyBracketKeyword_5=null;
        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0 = null;

        InternalN4JSParser.ruleTypeRefWithoutModifiers_return TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0 = null;



            
        try {
            {
            {
            IntersectionKeyword_1=(Token)match(input,Intersection,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(IntersectionKeyword_1, grammarAccess.getIntersectionTypeExpressionAccess().getIntersectionKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_47); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getIntersectionTypeExpressionAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_15);
            TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0=ruleTypeRefWithoutModifiers();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_3_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_3()); 
            }

            }


            }
            loop581:
            do {
                int alt581=2;
                int LA581_0 = input.LA(1);

                if ( (LA581_0==Comma) ) {
                    alt581=1;
                }


                switch (alt581) {
            	case 1 :
            	    {
            	    CommaKeyword_4_0=(Token)match(input,Comma,FOLLOW_47); if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce(CommaKeyword_4_0, grammarAccess.getIntersectionTypeExpressionAccess().getCommaKeyword_4_0()); 
            	    }
            	    {
            	    {
            	    pushFollow(FOLLOW_15);
            	    TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0=ruleTypeRefWithoutModifiers();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.start):null), (TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0!=null?((Token)TypeRefsTypeRefWithoutModifiersParserRuleCall_4_1_0.stop):null), grammarAccess.getIntersectionTypeExpressionAccess().getTypeRefsAssignment_4_1()); 
            	    }

            	    }


            	    }


            	    }
            	    break;

            	default :
            	    break loop581;
                }
            } while (true);

            RightCurlyBracketKeyword_5=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_5, grammarAccess.getIntersectionTypeExpressionAccess().getRightCurlyBracketKeyword_5()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRef_return ruleParameterizedTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRef_return retval = new InternalN4JSParser.ruleParameterizedTypeRef_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleParameterizedTypeRefNominal_return ParameterizedTypeRefNominalParserRuleCall_0 = null;

        InternalN4JSParser.ruleParameterizedTypeRefStructural_return ParameterizedTypeRefStructuralParserRuleCall_1 = null;



            
        try {
            {
            int alt582=2;
            int LA582_0 = input.LA(1);

            if ( (LA582_0==Promisify||LA582_0==Target||LA582_0==Await_1||LA582_0==This||LA582_0==Void||LA582_0==RULE_IDENTIFIER) ) {
                alt582=1;
            }
            else if ( (LA582_0==Tilde) ) {
                alt582=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 582, 0, input);

                throw nvae;
            }
            switch (alt582) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefNominalParserRuleCall_0=ruleParameterizedTypeRefNominal();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.start):null), (ParameterizedTypeRefNominalParserRuleCall_0!=null?((Token)ParameterizedTypeRefNominalParserRuleCall_0.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefNominalParserRuleCall_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    ParameterizedTypeRefStructuralParserRuleCall_1=ruleParameterizedTypeRefStructural();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.start):null), (ParameterizedTypeRefStructuralParserRuleCall_1!=null?((Token)ParameterizedTypeRefStructuralParserRuleCall_1.stop):null), grammarAccess.getParameterizedTypeRefAccess().getParameterizedTypeRefStructuralParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefStructural() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefStructural();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefStructural_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefStructural_return ruleParameterizedTypeRefStructural() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefStructural_return retval = new InternalN4JSParser.ruleParameterizedTypeRefStructural_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_2_0=null;
        Token CommaKeyword_2_2_0=null;
        Token GreaterThanSignKeyword_2_3=null;
        Token WithKeyword_3_0=null;
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_1_0 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_2_2_1_0 = null;

        InternalN4JSParser.ruleTStructMemberList_return TStructMemberListParserRuleCall_3_1 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_67);
            DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0=ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.start):null), (DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0!=null?((Token)DefinedTypingStrategyTypingStrategyUseSiteOperatorParserRuleCall_0_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDefinedTypingStrategyAssignment_0()); 
            }

            }


            }
            {
            {
            pushFollow(FOLLOW_168);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_1_0_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getDeclaredTypeAssignment_1()); 
            }

            }


            }
            int alt584=2;
            alt584 = dfa584.predict(input);
            switch (alt584) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_2_0=(Token)match(input,LessThanSign,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getLessThanSignKeyword_2_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_16);
                    TypeArgsTypeArgumentParserRuleCall_2_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_1()); 
                    }

                    }


                    }
                    loop583:
                    do {
                        int alt583=2;
                        int LA583_0 = input.LA(1);

                        if ( (LA583_0==Comma) ) {
                            alt583=1;
                        }


                        switch (alt583) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_2_2_0=(Token)match(input,Comma,FOLLOW_43); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_2_2_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getCommaKeyword_2_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_16);
                    	    TypeArgsTypeArgumentParserRuleCall_2_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_2_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_2_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTypeArgsAssignment_2_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop583;
                        }
                    } while (true);

                    GreaterThanSignKeyword_2_3=(Token)match(input,GreaterThanSign,FOLLOW_166); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_2_3, grammarAccess.getParameterizedTypeRefStructuralAccess().getGreaterThanSignKeyword_2_3()); 
                    }

                    }
                    break;

            }
            int alt585=2;
            int LA585_0 = input.LA(1);

            if ( (LA585_0==With) ) {
                int LA585_1 = input.LA(2);

                if ( (LA585_1==LeftCurlyBracket) ) {
                    alt585=1;
                }
            }
            switch (alt585) {
                case 1 :
                    {
                    WithKeyword_3_0=(Token)match(input,With,FOLLOW_13); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(WithKeyword_3_0, grammarAccess.getParameterizedTypeRefStructuralAccess().getWithKeyword_3_0()); 
                    }
                    pushFollow(FOLLOW_2);
                    TStructMemberListParserRuleCall_3_1=ruleTStructMemberList();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.start):null), (TStructMemberListParserRuleCall_3_1!=null?((Token)TStructMemberListParserRuleCall_3_1.stop):null), grammarAccess.getParameterizedTypeRefStructuralAccess().getTStructMemberListParserRuleCall_3_1()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }

    public static class ruleTStructMemberList_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMemberList_return ruleTStructMemberList() throws RecognitionException {
        InternalN4JSParser.ruleTStructMemberList_return retval = new InternalN4JSParser.ruleTStructMemberList_return();
        retval.start = input.LT(1);

        Token LeftCurlyBracketKeyword_0=null;
        Token SemicolonKeyword_1_1_0=null;
        Token CommaKeyword_1_1_1=null;
        Token RightCurlyBracketKeyword_2=null;
        InternalN4JSParser.ruleTStructMember_return AstStructuralMembersTStructMemberParserRuleCall_1_0_0 = null;



            
        try {
            {
            {
            LeftCurlyBracketKeyword_0=(Token)match(input,LeftCurlyBracket,FOLLOW_169); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_0, grammarAccess.getTStructMemberListAccess().getLeftCurlyBracketKeyword_0()); 
            }
            loop587:
            do {
                int alt587=2;
                int LA587_0 = input.LA(1);

                if ( (LA587_0==Intersection||LA587_0==Abstract||LA587_0==Project||LA587_0==Union||(LA587_0>=From && LA587_0<=Null)||(LA587_0>=Type && LA587_0<=Void)||LA587_0==Get||LA587_0==Set||LA587_0==As||LA587_0==LessThanSign||LA587_0==RULE_IDENTIFIER) ) {
                    alt587=1;
                }


                switch (alt587) {
            	case 1 :
            	    {
            	    {
            	    {
            	    pushFollow(FOLLOW_170);
            	    AstStructuralMembersTStructMemberParserRuleCall_1_0_0=ruleTStructMember();

            	    state._fsp--;
            	    if (state.failed) return retval;
            	    if ( state.backtracking==0 ) {
            	       announce((AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.start):null), (AstStructuralMembersTStructMemberParserRuleCall_1_0_0!=null?((Token)AstStructuralMembersTStructMemberParserRuleCall_1_0_0.stop):null), grammarAccess.getTStructMemberListAccess().getAstStructuralMembersAssignment_1_0()); 
            	    }

            	    }


            	    }
            	    int alt586=3;
            	    int LA586_0 = input.LA(1);

            	    if ( (LA586_0==Semicolon) ) {
            	        alt586=1;
            	    }
            	    else if ( (LA586_0==Comma) ) {
            	        alt586=2;
            	    }
            	    switch (alt586) {
            	        case 1 :
            	            {
            	            SemicolonKeyword_1_1_0=(Token)match(input,Semicolon,FOLLOW_169); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(SemicolonKeyword_1_1_0, grammarAccess.getTStructMemberListAccess().getSemicolonKeyword_1_1_0()); 
            	            }

            	            }
            	            break;
            	        case 2 :
            	            {
            	            CommaKeyword_1_1_1=(Token)match(input,Comma,FOLLOW_169); if (state.failed) return retval;
            	            if ( state.backtracking==0 ) {
            	               announce(CommaKeyword_1_1_1, grammarAccess.getTStructMemberListAccess().getCommaKeyword_1_1_1()); 
            	            }

            	            }
            	            break;

            	    }


            	    }
            	    break;

            	default :
            	    break loop587;
                }
            } while (true);

            RightCurlyBracketKeyword_2=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_2, grammarAccess.getTStructMemberListAccess().getRightCurlyBracketKeyword_2()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMember() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMember();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMember_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMember_return ruleTStructMember() throws RecognitionException {
        InternalN4JSParser.ruleTStructMember_return retval = new InternalN4JSParser.ruleTStructMember_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleTStructGetter_return TStructGetterParserRuleCall_0 = null;

        InternalN4JSParser.ruleTStructSetter_return TStructSetterParserRuleCall_1 = null;

        InternalN4JSParser.ruleTStructMethod_return TStructMethodParserRuleCall_2 = null;

        InternalN4JSParser.ruleTStructField_return TStructFieldParserRuleCall_3 = null;



            
        try {
            {
            int alt588=4;
            alt588 = dfa588.predict(input);
            switch (alt588) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructGetterParserRuleCall_0=ruleTStructGetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.start):null), (TStructGetterParserRuleCall_0!=null?((Token)TStructGetterParserRuleCall_0.stop):null), grammarAccess.getTStructMemberAccess().getTStructGetterParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructSetterParserRuleCall_1=ruleTStructSetter();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.start):null), (TStructSetterParserRuleCall_1!=null?((Token)TStructSetterParserRuleCall_1.stop):null), grammarAccess.getTStructMemberAccess().getTStructSetterParserRuleCall_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TStructMethodParserRuleCall_2=ruleTStructMethod();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.start):null), (TStructMethodParserRuleCall_2!=null?((Token)TStructMethodParserRuleCall_2.stop):null), grammarAccess.getTStructMemberAccess().getTStructMethodParserRuleCall_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    pushFollow(FOLLOW_2);
                    TStructFieldParserRuleCall_3=ruleTStructField();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.start):null), (TStructFieldParserRuleCall_3!=null?((Token)TStructFieldParserRuleCall_3.stop):null), grammarAccess.getTStructMemberAccess().getTStructFieldParserRuleCall_3()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructMethod() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructMethod();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructMethod_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructMethod_return ruleTStructMethod() throws RecognitionException {
        InternalN4JSParser.ruleTStructMethod_return retval = new InternalN4JSParser.ruleTStructMethod_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_0_0_1_0=null;
        Token CommaKeyword_0_0_1_2_0=null;
        Token GreaterThanSignKeyword_0_0_1_3=null;
        Token LeftParenthesisKeyword_0_0_3=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_1_0 = null;

        InternalN4JSParser.ruleTypeVariable_return TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0 = null;

        InternalN4JSParser.ruleTypesIdentifier_return NameTypesIdentifierParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameterList_return TAnonymousFormalParameterListParserRuleCall_1 = null;

        InternalN4JSParser.ruleTypeRef_return ReturnTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            int alt590=2;
            int LA590_0 = input.LA(1);

            if ( (LA590_0==LessThanSign) ) {
                alt590=1;
            }
            switch (alt590) {
                case 1 :
                    {
                    LessThanSignKeyword_0_0_1_0=(Token)match(input,LessThanSign,FOLLOW_14); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_0_0_1_0, grammarAccess.getTStructMethodAccess().getLessThanSignKeyword_0_0_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_16);
                    TypeVarsTypeVariableParserRuleCall_0_0_1_1_0=ruleTypeVariable();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_1()); 
                    }

                    }


                    }
                    loop589:
                    do {
                        int alt589=2;
                        int LA589_0 = input.LA(1);

                        if ( (LA589_0==Comma) ) {
                            alt589=1;
                        }


                        switch (alt589) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_0_0_1_2_0=(Token)match(input,Comma,FOLLOW_14); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_0_0_1_2_0, grammarAccess.getTStructMethodAccess().getCommaKeyword_0_0_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_16);
                    	    TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0=ruleTypeVariable();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.start):null), (TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0!=null?((Token)TypeVarsTypeVariableParserRuleCall_0_0_1_2_1_0.stop):null), grammarAccess.getTStructMethodAccess().getTypeVarsAssignment_0_0_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop589;
                        }
                    } while (true);

                    GreaterThanSignKeyword_0_0_1_3=(Token)match(input,GreaterThanSign,FOLLOW_171); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_0_0_1_3, grammarAccess.getTStructMethodAccess().getGreaterThanSignKeyword_0_0_1_3()); 
                    }

                    }
                    break;

            }
            {
            {
            pushFollow(FOLLOW_46);
            NameTypesIdentifierParserRuleCall_0_0_2_0=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameTypesIdentifierParserRuleCall_0_0_2_0!=null?((Token)NameTypesIdentifierParserRuleCall_0_0_2_0.start):null), (NameTypesIdentifierParserRuleCall_0_0_2_0!=null?((Token)NameTypesIdentifierParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructMethodAccess().getNameAssignment_0_0_2()); 
            }

            }


            }

            LeftParenthesisKeyword_0_0_3=(Token)match(input,LeftParenthesis,FOLLOW_51); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_0_0_3, grammarAccess.getTStructMethodAccess().getLeftParenthesisKeyword_0_0_3()); 
            }

            }


            }

            pushFollow(FOLLOW_48);
            TAnonymousFormalParameterListParserRuleCall_1=ruleTAnonymousFormalParameterList();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.start):null), (TAnonymousFormalParameterListParserRuleCall_1!=null?((Token)TAnonymousFormalParameterListParserRuleCall_1.stop):null), grammarAccess.getTStructMethodAccess().getTAnonymousFormalParameterListParserRuleCall_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructMethodAccess().getRightParenthesisKeyword_2()); 
            }
            int alt591=2;
            int LA591_0 = input.LA(1);

            if ( (LA591_0==Colon) ) {
                alt591=1;
            }
            switch (alt591) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructMethodAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    ReturnTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.start):null), (ReturnTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)ReturnTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructMethodAccess().getReturnTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructField() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructField();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructField_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructField_return ruleTStructField() throws RecognitionException {
        InternalN4JSParser.ruleTStructField_return retval = new InternalN4JSParser.ruleTStructField_return();
        retval.start = input.LT(1);

        Token ColonKeyword_1_0=null;
        InternalN4JSParser.ruleTypesIdentifier_return NameTypesIdentifierParserRuleCall_0_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefTypeRefParserRuleCall_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_42);
            NameTypesIdentifierParserRuleCall_0_0=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameTypesIdentifierParserRuleCall_0_0!=null?((Token)NameTypesIdentifierParserRuleCall_0_0.start):null), (NameTypesIdentifierParserRuleCall_0_0!=null?((Token)NameTypesIdentifierParserRuleCall_0_0.stop):null), grammarAccess.getTStructFieldAccess().getNameAssignment_0()); 
            }

            }


            }
            int alt592=2;
            int LA592_0 = input.LA(1);

            if ( (LA592_0==Colon) ) {
                alt592=1;
            }
            switch (alt592) {
                case 1 :
                    {
                    ColonKeyword_1_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_1_0, grammarAccess.getTStructFieldAccess().getColonKeyword_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefTypeRefParserRuleCall_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.start):null), (TypeRefTypeRefParserRuleCall_1_1_0!=null?((Token)TypeRefTypeRefParserRuleCall_1_1_0.stop):null), grammarAccess.getTStructFieldAccess().getTypeRefAssignment_1_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructGetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructGetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructGetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructGetter_return ruleTStructGetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructGetter_return retval = new InternalN4JSParser.ruleTStructGetter_return();
        retval.start = input.LT(1);

        Token GetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_2=null;
        Token ColonKeyword_3_0=null;
        InternalN4JSParser.ruleTypesIdentifier_return NameTypesIdentifierParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredTypeRefTypeRefParserRuleCall_3_1_0 = null;



            
        try {
            {
            {
            {
            {
            GetKeyword_0_0_1=(Token)match(input,Get,FOLLOW_171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(GetKeyword_0_0_1, grammarAccess.getTStructGetterAccess().getGetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_46);
            NameTypesIdentifierParserRuleCall_0_0_2_0=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameTypesIdentifierParserRuleCall_0_0_2_0!=null?((Token)NameTypesIdentifierParserRuleCall_0_0_2_0.start):null), (NameTypesIdentifierParserRuleCall_0_0_2_0!=null?((Token)NameTypesIdentifierParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructGetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_48); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructGetterAccess().getLeftParenthesisKeyword_1()); 
            }
            RightParenthesisKeyword_2=(Token)match(input,RightParenthesis,FOLLOW_42); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_2, grammarAccess.getTStructGetterAccess().getRightParenthesisKeyword_2()); 
            }
            int alt593=2;
            int LA593_0 = input.LA(1);

            if ( (LA593_0==Colon) ) {
                alt593=1;
            }
            switch (alt593) {
                case 1 :
                    {
                    ColonKeyword_3_0=(Token)match(input,Colon,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ColonKeyword_3_0, grammarAccess.getTStructGetterAccess().getColonKeyword_3_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredTypeRefTypeRefParserRuleCall_3_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.start):null), (DeclaredTypeRefTypeRefParserRuleCall_3_1_0!=null?((Token)DeclaredTypeRefTypeRefParserRuleCall_3_1_0.stop):null), grammarAccess.getTStructGetterAccess().getDeclaredTypeRefAssignment_3_1()); 
                    }

                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTStructSetter() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTStructSetter();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTStructSetter_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTStructSetter_return ruleTStructSetter() throws RecognitionException {
        InternalN4JSParser.ruleTStructSetter_return retval = new InternalN4JSParser.ruleTStructSetter_return();
        retval.start = input.LT(1);

        Token SetKeyword_0_0_1=null;
        Token LeftParenthesisKeyword_1=null;
        Token RightParenthesisKeyword_3=null;
        InternalN4JSParser.ruleTypesIdentifier_return NameTypesIdentifierParserRuleCall_0_0_2_0 = null;

        InternalN4JSParser.ruleTAnonymousFormalParameter_return FparTAnonymousFormalParameterParserRuleCall_2_0 = null;



            
        try {
            {
            {
            {
            {
            SetKeyword_0_0_1=(Token)match(input,Set,FOLLOW_171); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(SetKeyword_0_0_1, grammarAccess.getTStructSetterAccess().getSetKeyword_0_0_1()); 
            }
            {
            {
            pushFollow(FOLLOW_46);
            NameTypesIdentifierParserRuleCall_0_0_2_0=ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((NameTypesIdentifierParserRuleCall_0_0_2_0!=null?((Token)NameTypesIdentifierParserRuleCall_0_0_2_0.start):null), (NameTypesIdentifierParserRuleCall_0_0_2_0!=null?((Token)NameTypesIdentifierParserRuleCall_0_0_2_0.stop):null), grammarAccess.getTStructSetterAccess().getNameAssignment_0_0_2()); 
            }

            }


            }


            }


            }

            LeftParenthesisKeyword_1=(Token)match(input,LeftParenthesis,FOLLOW_53); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftParenthesisKeyword_1, grammarAccess.getTStructSetterAccess().getLeftParenthesisKeyword_1()); 
            }
            {
            {
            pushFollow(FOLLOW_48);
            FparTAnonymousFormalParameterParserRuleCall_2_0=ruleTAnonymousFormalParameter();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.start):null), (FparTAnonymousFormalParameterParserRuleCall_2_0!=null?((Token)FparTAnonymousFormalParameterParserRuleCall_2_0.stop):null), grammarAccess.getTStructSetterAccess().getFparAssignment_2()); 
            }

            }


            }

            RightParenthesisKeyword_3=(Token)match(input,RightParenthesis,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightParenthesisKeyword_3, grammarAccess.getTStructSetterAccess().getRightParenthesisKeyword_3()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleParameterizedTypeRefNominal() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleParameterizedTypeRefNominal();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleParameterizedTypeRefNominal_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleParameterizedTypeRefNominal_return ruleParameterizedTypeRefNominal() throws RecognitionException {
        InternalN4JSParser.ruleParameterizedTypeRefNominal_return retval = new InternalN4JSParser.ruleParameterizedTypeRefNominal_return();
        retval.start = input.LT(1);

        Token LessThanSignKeyword_1_0=null;
        Token CommaKeyword_1_2_0=null;
        Token GreaterThanSignKeyword_1_3=null;
        InternalN4JSParser.ruleTypeReferenceName_return DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_1_0 = null;

        InternalN4JSParser.ruleTypeArgument_return TypeArgsTypeArgumentParserRuleCall_1_2_1_0 = null;



            
        try {
            {
            {
            {
            {
            pushFollow(FOLLOW_172);
            DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1=ruleTypeReferenceName();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.start):null), (DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1!=null?((Token)DeclaredTypeTypeTypeReferenceNameParserRuleCall_0_0_1.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getDeclaredTypeAssignment_0()); 
            }

            }


            }
            int alt595=2;
            alt595 = dfa595.predict(input);
            switch (alt595) {
                case 1 :
                    {
                    {
                    LessThanSignKeyword_1_0=(Token)match(input,LessThanSign,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(LessThanSignKeyword_1_0, grammarAccess.getParameterizedTypeRefNominalAccess().getLessThanSignKeyword_1_0()); 
                    }

                    }
                    {
                    {
                    pushFollow(FOLLOW_16);
                    TypeArgsTypeArgumentParserRuleCall_1_1_0=ruleTypeArgument();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_1()); 
                    }

                    }


                    }
                    loop594:
                    do {
                        int alt594=2;
                        int LA594_0 = input.LA(1);

                        if ( (LA594_0==Comma) ) {
                            alt594=1;
                        }


                        switch (alt594) {
                    	case 1 :
                    	    {
                    	    CommaKeyword_1_2_0=(Token)match(input,Comma,FOLLOW_43); if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce(CommaKeyword_1_2_0, grammarAccess.getParameterizedTypeRefNominalAccess().getCommaKeyword_1_2_0()); 
                    	    }
                    	    {
                    	    {
                    	    pushFollow(FOLLOW_16);
                    	    TypeArgsTypeArgumentParserRuleCall_1_2_1_0=ruleTypeArgument();

                    	    state._fsp--;
                    	    if (state.failed) return retval;
                    	    if ( state.backtracking==0 ) {
                    	       announce((TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.start):null), (TypeArgsTypeArgumentParserRuleCall_1_2_1_0!=null?((Token)TypeArgsTypeArgumentParserRuleCall_1_2_1_0.stop):null), grammarAccess.getParameterizedTypeRefNominalAccess().getTypeArgsAssignment_1_2_1()); 
                    	    }

                    	    }


                    	    }


                    	    }
                    	    break;

                    	default :
                    	    break loop594;
                        }
                    } while (true);

                    GreaterThanSignKeyword_1_3=(Token)match(input,GreaterThanSign,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GreaterThanSignKeyword_1_3, grammarAccess.getParameterizedTypeRefNominalAccess().getGreaterThanSignKeyword_1_3()); 
                    }

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyUseSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyUseSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyUseSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return ruleTypingStrategyUseSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyUseSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword_0=null;
        Token TildeKeyword_1_0=null;


            
        try {
            {
            {
            TildeKeyword_0=(Token)match(input,Tilde,FOLLOW_173); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_0()); 
            }
            int alt596=3;
            int LA596_0 = input.LA(1);

            if ( (LA596_0==Tilde) ) {
                alt596=1;
            }
            else if ( (LA596_0==RULE_STRUCTMODSUFFIX) ) {
                alt596=2;
            }
            switch (alt596) {
                case 1 :
                    {
                    TildeKeyword_1_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TildeKeyword_1_0, grammarAccess.getTypingStrategyUseSiteOperatorAccess().getTildeKeyword_1_0()); 
                    }

                    }
                    break;
                case 2 :
                    {
                    match(input,RULE_STRUCTMODSUFFIX,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypingStrategyDefSiteOperator() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypingStrategyDefSiteOperator();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypingStrategyDefSiteOperator_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return ruleTypingStrategyDefSiteOperator() throws RecognitionException {
        InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return retval = new InternalN4JSParser.ruleTypingStrategyDefSiteOperator_return();
        retval.start = input.LT(1);

        Token TildeKeyword=null;


            
        try {
            {
            TildeKeyword=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TildeKeyword, grammarAccess.getTypingStrategyDefSiteOperatorAccess().getTildeKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleConstructorTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleConstructorTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleConstructorTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleConstructorTypeRef_return ruleConstructorTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleConstructorTypeRef_return retval = new InternalN4JSParser.ruleConstructorTypeRef_return();
        retval.start = input.LT(1);

        Token ConstructorKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSParser.ruleTypeRefInClassifierType_return StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0 = null;



            
        try {
            {
            {
            ConstructorKeyword_1=(Token)match(input,Constructor,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(ConstructorKeyword_1, grammarAccess.getConstructorTypeRefAccess().getConstructorKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getConstructorTypeRefAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_24);
            StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0=ruleTypeRefInClassifierType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0!=null?((Token)StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0.start):null), (StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0!=null?((Token)StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0.stop):null), grammarAccess.getConstructorTypeRefAccess().getStaticTypeRefAssignment_3()); 
            }

            }


            }

            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_4, grammarAccess.getConstructorTypeRefAccess().getRightCurlyBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleClassifierTypeRef() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleClassifierTypeRef();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleClassifierTypeRef_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleClassifierTypeRef_return ruleClassifierTypeRef() throws RecognitionException {
        InternalN4JSParser.ruleClassifierTypeRef_return retval = new InternalN4JSParser.ruleClassifierTypeRef_return();
        retval.start = input.LT(1);

        Token TypeKeyword_1=null;
        Token LeftCurlyBracketKeyword_2=null;
        Token RightCurlyBracketKeyword_4=null;
        InternalN4JSParser.ruleTypeRefInClassifierType_return StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0 = null;



            
        try {
            {
            {
            TypeKeyword_1=(Token)match(input,Type,FOLLOW_13); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(TypeKeyword_1, grammarAccess.getClassifierTypeRefAccess().getTypeKeyword_1()); 
            }
            LeftCurlyBracketKeyword_2=(Token)match(input,LeftCurlyBracket,FOLLOW_174); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(LeftCurlyBracketKeyword_2, grammarAccess.getClassifierTypeRefAccess().getLeftCurlyBracketKeyword_2()); 
            }
            {
            {
            pushFollow(FOLLOW_24);
            StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0=ruleTypeRefInClassifierType();

            state._fsp--;
            if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce((StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0!=null?((Token)StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0.start):null), (StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0!=null?((Token)StaticTypeRefTypeRefInClassifierTypeParserRuleCall_3_0.stop):null), grammarAccess.getClassifierTypeRefAccess().getStaticTypeRefAssignment_3()); 
            }

            }


            }

            RightCurlyBracketKeyword_4=(Token)match(input,RightCurlyBracket,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(RightCurlyBracketKeyword_4, grammarAccess.getClassifierTypeRefAccess().getRightCurlyBracketKeyword_4()); 
            }

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypeArgument() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypeArgument();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypeArgument_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypeArgument_return ruleTypeArgument() throws RecognitionException {
        InternalN4JSParser.ruleTypeArgument_return retval = new InternalN4JSParser.ruleTypeArgument_return();
        retval.start = input.LT(1);

        InternalN4JSParser.ruleWildcard_return WildcardParserRuleCall_0 = null;

        InternalN4JSParser.ruleTypeRef_return TypeRefParserRuleCall_1 = null;



            
        try {
            {
            int alt597=2;
            int LA597_0 = input.LA(1);

            if ( (LA597_0==QuestionMark) ) {
                int LA597_1 = input.LA(2);

                if ( (synpred322_InternalN4JSParser()) ) {
                    alt597=1;
                }
                else if ( (true) ) {
                    alt597=2;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return retval;}
                    NoViableAltException nvae =
                        new NoViableAltException("", 597, 1, input);

                    throw nvae;
                }
            }
            else if ( ((LA597_0>=Intersection && LA597_0<=Constructor)||LA597_0==Promisify||LA597_0==Target||LA597_0==Await_1||LA597_0==Union||LA597_0==This||LA597_0==This_1||(LA597_0>=Type && LA597_0<=Void)||LA597_0==LeftCurlyBracket||LA597_0==Tilde||LA597_0==RULE_IDENTIFIER) ) {
                alt597=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 597, 0, input);

                throw nvae;
            }
            switch (alt597) {
                case 1 :
                    {
                    {
                    pushFollow(FOLLOW_2);
                    WildcardParserRuleCall_0=ruleWildcard();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.start):null), (WildcardParserRuleCall_0!=null?((Token)WildcardParserRuleCall_0.stop):null), grammarAccess.getTypeArgumentAccess().getWildcardParserRuleCall_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    pushFollow(FOLLOW_2);
                    TypeRefParserRuleCall_1=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((TypeRefParserRuleCall_1!=null?((Token)TypeRefParserRuleCall_1.start):null), (TypeRefParserRuleCall_1!=null?((Token)TypeRefParserRuleCall_1.stop):null), grammarAccess.getTypeArgumentAccess().getTypeRefParserRuleCall_1()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleWildcard() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleWildcard();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleWildcard_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleWildcard_return ruleWildcard() throws RecognitionException {
        InternalN4JSParser.ruleWildcard_return retval = new InternalN4JSParser.ruleWildcard_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword_0_0_1=null;
        Token ExtendsKeyword_1_0_0=null;
        Token SuperKeyword_1_1_0=null;
        InternalN4JSParser.ruleTypeRef_return DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0 = null;

        InternalN4JSParser.ruleTypeRef_return DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0 = null;



            
        try {
            {
            {
            {
            {
            QuestionMarkKeyword_0_0_1=(Token)match(input,QuestionMark,FOLLOW_175); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword_0_0_1, grammarAccess.getWildcardAccess().getQuestionMarkKeyword_0_0_1()); 
            }

            }


            }
            int alt598=3;
            int LA598_0 = input.LA(1);

            if ( (LA598_0==Extends) ) {
                alt598=1;
            }
            else if ( (LA598_0==Super) ) {
                alt598=2;
            }
            switch (alt598) {
                case 1 :
                    {
                    {
                    ExtendsKeyword_1_0_0=(Token)match(input,Extends,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ExtendsKeyword_1_0_0, grammarAccess.getWildcardAccess().getExtendsKeyword_1_0_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.start):null), (DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0!=null?((Token)DeclaredUpperBoundTypeRefParserRuleCall_1_0_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredUpperBoundAssignment_1_0_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SuperKeyword_1_1_0=(Token)match(input,Super,FOLLOW_43); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SuperKeyword_1_1_0, grammarAccess.getWildcardAccess().getSuperKeyword_1_1_0()); 
                    }
                    {
                    {
                    pushFollow(FOLLOW_2);
                    DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0=ruleTypeRef();

                    state._fsp--;
                    if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce((DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.start):null), (DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0!=null?((Token)DeclaredLowerBoundTypeRefParserRuleCall_1_1_1_0.stop):null), grammarAccess.getWildcardAccess().getDeclaredLowerBoundAssignment_1_1_1()); 
                    }

                    }


                    }


                    }


                    }
                    break;

            }


            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleUndefModifierToken() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleUndefModifierToken();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleUndefModifierToken_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleUndefModifierToken_return ruleUndefModifierToken() throws RecognitionException {
        InternalN4JSParser.ruleUndefModifierToken_return retval = new InternalN4JSParser.ruleUndefModifierToken_return();
        retval.start = input.LT(1);

        Token QuestionMarkKeyword=null;


            
        try {
            {
            QuestionMarkKeyword=(Token)match(input,QuestionMark,FOLLOW_2); if (state.failed) return retval;
            if ( state.backtracking==0 ) {
               announce(QuestionMarkKeyword, grammarAccess.getUndefModifierTokenAccess().getQuestionMarkKeyword()); 
            }

            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTypesIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTypesIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTypesIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTypesIdentifier_return ruleTypesIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleTypesIdentifier_return retval = new InternalN4JSParser.ruleTypesIdentifier_return();
        retval.start = input.LT(1);

        Token GetKeyword_1=null;
        Token SetKeyword_2=null;
        Token AbstractKeyword_3=null;
        Token ProjectKeyword_4=null;
        Token UnionKeyword_5=null;
        Token IntersectionKeyword_6=null;
        Token AsKeyword_7=null;
        Token FromKeyword_8=null;
        Token TypeKeyword_9=null;
        Token VoidKeyword_10=null;
        Token NullKeyword_11=null;


            
        try {
            {
            int alt599=12;
            switch ( input.LA(1) ) {
            case RULE_IDENTIFIER:
                {
                alt599=1;
                }
                break;
            case Get:
                {
                alt599=2;
                }
                break;
            case Set:
                {
                alt599=3;
                }
                break;
            case Abstract:
                {
                alt599=4;
                }
                break;
            case Project:
                {
                alt599=5;
                }
                break;
            case Union:
                {
                alt599=6;
                }
                break;
            case Intersection:
                {
                alt599=7;
                }
                break;
            case As:
                {
                alt599=8;
                }
                break;
            case From:
                {
                alt599=9;
                }
                break;
            case Type:
                {
                alt599=10;
                }
                break;
            case Void:
                {
                alt599=11;
                }
                break;
            case Null:
                {
                alt599=12;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 599, 0, input);

                throw nvae;
            }

            switch (alt599) {
                case 1 :
                    {
                    match(input,RULE_IDENTIFIER,FOLLOW_2); if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    GetKeyword_1=(Token)match(input,Get,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(GetKeyword_1, grammarAccess.getTypesIdentifierAccess().getGetKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    SetKeyword_2=(Token)match(input,Set,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(SetKeyword_2, grammarAccess.getTypesIdentifierAccess().getSetKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    AbstractKeyword_3=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AbstractKeyword_3, grammarAccess.getTypesIdentifierAccess().getAbstractKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ProjectKeyword_4=(Token)match(input,Project,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ProjectKeyword_4, grammarAccess.getTypesIdentifierAccess().getProjectKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    UnionKeyword_5=(Token)match(input,Union,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(UnionKeyword_5, grammarAccess.getTypesIdentifierAccess().getUnionKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    IntersectionKeyword_6=(Token)match(input,Intersection,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(IntersectionKeyword_6, grammarAccess.getTypesIdentifierAccess().getIntersectionKeyword_6()); 
                    }

                    }
                    break;
                case 8 :
                    {
                    AsKeyword_7=(Token)match(input,As,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(AsKeyword_7, grammarAccess.getTypesIdentifierAccess().getAsKeyword_7()); 
                    }

                    }
                    break;
                case 9 :
                    {
                    FromKeyword_8=(Token)match(input,From,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(FromKeyword_8, grammarAccess.getTypesIdentifierAccess().getFromKeyword_8()); 
                    }

                    }
                    break;
                case 10 :
                    {
                    TypeKeyword_9=(Token)match(input,Type,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(TypeKeyword_9, grammarAccess.getTypesIdentifierAccess().getTypeKeyword_9()); 
                    }

                    }
                    break;
                case 11 :
                    {
                    VoidKeyword_10=(Token)match(input,Void,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(VoidKeyword_10, grammarAccess.getTypesIdentifierAccess().getVoidKeyword_10()); 
                    }

                    }
                    break;
                case 12 :
                    {
                    NullKeyword_11=(Token)match(input,Null,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(NullKeyword_11, grammarAccess.getTypesIdentifierAccess().getNullKeyword_11()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void entryRuleTIdentifier() throws RecognitionException {
        try {
            {
            pushFollow(FOLLOW_1);
            ruleTIdentifier();

            state._fsp--;
            if (state.failed) return ;
            match(input,EOF,FOLLOW_2); if (state.failed) return ;

            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }

    public static class ruleTIdentifier_return extends ParserRuleReturnScope {
    };
    public final InternalN4JSParser.ruleTIdentifier_return ruleTIdentifier() throws RecognitionException {
        InternalN4JSParser.ruleTIdentifier_return retval = new InternalN4JSParser.ruleTIdentifier_return();
        retval.start = input.LT(1);

        Token ImplementsKeyword_1=null;
        Token InterfaceKeyword_2=null;
        Token PrivateKeyword_3=null;
        Token ProtectedKeyword_4=null;
        Token PublicKeyword_5=null;
        Token StaticKeyword_6=null;


            
        try {
            {
            int alt600=7;
            switch ( input.LA(1) ) {
            case Intersection:
            case Abstract:
            case Project:
            case Union:
            case From:
            case Null:
            case Type:
            case Void:
            case Get:
            case Set:
            case As:
            case RULE_IDENTIFIER:
                {
                alt600=1;
                }
                break;
            case Implements:
                {
                alt600=2;
                }
                break;
            case Interface:
                {
                alt600=3;
                }
                break;
            case Private:
                {
                alt600=4;
                }
                break;
            case Protected:
                {
                alt600=5;
                }
                break;
            case Public:
                {
                alt600=6;
                }
                break;
            case Static:
                {
                alt600=7;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return retval;}
                NoViableAltException nvae =
                    new NoViableAltException("", 600, 0, input);

                throw nvae;
            }

            switch (alt600) {
                case 1 :
                    {
                    pushFollow(FOLLOW_2);
                    ruleTypesIdentifier();

                    state._fsp--;
                    if (state.failed) return retval;

                    }
                    break;
                case 2 :
                    {
                    ImplementsKeyword_1=(Token)match(input,Implements,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ImplementsKeyword_1, grammarAccess.getTIdentifierAccess().getImplementsKeyword_1()); 
                    }

                    }
                    break;
                case 3 :
                    {
                    InterfaceKeyword_2=(Token)match(input,Interface,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(InterfaceKeyword_2, grammarAccess.getTIdentifierAccess().getInterfaceKeyword_2()); 
                    }

                    }
                    break;
                case 4 :
                    {
                    PrivateKeyword_3=(Token)match(input,Private,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PrivateKeyword_3, grammarAccess.getTIdentifierAccess().getPrivateKeyword_3()); 
                    }

                    }
                    break;
                case 5 :
                    {
                    ProtectedKeyword_4=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedKeyword_4, grammarAccess.getTIdentifierAccess().getProtectedKeyword_4()); 
                    }

                    }
                    break;
                case 6 :
                    {
                    PublicKeyword_5=(Token)match(input,Public,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(PublicKeyword_5, grammarAccess.getTIdentifierAccess().getPublicKeyword_5()); 
                    }

                    }
                    break;
                case 7 :
                    {
                    StaticKeyword_6=(Token)match(input,Static,FOLLOW_2); if (state.failed) return retval;
                    if ( state.backtracking==0 ) {
                       announce(StaticKeyword_6, grammarAccess.getTIdentifierAccess().getStaticKeyword_6()); 
                    }

                    }
                    break;

            }


            }

            retval.stop = input.LT(-1);

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return retval;
    }
    public final void ruleVariableStatementKeyword() throws RecognitionException {
        Token VarVarKeyword_0_0=null;
        Token ConstConstKeyword_1_0=null;
        Token LetLetKeyword_2_0=null;

        try {
            {
            int alt601=3;
            switch ( input.LA(1) ) {
            case Var:
                {
                alt601=1;
                }
                break;
            case Const:
                {
                alt601=2;
                }
                break;
            case Let:
                {
                alt601=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 601, 0, input);

                throw nvae;
            }

            switch (alt601) {
                case 1 :
                    {
                    {
                    VarVarKeyword_0_0=(Token)match(input,Var,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VarVarKeyword_0_0, grammarAccess.getVariableStatementKeywordAccess().getVarEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ConstConstKeyword_1_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_1_0, grammarAccess.getVariableStatementKeywordAccess().getConstEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    LetLetKeyword_2_0=(Token)match(input,Let,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(LetLetKeyword_2_0, grammarAccess.getVariableStatementKeywordAccess().getLetEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void rulePostfixOperator() throws RecognitionException {
        Token IncPlusSignPlusSignKeyword_0_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt602=2;
            int LA602_0 = input.LA(1);

            if ( (LA602_0==PlusSignPlusSign) ) {
                alt602=1;
            }
            else if ( (LA602_0==HyphenMinusHyphenMinus) ) {
                alt602=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 602, 0, input);

                throw nvae;
            }
            switch (alt602) {
                case 1 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_0_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_0_0, grammarAccess.getPostfixOperatorAccess().getIncEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_1_0, grammarAccess.getPostfixOperatorAccess().getDecEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleUnaryOperator() throws RecognitionException {
        Token DeleteDeleteKeyword_0_0=null;
        Token VoidVoidKeyword_1_0=null;
        Token TypeofTypeofKeyword_2_0=null;
        Token IncPlusSignPlusSignKeyword_3_0=null;
        Token DecHyphenMinusHyphenMinusKeyword_4_0=null;
        Token PosPlusSignKeyword_5_0=null;
        Token NegHyphenMinusKeyword_6_0=null;
        Token InvTildeKeyword_7_0=null;
        Token NotExclamationMarkKeyword_8_0=null;

        try {
            {
            int alt603=9;
            switch ( input.LA(1) ) {
            case Delete:
                {
                alt603=1;
                }
                break;
            case Void:
                {
                alt603=2;
                }
                break;
            case Typeof:
                {
                alt603=3;
                }
                break;
            case PlusSignPlusSign:
                {
                alt603=4;
                }
                break;
            case HyphenMinusHyphenMinus:
                {
                alt603=5;
                }
                break;
            case PlusSign:
                {
                alt603=6;
                }
                break;
            case HyphenMinus:
                {
                alt603=7;
                }
                break;
            case Tilde:
                {
                alt603=8;
                }
                break;
            case ExclamationMark:
                {
                alt603=9;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 603, 0, input);

                throw nvae;
            }

            switch (alt603) {
                case 1 :
                    {
                    {
                    DeleteDeleteKeyword_0_0=(Token)match(input,Delete,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DeleteDeleteKeyword_0_0, grammarAccess.getUnaryOperatorAccess().getDeleteEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    VoidVoidKeyword_1_0=(Token)match(input,Void,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(VoidVoidKeyword_1_0, grammarAccess.getUnaryOperatorAccess().getVoidEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    TypeofTypeofKeyword_2_0=(Token)match(input,Typeof,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TypeofTypeofKeyword_2_0, grammarAccess.getUnaryOperatorAccess().getTypeofEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    IncPlusSignPlusSignKeyword_3_0=(Token)match(input,PlusSignPlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(IncPlusSignPlusSignKeyword_3_0, grammarAccess.getUnaryOperatorAccess().getIncEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    DecHyphenMinusHyphenMinusKeyword_4_0=(Token)match(input,HyphenMinusHyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DecHyphenMinusHyphenMinusKeyword_4_0, grammarAccess.getUnaryOperatorAccess().getDecEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    PosPlusSignKeyword_5_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PosPlusSignKeyword_5_0, grammarAccess.getUnaryOperatorAccess().getPosEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    NegHyphenMinusKeyword_6_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NegHyphenMinusKeyword_6_0, grammarAccess.getUnaryOperatorAccess().getNegEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    InvTildeKeyword_7_0=(Token)match(input,Tilde,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(InvTildeKeyword_7_0, grammarAccess.getUnaryOperatorAccess().getInvEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;
                case 9 :
                    {
                    {
                    NotExclamationMarkKeyword_8_0=(Token)match(input,ExclamationMark,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NotExclamationMarkKeyword_8_0, grammarAccess.getUnaryOperatorAccess().getNotEnumLiteralDeclaration_8()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleMultiplicativeOperator() throws RecognitionException {
        Token TimesAsteriskKeyword_0_0=null;
        Token DivSolidusKeyword_1_0=null;
        Token ModPercentSignKeyword_2_0=null;

        try {
            {
            int alt604=3;
            switch ( input.LA(1) ) {
            case Asterisk:
                {
                alt604=1;
                }
                break;
            case Solidus:
                {
                alt604=2;
                }
                break;
            case PercentSign:
                {
                alt604=3;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 604, 0, input);

                throw nvae;
            }

            switch (alt604) {
                case 1 :
                    {
                    {
                    TimesAsteriskKeyword_0_0=(Token)match(input,Asterisk,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(TimesAsteriskKeyword_0_0, grammarAccess.getMultiplicativeOperatorAccess().getTimesEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    DivSolidusKeyword_1_0=(Token)match(input,Solidus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(DivSolidusKeyword_1_0, grammarAccess.getMultiplicativeOperatorAccess().getDivEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ModPercentSignKeyword_2_0=(Token)match(input,PercentSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ModPercentSignKeyword_2_0, grammarAccess.getMultiplicativeOperatorAccess().getModEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleAdditiveOperator() throws RecognitionException {
        Token AddPlusSignKeyword_0_0=null;
        Token SubHyphenMinusKeyword_1_0=null;

        try {
            {
            int alt605=2;
            int LA605_0 = input.LA(1);

            if ( (LA605_0==PlusSign) ) {
                alt605=1;
            }
            else if ( (LA605_0==HyphenMinus) ) {
                alt605=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 605, 0, input);

                throw nvae;
            }
            switch (alt605) {
                case 1 :
                    {
                    {
                    AddPlusSignKeyword_0_0=(Token)match(input,PlusSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AddPlusSignKeyword_0_0, grammarAccess.getAdditiveOperatorAccess().getAddEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    SubHyphenMinusKeyword_1_0=(Token)match(input,HyphenMinus,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SubHyphenMinusKeyword_1_0, grammarAccess.getAdditiveOperatorAccess().getSubEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleEqualityOperator() throws RecognitionException {
        Token SameEqualsSignEqualsSignEqualsSignKeyword_0_0=null;
        Token NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=null;
        Token EqEqualsSignEqualsSignKeyword_2_0=null;
        Token NeqExclamationMarkEqualsSignKeyword_3_0=null;

        try {
            {
            int alt606=4;
            switch ( input.LA(1) ) {
            case EqualsSignEqualsSignEqualsSign:
                {
                alt606=1;
                }
                break;
            case ExclamationMarkEqualsSignEqualsSign:
                {
                alt606=2;
                }
                break;
            case EqualsSignEqualsSign:
                {
                alt606=3;
                }
                break;
            case ExclamationMarkEqualsSign:
                {
                alt606=4;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 606, 0, input);

                throw nvae;
            }

            switch (alt606) {
                case 1 :
                    {
                    {
                    SameEqualsSignEqualsSignEqualsSignKeyword_0_0=(Token)match(input,EqualsSignEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(SameEqualsSignEqualsSignEqualsSignKeyword_0_0, grammarAccess.getEqualityOperatorAccess().getSameEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0=(Token)match(input,ExclamationMarkEqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NsameExclamationMarkEqualsSignEqualsSignKeyword_1_0, grammarAccess.getEqualityOperatorAccess().getNsameEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    EqEqualsSignEqualsSignKeyword_2_0=(Token)match(input,EqualsSignEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(EqEqualsSignEqualsSignKeyword_2_0, grammarAccess.getEqualityOperatorAccess().getEqEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    NeqExclamationMarkEqualsSignKeyword_3_0=(Token)match(input,ExclamationMarkEqualsSign,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(NeqExclamationMarkEqualsSignKeyword_3_0, grammarAccess.getEqualityOperatorAccess().getNeqEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void ruleN4Modifier() throws RecognitionException {
        Token PrivatePrivateKeyword_0_0=null;
        Token ProjectProjectKeyword_1_0=null;
        Token ProtectedProtectedKeyword_2_0=null;
        Token PublicPublicKeyword_3_0=null;
        Token ExternalExternalKeyword_4_0=null;
        Token AbstractAbstractKeyword_5_0=null;
        Token StaticStaticKeyword_6_0=null;
        Token ConstConstKeyword_7_0=null;

        try {
            {
            int alt607=8;
            switch ( input.LA(1) ) {
            case Private:
                {
                alt607=1;
                }
                break;
            case Project:
                {
                alt607=2;
                }
                break;
            case Protected:
                {
                alt607=3;
                }
                break;
            case Public:
                {
                alt607=4;
                }
                break;
            case External:
                {
                alt607=5;
                }
                break;
            case Abstract:
                {
                alt607=6;
                }
                break;
            case Static:
                {
                alt607=7;
                }
                break;
            case Const:
                {
                alt607=8;
                }
                break;
            default:
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 607, 0, input);

                throw nvae;
            }

            switch (alt607) {
                case 1 :
                    {
                    {
                    PrivatePrivateKeyword_0_0=(Token)match(input,Private,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PrivatePrivateKeyword_0_0, grammarAccess.getN4ModifierAccess().getPrivateEnumLiteralDeclaration_0()); 
                    }

                    }


                    }
                    break;
                case 2 :
                    {
                    {
                    ProjectProjectKeyword_1_0=(Token)match(input,Project,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProjectProjectKeyword_1_0, grammarAccess.getN4ModifierAccess().getProjectEnumLiteralDeclaration_1()); 
                    }

                    }


                    }
                    break;
                case 3 :
                    {
                    {
                    ProtectedProtectedKeyword_2_0=(Token)match(input,Protected,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ProtectedProtectedKeyword_2_0, grammarAccess.getN4ModifierAccess().getProtectedEnumLiteralDeclaration_2()); 
                    }

                    }


                    }
                    break;
                case 4 :
                    {
                    {
                    PublicPublicKeyword_3_0=(Token)match(input,Public,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(PublicPublicKeyword_3_0, grammarAccess.getN4ModifierAccess().getPublicEnumLiteralDeclaration_3()); 
                    }

                    }


                    }
                    break;
                case 5 :
                    {
                    {
                    ExternalExternalKeyword_4_0=(Token)match(input,External,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ExternalExternalKeyword_4_0, grammarAccess.getN4ModifierAccess().getExternalEnumLiteralDeclaration_4()); 
                    }

                    }


                    }
                    break;
                case 6 :
                    {
                    {
                    AbstractAbstractKeyword_5_0=(Token)match(input,Abstract,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(AbstractAbstractKeyword_5_0, grammarAccess.getN4ModifierAccess().getAbstractEnumLiteralDeclaration_5()); 
                    }

                    }


                    }
                    break;
                case 7 :
                    {
                    {
                    StaticStaticKeyword_6_0=(Token)match(input,Static,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(StaticStaticKeyword_6_0, grammarAccess.getN4ModifierAccess().getStaticEnumLiteralDeclaration_6()); 
                    }

                    }


                    }
                    break;
                case 8 :
                    {
                    {
                    ConstConstKeyword_7_0=(Token)match(input,Const,FOLLOW_2); if (state.failed) return ;
                    if ( state.backtracking==0 ) {
                       announce(ConstConstKeyword_7_0, grammarAccess.getN4ModifierAccess().getConstEnumLiteralDeclaration_7()); 
                    }

                    }


                    }
                    break;

            }


            }

        }
         
        	catch (RecognitionException re) { 
        	    recover(input,re);
        	}
        finally {
        }
        return ;
    }
    public final void synpred1_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_138); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred2_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop608:
        do {
            int alt608=2;
            int LA608_0 = input.LA(1);

            if ( ((LA608_0>=Protected && LA608_0<=Abstract)||LA608_0==External||(LA608_0>=Private && LA608_0<=Project)||LA608_0==Public||LA608_0==Static||LA608_0==Const) ) {
                alt608=1;
            }


            switch (alt608) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_7);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop608;
            }
        } while (true);

        match(input,Class,FOLLOW_176); if (state.failed) return ;
        int alt609=2;
        int LA609_0 = input.LA(1);

        if ( (LA609_0==Tilde) ) {
            alt609=1;
        }
        switch (alt609) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_177);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt610=2;
        int LA610_0 = input.LA(1);

        if ( ((LA610_0>=Intersection && LA610_0<=Implements)||(LA610_0>=Promisify && LA610_0<=Abstract)||LA610_0==External||(LA610_0>=Private && LA610_0<=Project)||LA610_0==Public||LA610_0==Static||LA610_0==Target||(LA610_0>=Await && LA610_0<=Await_1)||LA610_0==Union||(LA610_0>=Yield && LA610_0<=This)||LA610_0==From||LA610_0==Type||(LA610_0>=Get && LA610_0<=Let)||LA610_0==Set||LA610_0==As||LA610_0==Of||LA610_0==RULE_IDENTIFIER) ) {
            alt610=1;
        }
        switch (alt610) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred3_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop611:
        do {
            int alt611=2;
            int LA611_0 = input.LA(1);

            if ( ((LA611_0>=Protected && LA611_0<=Abstract)||LA611_0==External||(LA611_0>=Private && LA611_0<=Project)||LA611_0==Public||LA611_0==Static||LA611_0==Const) ) {
                alt611=1;
            }


            switch (alt611) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop611;
            }
        } while (true);

        match(input,Interface,FOLLOW_176); if (state.failed) return ;
        int alt612=2;
        int LA612_0 = input.LA(1);

        if ( (LA612_0==Tilde) ) {
            alt612=1;
        }
        switch (alt612) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_177);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt613=2;
        int LA613_0 = input.LA(1);

        if ( ((LA613_0>=Intersection && LA613_0<=Implements)||(LA613_0>=Promisify && LA613_0<=Abstract)||LA613_0==External||(LA613_0>=Private && LA613_0<=Project)||LA613_0==Public||LA613_0==Static||LA613_0==Target||(LA613_0>=Await && LA613_0<=Await_1)||LA613_0==Union||(LA613_0>=Yield && LA613_0<=This)||LA613_0==From||LA613_0==Type||(LA613_0>=Get && LA613_0<=Let)||LA613_0==Set||LA613_0==As||LA613_0==Of||LA613_0==RULE_IDENTIFIER) ) {
            alt613=1;
        }
        switch (alt613) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred4_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop614:
        do {
            int alt614=2;
            int LA614_0 = input.LA(1);

            if ( ((LA614_0>=Protected && LA614_0<=Abstract)||LA614_0==External||(LA614_0>=Private && LA614_0<=Project)||LA614_0==Public||LA614_0==Static||LA614_0==Const) ) {
                alt614=1;
            }


            switch (alt614) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_12);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop614;
            }
        } while (true);

        match(input,Enum,FOLLOW_177); if (state.failed) return ;
        int alt615=2;
        int LA615_0 = input.LA(1);

        if ( ((LA615_0>=Intersection && LA615_0<=Implements)||(LA615_0>=Promisify && LA615_0<=Abstract)||LA615_0==External||(LA615_0>=Private && LA615_0<=Project)||LA615_0==Public||LA615_0==Static||LA615_0==Target||(LA615_0>=Await && LA615_0<=Await_1)||LA615_0==Union||(LA615_0>=Yield && LA615_0<=This)||LA615_0==From||LA615_0==Type||(LA615_0>=Get && LA615_0<=Let)||LA615_0==Set||LA615_0==As||LA615_0==Of||LA615_0==RULE_IDENTIFIER) ) {
            alt615=1;
        }
        switch (alt615) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred6_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop616:
        do {
            int alt616=2;
            int LA616_0 = input.LA(1);

            if ( ((LA616_0>=Protected && LA616_0<=Abstract)||LA616_0==External||(LA616_0>=Private && LA616_0<=Project)||LA616_0==Public||LA616_0==Static||LA616_0==Const) ) {
                alt616=1;
            }


            switch (alt616) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop616;
            }
        } while (true);

        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred8_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,From,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred9_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Interface && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Project)||input.LA(1)==Public||input.LA(1)==Static||input.LA(1)==Async||(input.LA(1)>=Class && input.LA(1)<=Const)||input.LA(1)==Enum||input.LA(1)==Let||input.LA(1)==Var||input.LA(1)==CommercialAt ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred10_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_138); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred11_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop617:
        do {
            int alt617=2;
            int LA617_0 = input.LA(1);

            if ( ((LA617_0>=Protected && LA617_0<=Abstract)||LA617_0==External||(LA617_0>=Private && LA617_0<=Project)||LA617_0==Public||LA617_0==Static||LA617_0==Const) ) {
                alt617=1;
            }


            switch (alt617) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_7);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop617;
            }
        } while (true);

        match(input,Class,FOLLOW_176); if (state.failed) return ;
        int alt618=2;
        int LA618_0 = input.LA(1);

        if ( (LA618_0==Tilde) ) {
            alt618=1;
        }
        switch (alt618) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_177);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt619=2;
        int LA619_0 = input.LA(1);

        if ( ((LA619_0>=Intersection && LA619_0<=Implements)||(LA619_0>=Promisify && LA619_0<=Abstract)||LA619_0==External||(LA619_0>=Private && LA619_0<=Project)||LA619_0==Public||LA619_0==Static||LA619_0==Target||(LA619_0>=Await && LA619_0<=Await_1)||LA619_0==Union||(LA619_0>=Yield && LA619_0<=This)||LA619_0==From||LA619_0==Type||(LA619_0>=Get && LA619_0<=Let)||LA619_0==Set||LA619_0==As||LA619_0==Of||LA619_0==RULE_IDENTIFIER) ) {
            alt619=1;
        }
        switch (alt619) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred12_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop620:
        do {
            int alt620=2;
            int LA620_0 = input.LA(1);

            if ( ((LA620_0>=Protected && LA620_0<=Abstract)||LA620_0==External||(LA620_0>=Private && LA620_0<=Project)||LA620_0==Public||LA620_0==Static||LA620_0==Const) ) {
                alt620=1;
            }


            switch (alt620) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_11);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop620;
            }
        } while (true);

        match(input,Interface,FOLLOW_176); if (state.failed) return ;
        int alt621=2;
        int LA621_0 = input.LA(1);

        if ( (LA621_0==Tilde) ) {
            alt621=1;
        }
        switch (alt621) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_177);
                ruleTypingStrategyDefSiteOperator();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt622=2;
        int LA622_0 = input.LA(1);

        if ( ((LA622_0>=Intersection && LA622_0<=Implements)||(LA622_0>=Promisify && LA622_0<=Abstract)||LA622_0==External||(LA622_0>=Private && LA622_0<=Project)||LA622_0==Public||LA622_0==Static||LA622_0==Target||(LA622_0>=Await && LA622_0<=Await_1)||LA622_0==Union||(LA622_0>=Yield && LA622_0<=This)||LA622_0==From||LA622_0==Type||(LA622_0>=Get && LA622_0<=Let)||LA622_0==Set||LA622_0==As||LA622_0==Of||LA622_0==RULE_IDENTIFIER) ) {
            alt622=1;
        }
        switch (alt622) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred13_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop623:
        do {
            int alt623=2;
            int LA623_0 = input.LA(1);

            if ( ((LA623_0>=Protected && LA623_0<=Abstract)||LA623_0==External||(LA623_0>=Private && LA623_0<=Project)||LA623_0==Public||LA623_0==Static||LA623_0==Const) ) {
                alt623=1;
            }


            switch (alt623) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_12);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop623;
            }
        } while (true);

        match(input,Enum,FOLLOW_177); if (state.failed) return ;
        int alt624=2;
        int LA624_0 = input.LA(1);

        if ( ((LA624_0>=Intersection && LA624_0<=Implements)||(LA624_0>=Promisify && LA624_0<=Abstract)||LA624_0==External||(LA624_0>=Private && LA624_0<=Project)||LA624_0==Public||LA624_0==Static||LA624_0==Target||(LA624_0>=Await && LA624_0<=Await_1)||LA624_0==Union||(LA624_0>=Yield && LA624_0<=This)||LA624_0==From||LA624_0==Type||(LA624_0>=Get && LA624_0<=Let)||LA624_0==Set||LA624_0==As||LA624_0==Of||LA624_0==RULE_IDENTIFIER) ) {
            alt624=1;
        }
        switch (alt624) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_2);
                ruleBindingIdentifier();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred17_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred20_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred21_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred22_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred23_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred24_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred25_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred26_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred35_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_60); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred36_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred39_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_60); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred40_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred43_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_60); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred44_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred47_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_60); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred48_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred49_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred50_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred53_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred54_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop656:
        do {
            int alt656=2;
            int LA656_0 = input.LA(1);

            if ( ((LA656_0>=Protected && LA656_0<=Abstract)||LA656_0==External||(LA656_0>=Private && LA656_0<=Project)||LA656_0==Public||LA656_0==Static||LA656_0==Const) ) {
                alt656=1;
            }


            switch (alt656) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop656;
            }
        } while (true);

        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred55_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred56_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_90);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred57_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred58_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop657:
        do {
            int alt657=2;
            int LA657_0 = input.LA(1);

            if ( ((LA657_0>=Protected && LA657_0<=Abstract)||LA657_0==External||(LA657_0>=Private && LA657_0<=Project)||LA657_0==Public||LA657_0==Static||LA657_0==Const) ) {
                alt657=1;
            }


            switch (alt657) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_6);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop657;
            }
        } while (true);

        pushFollow(FOLLOW_49);
        ruleAsyncNoTrailingLineBreak();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred59_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleVariableStatementKeyword();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred60_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_90);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred61_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_138); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred62_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_138); if (state.failed) return ;
        if ( input.LA(1)==Target||input.LA(1)==This||input.LA(1)==RULE_IDENTIFIER ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred65_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred66_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred67_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred68_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred69_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred70_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred79_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred80_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred81_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred82_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred83_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_42);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt658=2;
        int LA658_0 = input.LA(1);

        if ( (LA658_0==Colon) ) {
            alt658=1;
        }
        switch (alt658) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred84_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_42);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt659=2;
        int LA659_0 = input.LA(1);

        if ( (LA659_0==Colon) ) {
            alt659=1;
        }
        switch (alt659) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred85_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_42);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt660=2;
        int LA660_0 = input.LA(1);

        if ( (LA660_0==Colon) ) {
            alt660=1;
        }
        switch (alt660) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred86_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_42);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt661=2;
        int LA661_0 = input.LA(1);

        if ( (LA661_0==Colon) ) {
            alt661=1;
        }
        switch (alt661) {
            case 1 :
                {
                pushFollow(FOLLOW_2);
                ruleColonSepTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }


        }


        }
    }
    public final void synpred87_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred88_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred91_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred92_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,Else,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred93_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred94_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        pushFollow(FOLLOW_2);
        ruleSemi();

        state._fsp--;
        if (state.failed) return ;

        }
    }
    public final void synpred95_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_78);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_61); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_48);
        norm1_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred96_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred97_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_79);
        ruleBindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt662=2;
        int LA662_0 = input.LA(1);

        if ( (LA662_0==In) ) {
            alt662=1;
        }
        else if ( (LA662_0==Of) ) {
            alt662=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 662, 0, input);

            throw nvae;
        }
        switch (alt662) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_130); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_130); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt663=2;
        int LA663_0 = input.LA(1);

        if ( ((LA663_0>=Intersection && LA663_0<=Implements)||(LA663_0>=Promisify && LA663_0<=Abstract)||(LA663_0>=External && LA663_0<=Function)||(LA663_0>=Private && LA663_0<=Delete)||LA663_0==Public||LA663_0==Static||(LA663_0>=Target && LA663_0<=Await_1)||LA663_0==Class||(LA663_0>=False && LA663_0<=Super)||LA663_0==Union||(LA663_0>=Yield && LA663_0<=This)||(LA663_0>=From && LA663_0<=Void)||(LA663_0>=Get && LA663_0<=Set)||LA663_0==PlusSignPlusSign||LA663_0==HyphenMinusHyphenMinus||LA663_0==SolidusEqualsSign||LA663_0==As||LA663_0==Of||LA663_0==ExclamationMark||LA663_0==LeftParenthesis||LA663_0==PlusSign||LA663_0==HyphenMinus||LA663_0==Solidus||LA663_0==LessThanSign||(LA663_0>=CommercialAt && LA663_0<=LeftSquareBracket)||LA663_0==LeftCurlyBracket||LA663_0==Tilde||LA663_0==RULE_DOUBLE||(LA663_0>=RULE_HEX_INT && LA663_0<=RULE_LEGACY_OCTAL_INT)||LA663_0==RULE_SCIENTIFIC_INT||LA663_0==RULE_IDENTIFIER||LA663_0==RULE_STRING||(LA663_0>=RULE_TEMPLATE_HEAD && LA663_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA663_0==RULE_INT) ) {
            alt663=1;
        }
        switch (alt663) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred98_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred99_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_78);
        ruleLetIdentifierRef();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        match(input,In,FOLLOW_61); if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_48);
        norm3_Expression();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,RightParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred100_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( input.LA(1)==Const||input.LA(1)==Let||input.LA(1)==Var ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred101_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_79);
        norm2_BindingIdentifierAsVariableDeclaration();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        int alt664=2;
        int LA664_0 = input.LA(1);

        if ( (LA664_0==In) ) {
            alt664=1;
        }
        else if ( (LA664_0==Of) ) {
            alt664=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 664, 0, input);

            throw nvae;
        }
        switch (alt664) {
            case 1 :
                {
                {
                {
                match(input,In,FOLLOW_130); if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                match(input,Of,FOLLOW_130); if (state.failed) return ;

                }


                }


                }
                break;

        }
        int alt665=2;
        int LA665_0 = input.LA(1);

        if ( ((LA665_0>=Intersection && LA665_0<=Implements)||(LA665_0>=Promisify && LA665_0<=Abstract)||(LA665_0>=External && LA665_0<=Function)||(LA665_0>=Private && LA665_0<=Delete)||LA665_0==Public||LA665_0==Static||(LA665_0>=Target && LA665_0<=Await_1)||LA665_0==Class||(LA665_0>=False && LA665_0<=Super)||LA665_0==Union||(LA665_0>=Yield && LA665_0<=This)||(LA665_0>=From && LA665_0<=Void)||(LA665_0>=Get && LA665_0<=Set)||LA665_0==PlusSignPlusSign||LA665_0==HyphenMinusHyphenMinus||LA665_0==SolidusEqualsSign||LA665_0==As||LA665_0==Of||LA665_0==ExclamationMark||LA665_0==LeftParenthesis||LA665_0==PlusSign||LA665_0==HyphenMinus||LA665_0==Solidus||LA665_0==LessThanSign||(LA665_0>=CommercialAt && LA665_0<=LeftSquareBracket)||LA665_0==LeftCurlyBracket||LA665_0==Tilde||LA665_0==RULE_DOUBLE||(LA665_0>=RULE_HEX_INT && LA665_0<=RULE_LEGACY_OCTAL_INT)||LA665_0==RULE_SCIENTIFIC_INT||LA665_0==RULE_IDENTIFIER||LA665_0==RULE_STRING||(LA665_0>=RULE_TEMPLATE_HEAD && LA665_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA665_0==RULE_INT) ) {
            alt665=1;
        }
        switch (alt665) {
            case 1 :
                {
                if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
                    input.consume();
                    state.errorRecovery=false;state.failed=false;
                }
                else {
                    if (state.backtracking>0) {state.failed=true; return ;}
                    MismatchedSetException mse = new MismatchedSetException(null,input);
                    throw mse;
                }


                }
                break;

        }


        }


        }
    }
    public final void synpred102_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred109_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred110_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_90);
        ruleBindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred112_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred113_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_90);
        norm1_BindingIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred117_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_55); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_49);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred118_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_55); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_49);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,Function,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred119_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt666=2;
        alt666 = dfa666.predict(input);
        switch (alt666) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }

        pushFollow(FOLLOW_90);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred120_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred121_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_155); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred122_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt667=2;
        int LA667_0 = input.LA(1);

        if ( (LA667_0==LessThanSign) ) {
            alt667=1;
        }
        switch (alt667) {
            case 1 :
                {
                pushFollow(FOLLOW_101);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt668=2;
        alt668 = dfa668.predict(input);
        switch (alt668) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_101);
                ruleTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt669=2;
        int LA669_0 = input.LA(1);

        if ( (LA669_0==Asterisk) ) {
            alt669=1;
        }
        else if ( ((LA669_0>=Intersection && LA669_0<=With)||(LA669_0>=For && LA669_0<=Var)||(LA669_0>=As && LA669_0<=Of)||LA669_0==LeftSquareBracket||LA669_0==RULE_DOUBLE||LA669_0==RULE_HEX_INT||LA669_0==RULE_OCTAL_INT||LA669_0==RULE_SCIENTIFIC_INT||LA669_0==RULE_IDENTIFIER||LA669_0==RULE_STRING||LA669_0==RULE_INT) ) {
            alt669=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 669, 0, input);

            throw nvae;
        }
        switch (alt669) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_100); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred123_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt670=2;
        alt670 = dfa670.predict(input);
        switch (alt670) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }

        pushFollow(FOLLOW_90);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred124_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred125_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_155); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred126_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt671=2;
        int LA671_0 = input.LA(1);

        if ( (LA671_0==LessThanSign) ) {
            alt671=1;
        }
        switch (alt671) {
            case 1 :
                {
                pushFollow(FOLLOW_101);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt672=2;
        alt672 = dfa672.predict(input);
        switch (alt672) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_101);
                ruleTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt673=2;
        int LA673_0 = input.LA(1);

        if ( (LA673_0==Asterisk) ) {
            alt673=1;
        }
        else if ( ((LA673_0>=Intersection && LA673_0<=With)||(LA673_0>=For && LA673_0<=Var)||(LA673_0>=As && LA673_0<=Of)||LA673_0==LeftSquareBracket||LA673_0==RULE_DOUBLE||LA673_0==RULE_HEX_INT||LA673_0==RULE_OCTAL_INT||LA673_0==RULE_SCIENTIFIC_INT||LA673_0==RULE_IDENTIFIER||LA673_0==RULE_STRING||LA673_0==RULE_INT) ) {
            alt673=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 673, 0, input);

            throw nvae;
        }
        switch (alt673) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_100); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred127_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt674=2;
        alt674 = dfa674.predict(input);
        switch (alt674) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }

        pushFollow(FOLLOW_90);
        ruleLiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred128_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred130_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_155); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred133_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt675=2;
        int LA675_0 = input.LA(1);

        if ( (LA675_0==LessThanSign) ) {
            alt675=1;
        }
        switch (alt675) {
            case 1 :
                {
                pushFollow(FOLLOW_101);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt676=2;
        alt676 = dfa676.predict(input);
        switch (alt676) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_101);
                ruleTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt677=2;
        int LA677_0 = input.LA(1);

        if ( (LA677_0==Asterisk) ) {
            alt677=1;
        }
        else if ( ((LA677_0>=Intersection && LA677_0<=With)||(LA677_0>=For && LA677_0<=Var)||(LA677_0>=As && LA677_0<=Of)||LA677_0==LeftSquareBracket||LA677_0==RULE_DOUBLE||LA677_0==RULE_HEX_INT||LA677_0==RULE_OCTAL_INT||LA677_0==RULE_SCIENTIFIC_INT||LA677_0==RULE_IDENTIFIER||LA677_0==RULE_STRING||LA677_0==RULE_INT) ) {
            alt677=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 677, 0, input);

            throw nvae;
        }
        switch (alt677) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_100); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred136_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt678=2;
        alt678 = dfa678.predict(input);
        switch (alt678) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }

        pushFollow(FOLLOW_90);
        norm1_LiteralOrComputedPropertyName();

        state._fsp--;
        if (state.failed) return ;
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred137_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred139_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_155); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred142_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt679=2;
        int LA679_0 = input.LA(1);

        if ( (LA679_0==LessThanSign) ) {
            alt679=1;
        }
        switch (alt679) {
            case 1 :
                {
                pushFollow(FOLLOW_101);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt680=2;
        alt680 = dfa680.predict(input);
        switch (alt680) {
            case 1 :
                {
                {
                pushFollow(FOLLOW_101);
                ruleTypeRef();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                break;

        }
        int alt681=2;
        int LA681_0 = input.LA(1);

        if ( (LA681_0==Asterisk) ) {
            alt681=1;
        }
        else if ( ((LA681_0>=Intersection && LA681_0<=With)||(LA681_0>=For && LA681_0<=Var)||(LA681_0>=As && LA681_0<=Of)||LA681_0==LeftSquareBracket||LA681_0==RULE_DOUBLE||LA681_0==RULE_HEX_INT||LA681_0==RULE_OCTAL_INT||LA681_0==RULE_SCIENTIFIC_INT||LA681_0==RULE_IDENTIFIER||LA681_0==RULE_STRING||LA681_0==RULE_INT) ) {
            alt681=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 681, 0, input);

            throw nvae;
        }
        switch (alt681) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_100); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred163_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred164_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred165_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_107); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred166_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred167_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred168_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred169_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_107); if (state.failed) return ;
        match(input,FullStop,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred170_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,New,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred171_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred172_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred173_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred174_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        rulePostfixOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred175_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred176_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,As,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred177_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred178_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleMultiplicativeOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred179_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred180_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred181_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_61);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        ruleAdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred182_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_61);
        ruleShiftOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }
        {
        {
        pushFollow(FOLLOW_2);
        norm1_AdditiveExpression();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred183_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_61);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred185_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_61);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred187_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_178);
        ruleRelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred189_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_178);
        norm1_RelationalOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||input.LA(1)==This||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred191_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred192_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred193_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred194_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleEqualityOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred195_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred196_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred197_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred198_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred199_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred200_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred201_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred202_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseXOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred203_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred204_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred205_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred206_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBitwiseOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred207_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred208_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred209_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred210_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalANDOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred211_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred212_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred213_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred214_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleLogicalOROperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred215_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred216_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred217_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred218_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred219_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await_1,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred220_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_133); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred221_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_60); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred222_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt696=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt696=1;
            }
            break;
        case Async:
            {
            int LA696_2 = input.LA(2);

            if ( (LA696_2==RULE_NO_LINE_TERMINATOR) && (synpred221_InternalN4JSParser())) {
                alt696=2;
            }
            else if ( (LA696_2==LeftParenthesis) && (synpred221_InternalN4JSParser())) {
                alt696=2;
            }
            else if ( (LA696_2==EqualsSignGreaterThanSign) ) {
                alt696=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 696, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Await_1:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt696=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 696, 0, input);

            throw nvae;
        }

        switch (alt696) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return ;
                int alt691=2;
                int LA691_0 = input.LA(1);

                if ( ((LA691_0>=Intersection && LA691_0<=Implements)||(LA691_0>=Promisify && LA691_0<=Abstract)||LA691_0==External||(LA691_0>=Private && LA691_0<=Project)||LA691_0==Public||LA691_0==Static||LA691_0==Target||(LA691_0>=Await && LA691_0<=Await_1)||LA691_0==Union||(LA691_0>=Yield && LA691_0<=This)||LA691_0==From||LA691_0==Type||LA691_0==FullStopFullStopFullStop||(LA691_0>=Get && LA691_0<=Let)||LA691_0==Set||LA691_0==As||LA691_0==Of||(LA691_0>=CommercialAt && LA691_0<=LeftSquareBracket)||LA691_0==LeftCurlyBracket||LA691_0==RULE_IDENTIFIER) ) {
                    alt691=1;
                }
                switch (alt691) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_52);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop690:
                        do {
                            int alt690=2;
                            int LA690_0 = input.LA(1);

                            if ( (LA690_0==Comma) ) {
                                alt690=1;
                            }


                            switch (alt690) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_57); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_52);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop690;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt692=2;
                int LA692_0 = input.LA(1);

                if ( (LA692_0==Colon) ) {
                    alt692=1;
                }
                switch (alt692) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_43); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_60); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return ;

                }


                }
                int alt694=2;
                int LA694_0 = input.LA(1);

                if ( ((LA694_0>=Intersection && LA694_0<=Implements)||(LA694_0>=Promisify && LA694_0<=Abstract)||LA694_0==External||(LA694_0>=Private && LA694_0<=Project)||LA694_0==Public||LA694_0==Static||LA694_0==Target||(LA694_0>=Await && LA694_0<=Await_1)||LA694_0==Union||(LA694_0>=Yield && LA694_0<=This)||LA694_0==From||LA694_0==Type||LA694_0==FullStopFullStopFullStop||(LA694_0>=Get && LA694_0<=Let)||LA694_0==Set||LA694_0==As||LA694_0==Of||(LA694_0>=CommercialAt && LA694_0<=LeftSquareBracket)||LA694_0==LeftCurlyBracket||LA694_0==RULE_IDENTIFIER) ) {
                    alt694=1;
                }
                switch (alt694) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_52);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop693:
                        do {
                            int alt693=2;
                            int LA693_0 = input.LA(1);

                            if ( (LA693_0==Comma) ) {
                                alt693=1;
                            }


                            switch (alt693) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_57); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_52);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop693;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt695=2;
                int LA695_0 = input.LA(1);

                if ( (LA695_0==Colon) ) {
                    alt695=1;
                }
                switch (alt695) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_43); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_59);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred223_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred224_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await_1,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred225_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_133); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred226_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_60); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred227_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt703=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt703=1;
            }
            break;
        case Async:
            {
            int LA703_2 = input.LA(2);

            if ( (LA703_2==EqualsSignGreaterThanSign) ) {
                alt703=3;
            }
            else if ( (LA703_2==RULE_NO_LINE_TERMINATOR) && (synpred226_InternalN4JSParser())) {
                alt703=2;
            }
            else if ( (LA703_2==LeftParenthesis) && (synpred226_InternalN4JSParser())) {
                alt703=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 703, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Await_1:
        case Union:
        case Yield:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt703=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 703, 0, input);

            throw nvae;
        }

        switch (alt703) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return ;
                int alt698=2;
                int LA698_0 = input.LA(1);

                if ( ((LA698_0>=Intersection && LA698_0<=Implements)||(LA698_0>=Promisify && LA698_0<=Abstract)||LA698_0==External||(LA698_0>=Private && LA698_0<=Project)||LA698_0==Public||LA698_0==Static||LA698_0==Target||(LA698_0>=Await && LA698_0<=Await_1)||LA698_0==Union||(LA698_0>=Yield && LA698_0<=This)||LA698_0==From||LA698_0==Type||LA698_0==FullStopFullStopFullStop||(LA698_0>=Get && LA698_0<=Let)||LA698_0==Set||LA698_0==As||LA698_0==Of||(LA698_0>=CommercialAt && LA698_0<=LeftSquareBracket)||LA698_0==LeftCurlyBracket||LA698_0==RULE_IDENTIFIER) ) {
                    alt698=1;
                }
                switch (alt698) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_52);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop697:
                        do {
                            int alt697=2;
                            int LA697_0 = input.LA(1);

                            if ( (LA697_0==Comma) ) {
                                alt697=1;
                            }


                            switch (alt697) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_57); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_52);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop697;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt699=2;
                int LA699_0 = input.LA(1);

                if ( (LA699_0==Colon) ) {
                    alt699=1;
                }
                switch (alt699) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_43); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_60); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return ;

                }


                }
                int alt701=2;
                int LA701_0 = input.LA(1);

                if ( ((LA701_0>=Intersection && LA701_0<=Implements)||(LA701_0>=Promisify && LA701_0<=Abstract)||LA701_0==External||(LA701_0>=Private && LA701_0<=Project)||LA701_0==Public||LA701_0==Static||LA701_0==Target||(LA701_0>=Await && LA701_0<=Await_1)||LA701_0==Union||(LA701_0>=Yield && LA701_0<=This)||LA701_0==From||LA701_0==Type||LA701_0==FullStopFullStopFullStop||(LA701_0>=Get && LA701_0<=Let)||LA701_0==Set||LA701_0==As||LA701_0==Of||(LA701_0>=CommercialAt && LA701_0<=LeftSquareBracket)||LA701_0==LeftCurlyBracket||LA701_0==RULE_IDENTIFIER) ) {
                    alt701=1;
                }
                switch (alt701) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_52);
                        ruleFormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop700:
                        do {
                            int alt700=2;
                            int LA700_0 = input.LA(1);

                            if ( (LA700_0==Comma) ) {
                                alt700=1;
                            }


                            switch (alt700) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_57); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_52);
                        	    ruleFormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop700;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt702=2;
                int LA702_0 = input.LA(1);

                if ( (LA702_0==Colon) ) {
                    alt702=1;
                }
                switch (alt702) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_43); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_59);
                ruleBindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred228_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred229_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await_1,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred230_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_133); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred231_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_60); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred232_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt710=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt710=1;
            }
            break;
        case Async:
            {
            int LA710_2 = input.LA(2);

            if ( (LA710_2==RULE_NO_LINE_TERMINATOR) && (synpred231_InternalN4JSParser())) {
                alt710=2;
            }
            else if ( (LA710_2==LeftParenthesis) && (synpred231_InternalN4JSParser())) {
                alt710=2;
            }
            else if ( (LA710_2==EqualsSignGreaterThanSign) ) {
                alt710=3;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 710, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Await_1:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt710=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 710, 0, input);

            throw nvae;
        }

        switch (alt710) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return ;
                int alt705=2;
                int LA705_0 = input.LA(1);

                if ( ((LA705_0>=Intersection && LA705_0<=Implements)||(LA705_0>=Promisify && LA705_0<=Abstract)||LA705_0==External||(LA705_0>=Private && LA705_0<=Project)||LA705_0==Public||LA705_0==Static||LA705_0==Target||(LA705_0>=Await && LA705_0<=Await_1)||LA705_0==Union||LA705_0==This||LA705_0==From||LA705_0==Type||LA705_0==FullStopFullStopFullStop||(LA705_0>=Get && LA705_0<=Let)||LA705_0==Set||LA705_0==As||LA705_0==Of||(LA705_0>=CommercialAt && LA705_0<=LeftSquareBracket)||LA705_0==LeftCurlyBracket||LA705_0==RULE_IDENTIFIER) ) {
                    alt705=1;
                }
                switch (alt705) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_52);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop704:
                        do {
                            int alt704=2;
                            int LA704_0 = input.LA(1);

                            if ( (LA704_0==Comma) ) {
                                alt704=1;
                            }


                            switch (alt704) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_57); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_52);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop704;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt706=2;
                int LA706_0 = input.LA(1);

                if ( (LA706_0==Colon) ) {
                    alt706=1;
                }
                switch (alt706) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_43); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_60); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return ;

                }


                }
                int alt708=2;
                int LA708_0 = input.LA(1);

                if ( ((LA708_0>=Intersection && LA708_0<=Implements)||(LA708_0>=Promisify && LA708_0<=Abstract)||LA708_0==External||(LA708_0>=Private && LA708_0<=Project)||LA708_0==Public||LA708_0==Static||LA708_0==Target||(LA708_0>=Await && LA708_0<=Await_1)||LA708_0==Union||LA708_0==This||LA708_0==From||LA708_0==Type||LA708_0==FullStopFullStopFullStop||(LA708_0>=Get && LA708_0<=Let)||LA708_0==Set||LA708_0==As||LA708_0==Of||(LA708_0>=CommercialAt && LA708_0<=LeftSquareBracket)||LA708_0==LeftCurlyBracket||LA708_0==RULE_IDENTIFIER) ) {
                    alt708=1;
                }
                switch (alt708) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_52);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop707:
                        do {
                            int alt707=2;
                            int LA707_0 = input.LA(1);

                            if ( (LA707_0==Comma) ) {
                                alt707=1;
                            }


                            switch (alt707) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_57); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_52);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop707;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt709=2;
                int LA709_0 = input.LA(1);

                if ( (LA709_0==Colon) ) {
                    alt709=1;
                }
                switch (alt709) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_43); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_59);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred233_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred234_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Await_1,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred235_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,CommercialAt,FOLLOW_133); if (state.failed) return ;
        match(input,Promisify,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred236_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        match(input,Async,FOLLOW_60); if (state.failed) return ;

        }


        }

        pushFollow(FOLLOW_46);
        ruleNoLineTerminator();

        state._fsp--;
        if (state.failed) return ;
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred237_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt717=3;
        switch ( input.LA(1) ) {
        case LeftParenthesis:
            {
            alt717=1;
            }
            break;
        case Async:
            {
            int LA717_2 = input.LA(2);

            if ( (LA717_2==EqualsSignGreaterThanSign) ) {
                alt717=3;
            }
            else if ( (LA717_2==RULE_NO_LINE_TERMINATOR) && (synpred236_InternalN4JSParser())) {
                alt717=2;
            }
            else if ( (LA717_2==LeftParenthesis) && (synpred236_InternalN4JSParser())) {
                alt717=2;
            }
            else {
                if (state.backtracking>0) {state.failed=true; return ;}
                NoViableAltException nvae =
                    new NoViableAltException("", 717, 2, input);

                throw nvae;
            }
            }
            break;
        case Intersection:
        case Constructor:
        case Implements:
        case Promisify:
        case Interface:
        case Protected:
        case Abstract:
        case External:
        case Private:
        case Project:
        case Public:
        case Static:
        case Target:
        case Await:
        case Await_1:
        case Union:
        case This:
        case From:
        case Type:
        case Get:
        case Let:
        case Set:
        case As:
        case Of:
        case RULE_IDENTIFIER:
            {
            alt717=3;
            }
            break;
        default:
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 717, 0, input);

            throw nvae;
        }

        switch (alt717) {
            case 1 :
                {
                {
                match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return ;
                int alt712=2;
                int LA712_0 = input.LA(1);

                if ( ((LA712_0>=Intersection && LA712_0<=Implements)||(LA712_0>=Promisify && LA712_0<=Abstract)||LA712_0==External||(LA712_0>=Private && LA712_0<=Project)||LA712_0==Public||LA712_0==Static||LA712_0==Target||(LA712_0>=Await && LA712_0<=Await_1)||LA712_0==Union||LA712_0==This||LA712_0==From||LA712_0==Type||LA712_0==FullStopFullStopFullStop||(LA712_0>=Get && LA712_0<=Let)||LA712_0==Set||LA712_0==As||LA712_0==Of||(LA712_0>=CommercialAt && LA712_0<=LeftSquareBracket)||LA712_0==LeftCurlyBracket||LA712_0==RULE_IDENTIFIER) ) {
                    alt712=1;
                }
                switch (alt712) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_52);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop711:
                        do {
                            int alt711=2;
                            int LA711_0 = input.LA(1);

                            if ( (LA711_0==Comma) ) {
                                alt711=1;
                            }


                            switch (alt711) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_57); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_52);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop711;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt713=2;
                int LA713_0 = input.LA(1);

                if ( (LA713_0==Colon) ) {
                    alt713=1;
                }
                switch (alt713) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_43); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                {
                {
                {
                match(input,Async,FOLLOW_60); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                ruleNoLineTerminator();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_56); if (state.failed) return ;

                }


                }
                int alt715=2;
                int LA715_0 = input.LA(1);

                if ( ((LA715_0>=Intersection && LA715_0<=Implements)||(LA715_0>=Promisify && LA715_0<=Abstract)||LA715_0==External||(LA715_0>=Private && LA715_0<=Project)||LA715_0==Public||LA715_0==Static||LA715_0==Target||(LA715_0>=Await && LA715_0<=Await_1)||LA715_0==Union||LA715_0==This||LA715_0==From||LA715_0==Type||LA715_0==FullStopFullStopFullStop||(LA715_0>=Get && LA715_0<=Let)||LA715_0==Set||LA715_0==As||LA715_0==Of||(LA715_0>=CommercialAt && LA715_0<=LeftSquareBracket)||LA715_0==LeftCurlyBracket||LA715_0==RULE_IDENTIFIER) ) {
                    alt715=1;
                }
                switch (alt715) {
                    case 1 :
                        {
                        {
                        {
                        pushFollow(FOLLOW_52);
                        norm1_FormalParameter();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }
                        loop714:
                        do {
                            int alt714=2;
                            int LA714_0 = input.LA(1);

                            if ( (LA714_0==Comma) ) {
                                alt714=1;
                            }


                            switch (alt714) {
                        	case 1 :
                        	    {
                        	    match(input,Comma,FOLLOW_57); if (state.failed) return ;
                        	    {
                        	    {
                        	    pushFollow(FOLLOW_52);
                        	    norm1_FormalParameter();

                        	    state._fsp--;
                        	    if (state.failed) return ;

                        	    }


                        	    }


                        	    }
                        	    break;

                        	default :
                        	    break loop714;
                            }
                        } while (true);


                        }
                        break;

                }

                match(input,RightParenthesis,FOLLOW_58); if (state.failed) return ;
                int alt716=2;
                int LA716_0 = input.LA(1);

                if ( (LA716_0==Colon) ) {
                    alt716=1;
                }
                switch (alt716) {
                    case 1 :
                        {
                        match(input,Colon,FOLLOW_43); if (state.failed) return ;
                        {
                        {
                        pushFollow(FOLLOW_59);
                        ruleTypeRef();

                        state._fsp--;
                        if (state.failed) return ;

                        }


                        }


                        }
                        break;

                }


                }


                }
                break;
            case 3 :
                {
                {
                {
                pushFollow(FOLLOW_59);
                norm1_BindingIdentifierAsFormalParameter();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,EqualsSignGreaterThanSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred238_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleAssignmentOperator();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred239_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred240_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred241_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Asterisk,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred242_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        if ( (input.LA(1)>=Intersection && input.LA(1)<=Implements)||(input.LA(1)>=Promisify && input.LA(1)<=Abstract)||(input.LA(1)>=External && input.LA(1)<=Function)||(input.LA(1)>=Private && input.LA(1)<=Delete)||input.LA(1)==Public||input.LA(1)==Static||(input.LA(1)>=Target && input.LA(1)<=Await_1)||input.LA(1)==Class||(input.LA(1)>=False && input.LA(1)<=Super)||input.LA(1)==Union||(input.LA(1)>=Yield && input.LA(1)<=This)||(input.LA(1)>=From && input.LA(1)<=Void)||(input.LA(1)>=Get && input.LA(1)<=Set)||input.LA(1)==PlusSignPlusSign||input.LA(1)==HyphenMinusHyphenMinus||input.LA(1)==SolidusEqualsSign||input.LA(1)==As||input.LA(1)==Of||input.LA(1)==ExclamationMark||input.LA(1)==LeftParenthesis||input.LA(1)==PlusSign||input.LA(1)==HyphenMinus||input.LA(1)==Solidus||input.LA(1)==LessThanSign||(input.LA(1)>=CommercialAt && input.LA(1)<=LeftSquareBracket)||input.LA(1)==LeftCurlyBracket||input.LA(1)==Tilde||input.LA(1)==RULE_DOUBLE||(input.LA(1)>=RULE_HEX_INT && input.LA(1)<=RULE_LEGACY_OCTAL_INT)||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||(input.LA(1)>=RULE_TEMPLATE_HEAD && input.LA(1)<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }
    }
    public final void synpred251_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred255_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred256_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleParameterizedTypeRefNominal();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred259_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop726:
        do {
            int alt726=2;
            int LA726_0 = input.LA(1);

            if ( ((LA726_0>=Protected && LA726_0<=Abstract)||LA726_0==External||(LA726_0>=Private && LA726_0<=Project)||LA726_0==Public||LA726_0==Static||LA726_0==Const) ) {
                alt726=1;
            }


            switch (alt726) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_150);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop726;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred260_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop727:
        do {
            int alt727=2;
            int LA727_0 = input.LA(1);

            if ( ((LA727_0>=Protected && LA727_0<=Abstract)||LA727_0==External||(LA727_0>=Private && LA727_0<=Project)||LA727_0==Public||LA727_0==Static||LA727_0==Const) ) {
                alt727=1;
            }


            switch (alt727) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop727;
            }
        } while (true);

        match(input,Set,FOLLOW_155); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred261_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop728:
        do {
            int alt728=2;
            alt728 = dfa728.predict(input);
            switch (alt728) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_99);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop728;
            }
        } while (true);
        int alt729=2;
        int LA729_0 = input.LA(1);

        if ( (LA729_0==LessThanSign) ) {
            alt729=1;
        }
        switch (alt729) {
            case 1 :
                {
                pushFollow(FOLLOW_101);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt730=2;
        int LA730_0 = input.LA(1);

        if ( (LA730_0==Asterisk) ) {
            alt730=1;
        }
        else if ( ((LA730_0>=Intersection && LA730_0<=With)||(LA730_0>=For && LA730_0<=Var)||(LA730_0>=As && LA730_0<=Of)||LA730_0==LeftSquareBracket||LA730_0==RULE_DOUBLE||LA730_0==RULE_HEX_INT||LA730_0==RULE_OCTAL_INT||LA730_0==RULE_SCIENTIFIC_INT||LA730_0==RULE_IDENTIFIER||LA730_0==RULE_STRING||LA730_0==RULE_INT) ) {
            alt730=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 730, 0, input);

            throw nvae;
        }
        switch (alt730) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_100); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred262_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop731:
        do {
            int alt731=2;
            int LA731_0 = input.LA(1);

            if ( ((LA731_0>=Protected && LA731_0<=Abstract)||LA731_0==External||(LA731_0>=Private && LA731_0<=Project)||LA731_0==Public||LA731_0==Static||LA731_0==Const) ) {
                alt731=1;
            }


            switch (alt731) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_150);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop731;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred263_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop732:
        do {
            int alt732=2;
            int LA732_0 = input.LA(1);

            if ( ((LA732_0>=Protected && LA732_0<=Abstract)||LA732_0==External||(LA732_0>=Private && LA732_0<=Project)||LA732_0==Public||LA732_0==Static||LA732_0==Const) ) {
                alt732=1;
            }


            switch (alt732) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop732;
            }
        } while (true);

        match(input,Set,FOLLOW_155); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred264_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop733:
        do {
            int alt733=2;
            alt733 = dfa733.predict(input);
            switch (alt733) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_99);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop733;
            }
        } while (true);
        int alt734=2;
        int LA734_0 = input.LA(1);

        if ( (LA734_0==LessThanSign) ) {
            alt734=1;
        }
        switch (alt734) {
            case 1 :
                {
                pushFollow(FOLLOW_101);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt735=2;
        int LA735_0 = input.LA(1);

        if ( (LA735_0==Asterisk) ) {
            alt735=1;
        }
        else if ( ((LA735_0>=Intersection && LA735_0<=With)||(LA735_0>=For && LA735_0<=Var)||(LA735_0>=As && LA735_0<=Of)||LA735_0==LeftSquareBracket||LA735_0==RULE_DOUBLE||LA735_0==RULE_HEX_INT||LA735_0==RULE_OCTAL_INT||LA735_0==RULE_SCIENTIFIC_INT||LA735_0==RULE_IDENTIFIER||LA735_0==RULE_STRING||LA735_0==RULE_INT) ) {
            alt735=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 735, 0, input);

            throw nvae;
        }
        switch (alt735) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_100); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred265_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop736:
        do {
            int alt736=2;
            int LA736_0 = input.LA(1);

            if ( ((LA736_0>=Protected && LA736_0<=Abstract)||LA736_0==External||(LA736_0>=Private && LA736_0<=Project)||LA736_0==Public||LA736_0==Static||LA736_0==Const) ) {
                alt736=1;
            }


            switch (alt736) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_150);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop736;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        ruleGetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred266_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred267_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop737:
        do {
            int alt737=2;
            int LA737_0 = input.LA(1);

            if ( ((LA737_0>=Protected && LA737_0<=Abstract)||LA737_0==External||(LA737_0>=Private && LA737_0<=Project)||LA737_0==Public||LA737_0==Static||LA737_0==Const) ) {
                alt737=1;
            }


            switch (alt737) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop737;
            }
        } while (true);

        match(input,Set,FOLLOW_155); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred269_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred270_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop738:
        do {
            int alt738=2;
            alt738 = dfa738.predict(input);
            switch (alt738) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_99);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop738;
            }
        } while (true);
        int alt739=2;
        int LA739_0 = input.LA(1);

        if ( (LA739_0==LessThanSign) ) {
            alt739=1;
        }
        switch (alt739) {
            case 1 :
                {
                pushFollow(FOLLOW_101);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt740=2;
        int LA740_0 = input.LA(1);

        if ( (LA740_0==Asterisk) ) {
            alt740=1;
        }
        else if ( ((LA740_0>=Intersection && LA740_0<=With)||(LA740_0>=For && LA740_0<=Var)||(LA740_0>=As && LA740_0<=Of)||LA740_0==LeftSquareBracket||LA740_0==RULE_DOUBLE||LA740_0==RULE_HEX_INT||LA740_0==RULE_OCTAL_INT||LA740_0==RULE_SCIENTIFIC_INT||LA740_0==RULE_IDENTIFIER||LA740_0==RULE_STRING||LA740_0==RULE_INT) ) {
            alt740=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 740, 0, input);

            throw nvae;
        }
        switch (alt740) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_100); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_46);
                ruleLiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred273_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop741:
        do {
            int alt741=2;
            int LA741_0 = input.LA(1);

            if ( ((LA741_0>=Protected && LA741_0<=Abstract)||LA741_0==External||(LA741_0>=Private && LA741_0<=Project)||LA741_0==Public||LA741_0==Static||LA741_0==Const) ) {
                alt741=1;
            }


            switch (alt741) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_150);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop741;
            }
        } while (true);

        pushFollow(FOLLOW_2);
        norm1_GetterHeader();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred274_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred275_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop742:
        do {
            int alt742=2;
            int LA742_0 = input.LA(1);

            if ( ((LA742_0>=Protected && LA742_0<=Abstract)||LA742_0==External||(LA742_0>=Private && LA742_0<=Project)||LA742_0==Public||LA742_0==Static||LA742_0==Const) ) {
                alt742=1;
            }


            switch (alt742) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_152);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop742;
            }
        } while (true);

        match(input,Set,FOLLOW_155); if (state.failed) return ;
        if ( (input.LA(1)>=Intersection && input.LA(1)<=With)||(input.LA(1)>=For && input.LA(1)<=Var)||(input.LA(1)>=As && input.LA(1)<=Of)||input.LA(1)==LeftSquareBracket||input.LA(1)==RULE_DOUBLE||input.LA(1)==RULE_HEX_INT||input.LA(1)==RULE_OCTAL_INT||input.LA(1)==RULE_SCIENTIFIC_INT||input.LA(1)==RULE_IDENTIFIER||input.LA(1)==RULE_STRING||input.LA(1)==RULE_INT ) {
            input.consume();
            state.errorRecovery=false;state.failed=false;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            MismatchedSetException mse = new MismatchedSetException(null,input);
            throw mse;
        }


        }


        }
    }
    public final void synpred277_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred278_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        loop743:
        do {
            int alt743=2;
            alt743 = dfa743.predict(input);
            switch (alt743) {
        	case 1 :
        	    {
        	    {
        	    pushFollow(FOLLOW_99);
        	    ruleN4Modifier();

        	    state._fsp--;
        	    if (state.failed) return ;

        	    }


        	    }
        	    break;

        	default :
        	    break loop743;
            }
        } while (true);
        int alt744=2;
        int LA744_0 = input.LA(1);

        if ( (LA744_0==LessThanSign) ) {
            alt744=1;
        }
        switch (alt744) {
            case 1 :
                {
                pushFollow(FOLLOW_101);
                ruleTypeVariables();

                state._fsp--;
                if (state.failed) return ;

                }
                break;

        }
        int alt745=2;
        int LA745_0 = input.LA(1);

        if ( (LA745_0==Asterisk) ) {
            alt745=1;
        }
        else if ( ((LA745_0>=Intersection && LA745_0<=With)||(LA745_0>=For && LA745_0<=Var)||(LA745_0>=As && LA745_0<=Of)||LA745_0==LeftSquareBracket||LA745_0==RULE_DOUBLE||LA745_0==RULE_HEX_INT||LA745_0==RULE_OCTAL_INT||LA745_0==RULE_SCIENTIFIC_INT||LA745_0==RULE_IDENTIFIER||LA745_0==RULE_STRING||LA745_0==RULE_INT) ) {
            alt745=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 745, 0, input);

            throw nvae;
        }
        switch (alt745) {
            case 1 :
                {
                {
                {
                {
                match(input,Asterisk,FOLLOW_100); if (state.failed) return ;

                }


                }

                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;
            case 2 :
                {
                {
                pushFollow(FOLLOW_100);
                ruleAsyncNoTrailingLineBreak();

                state._fsp--;
                if (state.failed) return ;
                pushFollow(FOLLOW_46);
                norm1_LiteralOrComputedPropertyName();

                state._fsp--;
                if (state.failed) return ;
                match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

                }


                }
                break;

        }


        }


        }
    }
    public final void synpred281_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt746=2;
        int LA746_0 = input.LA(1);

        if ( ((LA746_0>=Intersection && LA746_0<=Implements)||(LA746_0>=Promisify && LA746_0<=Abstract)||LA746_0==External||(LA746_0>=Private && LA746_0<=Project)||LA746_0==Public||LA746_0==Static||LA746_0==Target||(LA746_0>=Await && LA746_0<=Await_1)||LA746_0==Union||(LA746_0>=Yield && LA746_0<=This)||LA746_0==From||LA746_0==Type||(LA746_0>=Get && LA746_0<=Let)||LA746_0==Set||LA746_0==As||LA746_0==Of||LA746_0==RULE_IDENTIFIER) ) {
            alt746=1;
        }
        else if ( (LA746_0==RULE_STRING) ) {
            alt746=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 746, 0, input);

            throw nvae;
        }
        switch (alt746) {
            case 1 :
                {
                {
                {
                pushFollow(FOLLOW_111);
                ruleSymbolLiteralComputedName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                pushFollow(FOLLOW_111);
                ruleStringLiteralAsName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred282_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt747=2;
        int LA747_0 = input.LA(1);

        if ( ((LA747_0>=Intersection && LA747_0<=Implements)||(LA747_0>=Promisify && LA747_0<=Abstract)||LA747_0==External||(LA747_0>=Private && LA747_0<=Project)||LA747_0==Public||LA747_0==Static||LA747_0==Target||(LA747_0>=Await && LA747_0<=Await_1)||LA747_0==Union||LA747_0==This||LA747_0==From||LA747_0==Type||(LA747_0>=Get && LA747_0<=Let)||LA747_0==Set||LA747_0==As||LA747_0==Of||LA747_0==RULE_IDENTIFIER) ) {
            alt747=1;
        }
        else if ( (LA747_0==RULE_STRING) ) {
            alt747=2;
        }
        else {
            if (state.backtracking>0) {state.failed=true; return ;}
            NoViableAltException nvae =
                new NoViableAltException("", 747, 0, input);

            throw nvae;
        }
        switch (alt747) {
            case 1 :
                {
                {
                {
                pushFollow(FOLLOW_111);
                norm1_SymbolLiteralComputedName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;
            case 2 :
                {
                {
                {
                pushFollow(FOLLOW_111);
                ruleStringLiteralAsName();

                state._fsp--;
                if (state.failed) return ;

                }


                }


                }
                break;

        }

        match(input,RightSquareBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred289_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred290_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred291_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred292_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred294_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred296_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred301_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred304_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,LeftCurlyBracket,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred305_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_90);
        ruleLiteralBindingPropertyName();

        state._fsp--;
        if (state.failed) return ;
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred306_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_90);
        norm1_LiteralBindingPropertyName();

        state._fsp--;
        if (state.failed) return ;
        match(input,Colon,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred307_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred308_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred309_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        ruleBindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred310_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        {
        pushFollow(FOLLOW_2);
        norm1_BindingPattern();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }
    }
    public final void synpred311_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleUndefModifierToken();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred312_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,PlusSign,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred313_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        pushFollow(FOLLOW_2);
        ruleTIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }
    }
    public final void synpred314_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred315_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Get,FOLLOW_171); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleTypesIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred316_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,Set,FOLLOW_171); if (state.failed) return ;
        {
        {
        pushFollow(FOLLOW_2);
        ruleTypesIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }


        }


        }
    }
    public final void synpred317_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        int alt759=2;
        int LA759_0 = input.LA(1);

        if ( (LA759_0==LessThanSign) ) {
            alt759=1;
        }
        switch (alt759) {
            case 1 :
                {
                match(input,LessThanSign,FOLLOW_14); if (state.failed) return ;
                {
                {
                pushFollow(FOLLOW_16);
                ruleTypeVariable();

                state._fsp--;
                if (state.failed) return ;

                }


                }
                loop758:
                do {
                    int alt758=2;
                    int LA758_0 = input.LA(1);

                    if ( (LA758_0==Comma) ) {
                        alt758=1;
                    }


                    switch (alt758) {
                	case 1 :
                	    {
                	    match(input,Comma,FOLLOW_14); if (state.failed) return ;
                	    {
                	    {
                	    pushFollow(FOLLOW_16);
                	    ruleTypeVariable();

                	    state._fsp--;
                	    if (state.failed) return ;

                	    }


                	    }


                	    }
                	    break;

                	default :
                	    break loop758;
                    }
                } while (true);

                match(input,GreaterThanSign,FOLLOW_171); if (state.failed) return ;

                }
                break;

        }
        {
        {
        pushFollow(FOLLOW_46);
        ruleTypesIdentifier();

        state._fsp--;
        if (state.failed) return ;

        }


        }

        match(input,LeftParenthesis,FOLLOW_2); if (state.failed) return ;

        }


        }
    }
    public final void synpred321_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        match(input,LessThanSign,FOLLOW_2); if (state.failed) return ;

        }
    }
    public final void synpred322_InternalN4JSParser_fragment() throws RecognitionException {   
        {
        {
        match(input,QuestionMark,FOLLOW_2); if (state.failed) return ;

        }


        }
    }

    public final boolean synpred166_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred166_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred22_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred22_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred137_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred137_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred311_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred311_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred195_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred195_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred305_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred305_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred68_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred68_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred172_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred172_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred120_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred120_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred214_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred214_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred234_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred234_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred80_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred80_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred39_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred39_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred8_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred8_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred181_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred181_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred237_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred237_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred211_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred211_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred263_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred263_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred60_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred60_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred266_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred266_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred65_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred65_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred314_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred314_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred228_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred228_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred189_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred189_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred220_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred220_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred25_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred25_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred48_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred48_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred277_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred277_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred308_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred308_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred200_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred200_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred219_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred219_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred54_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred54_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred192_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred192_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred56_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred56_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred198_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred198_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred217_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred217_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred123_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred123_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred281_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred281_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred36_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred36_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred128_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred128_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred289_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred289_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred126_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred126_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred290_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred290_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred100_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred100_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred125_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred125_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred292_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred292_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred102_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred102_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred59_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred59_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred40_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred40_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred57_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred57_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred205_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred205_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred208_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred208_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred119_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred119_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred203_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred203_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred202_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred202_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred117_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred117_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred139_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred139_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred307_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred307_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred168_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred168_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred197_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred197_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred53_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred53_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred193_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred193_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred82_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred82_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred174_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred174_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred122_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred122_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred170_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred170_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred86_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred86_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred178_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred178_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred180_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred180_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred62_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred62_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred183_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred183_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred317_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred317_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred66_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred66_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred316_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred316_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred67_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred67_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred187_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred187_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred313_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred313_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred79_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred79_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred312_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred312_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred165_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred165_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred167_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred167_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred310_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred310_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred142_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred142_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred83_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred83_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred173_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred173_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred171_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred171_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred81_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred81_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred87_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred87_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred175_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred175_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred85_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred85_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred177_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred177_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred88_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred88_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred321_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred321_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred322_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred322_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred91_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred91_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred92_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred92_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred95_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred95_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred96_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred96_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred94_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred94_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred97_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred97_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred93_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred93_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred169_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred169_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred163_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred163_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred99_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred99_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred164_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred164_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred98_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred98_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred49_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred49_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred201_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred201_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred309_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred309_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred191_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred191_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred199_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred199_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred301_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred301_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred55_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred55_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred218_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred218_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred282_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred282_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred230_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred230_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred176_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred176_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred124_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred124_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred84_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred84_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred127_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred127_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred35_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred35_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred179_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred179_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred210_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred210_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred61_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred61_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred182_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred182_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred262_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred262_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred12_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred12_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred130_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred130_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred267_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred267_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred4_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred4_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred133_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred133_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred70_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred70_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred315_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred315_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred185_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred185_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred221_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred221_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred26_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred26_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred227_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred227_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred273_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred273_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred224_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred224_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred113_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred113_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred23_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred23_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred50_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred50_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred306_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred306_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred136_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred136_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred196_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred196_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred304_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred304_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred109_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred109_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred69_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred69_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred194_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred194_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred215_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred215_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred121_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred121_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred213_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred213_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred209_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred209_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred291_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred291_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred101_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred101_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred206_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred206_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred294_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred294_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred58_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred58_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred207_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred207_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred43_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred43_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred118_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred118_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred204_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred204_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred44_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred44_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred296_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred296_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred110_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred110_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred112_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred112_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred251_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred251_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred278_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred278_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred47_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred47_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred255_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred255_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred2_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred2_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred232_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred232_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred216_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred216_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred239_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred239_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred261_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred261_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred10_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred10_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred236_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred236_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred11_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred11_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred212_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred212_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred235_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred235_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred265_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred265_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred6_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred6_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred9_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred9_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred264_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred264_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred229_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred229_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred274_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred274_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred226_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred226_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred21_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred21_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred24_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred24_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred222_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred222_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred225_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred225_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred275_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred275_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred223_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred223_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred270_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred270_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred20_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred20_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred17_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred17_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred1_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred1_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred256_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred256_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred3_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred3_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred269_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred269_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred233_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred233_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred13_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred13_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred231_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred231_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred260_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred260_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred238_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred238_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred241_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred241_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred259_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred259_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred242_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred242_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }
    public final boolean synpred240_InternalN4JSParser() {
        state.backtracking++;
        int start = input.mark();
        try {
            synpred240_InternalN4JSParser_fragment(); // can never throw exception
        } catch (RecognitionException re) {
            System.err.println("impossible: "+re);
        }
        boolean success = !state.failed;
        input.rewind(start);
        state.backtracking--;
        state.failed=false;
        return success;
    }


    protected DFA3 dfa3 = new DFA3(this);
    protected DFA16 dfa16 = new DFA16(this);
    protected DFA13 dfa13 = new DFA13(this);
    protected DFA19 dfa19 = new DFA19(this);
    protected DFA25 dfa25 = new DFA25(this);
    protected DFA40 dfa40 = new DFA40(this);
    protected DFA27 dfa27 = new DFA27(this);
    protected DFA37 dfa37 = new DFA37(this);
    protected DFA48 dfa48 = new DFA48(this);
    protected DFA51 dfa51 = new DFA51(this);
    protected DFA70 dfa70 = new DFA70(this);
    protected DFA71 dfa71 = new DFA71(this);
    protected DFA87 dfa87 = new DFA87(this);
    protected DFA95 dfa95 = new DFA95(this);
    protected DFA103 dfa103 = new DFA103(this);
    protected DFA111 dfa111 = new DFA111(this);
    protected DFA138 dfa138 = new DFA138(this);
    protected DFA139 dfa139 = new DFA139(this);
    protected DFA140 dfa140 = new DFA140(this);
    protected DFA141 dfa141 = new DFA141(this);
    protected DFA144 dfa144 = new DFA144(this);
    protected DFA156 dfa156 = new DFA156(this);
    protected DFA158 dfa158 = new DFA158(this);
    protected DFA160 dfa160 = new DFA160(this);
    protected DFA162 dfa162 = new DFA162(this);
    protected DFA164 dfa164 = new DFA164(this);
    protected DFA167 dfa167 = new DFA167(this);
    protected DFA170 dfa170 = new DFA170(this);
    protected DFA173 dfa173 = new DFA173(this);
    protected DFA182 dfa182 = new DFA182(this);
    protected DFA201 dfa201 = new DFA201(this);
    protected DFA200 dfa200 = new DFA200(this);
    protected DFA192 dfa192 = new DFA192(this);
    protected DFA185 dfa185 = new DFA185(this);
    protected DFA219 dfa219 = new DFA219(this);
    protected DFA218 dfa218 = new DFA218(this);
    protected DFA210 dfa210 = new DFA210(this);
    protected DFA203 dfa203 = new DFA203(this);
    protected DFA240 dfa240 = new DFA240(this);
    protected DFA241 dfa241 = new DFA241(this);
    protected DFA242 dfa242 = new DFA242(this);
    protected DFA243 dfa243 = new DFA243(this);
    protected DFA246 dfa246 = new DFA246(this);
    protected DFA252 dfa252 = new DFA252(this);
    protected DFA264 dfa264 = new DFA264(this);
    protected DFA265 dfa265 = new DFA265(this);
    protected DFA273 dfa273 = new DFA273(this);
    protected DFA266 dfa266 = new DFA266(this);
    protected DFA268 dfa268 = new DFA268(this);
    protected DFA271 dfa271 = new DFA271(this);
    protected DFA281 dfa281 = new DFA281(this);
    protected DFA274 dfa274 = new DFA274(this);
    protected DFA276 dfa276 = new DFA276(this);
    protected DFA279 dfa279 = new DFA279(this);
    protected DFA283 dfa283 = new DFA283(this);
    protected DFA287 dfa287 = new DFA287(this);
    protected DFA290 dfa290 = new DFA290(this);
    protected DFA291 dfa291 = new DFA291(this);
    protected DFA292 dfa292 = new DFA292(this);
    protected DFA294 dfa294 = new DFA294(this);
    protected DFA314 dfa314 = new DFA314(this);
    protected DFA320 dfa320 = new DFA320(this);
    protected DFA333 dfa333 = new DFA333(this);
    protected DFA334 dfa334 = new DFA334(this);
    protected DFA337 dfa337 = new DFA337(this);
    protected DFA338 dfa338 = new DFA338(this);
    protected DFA339 dfa339 = new DFA339(this);
    protected DFA340 dfa340 = new DFA340(this);
    protected DFA372 dfa372 = new DFA372(this);
    protected DFA371 dfa371 = new DFA371(this);
    protected DFA374 dfa374 = new DFA374(this);
    protected DFA373 dfa373 = new DFA373(this);
    protected DFA376 dfa376 = new DFA376(this);
    protected DFA375 dfa375 = new DFA375(this);
    protected DFA378 dfa378 = new DFA378(this);
    protected DFA377 dfa377 = new DFA377(this);
    protected DFA380 dfa380 = new DFA380(this);
    protected DFA382 dfa382 = new DFA382(this);
    protected DFA420 dfa420 = new DFA420(this);
    protected DFA462 dfa462 = new DFA462(this);
    protected DFA463 dfa463 = new DFA463(this);
    protected DFA474 dfa474 = new DFA474(this);
    protected DFA470 dfa470 = new DFA470(this);
    protected DFA485 dfa485 = new DFA485(this);
    protected DFA481 dfa481 = new DFA481(this);
    protected DFA487 dfa487 = new DFA487(this);
    protected DFA490 dfa490 = new DFA490(this);
    protected DFA496 dfa496 = new DFA496(this);
    protected DFA499 dfa499 = new DFA499(this);
    protected DFA502 dfa502 = new DFA502(this);
    protected DFA506 dfa506 = new DFA506(this);
    protected DFA540 dfa540 = new DFA540(this);
    protected DFA546 dfa546 = new DFA546(this);
    protected DFA550 dfa550 = new DFA550(this);
    protected DFA551 dfa551 = new DFA551(this);
    protected DFA569 dfa569 = new DFA569(this);
    protected DFA579 dfa579 = new DFA579(this);
    protected DFA584 dfa584 = new DFA584(this);
    protected DFA588 dfa588 = new DFA588(this);
    protected DFA595 dfa595 = new DFA595(this);
    protected DFA666 dfa666 = new DFA666(this);
    protected DFA668 dfa668 = new DFA668(this);
    protected DFA670 dfa670 = new DFA670(this);
    protected DFA672 dfa672 = new DFA672(this);
    protected DFA674 dfa674 = new DFA674(this);
    protected DFA676 dfa676 = new DFA676(this);
    protected DFA678 dfa678 = new DFA678(this);
    protected DFA680 dfa680 = new DFA680(this);
    protected DFA728 dfa728 = new DFA728(this);
    protected DFA733 dfa733 = new DFA733(this);
    protected DFA738 dfa738 = new DFA738(this);
    protected DFA743 dfa743 = new DFA743(this);
    static final String dfa_1s = "\123\uffff";
    static final String dfa_2s = "\1\4\13\0\107\uffff";
    static final String dfa_3s = "\1\u0095\13\0\107\uffff";
    static final String dfa_4s = "\14\uffff\1\4\1\5\1\6\1\7\100\uffff\1\1\1\2\1\3";
    static final String dfa_5s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\107\uffff}>";
    static final String[] dfa_6s = {
            "\3\17\1\uffff\1\17\1\13\1\4\1\7\2\17\1\6\1\17\3\uffff\1\2\1\3\1\17\1\16\1\15\1\5\1\17\1\10\7\17\1\uffff\1\12\1\11\7\17\2\uffff\1\14\7\17\4\uffff\7\17\5\uffff\1\17\1\uffff\1\17\1\uffff\1\17\7\uffff\3\17\1\uffff\1\17\2\uffff\1\17\2\uffff\1\17\2\uffff\1\17\1\uffff\1\17\1\uffff\1\17\1\uffff\2\17\3\uffff\1\1\1\17\2\uffff\1\17\2\uffff\1\17\3\uffff\1\17\1\uffff\4\17\1\uffff\1\17\1\uffff\1\17\2\uffff\1\17\11\uffff\2\17\10\uffff\1\17",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_1 = DFA.unpackEncodedString(dfa_1s);
    static final char[] dfa_2 = DFA.unpackEncodedStringToUnsignedChars(dfa_2s);
    static final char[] dfa_3 = DFA.unpackEncodedStringToUnsignedChars(dfa_3s);
    static final short[] dfa_4 = DFA.unpackEncodedString(dfa_4s);
    static final short[] dfa_5 = DFA.unpackEncodedString(dfa_5s);
    static final short[][] dfa_6 = unpackEncodedStringArray(dfa_6s);

    class DFA3 extends DFA {

        public DFA3(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 3;
            this.eot = dfa_1;
            this.eof = dfa_1;
            this.min = dfa_2;
            this.max = dfa_3;
            this.accept = dfa_4;
            this.special = dfa_5;
            this.transition = dfa_6;
        }
        public String getDescription() {
            return "88:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedScriptElementParserRuleCall_0= ruleAnnotatedScriptElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ImportDeclarationParserRuleCall_4= ruleImportDeclaration | ExportDeclarationParserRuleCall_5= ruleExportDeclaration | RootStatementParserRuleCall_6= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA3_0 = input.LA(1);

                         
                        int index3_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA3_0>=9 && LA3_0<=106 && (s=T2S.M_0[LA3_0-(9)])>=0)) { /* 11 cases */ }
                        else if ( (LA3_0==Enum) && (synpred4_InternalN4JSParser())) {s = 12;}

                        else if ( (LA3_0==Import) ) {s = 13;}

                        else if ( (LA3_0==Export) ) {s = 14;}

                        else if ( ((LA3_0>=Intersection && LA3_0<=Implements)||LA3_0==Promisify||(LA3_0>=Continue && LA3_0<=Debugger)||LA3_0==Function||LA3_0==Delete||LA3_0==Return||(LA3_0>=Switch && LA3_0<=Break)||(LA3_0>=False && LA3_0<=This)||(LA3_0>=From && LA3_0<=With)||(LA3_0>=For && LA3_0<=Var)||LA3_0==PlusSignPlusSign||LA3_0==HyphenMinusHyphenMinus||LA3_0==SolidusEqualsSign||(LA3_0>=As && LA3_0<=If)||LA3_0==Of||LA3_0==ExclamationMark||LA3_0==LeftParenthesis||LA3_0==PlusSign||LA3_0==HyphenMinus||LA3_0==Solidus||(LA3_0>=Semicolon && LA3_0<=LessThanSign)||LA3_0==LeftSquareBracket||LA3_0==LeftCurlyBracket||LA3_0==Tilde||LA3_0==RULE_DOUBLE||(LA3_0>=RULE_HEX_INT && LA3_0<=RULE_LEGACY_OCTAL_INT)||LA3_0==RULE_SCIENTIFIC_INT||LA3_0==RULE_IDENTIFIER||LA3_0==RULE_STRING||(LA3_0>=RULE_TEMPLATE_HEAD && LA3_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA3_0==RULE_INT) ) {s = 15;}

                         
                        input.seek(index3_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA3_1 = input.LA(1);

                         
                        int index3_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred1_InternalN4JSParser()) ) {s = 80;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA3_2 = input.LA(1);

                         
                        int index3_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA3_3 = input.LA(1);

                         
                        int index3_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA3_4 = input.LA(1);

                         
                        int index3_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA3_5 = input.LA(1);

                         
                        int index3_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA3_6 = input.LA(1);

                         
                        int index3_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA3_7 = input.LA(1);

                         
                        int index3_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA3_8 = input.LA(1);

                         
                        int index3_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA3_9 = input.LA(1);

                         
                        int index3_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (synpred4_InternalN4JSParser()) ) {s = 12;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA3_10 = input.LA(1);

                         
                        int index3_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred2_InternalN4JSParser()) ) {s = 81;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA3_11 = input.LA(1);

                         
                        int index3_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred3_InternalN4JSParser()) ) {s = 82;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index3_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 3, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_7s = "\17\uffff";
    static final String dfa_8s = "\1\11\2\uffff\10\11\4\uffff";
    static final String dfa_9s = "\1\56\2\uffff\10\56\4\uffff";
    static final String dfa_10s = "\1\uffff\1\1\1\2\10\uffff\2\3\1\4\1\5";
    static final String dfa_11s = "\1\2\2\uffff\1\0\1\3\1\5\1\7\1\1\1\4\1\6\1\10\4\uffff}>";
    static final String[] dfa_12s = {
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\1\uffff\1\1\1\2\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "\1\15\1\5\1\10\2\uffff\1\7\1\14\3\uffff\1\3\1\4\3\uffff\1\6\1\uffff\1\11\4\uffff\1\13\3\uffff\1\15\1\12\11\uffff\1\16",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_7 = DFA.unpackEncodedString(dfa_7s);
    static final char[] dfa_8 = DFA.unpackEncodedStringToUnsignedChars(dfa_8s);
    static final char[] dfa_9 = DFA.unpackEncodedStringToUnsignedChars(dfa_9s);
    static final short[] dfa_10 = DFA.unpackEncodedString(dfa_10s);
    static final short[] dfa_11 = DFA.unpackEncodedString(dfa_11s);
    static final short[][] dfa_12 = unpackEncodedStringArray(dfa_12s);

    class DFA16 extends DFA {

        public DFA16(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 16;
            this.eot = dfa_7;
            this.eof = dfa_7;
            this.min = dfa_8;
            this.max = dfa_9;
            this.accept = dfa_10;
            this.special = dfa_11;
            this.transition = dfa_12;
        }
        public String getDescription() {
            return "165:2: ( (ExportDeclarationImplParserRuleCall_1_0_1= ruleExportDeclarationImpl ) | (ImportDeclarationImplParserRuleCall_1_1_1= ruleImportDeclarationImpl ) | ( ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=> ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_2_1_0_1= ruleAsyncNoTrailingLineBreak ( ( Function )=>FunctionImplParserRuleCall_1_2_1_0_2= ruleFunctionImpl ) ) ) ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_3_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_4_2= Enum ( (NameBindingIdentifierParserRuleCall_1_4_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_4_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_4_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_4_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_4_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_4_7= RightCurlyBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA16_3 = input.LA(1);

                         
                        int index16_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_3==Enum) ) {s = 14;}

                        else if ( (LA16_3==Private) ) {s = 3;}

                        else if ( (LA16_3==Project) ) {s = 4;}

                        else if ( (LA16_3==Protected) ) {s = 5;}

                        else if ( (LA16_3==Public) ) {s = 6;}

                        else if ( (LA16_3==External) ) {s = 7;}

                        else if ( (LA16_3==Abstract) ) {s = 8;}

                        else if ( (LA16_3==Static) ) {s = 9;}

                        else if ( (LA16_3==Const) ) {s = 10;}

                        else if ( (LA16_3==Interface||LA16_3==Class) ) {s = 13;}

                        else if ( (LA16_3==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_3==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index16_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA16_7 = input.LA(1);

                         
                        int index16_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_7==Enum) ) {s = 14;}

                        else if ( (LA16_7==Private) ) {s = 3;}

                        else if ( (LA16_7==Project) ) {s = 4;}

                        else if ( (LA16_7==Protected) ) {s = 5;}

                        else if ( (LA16_7==Public) ) {s = 6;}

                        else if ( (LA16_7==External) ) {s = 7;}

                        else if ( (LA16_7==Abstract) ) {s = 8;}

                        else if ( (LA16_7==Static) ) {s = 9;}

                        else if ( (LA16_7==Const) ) {s = 10;}

                        else if ( (LA16_7==Interface||LA16_7==Class) ) {s = 13;}

                        else if ( (LA16_7==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_7==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index16_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA16_0 = input.LA(1);

                         
                        int index16_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA16_0>=10 && LA16_0<=36 && (s=T2S.M_1[LA16_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA16_0==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_0==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_0==Interface||LA16_0==Class) ) {s = 13;}

                        else if ( (LA16_0==Enum) ) {s = 14;}

                         
                        input.seek(index16_0);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA16_4 = input.LA(1);

                         
                        int index16_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_4==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_4==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_4==Private) ) {s = 3;}

                        else if ( (LA16_4==Project) ) {s = 4;}

                        else if ( (LA16_4==Protected) ) {s = 5;}

                        else if ( (LA16_4==Public) ) {s = 6;}

                        else if ( (LA16_4==External) ) {s = 7;}

                        else if ( (LA16_4==Abstract) ) {s = 8;}

                        else if ( (LA16_4==Static) ) {s = 9;}

                        else if ( (LA16_4==Const) ) {s = 10;}

                        else if ( (LA16_4==Interface||LA16_4==Class) ) {s = 13;}

                        else if ( (LA16_4==Enum) ) {s = 14;}

                         
                        input.seek(index16_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA16_8 = input.LA(1);

                         
                        int index16_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_8==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_8==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_8==Private) ) {s = 3;}

                        else if ( (LA16_8==Project) ) {s = 4;}

                        else if ( (LA16_8==Protected) ) {s = 5;}

                        else if ( (LA16_8==Public) ) {s = 6;}

                        else if ( (LA16_8==External) ) {s = 7;}

                        else if ( (LA16_8==Abstract) ) {s = 8;}

                        else if ( (LA16_8==Static) ) {s = 9;}

                        else if ( (LA16_8==Const) ) {s = 10;}

                        else if ( (LA16_8==Interface||LA16_8==Class) ) {s = 13;}

                        else if ( (LA16_8==Enum) ) {s = 14;}

                         
                        input.seek(index16_8);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA16_5 = input.LA(1);

                         
                        int index16_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_5==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_5==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_5==Private) ) {s = 3;}

                        else if ( (LA16_5==Project) ) {s = 4;}

                        else if ( (LA16_5==Protected) ) {s = 5;}

                        else if ( (LA16_5==Public) ) {s = 6;}

                        else if ( (LA16_5==External) ) {s = 7;}

                        else if ( (LA16_5==Abstract) ) {s = 8;}

                        else if ( (LA16_5==Static) ) {s = 9;}

                        else if ( (LA16_5==Const) ) {s = 10;}

                        else if ( (LA16_5==Interface||LA16_5==Class) ) {s = 13;}

                        else if ( (LA16_5==Enum) ) {s = 14;}

                         
                        input.seek(index16_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA16_9 = input.LA(1);

                         
                        int index16_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_9==Interface||LA16_9==Class) ) {s = 13;}

                        else if ( (LA16_9==Private) ) {s = 3;}

                        else if ( (LA16_9==Project) ) {s = 4;}

                        else if ( (LA16_9==Protected) ) {s = 5;}

                        else if ( (LA16_9==Public) ) {s = 6;}

                        else if ( (LA16_9==External) ) {s = 7;}

                        else if ( (LA16_9==Abstract) ) {s = 8;}

                        else if ( (LA16_9==Static) ) {s = 9;}

                        else if ( (LA16_9==Const) ) {s = 10;}

                        else if ( (LA16_9==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_9==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_9==Enum) ) {s = 14;}

                         
                        input.seek(index16_9);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA16_6 = input.LA(1);

                         
                        int index16_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_6==Interface||LA16_6==Class) ) {s = 13;}

                        else if ( (LA16_6==Private) ) {s = 3;}

                        else if ( (LA16_6==Project) ) {s = 4;}

                        else if ( (LA16_6==Protected) ) {s = 5;}

                        else if ( (LA16_6==Public) ) {s = 6;}

                        else if ( (LA16_6==External) ) {s = 7;}

                        else if ( (LA16_6==Abstract) ) {s = 8;}

                        else if ( (LA16_6==Static) ) {s = 9;}

                        else if ( (LA16_6==Const) ) {s = 10;}

                        else if ( (LA16_6==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_6==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                        else if ( (LA16_6==Enum) ) {s = 14;}

                         
                        input.seek(index16_6);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA16_10 = input.LA(1);

                         
                        int index16_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA16_10==Enum) ) {s = 14;}

                        else if ( (LA16_10==Private) ) {s = 3;}

                        else if ( (LA16_10==Project) ) {s = 4;}

                        else if ( (LA16_10==Protected) ) {s = 5;}

                        else if ( (LA16_10==Public) ) {s = 6;}

                        else if ( (LA16_10==External) ) {s = 7;}

                        else if ( (LA16_10==Abstract) ) {s = 8;}

                        else if ( (LA16_10==Static) ) {s = 9;}

                        else if ( (LA16_10==Const) ) {s = 10;}

                        else if ( (LA16_10==Interface||LA16_10==Class) ) {s = 13;}

                        else if ( (LA16_10==Async) && (synpred6_InternalN4JSParser())) {s = 11;}

                        else if ( (LA16_10==Function) && (synpred6_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index16_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 16, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_13s = "\13\uffff";
    static final String dfa_14s = "\11\11\2\uffff";
    static final String dfa_15s = "\11\44\2\uffff";
    static final String dfa_16s = "\11\uffff\1\1\1\2";
    static final String dfa_17s = "\13\uffff}>";
    static final String[] dfa_18s = {
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "\1\12\1\3\1\6\2\uffff\1\5\4\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\10\uffff\1\11\1\10",
            "",
            ""
    };

    static final short[] dfa_13 = DFA.unpackEncodedString(dfa_13s);
    static final char[] dfa_14 = DFA.unpackEncodedStringToUnsignedChars(dfa_14s);
    static final char[] dfa_15 = DFA.unpackEncodedStringToUnsignedChars(dfa_15s);
    static final short[] dfa_16 = DFA.unpackEncodedString(dfa_16s);
    static final short[] dfa_17 = DFA.unpackEncodedString(dfa_17s);
    static final short[][] dfa_18 = unpackEncodedStringArray(dfa_18s);

    class DFA13 extends DFA {

        public DFA13(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 13;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "182:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_3_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_3_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_3_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_3_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_3_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_3_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_3_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_19s = "\101\uffff";
    static final String dfa_20s = "\1\4\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_21s = "\1\u0095\10\0\1\uffff\2\0\1\uffff\2\0\1\uffff\1\0\60\uffff";
    static final String dfa_22s = "\11\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\2\57\uffff";
    static final String dfa_23s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\uffff\1\11\1\12\1\uffff\1\13\1\14\1\uffff\1\15\60\uffff}>";
    static final String[] dfa_24s = {
            "\3\21\1\uffff\1\21\1\13\1\4\1\7\2\uffff\1\6\1\16\3\uffff\1\2\1\3\1\21\2\uffff\1\5\1\uffff\1\10\1\uffff\3\21\1\15\1\21\2\uffff\1\12\1\11\2\21\1\uffff\1\21\1\uffff\2\21\2\uffff\1\14\6\21\6\uffff\1\21\1\20\2\21\1\uffff\1\17\5\uffff\1\21\1\uffff\1\21\1\uffff\1\21\7\uffff\1\21\3\uffff\1\21\2\uffff\1\21\2\uffff\1\21\2\uffff\1\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\3\uffff\1\1\1\21\2\uffff\1\21\2\uffff\1\21\3\uffff\1\21\1\uffff\4\21\1\uffff\1\21\1\uffff\1\21\2\uffff\1\21\11\uffff\2\21\10\uffff\1\21",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_19 = DFA.unpackEncodedString(dfa_19s);
    static final char[] dfa_20 = DFA.unpackEncodedStringToUnsignedChars(dfa_20s);
    static final char[] dfa_21 = DFA.unpackEncodedStringToUnsignedChars(dfa_21s);
    static final short[] dfa_22 = DFA.unpackEncodedString(dfa_22s);
    static final short[] dfa_23 = DFA.unpackEncodedString(dfa_23s);
    static final short[][] dfa_24 = unpackEncodedStringArray(dfa_24s);

    class DFA19 extends DFA {

        public DFA19(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 19;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_20;
            this.max = dfa_21;
            this.accept = dfa_22;
            this.special = dfa_23;
            this.transition = dfa_24;
        }
        public String getDescription() {
            return "315:2: ( ( ( CommercialAt | Private | Project | Protected | Public | External | Abstract | Static | Const | Class | Interface | Enum | Async | Function | Var | Let )=> (ExportedElementExportableElementParserRuleCall_1_3_1_0_0= ruleExportableElement ) ) | ( ( (DefaultExportedExpressionAssignmentExpressionParserRuleCall_1_3_1_1_0_0= norm1_AssignmentExpression ) ) SemiParserRuleCall_1_3_1_1_1= ruleSemi ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA19_0 = input.LA(1);

                         
                        int index19_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA19_0==CommercialAt) ) {s = 1;}

                        else if ( (LA19_0==Private) ) {s = 2;}

                        else if ( (LA19_0==Project) ) {s = 3;}

                        else if ( (LA19_0==Protected) ) {s = 4;}

                        else if ( (LA19_0==Public) ) {s = 5;}

                        else if ( (LA19_0==External) ) {s = 6;}

                        else if ( (LA19_0==Abstract) ) {s = 7;}

                        else if ( (LA19_0==Static) ) {s = 8;}

                        else if ( (LA19_0==Const) && (synpred9_InternalN4JSParser())) {s = 9;}

                        else if ( (LA19_0==Class) ) {s = 10;}

                        else if ( (LA19_0==Interface) ) {s = 11;}

                        else if ( (LA19_0==Enum) && (synpred9_InternalN4JSParser())) {s = 12;}

                        else if ( (LA19_0==Async) ) {s = 13;}

                        else if ( (LA19_0==Function) ) {s = 14;}

                        else if ( (LA19_0==Var) && (synpred9_InternalN4JSParser())) {s = 15;}

                        else if ( (LA19_0==Let) ) {s = 16;}

                        else if ( ((LA19_0>=Intersection && LA19_0<=Implements)||LA19_0==Promisify||LA19_0==Delete||(LA19_0>=Target && LA19_0<=Await)||LA19_0==Await_1||(LA19_0>=False && LA19_0<=Super)||LA19_0==Union||(LA19_0>=Yield && LA19_0<=This)||(LA19_0>=From && LA19_0<=Void)||LA19_0==Get||(LA19_0>=New && LA19_0<=Set)||LA19_0==PlusSignPlusSign||LA19_0==HyphenMinusHyphenMinus||LA19_0==SolidusEqualsSign||LA19_0==As||LA19_0==Of||LA19_0==ExclamationMark||LA19_0==LeftParenthesis||LA19_0==PlusSign||LA19_0==HyphenMinus||LA19_0==Solidus||LA19_0==LessThanSign||LA19_0==LeftSquareBracket||LA19_0==LeftCurlyBracket||LA19_0==Tilde||LA19_0==RULE_DOUBLE||(LA19_0>=RULE_HEX_INT && LA19_0<=RULE_LEGACY_OCTAL_INT)||LA19_0==RULE_SCIENTIFIC_INT||LA19_0==RULE_IDENTIFIER||LA19_0==RULE_STRING||(LA19_0>=RULE_TEMPLATE_HEAD && LA19_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA19_0==RULE_INT) ) {s = 17;}

                         
                        input.seek(index19_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA19_1 = input.LA(1);

                         
                        int index19_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA19_2 = input.LA(1);

                         
                        int index19_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA19_3 = input.LA(1);

                         
                        int index19_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA19_4 = input.LA(1);

                         
                        int index19_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA19_5 = input.LA(1);

                         
                        int index19_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA19_6 = input.LA(1);

                         
                        int index19_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA19_7 = input.LA(1);

                         
                        int index19_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA19_8 = input.LA(1);

                         
                        int index19_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA19_10 = input.LA(1);

                         
                        int index19_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA19_11 = input.LA(1);

                         
                        int index19_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA19_13 = input.LA(1);

                         
                        int index19_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_13);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA19_14 = input.LA(1);

                         
                        int index19_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_14);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA19_16 = input.LA(1);

                         
                        int index19_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred9_InternalN4JSParser()) ) {s = 15;}

                        else if ( (true) ) {s = 17;}

                         
                        input.seek(index19_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 19, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_25s = "\67\uffff";
    static final String dfa_26s = "\17\uffff\11\16\37\uffff";
    static final String dfa_27s = "\1\11\1\uffff\7\11\1\4\5\uffff\7\11\1\17\1\4\37\uffff";
    static final String dfa_28s = "\1\152\1\uffff\7\100\1\176\5\uffff\11\u0099\37\uffff";
    static final String dfa_29s = "\1\uffff\1\1\10\uffff\1\2\1\3\1\4\1\5\1\6\11\uffff\37\3";
    static final String dfa_30s = "\1\12\1\uffff\1\15\1\6\1\20\1\0\1\14\1\16\1\7\1\17\5\uffff\1\4\1\10\1\11\1\1\1\3\1\13\1\2\1\uffff\1\5\37\uffff}>";
    static final String[] dfa_31s = {
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16\51\uffff\1\1",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16",
            "\3\16\1\uffff\1\16\1\27\1\21\1\24\2\uffff\1\23\1\15\3\uffff\1\17\1\20\3\uffff\1\22\1\uffff\1\25\1\uffff\1\16\1\uffff\1\16\1\26\1\16\2\uffff\1\12\1\11\3\uffff\1\16\1\uffff\2\16\2\uffff\1\14\1\16\3\uffff\1\16\7\uffff\2\16\1\uffff\1\16\1\uffff\1\16\21\uffff\1\16\3\uffff\1\16\23\uffff\2\16\2\uffff\1\16\17\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\13\1\4\1\7\2\uffff\1\6\1\15\3\uffff\1\2\1\3\3\uffff\1\5\1\uffff\1\10\4\uffff\1\15\3\uffff\1\12\1\11\11\uffff\1\14\15\uffff\1\16\3\uffff\1\16\37\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\46\uffff\1\16\1\uffff\1\16",
            "\1\15\120\uffff\1\16\3\uffff\2\16\1\uffff\1\16\10\uffff\1\16\40\uffff\1\15\5\uffff\1\16\1\uffff\1\16",
            "\1\51\1\44\1\57\1\uffff\1\54\1\60\1\62\1\40\2\uffff\1\37\2\uffff\1\65\1\uffff\1\61\1\36\3\uffff\1\63\1\uffff\1\41\1\uffff\1\46\1\uffff\1\53\1\56\1\55\7\uffff\1\50\1\uffff\1\32\1\52\3\uffff\1\43\3\uffff\1\47\7\uffff\1\33\1\35\1\uffff\1\34\23\uffff\1\42\3\uffff\1\45\11\uffff\1\16\3\uffff\2\16\1\64\1\16\6\uffff\1\66\1\uffff\1\16\1\30\14\uffff\1\31\30\uffff\1\16\1\uffff\1\16",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_25 = DFA.unpackEncodedString(dfa_25s);
    static final short[] dfa_26 = DFA.unpackEncodedString(dfa_26s);
    static final char[] dfa_27 = DFA.unpackEncodedStringToUnsignedChars(dfa_27s);
    static final char[] dfa_28 = DFA.unpackEncodedStringToUnsignedChars(dfa_28s);
    static final short[] dfa_29 = DFA.unpackEncodedString(dfa_29s);
    static final short[] dfa_30 = DFA.unpackEncodedString(dfa_30s);
    static final short[][] dfa_31 = unpackEncodedStringArray(dfa_31s);

    class DFA25 extends DFA {

        public DFA25(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 25;
            this.eot = dfa_25;
            this.eof = dfa_26;
            this.min = dfa_27;
            this.max = dfa_28;
            this.accept = dfa_29;
            this.special = dfa_30;
            this.transition = dfa_31;
        }
        public String getDescription() {
            return "428:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedExportableElementParserRuleCall_0= ruleAnnotatedExportableElement ) | ( ( ( ( ( ruleN4Modifier ) )* Class ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4ClassDeclarationParserRuleCall_1= ruleN4ClassDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Interface ( ( ruleTypingStrategyDefSiteOperator ) )? ( ( ruleBindingIdentifier ) )? ) )=>N4InterfaceDeclarationParserRuleCall_2= ruleN4InterfaceDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Enum ( ( ruleBindingIdentifier ) )? ) )=>N4EnumDeclarationParserRuleCall_3= ruleN4EnumDeclaration ) | ExportedFunctionDeclarationParserRuleCall_4= ruleExportedFunctionDeclaration | ExportedVariableStatementParserRuleCall_5= ruleExportedVariableStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA25_5 = input.LA(1);

                         
                        int index25_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_5==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_5==Private) ) {s = 2;}

                        else if ( (LA25_5==Project) ) {s = 3;}

                        else if ( (LA25_5==Protected) ) {s = 4;}

                        else if ( (LA25_5==Public) ) {s = 5;}

                        else if ( (LA25_5==External) ) {s = 6;}

                        else if ( (LA25_5==Abstract) ) {s = 7;}

                        else if ( (LA25_5==Static) ) {s = 8;}

                        else if ( (LA25_5==Const) ) {s = 9;}

                        else if ( (LA25_5==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_5==Function||LA25_5==Async) ) {s = 13;}

                        else if ( (LA25_5==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_5==Let||LA25_5==Var) ) {s = 14;}

                         
                        input.seek(index25_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA25_18 = input.LA(1);

                         
                        int index25_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_18==EOF||LA25_18==Let||LA25_18==Var||LA25_18==Comma||(LA25_18>=Colon && LA25_18<=Semicolon)||LA25_18==EqualsSign||LA25_18==RightCurlyBracket||LA25_18==RULE_ML_COMMENT||LA25_18==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_18==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_18==Private) ) {s = 2;}

                        else if ( (LA25_18==Project) ) {s = 3;}

                        else if ( (LA25_18==Protected) ) {s = 4;}

                        else if ( (LA25_18==Public) ) {s = 5;}

                        else if ( (LA25_18==External) ) {s = 6;}

                        else if ( (LA25_18==Abstract) ) {s = 7;}

                        else if ( (LA25_18==Static) ) {s = 8;}

                        else if ( (LA25_18==Const) ) {s = 9;}

                        else if ( (LA25_18==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_18==Function||LA25_18==Async) ) {s = 13;}

                        else if ( (LA25_18==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index25_18);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA25_21 = input.LA(1);

                         
                        int index25_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_21==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_21==Private) ) {s = 2;}

                        else if ( (LA25_21==Project) ) {s = 3;}

                        else if ( (LA25_21==Protected) ) {s = 4;}

                        else if ( (LA25_21==Public) ) {s = 5;}

                        else if ( (LA25_21==External) ) {s = 6;}

                        else if ( (LA25_21==Abstract) ) {s = 7;}

                        else if ( (LA25_21==Static) ) {s = 8;}

                        else if ( (LA25_21==Const) ) {s = 9;}

                        else if ( (LA25_21==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_21==EOF||LA25_21==Let||LA25_21==Var||LA25_21==Comma||(LA25_21>=Colon && LA25_21<=Semicolon)||LA25_21==EqualsSign||LA25_21==RightCurlyBracket||LA25_21==RULE_ML_COMMENT||LA25_21==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_21==Function||LA25_21==Async) ) {s = 13;}

                        else if ( (LA25_21==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index25_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA25_19 = input.LA(1);

                         
                        int index25_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_19==EOF||LA25_19==Let||LA25_19==Var||LA25_19==Comma||(LA25_19>=Colon && LA25_19<=Semicolon)||LA25_19==EqualsSign||LA25_19==RightCurlyBracket||LA25_19==RULE_ML_COMMENT||LA25_19==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_19==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_19==Private) ) {s = 2;}

                        else if ( (LA25_19==Project) ) {s = 3;}

                        else if ( (LA25_19==Protected) ) {s = 4;}

                        else if ( (LA25_19==Public) ) {s = 5;}

                        else if ( (LA25_19==External) ) {s = 6;}

                        else if ( (LA25_19==Abstract) ) {s = 7;}

                        else if ( (LA25_19==Static) ) {s = 8;}

                        else if ( (LA25_19==Const) ) {s = 9;}

                        else if ( (LA25_19==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_19==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_19==Function||LA25_19==Async) ) {s = 13;}

                         
                        input.seek(index25_19);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA25_15 = input.LA(1);

                         
                        int index25_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_15==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_15==Private) ) {s = 2;}

                        else if ( (LA25_15==Project) ) {s = 3;}

                        else if ( (LA25_15==Protected) ) {s = 4;}

                        else if ( (LA25_15==Public) ) {s = 5;}

                        else if ( (LA25_15==External) ) {s = 6;}

                        else if ( (LA25_15==Abstract) ) {s = 7;}

                        else if ( (LA25_15==Static) ) {s = 8;}

                        else if ( (LA25_15==Const) ) {s = 9;}

                        else if ( (LA25_15==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_15==EOF||LA25_15==Let||LA25_15==Var||LA25_15==Comma||(LA25_15>=Colon && LA25_15<=Semicolon)||LA25_15==EqualsSign||LA25_15==RightCurlyBracket||LA25_15==RULE_ML_COMMENT||LA25_15==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_15==Function||LA25_15==Async) ) {s = 13;}

                        else if ( (LA25_15==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index25_15);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA25_23 = input.LA(1);

                         
                        int index25_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_23==EOF||LA25_23==Comma||(LA25_23>=Colon && LA25_23<=Semicolon)||LA25_23==EqualsSign||LA25_23==RightCurlyBracket||LA25_23==RULE_ML_COMMENT||LA25_23==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_23==Tilde) && (synpred12_InternalN4JSParser())) {s = 24;}

                        else if ( (LA25_23==RULE_IDENTIFIER) && (synpred12_InternalN4JSParser())) {s = 25;}

                        else if ( (LA25_23==Yield) && (synpred12_InternalN4JSParser())) {s = 26;}

                        else if ( (LA25_23==Get) && (synpred12_InternalN4JSParser())) {s = 27;}

                        else if ( (LA25_23==Set) && (synpred12_InternalN4JSParser())) {s = 28;}

                        else if ( (LA25_23==Let) && (synpred12_InternalN4JSParser())) {s = 29;}

                        else if ( (LA25_23==Project) && (synpred12_InternalN4JSParser())) {s = 30;}

                        else if ( (LA25_23==External) && (synpred12_InternalN4JSParser())) {s = 31;}

                        else if ( (LA25_23==Abstract) && (synpred12_InternalN4JSParser())) {s = 32;}

                        else if ( (LA25_23==Static) && (synpred12_InternalN4JSParser())) {s = 33;}

                        else if ( (LA25_23==As) && (synpred12_InternalN4JSParser())) {s = 34;}

                        else if ( (LA25_23==From) && (synpred12_InternalN4JSParser())) {s = 35;}

                        else if ( (LA25_23==Constructor) && (synpred12_InternalN4JSParser())) {s = 36;}

                        else if ( (LA25_23==Of) && (synpred12_InternalN4JSParser())) {s = 37;}

                        else if ( (LA25_23==Target) && (synpred12_InternalN4JSParser())) {s = 38;}

                        else if ( (LA25_23==Type) && (synpred12_InternalN4JSParser())) {s = 39;}

                        else if ( (LA25_23==Union) && (synpred12_InternalN4JSParser())) {s = 40;}

                        else if ( (LA25_23==Intersection) && (synpred12_InternalN4JSParser())) {s = 41;}

                        else if ( (LA25_23==This) && (synpred12_InternalN4JSParser())) {s = 42;}

                        else if ( (LA25_23==Await) && (synpred12_InternalN4JSParser())) {s = 43;}

                        else if ( (LA25_23==Promisify) && (synpred12_InternalN4JSParser())) {s = 44;}

                        else if ( (LA25_23==Await_1) && (synpred12_InternalN4JSParser())) {s = 45;}

                        else if ( (LA25_23==Async) && (synpred12_InternalN4JSParser())) {s = 46;}

                        else if ( (LA25_23==Implements) && (synpred12_InternalN4JSParser())) {s = 47;}

                        else if ( (LA25_23==Interface) && (synpred12_InternalN4JSParser())) {s = 48;}

                        else if ( (LA25_23==Private) && (synpred12_InternalN4JSParser())) {s = 49;}

                        else if ( (LA25_23==Protected) && (synpred12_InternalN4JSParser())) {s = 50;}

                        else if ( (LA25_23==Public) && (synpred12_InternalN4JSParser())) {s = 51;}

                        else if ( (LA25_23==LessThanSign) && (synpred12_InternalN4JSParser())) {s = 52;}

                        else if ( (LA25_23==Extends) && (synpred12_InternalN4JSParser())) {s = 53;}

                        else if ( (LA25_23==LeftCurlyBracket) && (synpred12_InternalN4JSParser())) {s = 54;}

                         
                        input.seek(index25_23);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA25_3 = input.LA(1);

                         
                        int index25_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_3==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_3==Private) ) {s = 2;}

                        else if ( (LA25_3==Project) ) {s = 3;}

                        else if ( (LA25_3==Protected) ) {s = 4;}

                        else if ( (LA25_3==Public) ) {s = 5;}

                        else if ( (LA25_3==External) ) {s = 6;}

                        else if ( (LA25_3==Abstract) ) {s = 7;}

                        else if ( (LA25_3==Static) ) {s = 8;}

                        else if ( (LA25_3==Const) ) {s = 9;}

                        else if ( (LA25_3==Let||LA25_3==Var) ) {s = 14;}

                        else if ( (LA25_3==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_3==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_3==Function||LA25_3==Async) ) {s = 13;}

                         
                        input.seek(index25_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA25_8 = input.LA(1);

                         
                        int index25_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_8==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_8==Private) ) {s = 2;}

                        else if ( (LA25_8==Project) ) {s = 3;}

                        else if ( (LA25_8==Protected) ) {s = 4;}

                        else if ( (LA25_8==Public) ) {s = 5;}

                        else if ( (LA25_8==External) ) {s = 6;}

                        else if ( (LA25_8==Abstract) ) {s = 7;}

                        else if ( (LA25_8==Static) ) {s = 8;}

                        else if ( (LA25_8==Const) ) {s = 9;}

                        else if ( (LA25_8==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_8==Function||LA25_8==Async) ) {s = 13;}

                        else if ( (LA25_8==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_8==Let||LA25_8==Var) ) {s = 14;}

                         
                        input.seek(index25_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA25_16 = input.LA(1);

                         
                        int index25_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_16==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_16==Private) ) {s = 2;}

                        else if ( (LA25_16==Project) ) {s = 3;}

                        else if ( (LA25_16==Protected) ) {s = 4;}

                        else if ( (LA25_16==Public) ) {s = 5;}

                        else if ( (LA25_16==External) ) {s = 6;}

                        else if ( (LA25_16==Abstract) ) {s = 7;}

                        else if ( (LA25_16==Static) ) {s = 8;}

                        else if ( (LA25_16==Const) ) {s = 9;}

                        else if ( (LA25_16==EOF||LA25_16==Let||LA25_16==Var||LA25_16==Comma||(LA25_16>=Colon && LA25_16<=Semicolon)||LA25_16==EqualsSign||LA25_16==RightCurlyBracket||LA25_16==RULE_ML_COMMENT||LA25_16==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_16==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_16==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_16==Function||LA25_16==Async) ) {s = 13;}

                         
                        input.seek(index25_16);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA25_17 = input.LA(1);

                         
                        int index25_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_17==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_17==Private) ) {s = 2;}

                        else if ( (LA25_17==Project) ) {s = 3;}

                        else if ( (LA25_17==Protected) ) {s = 4;}

                        else if ( (LA25_17==Public) ) {s = 5;}

                        else if ( (LA25_17==External) ) {s = 6;}

                        else if ( (LA25_17==Abstract) ) {s = 7;}

                        else if ( (LA25_17==Static) ) {s = 8;}

                        else if ( (LA25_17==Const) ) {s = 9;}

                        else if ( (LA25_17==Function||LA25_17==Async) ) {s = 13;}

                        else if ( (LA25_17==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_17==EOF||LA25_17==Let||LA25_17==Var||LA25_17==Comma||(LA25_17>=Colon && LA25_17<=Semicolon)||LA25_17==EqualsSign||LA25_17==RightCurlyBracket||LA25_17==RULE_ML_COMMENT||LA25_17==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_17==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index25_17);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA25_0 = input.LA(1);

                         
                        int index25_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_0==CommercialAt) && (synpred10_InternalN4JSParser())) {s = 1;}

                        else if ( (LA25_0==Private) ) {s = 2;}

                        else if ( (LA25_0==Project) ) {s = 3;}

                        else if ( (LA25_0==Protected) ) {s = 4;}

                        else if ( (LA25_0==Public) ) {s = 5;}

                        else if ( (LA25_0==External) ) {s = 6;}

                        else if ( (LA25_0==Abstract) ) {s = 7;}

                        else if ( (LA25_0==Static) ) {s = 8;}

                        else if ( (LA25_0==Const) ) {s = 9;}

                        else if ( (LA25_0==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_0==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_0==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_0==Function||LA25_0==Async) ) {s = 13;}

                        else if ( (LA25_0==Let||LA25_0==Var) ) {s = 14;}

                         
                        input.seek(index25_0);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA25_20 = input.LA(1);

                         
                        int index25_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_20==Function||LA25_20==Async) ) {s = 13;}

                        else if ( (LA25_20==Private) ) {s = 2;}

                        else if ( (LA25_20==Project) ) {s = 3;}

                        else if ( (LA25_20==Protected) ) {s = 4;}

                        else if ( (LA25_20==Public) ) {s = 5;}

                        else if ( (LA25_20==External) ) {s = 6;}

                        else if ( (LA25_20==Abstract) ) {s = 7;}

                        else if ( (LA25_20==Static) ) {s = 8;}

                        else if ( (LA25_20==Const) ) {s = 9;}

                        else if ( (LA25_20==EOF||LA25_20==Let||LA25_20==Var||LA25_20==Comma||(LA25_20>=Colon && LA25_20<=Semicolon)||LA25_20==EqualsSign||LA25_20==RightCurlyBracket||LA25_20==RULE_ML_COMMENT||LA25_20==RULE_EOL) ) {s = 14;}

                        else if ( (LA25_20==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_20==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_20==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_20);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA25_6 = input.LA(1);

                         
                        int index25_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_6==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_6==Private) ) {s = 2;}

                        else if ( (LA25_6==Project) ) {s = 3;}

                        else if ( (LA25_6==Protected) ) {s = 4;}

                        else if ( (LA25_6==Public) ) {s = 5;}

                        else if ( (LA25_6==External) ) {s = 6;}

                        else if ( (LA25_6==Abstract) ) {s = 7;}

                        else if ( (LA25_6==Static) ) {s = 8;}

                        else if ( (LA25_6==Const) ) {s = 9;}

                        else if ( (LA25_6==Let||LA25_6==Var) ) {s = 14;}

                        else if ( (LA25_6==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_6==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_6==Function||LA25_6==Async) ) {s = 13;}

                         
                        input.seek(index25_6);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA25_2 = input.LA(1);

                         
                        int index25_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_2==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_2==Private) ) {s = 2;}

                        else if ( (LA25_2==Project) ) {s = 3;}

                        else if ( (LA25_2==Protected) ) {s = 4;}

                        else if ( (LA25_2==Public) ) {s = 5;}

                        else if ( (LA25_2==External) ) {s = 6;}

                        else if ( (LA25_2==Abstract) ) {s = 7;}

                        else if ( (LA25_2==Static) ) {s = 8;}

                        else if ( (LA25_2==Const) ) {s = 9;}

                        else if ( (LA25_2==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_2==Function||LA25_2==Async) ) {s = 13;}

                        else if ( (LA25_2==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_2==Let||LA25_2==Var) ) {s = 14;}

                         
                        input.seek(index25_2);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA25_7 = input.LA(1);

                         
                        int index25_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_7==Function||LA25_7==Async) ) {s = 13;}

                        else if ( (LA25_7==Private) ) {s = 2;}

                        else if ( (LA25_7==Project) ) {s = 3;}

                        else if ( (LA25_7==Protected) ) {s = 4;}

                        else if ( (LA25_7==Public) ) {s = 5;}

                        else if ( (LA25_7==External) ) {s = 6;}

                        else if ( (LA25_7==Abstract) ) {s = 7;}

                        else if ( (LA25_7==Static) ) {s = 8;}

                        else if ( (LA25_7==Const) ) {s = 9;}

                        else if ( (LA25_7==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_7==Let||LA25_7==Var) ) {s = 14;}

                        else if ( (LA25_7==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_7==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                         
                        input.seek(index25_7);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA25_9 = input.LA(1);

                         
                        int index25_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_9==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_9==Private) ) {s = 15;}

                        else if ( (LA25_9==Project) ) {s = 16;}

                        else if ( (LA25_9==Protected) ) {s = 17;}

                        else if ( (LA25_9==Public) ) {s = 18;}

                        else if ( (LA25_9==External) ) {s = 19;}

                        else if ( (LA25_9==Abstract) ) {s = 20;}

                        else if ( (LA25_9==Static) ) {s = 21;}

                        else if ( (LA25_9==Const) ) {s = 9;}

                        else if ( ((LA25_9>=Intersection && LA25_9<=Implements)||LA25_9==Promisify||LA25_9==Target||LA25_9==Await||LA25_9==Await_1||LA25_9==Union||(LA25_9>=Yield && LA25_9<=This)||LA25_9==From||LA25_9==Type||(LA25_9>=Get && LA25_9<=Let)||LA25_9==Set||LA25_9==Var||LA25_9==As||LA25_9==Of||(LA25_9>=CommercialAt && LA25_9<=LeftSquareBracket)||LA25_9==LeftCurlyBracket||LA25_9==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA25_9==Async) ) {s = 22;}

                        else if ( (LA25_9==Interface) ) {s = 23;}

                        else if ( (LA25_9==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                        else if ( (LA25_9==Function) ) {s = 13;}

                         
                        input.seek(index25_9);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA25_4 = input.LA(1);

                         
                        int index25_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA25_4==Interface) && (synpred12_InternalN4JSParser())) {s = 11;}

                        else if ( (LA25_4==Private) ) {s = 2;}

                        else if ( (LA25_4==Project) ) {s = 3;}

                        else if ( (LA25_4==Protected) ) {s = 4;}

                        else if ( (LA25_4==Public) ) {s = 5;}

                        else if ( (LA25_4==External) ) {s = 6;}

                        else if ( (LA25_4==Abstract) ) {s = 7;}

                        else if ( (LA25_4==Static) ) {s = 8;}

                        else if ( (LA25_4==Const) ) {s = 9;}

                        else if ( (LA25_4==Function||LA25_4==Async) ) {s = 13;}

                        else if ( (LA25_4==Enum) && (synpred13_InternalN4JSParser())) {s = 12;}

                        else if ( (LA25_4==Let||LA25_4==Var) ) {s = 14;}

                        else if ( (LA25_4==Class) && (synpred11_InternalN4JSParser())) {s = 10;}

                         
                        input.seek(index25_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 25, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_32s = "\26\uffff";
    static final String dfa_33s = "\15\uffff\11\12";
    static final String dfa_34s = "\10\11\1\4\4\uffff\1\4\7\11\1\17";
    static final String dfa_35s = "\10\100\1\176\4\uffff\11\u0099";
    static final String dfa_36s = "\11\uffff\1\1\1\2\1\3\1\4\11\uffff";
    static final String dfa_37s = "\26\uffff}>";
    static final String[] dfa_38s = {
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12",
            "\3\12\1\uffff\1\12\1\15\1\20\1\23\2\uffff\1\22\1\11\3\uffff\1\16\1\17\3\uffff\1\21\1\uffff\1\24\1\uffff\1\12\1\uffff\1\12\1\25\1\12\2\uffff\1\13\1\10\3\uffff\1\12\1\uffff\2\12\2\uffff\1\14\1\12\3\uffff\1\12\7\uffff\2\12\1\uffff\1\12\1\uffff\1\12\21\uffff\1\12\3\uffff\1\12\23\uffff\2\12\2\uffff\1\12\17\uffff\1\12",
            "",
            "",
            "",
            "",
            "\3\13\1\uffff\4\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\13\1\uffff\3\13\7\uffff\1\13\1\uffff\2\13\3\uffff\1\13\3\uffff\1\13\7\uffff\2\13\1\uffff\1\13\23\uffff\1\13\3\uffff\1\13\11\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\1\13\14\uffff\1\13\30\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\13\1\3\1\6\2\uffff\1\5\1\11\3\uffff\1\1\1\2\3\uffff\1\4\1\uffff\1\7\4\uffff\1\11\3\uffff\1\13\1\10\11\uffff\1\14\15\uffff\1\12\3\uffff\1\12\37\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\46\uffff\1\12\1\uffff\1\12",
            "\1\11\120\uffff\1\12\3\uffff\2\12\1\uffff\1\12\10\uffff\1\12\40\uffff\1\11\5\uffff\1\12\1\uffff\1\12"
    };

    static final short[] dfa_32 = DFA.unpackEncodedString(dfa_32s);
    static final short[] dfa_33 = DFA.unpackEncodedString(dfa_33s);
    static final char[] dfa_34 = DFA.unpackEncodedStringToUnsignedChars(dfa_34s);
    static final char[] dfa_35 = DFA.unpackEncodedStringToUnsignedChars(dfa_35s);
    static final short[] dfa_36 = DFA.unpackEncodedString(dfa_36s);
    static final short[] dfa_37 = DFA.unpackEncodedString(dfa_37s);
    static final short[][] dfa_38 = unpackEncodedStringArray(dfa_38s);

    class DFA40 extends DFA {

        public DFA40(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 40;
            this.eot = dfa_32;
            this.eof = dfa_33;
            this.min = dfa_34;
            this.max = dfa_35;
            this.accept = dfa_36;
            this.special = dfa_37;
            this.transition = dfa_38;
        }
        public String getDescription() {
            return "503:2: ( ( ( ( ruleN4Modifier ) )* AsyncNoTrailingLineBreakParserRuleCall_1_0_2= ruleAsyncNoTrailingLineBreak FunctionImplParserRuleCall_1_0_3= ruleFunctionImpl ) | ( ( ( ruleN4Modifier ) )* ( ( ruleVariableStatementKeyword ) ) ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_3_0= ruleExportedVariableDeclarationOrBinding ) ) (CommaKeyword_1_1_4_0= Comma ( (VarDeclsOrBindingsExportedVariableDeclarationOrBindingParserRuleCall_1_1_4_1_0= ruleExportedVariableDeclarationOrBinding ) ) )* SemiParserRuleCall_1_1_5= ruleSemi ) | ( ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) ) MembersParserRuleCall_1_2_1= ruleMembers ) | ( ( ( ruleN4Modifier ) )* EnumKeyword_1_3_2= Enum ( (NameBindingIdentifierParserRuleCall_1_3_3_0= ruleBindingIdentifier ) ) LeftCurlyBracketKeyword_1_3_4= LeftCurlyBracket ( (LiteralsN4EnumLiteralParserRuleCall_1_3_5_0= ruleN4EnumLiteral ) ) (CommaKeyword_1_3_6_0= Comma ( (LiteralsN4EnumLiteralParserRuleCall_1_3_6_1_0= ruleN4EnumLiteral ) ) )* RightCurlyBracketKeyword_1_3_7= RightCurlyBracket ) )";
        }
    }
    static final String dfa_39s = "\14\uffff";
    static final String dfa_40s = "\4\uffff\10\1";
    static final String dfa_41s = "\1\12\1\uffff\1\4\1\uffff\1\4\7\12";
    static final String dfa_42s = "\1\100\1\uffff\1\176\1\uffff\10\u0099";
    static final String dfa_43s = "\1\uffff\1\2\1\uffff\1\1\10\uffff";
    static final String dfa_44s = "\14\uffff}>";
    static final String[] dfa_45s = {
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\11\uffff\1\2\27\uffff\1\1\3\uffff\1\1",
            "",
            "\3\1\1\uffff\2\1\1\7\1\12\2\uffff\1\11\4\uffff\1\5\1\6\3\uffff\1\10\1\uffff\1\13\1\uffff\1\1\1\uffff\3\1\3\uffff\1\3\3\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\1\1\1\4\1\uffff\1\1\1\uffff\1\3\21\uffff\1\1\3\uffff\1\1\23\uffff\2\1\2\uffff\1\1\17\uffff\1\1",
            "",
            "\3\3\1\uffff\4\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\3\3\7\uffff\1\3\1\uffff\2\3\3\uffff\1\3\3\uffff\1\3\7\uffff\2\3\1\uffff\1\3\23\uffff\1\3\3\uffff\1\3\11\uffff\1\1\3\uffff\2\1\1\uffff\1\1\2\uffff\2\3\2\uffff\1\3\1\uffff\1\1\15\uffff\1\3\30\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\11\uffff\1\3\27\uffff\1\3\3\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\11\uffff\1\3\27\uffff\1\3\3\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\11\uffff\1\3\27\uffff\1\3\3\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\11\uffff\1\3\27\uffff\1\3\3\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\11\uffff\1\3\27\uffff\1\3\3\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\11\uffff\1\3\27\uffff\1\3\3\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1",
            "\2\3\2\uffff\1\3\4\uffff\2\3\3\uffff\1\3\1\uffff\1\3\11\uffff\1\3\27\uffff\1\3\3\uffff\1\3\37\uffff\1\1\3\uffff\2\1\1\uffff\1\1\10\uffff\1\1\46\uffff\1\1\1\uffff\1\1"
    };

    static final short[] dfa_39 = DFA.unpackEncodedString(dfa_39s);
    static final short[] dfa_40 = DFA.unpackEncodedString(dfa_40s);
    static final char[] dfa_41 = DFA.unpackEncodedStringToUnsignedChars(dfa_41s);
    static final char[] dfa_42 = DFA.unpackEncodedStringToUnsignedChars(dfa_42s);
    static final short[] dfa_43 = DFA.unpackEncodedString(dfa_43s);
    static final short[] dfa_44 = DFA.unpackEncodedString(dfa_44s);
    static final short[][] dfa_45 = unpackEncodedStringArray(dfa_45s);

    class DFA27 extends DFA {

        public DFA27(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 27;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 510:7: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA37 extends DFA {

        public DFA37(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 37;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_14;
            this.max = dfa_15;
            this.accept = dfa_16;
            this.special = dfa_17;
            this.transition = dfa_18;
        }
        public String getDescription() {
            return "529:7: ( ( ( ( ruleN4Modifier ) )* ClassKeyword_1_2_0_0_2= Class ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_0_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_0_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_0_5= ruleTypeVariables )? (ClassExtendsClauseParserRuleCall_1_2_0_0_6= ruleClassExtendsClause )? ) | ( ( ( ruleN4Modifier ) )* InterfaceKeyword_1_2_0_1_2= Interface ( (TypingStrategyTypingStrategyDefSiteOperatorParserRuleCall_1_2_0_1_3_0= ruleTypingStrategyDefSiteOperator ) )? ( (NameBindingIdentifierParserRuleCall_1_2_0_1_4_0= ruleBindingIdentifier ) ) (TypeVariablesParserRuleCall_1_2_0_1_5= ruleTypeVariables )? (InterfaceImplementsListParserRuleCall_1_2_0_1_6= ruleInterfaceImplementsList )? ) )";
        }
    }
    static final String dfa_46s = "\36\uffff";
    static final String dfa_47s = "\1\uffff\33\35\2\uffff";
    static final String dfa_48s = "\1\4\33\122\2\uffff";
    static final String dfa_49s = "\1\176\33\160\2\uffff";
    static final String dfa_50s = "\34\uffff\1\2\1\1";
    static final String dfa_51s = "\36\uffff}>";
    static final String[] dfa_52s = {
            "\1\21\1\14\1\27\1\34\1\24\1\30\1\32\1\10\2\34\1\7\4\34\1\31\1\6\3\34\1\33\1\34\1\11\1\34\1\16\1\34\1\23\1\26\1\25\7\34\1\20\1\34\1\2\1\22\3\34\1\13\3\34\1\17\2\34\4\uffff\1\34\1\3\1\5\1\34\1\4\2\34\21\uffff\1\12\3\34\1\15\47\uffff\1\1",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "\1\34\15\uffff\1\35\17\uffff\1\35",
            "",
            ""
    };

    static final short[] dfa_46 = DFA.unpackEncodedString(dfa_46s);
    static final short[] dfa_47 = DFA.unpackEncodedString(dfa_47s);
    static final char[] dfa_48 = DFA.unpackEncodedStringToUnsignedChars(dfa_48s);
    static final char[] dfa_49 = DFA.unpackEncodedStringToUnsignedChars(dfa_49s);
    static final short[] dfa_50 = DFA.unpackEncodedString(dfa_50s);
    static final short[] dfa_51 = DFA.unpackEncodedString(dfa_51s);
    static final short[][] dfa_52 = unpackEncodedStringArray(dfa_52s);

    class DFA48 extends DFA {

        public DFA48(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 48;
            this.eot = dfa_46;
            this.eof = dfa_47;
            this.min = dfa_48;
            this.max = dfa_49;
            this.accept = dfa_50;
            this.special = dfa_51;
            this.transition = dfa_52;
        }
        public String getDescription() {
            return "696:1: ( ( (ImportedElementTExportableElementBindingIdentifierParserRuleCall_0_0_1= ruleBindingIdentifier ) ) | ( ( (ImportedElementTExportableElementIdentifierNameParserRuleCall_1_0_0_1= ruleIdentifierName ) ) AsKeyword_1_1= As ( (AliasBindingIdentifierParserRuleCall_1_2_0= ruleBindingIdentifier ) ) ) )";
        }
    }
    static final String dfa_53s = "\134\uffff";
    static final String dfa_54s = "\1\2\1\uffff\1\7\4\uffff\1\133\124\uffff";
    static final String dfa_55s = "\1\4\1\0\1\4\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_56s = "\1\u0099\1\0\1\u0095\2\uffff\1\0\1\uffff\1\0\124\uffff";
    static final String dfa_57s = "\3\uffff\2\1\1\uffff\1\2\1\uffff\124\1";
    static final String dfa_58s = "\1\4\1\3\1\2\2\uffff\1\1\1\uffff\1\0\124\uffff}>";
    static final String[] dfa_59s = {
            "\3\6\1\uffff\11\6\2\uffff\17\6\1\uffff\23\6\4\uffff\7\6\5\uffff\1\6\1\uffff\1\6\1\uffff\1\6\7\uffff\3\6\1\uffff\1\6\2\uffff\1\6\2\uffff\1\6\2\uffff\1\6\1\uffff\1\6\1\uffff\1\6\1\uffff\1\1\1\6\3\uffff\2\6\2\uffff\1\6\1\uffff\1\5\1\6\3\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\6\2\uffff\1\6\11\uffff\2\6\10\uffff\1\6\1\uffff\1\4\1\uffff\1\3",
            "\1\uffff",
            "\1\47\1\42\1\54\1\uffff\1\52\1\22\1\13\1\16\1\117\1\126\1\15\1\30\1\131\2\uffff\1\11\1\12\1\102\1\25\1\24\1\14\1\121\1\17\1\123\1\44\1\104\1\51\1\27\1\53\1\120\1\uffff\1\21\1\20\1\72\1\60\1\124\1\46\1\115\1\35\1\50\1\132\1\130\1\23\1\41\1\74\1\57\1\71\1\45\1\103\1\122\4\uffff\1\116\1\36\1\32\1\56\1\37\1\125\1\31\5\uffff\1\105\1\uffff\1\106\1\uffff\1\76\7\uffff\1\40\1\114\1\113\1\uffff\1\43\2\uffff\1\112\2\uffff\1\55\2\uffff\1\107\1\uffff\1\110\1\uffff\1\75\1\uffff\1\33\1\61\3\uffff\1\10\1\77\2\uffff\1\26\1\uffff\1\127\1\111\3\uffff\1\62\1\uffff\1\67\1\64\1\65\1\66\1\uffff\1\70\1\uffff\1\34\2\uffff\1\73\11\uffff\1\101\1\100\10\uffff\1\63",
            "",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_53 = DFA.unpackEncodedString(dfa_53s);
    static final short[] dfa_54 = DFA.unpackEncodedString(dfa_54s);
    static final char[] dfa_55 = DFA.unpackEncodedStringToUnsignedChars(dfa_55s);
    static final char[] dfa_56 = DFA.unpackEncodedStringToUnsignedChars(dfa_56s);
    static final short[] dfa_57 = DFA.unpackEncodedString(dfa_57s);
    static final short[] dfa_58 = DFA.unpackEncodedString(dfa_58s);
    static final short[][] dfa_59 = unpackEncodedStringArray(dfa_59s);

    class DFA51 extends DFA {

        public DFA51(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 51;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_58;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "813:4: ( ( ruleSemi )=>SemiParserRuleCall_1= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA51_7 = input.LA(1);

                         
                        int index51_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_7==EOF) && (synpred17_InternalN4JSParser())) {s = 91;}

                         
                        input.seek(index51_7);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA51_5 = input.LA(1);

                         
                        int index51_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalN4JSParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index51_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA51_2 = input.LA(1);

                         
                        int index51_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_2==EOF) ) {s = 7;}

                        
                        else if ((LA51_2>=-1 && LA51_2<=149 && (s=T2S.M_2[LA51_2-(-1)])>=0) && (synpred17_InternalN4JSParser())) { /* 84 cases */ }
                        input.seek(index51_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA51_1 = input.LA(1);

                         
                        int index51_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred17_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index51_1);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA51_0 = input.LA(1);

                         
                        int index51_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA51_0==Semicolon) ) {s = 1;}

                        else if ( (LA51_0==EOF) ) {s = 2;}

                        else if ( (LA51_0==RULE_EOL) && (synpred17_InternalN4JSParser())) {s = 3;}

                        else if ( (LA51_0==RULE_ML_COMMENT) && (synpred17_InternalN4JSParser())) {s = 4;}

                        else if ( (LA51_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA51_0>=Intersection && LA51_0<=Implements)||(LA51_0>=Promisify && LA51_0<=Default)||(LA51_0>=Private && LA51_0<=Break)||(LA51_0>=Class && LA51_0<=With)||(LA51_0>=For && LA51_0<=Var)||LA51_0==PlusSignPlusSign||LA51_0==HyphenMinusHyphenMinus||LA51_0==SolidusEqualsSign||(LA51_0>=As && LA51_0<=If)||LA51_0==Of||LA51_0==ExclamationMark||LA51_0==LeftParenthesis||LA51_0==PlusSign||LA51_0==HyphenMinus||LA51_0==Solidus||LA51_0==LessThanSign||(LA51_0>=CommercialAt && LA51_0<=LeftSquareBracket)||LA51_0==LeftCurlyBracket||LA51_0==Tilde||LA51_0==RULE_DOUBLE||(LA51_0>=RULE_HEX_INT && LA51_0<=RULE_LEGACY_OCTAL_INT)||LA51_0==RULE_SCIENTIFIC_INT||LA51_0==RULE_IDENTIFIER||LA51_0==RULE_STRING||(LA51_0>=RULE_TEMPLATE_HEAD && LA51_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA51_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index51_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 51, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_60s = "\130\uffff";
    static final String dfa_61s = "\1\2\127\uffff";
    static final String dfa_62s = "\1\4\1\0\126\uffff";
    static final String dfa_63s = "\1\u0099\1\0\126\uffff";
    static final String dfa_64s = "\2\uffff\1\2\124\uffff\1\1";
    static final String dfa_65s = "\1\uffff\1\0\126\uffff}>";
    static final String[] dfa_66s = {
            "\3\2\1\uffff\11\2\2\uffff\17\2\1\uffff\23\2\4\uffff\7\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\1\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_60 = DFA.unpackEncodedString(dfa_60s);
    static final short[] dfa_61 = DFA.unpackEncodedString(dfa_61s);
    static final char[] dfa_62 = DFA.unpackEncodedStringToUnsignedChars(dfa_62s);
    static final char[] dfa_63 = DFA.unpackEncodedStringToUnsignedChars(dfa_63s);
    static final short[] dfa_64 = DFA.unpackEncodedString(dfa_64s);
    static final short[] dfa_65 = DFA.unpackEncodedString(dfa_65s);
    static final short[][] dfa_66 = unpackEncodedStringArray(dfa_66s);

    class DFA70 extends DFA {

        public DFA70(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 70;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1048:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= ruleBlock ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA70_1 = input.LA(1);

                         
                        int index70_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred25_InternalN4JSParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index70_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 70, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA71 extends DFA {

        public DFA71(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 71;
            this.eot = dfa_60;
            this.eof = dfa_61;
            this.min = dfa_62;
            this.max = dfa_63;
            this.accept = dfa_64;
            this.special = dfa_65;
            this.transition = dfa_66;
        }
        public String getDescription() {
            return "1065:1: ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_0= norm1_Block ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA71_1 = input.LA(1);

                         
                        int index71_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred26_InternalN4JSParser()) ) {s = 87;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index71_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 71, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_67s = "\77\uffff";
    static final String dfa_68s = "\1\4\1\0\75\uffff";
    static final String dfa_69s = "\1\u0095\1\0\75\uffff";
    static final String dfa_70s = "\2\uffff\1\2\73\uffff\1\1";
    static final String dfa_71s = "\1\uffff\1\0\75\uffff}>";
    static final String[] dfa_72s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\5\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\4\2\7\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\1\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_67 = DFA.unpackEncodedString(dfa_67s);
    static final char[] dfa_68 = DFA.unpackEncodedStringToUnsignedChars(dfa_68s);
    static final char[] dfa_69 = DFA.unpackEncodedStringToUnsignedChars(dfa_69s);
    static final short[] dfa_70 = DFA.unpackEncodedString(dfa_70s);
    static final short[] dfa_71 = DFA.unpackEncodedString(dfa_71s);
    static final short[][] dfa_72 = unpackEncodedStringArray(dfa_72s);

    class DFA87 extends DFA {

        public DFA87(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 87;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1427:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA87_1 = input.LA(1);

                         
                        int index87_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred36_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index87_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 87, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA95 extends DFA {

        public DFA95(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 95;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1561:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= ruleBlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA95_1 = input.LA(1);

                         
                        int index95_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred40_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index95_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 95, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA103 extends DFA {

        public DFA103(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 103;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1695:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= ruleExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA103_1 = input.LA(1);

                         
                        int index103_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred44_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index103_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 103, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA111 extends DFA {

        public DFA111(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 111;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_68;
            this.max = dfa_69;
            this.accept = dfa_70;
            this.special = dfa_71;
            this.transition = dfa_72;
        }
        public String getDescription() {
            return "1829:211: ( ( ( ( LeftCurlyBracket )=> (HasBracesAroundBodyLeftCurlyBracketKeyword_1_0_0_0= LeftCurlyBracket ) ) ( (BodyBlockMinusBracesParserRuleCall_1_0_1_0= norm1_BlockMinusBraces ) ) RightCurlyBracketKeyword_1_0_2= RightCurlyBracket ) | ( (BodyExpressionDisguisedAsBlockParserRuleCall_1_1_0= norm1_ExpressionDisguisedAsBlock ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA111_1 = input.LA(1);

                         
                        int index111_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred48_InternalN4JSParser()) ) {s = 62;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index111_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 111, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_73s = "\120\uffff";
    static final String dfa_74s = "\1\4\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_75s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\22\0\57\uffff";
    static final String dfa_76s = "\14\uffff\1\3\1\uffff\1\4\22\uffff\1\6\37\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_77s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\57\uffff}>";
    static final String[] dfa_78s = {
            "\1\32\1\25\1\37\1\uffff\1\35\1\40\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\41\2\uffff\1\5\1\107\1\10\1\111\1\27\1\41\1\34\1\12\1\36\1\106\1\uffff\1\41\1\11\2\41\1\112\1\31\1\102\1\20\1\33\3\uffff\1\24\3\41\1\30\1\41\1\110\4\uffff\1\102\1\21\1\15\1\41\1\22\1\113\1\14\5\uffff\1\41\1\uffff\1\41\1\uffff\1\41\7\uffff\1\23\1\102\1\101\1\uffff\1\26\2\uffff\1\41\2\uffff\1\41\2\uffff\1\41\1\uffff\1\41\1\uffff\1\41\1\uffff\1\16\1\41\3\uffff\2\41\2\uffff\1\1\2\uffff\1\41\3\uffff\1\41\1\uffff\4\41\1\uffff\1\41\1\uffff\1\17\2\uffff\1\41\11\uffff\2\41\10\uffff\1\41",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_73 = DFA.unpackEncodedString(dfa_73s);
    static final char[] dfa_74 = DFA.unpackEncodedStringToUnsignedChars(dfa_74s);
    static final char[] dfa_75 = DFA.unpackEncodedStringToUnsignedChars(dfa_75s);
    static final short[] dfa_76 = DFA.unpackEncodedString(dfa_76s);
    static final short[] dfa_77 = DFA.unpackEncodedString(dfa_77s);
    static final short[][] dfa_78 = unpackEncodedStringArray(dfa_78s);

    class DFA138 extends DFA {

        public DFA138(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 138;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_74;
            this.max = dfa_75;
            this.accept = dfa_76;
            this.special = dfa_77;
            this.transition = dfa_78;
        }
        public String getDescription() {
            return "2321:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= ruleBlock ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= ruleFunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm1_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= ruleLabelledStatement ) | ExpressionStatementParserRuleCall_5= ruleExpressionStatement | IfStatementParserRuleCall_6= ruleIfStatement | IterationStatementParserRuleCall_7= ruleIterationStatement | ContinueStatementParserRuleCall_8= ruleContinueStatement | BreakStatementParserRuleCall_9= ruleBreakStatement | ReturnStatementParserRuleCall_10= ruleReturnStatement | WithStatementParserRuleCall_11= ruleWithStatement | SwitchStatementParserRuleCall_12= ruleSwitchStatement | ThrowStatementParserRuleCall_13= ruleThrowStatement | TryStatementParserRuleCall_14= ruleTryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA138_0 = input.LA(1);

                         
                        int index138_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA138_0>=10 && LA138_0<=110 && (s=T2S.M_3[LA138_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA138_0==Var) && (synpred55_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA138_0>=4 && LA138_0<=126 && (s=T2S.M_4[LA138_0-(4)])>=0)) { /* 21 cases */ }
                        else if ( (LA138_0==Delete||LA138_0==Typeof||LA138_0==Class||(LA138_0>=False && LA138_0<=Super)||(LA138_0>=Null && LA138_0<=True)||LA138_0==Void||LA138_0==New||LA138_0==PlusSignPlusSign||LA138_0==HyphenMinusHyphenMinus||LA138_0==SolidusEqualsSign||LA138_0==ExclamationMark||LA138_0==LeftParenthesis||LA138_0==PlusSign||LA138_0==HyphenMinus||LA138_0==Solidus||LA138_0==LessThanSign||(LA138_0>=CommercialAt && LA138_0<=LeftSquareBracket)||LA138_0==Tilde||LA138_0==RULE_DOUBLE||(LA138_0>=RULE_HEX_INT && LA138_0<=RULE_LEGACY_OCTAL_INT)||LA138_0==RULE_SCIENTIFIC_INT||LA138_0==RULE_STRING||(LA138_0>=RULE_TEMPLATE_HEAD && LA138_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA138_0==RULE_INT) ) {s = 33;}

                        else if ( (LA138_0==If) ) {s = 65;}

                        else if ( (LA138_0==While||LA138_0==For||LA138_0==Do) ) {s = 66;}

                        else if ( (LA138_0==Continue) ) {s = 69;}

                        else if ( (LA138_0==Break) ) {s = 70;}

                        else if ( (LA138_0==Return) ) {s = 71;}

                        else if ( (LA138_0==With) ) {s = 72;}

                        else if ( (LA138_0==Switch) ) {s = 73;}

                        else if ( (LA138_0==Throw) ) {s = 74;}

                        else if ( (LA138_0==Try) ) {s = 75;}

                        else if ( (LA138_0==Debugger) ) {s = 76;}

                         
                        input.seek(index138_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA138_1 = input.LA(1);

                         
                        int index138_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred53_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA138_2 = input.LA(1);

                         
                        int index138_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA138_3 = input.LA(1);

                         
                        int index138_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA138_4 = input.LA(1);

                         
                        int index138_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA138_5 = input.LA(1);

                         
                        int index138_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA138_6 = input.LA(1);

                         
                        int index138_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA138_7 = input.LA(1);

                         
                        int index138_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA138_8 = input.LA(1);

                         
                        int index138_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA138_9 = input.LA(1);

                         
                        int index138_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred55_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index138_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA138_10 = input.LA(1);

                         
                        int index138_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA138_11 = input.LA(1);

                         
                        int index138_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred54_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA138_13 = input.LA(1);

                         
                        int index138_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred55_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA138_15 = input.LA(1);

                         
                        int index138_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA138_16 = input.LA(1);

                         
                        int index138_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA138_17 = input.LA(1);

                         
                        int index138_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA138_18 = input.LA(1);

                         
                        int index138_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA138_19 = input.LA(1);

                         
                        int index138_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA138_20 = input.LA(1);

                         
                        int index138_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA138_21 = input.LA(1);

                         
                        int index138_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA138_22 = input.LA(1);

                         
                        int index138_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA138_23 = input.LA(1);

                         
                        int index138_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA138_24 = input.LA(1);

                         
                        int index138_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA138_25 = input.LA(1);

                         
                        int index138_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA138_26 = input.LA(1);

                         
                        int index138_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA138_27 = input.LA(1);

                         
                        int index138_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA138_28 = input.LA(1);

                         
                        int index138_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA138_29 = input.LA(1);

                         
                        int index138_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA138_30 = input.LA(1);

                         
                        int index138_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA138_31 = input.LA(1);

                         
                        int index138_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_31);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA138_32 = input.LA(1);

                         
                        int index138_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred56_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 33;}

                         
                        input.seek(index138_32);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 138, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_79s = "\1\4\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_80s = "\1\u0095\13\0\1\uffff\1\0\1\uffff\21\0\60\uffff";
    static final String dfa_81s = "\14\uffff\1\3\1\uffff\1\4\21\uffff\1\6\40\uffff\1\7\1\10\2\uffff\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\1\1\2\1\5";
    static final String dfa_82s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\uffff\1\14\1\uffff\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\60\uffff}>";
    static final String[] dfa_83s = {
            "\1\31\1\24\1\36\1\uffff\1\34\1\37\1\4\1\7\1\105\1\114\1\6\1\13\3\uffff\1\2\1\3\1\40\2\uffff\1\5\1\107\1\10\1\111\1\26\1\40\1\33\1\12\1\35\1\106\1\uffff\1\40\1\11\2\40\1\112\1\30\1\102\1\40\1\32\3\uffff\1\23\3\40\1\27\1\40\1\110\4\uffff\1\102\1\20\1\15\1\40\1\21\1\113\1\14\5\uffff\1\40\1\uffff\1\40\1\uffff\1\40\7\uffff\1\22\1\102\1\101\1\uffff\1\25\2\uffff\1\40\2\uffff\1\40\2\uffff\1\40\1\uffff\1\40\1\uffff\1\40\1\uffff\1\16\1\40\3\uffff\2\40\2\uffff\1\1\2\uffff\1\40\3\uffff\1\40\1\uffff\4\40\1\uffff\1\40\1\uffff\1\17\2\uffff\1\40\11\uffff\2\40\10\uffff\1\40",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_79 = DFA.unpackEncodedStringToUnsignedChars(dfa_79s);
    static final char[] dfa_80 = DFA.unpackEncodedStringToUnsignedChars(dfa_80s);
    static final short[] dfa_81 = DFA.unpackEncodedString(dfa_81s);
    static final short[] dfa_82 = DFA.unpackEncodedString(dfa_82s);
    static final short[][] dfa_83 = unpackEncodedStringArray(dfa_83s);

    class DFA139 extends DFA {

        public DFA139(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 139;
            this.eot = dfa_73;
            this.eof = dfa_73;
            this.min = dfa_79;
            this.max = dfa_80;
            this.accept = dfa_81;
            this.special = dfa_82;
            this.transition = dfa_83;
        }
        public String getDescription() {
            return "2379:1: ( ( ( ( LeftCurlyBracket ) )=>BlockParserRuleCall_0= norm1_Block ) | ( ( ( ( ( ruleN4Modifier ) )* ruleAsyncNoTrailingLineBreak Function ) )=>FunctionDeclarationParserRuleCall_1= norm1_FunctionDeclaration ) | ( ( ( ( ( ruleVariableStatementKeyword ) ) ) )=>VariableStatementParserRuleCall_2= norm3_VariableStatement ) | EmptyStatementParserRuleCall_3= ruleEmptyStatement | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=>LabelledStatementParserRuleCall_4= norm1_LabelledStatement ) | ExpressionStatementParserRuleCall_5= norm1_ExpressionStatement | IfStatementParserRuleCall_6= norm1_IfStatement | IterationStatementParserRuleCall_7= norm1_IterationStatement | ContinueStatementParserRuleCall_8= norm1_ContinueStatement | BreakStatementParserRuleCall_9= norm1_BreakStatement | ReturnStatementParserRuleCall_10= norm1_ReturnStatement | WithStatementParserRuleCall_11= norm1_WithStatement | SwitchStatementParserRuleCall_12= norm1_SwitchStatement | ThrowStatementParserRuleCall_13= norm1_ThrowStatement | TryStatementParserRuleCall_14= norm1_TryStatement | DebuggerStatementParserRuleCall_15= ruleDebuggerStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA139_0 = input.LA(1);

                         
                        int index139_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA139_0>=10 && LA139_0<=110 && (s=T2S.M_3[LA139_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA139_0==Var) && (synpred59_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA139_0>=4 && LA139_0<=126 && (s=T2S.M_6[LA139_0-(4)])>=0)) { /* 20 cases */ }
                        else if ( (LA139_0==Delete||LA139_0==Typeof||LA139_0==Class||(LA139_0>=False && LA139_0<=Super)||LA139_0==Yield||(LA139_0>=Null && LA139_0<=True)||LA139_0==Void||LA139_0==New||LA139_0==PlusSignPlusSign||LA139_0==HyphenMinusHyphenMinus||LA139_0==SolidusEqualsSign||LA139_0==ExclamationMark||LA139_0==LeftParenthesis||LA139_0==PlusSign||LA139_0==HyphenMinus||LA139_0==Solidus||LA139_0==LessThanSign||(LA139_0>=CommercialAt && LA139_0<=LeftSquareBracket)||LA139_0==Tilde||LA139_0==RULE_DOUBLE||(LA139_0>=RULE_HEX_INT && LA139_0<=RULE_LEGACY_OCTAL_INT)||LA139_0==RULE_SCIENTIFIC_INT||LA139_0==RULE_STRING||(LA139_0>=RULE_TEMPLATE_HEAD && LA139_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA139_0==RULE_INT) ) {s = 32;}

                        else if ( (LA139_0==If) ) {s = 65;}

                        else if ( (LA139_0==While||LA139_0==For||LA139_0==Do) ) {s = 66;}

                        else if ( (LA139_0==Continue) ) {s = 69;}

                        else if ( (LA139_0==Break) ) {s = 70;}

                        else if ( (LA139_0==Return) ) {s = 71;}

                        else if ( (LA139_0==With) ) {s = 72;}

                        else if ( (LA139_0==Switch) ) {s = 73;}

                        else if ( (LA139_0==Throw) ) {s = 74;}

                        else if ( (LA139_0==Try) ) {s = 75;}

                        else if ( (LA139_0==Debugger) ) {s = 76;}

                         
                        input.seek(index139_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA139_1 = input.LA(1);

                         
                        int index139_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred57_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA139_2 = input.LA(1);

                         
                        int index139_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA139_3 = input.LA(1);

                         
                        int index139_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA139_4 = input.LA(1);

                         
                        int index139_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA139_5 = input.LA(1);

                         
                        int index139_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA139_6 = input.LA(1);

                         
                        int index139_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA139_7 = input.LA(1);

                         
                        int index139_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA139_8 = input.LA(1);

                         
                        int index139_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA139_9 = input.LA(1);

                         
                        int index139_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred59_InternalN4JSParser()) ) {s = 12;}

                         
                        input.seek(index139_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA139_10 = input.LA(1);

                         
                        int index139_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA139_11 = input.LA(1);

                         
                        int index139_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred58_InternalN4JSParser()) ) {s = 78;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA139_13 = input.LA(1);

                         
                        int index139_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred59_InternalN4JSParser()) ) {s = 12;}

                        else if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA139_15 = input.LA(1);

                         
                        int index139_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_15);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA139_16 = input.LA(1);

                         
                        int index139_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_16);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA139_17 = input.LA(1);

                         
                        int index139_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_17);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA139_18 = input.LA(1);

                         
                        int index139_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_18);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA139_19 = input.LA(1);

                         
                        int index139_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_19);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA139_20 = input.LA(1);

                         
                        int index139_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA139_21 = input.LA(1);

                         
                        int index139_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_21);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA139_22 = input.LA(1);

                         
                        int index139_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_22);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA139_23 = input.LA(1);

                         
                        int index139_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_23);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA139_24 = input.LA(1);

                         
                        int index139_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_24);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA139_25 = input.LA(1);

                         
                        int index139_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_25);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA139_26 = input.LA(1);

                         
                        int index139_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_26);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA139_27 = input.LA(1);

                         
                        int index139_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_27);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA139_28 = input.LA(1);

                         
                        int index139_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_28);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA139_29 = input.LA(1);

                         
                        int index139_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_29);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA139_30 = input.LA(1);

                         
                        int index139_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_30);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA139_31 = input.LA(1);

                         
                        int index139_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred60_InternalN4JSParser()) ) {s = 79;}

                        else if ( (true) ) {s = 32;}

                         
                        input.seek(index139_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 139, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_84s = "\116\uffff";
    static final String dfa_85s = "\1\4\1\0\114\uffff";
    static final String dfa_86s = "\1\u0095\1\0\114\uffff";
    static final String dfa_87s = "\2\uffff\1\2\112\uffff\1\1";
    static final String dfa_88s = "\1\uffff\1\0\114\uffff}>";
    static final String[] dfa_89s = {
            "\3\2\1\uffff\10\2\3\uffff\3\2\2\uffff\12\2\1\uffff\11\2\3\uffff\7\2\4\uffff\7\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\3\2\1\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\1\1\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_84 = DFA.unpackEncodedString(dfa_84s);
    static final char[] dfa_85 = DFA.unpackEncodedStringToUnsignedChars(dfa_85s);
    static final char[] dfa_86 = DFA.unpackEncodedStringToUnsignedChars(dfa_86s);
    static final short[] dfa_87 = DFA.unpackEncodedString(dfa_87s);
    static final short[] dfa_88 = DFA.unpackEncodedString(dfa_88s);
    static final short[][] dfa_89 = unpackEncodedStringArray(dfa_89s);

    class DFA140 extends DFA {

        public DFA140(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 140;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "2443:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= ruleAnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= ruleRootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA140_1 = input.LA(1);

                         
                        int index140_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred61_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index140_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 140, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA141 extends DFA {

        public DFA141(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 141;
            this.eot = dfa_84;
            this.eof = dfa_84;
            this.min = dfa_85;
            this.max = dfa_86;
            this.accept = dfa_87;
            this.special = dfa_88;
            this.transition = dfa_89;
        }
        public String getDescription() {
            return "2463:1: ( ( ( ( CommercialAt ( This | Target | RULE_IDENTIFIER ) ) )=>AnnotatedFunctionDeclarationParserRuleCall_0= norm1_AnnotatedFunctionDeclaration ) | RootStatementParserRuleCall_1= norm1_RootStatement )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA141_1 = input.LA(1);

                         
                        int index141_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred62_InternalN4JSParser()) ) {s = 77;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index141_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 141, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA144 extends DFA {

        public DFA144(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 144;
            this.eot = dfa_39;
            this.eof = dfa_40;
            this.min = dfa_41;
            this.max = dfa_42;
            this.accept = dfa_43;
            this.special = dfa_44;
            this.transition = dfa_45;
        }
        public String getDescription() {
            return "()* loopback of 2553:2: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_90s = "\35\uffff";
    static final String dfa_91s = "\1\4\34\uffff";
    static final String dfa_92s = "\1\176\34\uffff";
    static final String dfa_93s = "\1\uffff\33\2\1\1";
    static final String dfa_94s = "\1\0\34\uffff}>";
    static final String[] dfa_95s = {
            "\1\21\1\14\1\27\1\uffff\1\24\1\30\1\32\1\10\2\uffff\1\7\4\uffff\1\31\1\6\3\uffff\1\33\1\uffff\1\11\1\uffff\1\16\1\uffff\1\23\1\26\1\25\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\1\34\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_90 = DFA.unpackEncodedString(dfa_90s);
    static final char[] dfa_91 = DFA.unpackEncodedStringToUnsignedChars(dfa_91s);
    static final char[] dfa_92 = DFA.unpackEncodedStringToUnsignedChars(dfa_92s);
    static final short[] dfa_93 = DFA.unpackEncodedString(dfa_93s);
    static final short[] dfa_94 = DFA.unpackEncodedString(dfa_94s);
    static final short[][] dfa_95 = unpackEncodedStringArray(dfa_95s);

    class DFA156 extends DFA {

        public DFA156(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 156;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "()* loopback of 2995:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA156_0 = input.LA(1);

                         
                        int index156_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA156_0>=4 && LA156_0<=126 && (s=T2S.M_7[LA156_0-(4)])>=0) && (synpred79_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA156_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index156_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 156, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA158 extends DFA {

        public DFA158(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 158;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "()* loopback of 3024:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA158_0 = input.LA(1);

                         
                        int index158_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA158_0>=4 && LA158_0<=126 && (s=T2S.M_7[LA158_0-(4)])>=0) && (synpred80_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA158_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index158_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 158, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_96s = "\34\uffff";
    static final String dfa_97s = "\1\4\33\uffff";
    static final String dfa_98s = "\1\176\33\uffff";
    static final String dfa_99s = "\1\uffff\32\2\1\1";
    static final String dfa_100s = "\1\0\33\uffff}>";
    static final String[] dfa_101s = {
            "\1\20\1\13\1\26\1\uffff\1\23\1\27\1\31\1\7\2\uffff\1\6\4\uffff\1\30\1\5\3\uffff\1\32\1\uffff\1\10\1\uffff\1\15\1\uffff\1\22\1\25\1\24\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\1\33\23\uffff\1\1",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_96 = DFA.unpackEncodedString(dfa_96s);
    static final char[] dfa_97 = DFA.unpackEncodedStringToUnsignedChars(dfa_97s);
    static final char[] dfa_98 = DFA.unpackEncodedStringToUnsignedChars(dfa_98s);
    static final short[] dfa_99 = DFA.unpackEncodedString(dfa_99s);
    static final short[] dfa_100 = DFA.unpackEncodedString(dfa_100s);
    static final short[][] dfa_101 = unpackEncodedStringArray(dfa_101s);

    class DFA160 extends DFA {

        public DFA160(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 160;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "()* loopback of 3053:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA160_0 = input.LA(1);

                         
                        int index160_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA160_0>=4 && LA160_0<=126 && (s=T2S.M_9[LA160_0-(4)])>=0) && (synpred81_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA160_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index160_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 160, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA162 extends DFA {

        public DFA162(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 162;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "()* loopback of 3082:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA162_0 = input.LA(1);

                         
                        int index162_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA162_0>=4 && LA162_0<=126 && (s=T2S.M_9[LA162_0-(4)])>=0) && (synpred82_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA162_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index162_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 162, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA164 extends DFA {

        public DFA164(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 164;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "()* loopback of 3111:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA164_0 = input.LA(1);

                         
                        int index164_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA164_0>=4 && LA164_0<=126 && (s=T2S.M_7[LA164_0-(4)])>=0) && (synpred83_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA164_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index164_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 164, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA167 extends DFA {

        public DFA167(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 167;
            this.eot = dfa_90;
            this.eof = dfa_90;
            this.min = dfa_91;
            this.max = dfa_92;
            this.accept = dfa_93;
            this.special = dfa_94;
            this.transition = dfa_95;
        }
        public String getDescription() {
            return "()* loopback of 3141:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA167_0 = input.LA(1);

                         
                        int index167_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA167_0>=4 && LA167_0<=126 && (s=T2S.M_7[LA167_0-(4)])>=0) && (synpred84_InternalN4JSParser())) { /* 27 cases */ }
                        else if ( (LA167_0==CommercialAt) ) {s = 28;}

                         
                        input.seek(index167_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 167, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA170 extends DFA {

        public DFA170(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 170;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "()* loopback of 3171:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA170_0 = input.LA(1);

                         
                        int index170_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA170_0>=4 && LA170_0<=126 && (s=T2S.M_9[LA170_0-(4)])>=0) && (synpred85_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA170_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index170_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 170, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA173 extends DFA {

        public DFA173(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 173;
            this.eot = dfa_96;
            this.eof = dfa_96;
            this.min = dfa_97;
            this.max = dfa_98;
            this.accept = dfa_99;
            this.special = dfa_100;
            this.transition = dfa_101;
        }
        public String getDescription() {
            return "()* loopback of 3201:2: ( (AnnotationsAnnotationParserRuleCall_0_0= ruleAnnotation ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA173_0 = input.LA(1);

                         
                        int index173_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA173_0>=4 && LA173_0<=126 && (s=T2S.M_9[LA173_0-(4)])>=0) && (synpred86_InternalN4JSParser())) { /* 26 cases */ }
                        else if ( (LA173_0==CommercialAt) ) {s = 27;}

                         
                        input.seek(index173_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 173, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_102s = "\1\3\1\4\1\1\2\uffff\1\0\1\uffff\1\2\124\uffff}>";
    static final short[] dfa_102 = DFA.unpackEncodedString(dfa_102s);

    class DFA182 extends DFA {

        public DFA182(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 182;
            this.eot = dfa_53;
            this.eof = dfa_54;
            this.min = dfa_55;
            this.max = dfa_56;
            this.accept = dfa_57;
            this.special = dfa_102;
            this.transition = dfa_59;
        }
        public String getDescription() {
            return "3544:157: ( ( ruleSemi )=>SemiParserRuleCall_6= ruleSemi )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA182_5 = input.LA(1);

                         
                        int index182_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalN4JSParser()) ) {s = 90;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index182_5);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA182_2 = input.LA(1);

                         
                        int index182_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_2==EOF) ) {s = 7;}

                        
                        else if ((LA182_2>=-1 && LA182_2<=149 && (s=T2S.M_2[LA182_2-(-1)])>=0) && (synpred93_InternalN4JSParser())) { /* 84 cases */ }
                        input.seek(index182_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA182_7 = input.LA(1);

                         
                        int index182_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_7==EOF) && (synpred93_InternalN4JSParser())) {s = 91;}

                         
                        input.seek(index182_7);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA182_0 = input.LA(1);

                         
                        int index182_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA182_0==Semicolon) ) {s = 1;}

                        else if ( (LA182_0==EOF) ) {s = 2;}

                        else if ( (LA182_0==RULE_EOL) && (synpred93_InternalN4JSParser())) {s = 3;}

                        else if ( (LA182_0==RULE_ML_COMMENT) && (synpred93_InternalN4JSParser())) {s = 4;}

                        else if ( (LA182_0==RightCurlyBracket) ) {s = 5;}

                        else if ( ((LA182_0>=Intersection && LA182_0<=Implements)||(LA182_0>=Promisify && LA182_0<=Default)||(LA182_0>=Private && LA182_0<=Break)||(LA182_0>=Class && LA182_0<=With)||(LA182_0>=For && LA182_0<=Var)||LA182_0==PlusSignPlusSign||LA182_0==HyphenMinusHyphenMinus||LA182_0==SolidusEqualsSign||(LA182_0>=As && LA182_0<=If)||LA182_0==Of||LA182_0==ExclamationMark||LA182_0==LeftParenthesis||LA182_0==PlusSign||LA182_0==HyphenMinus||LA182_0==Solidus||LA182_0==LessThanSign||(LA182_0>=CommercialAt && LA182_0<=LeftSquareBracket)||LA182_0==LeftCurlyBracket||LA182_0==Tilde||LA182_0==RULE_DOUBLE||(LA182_0>=RULE_HEX_INT && LA182_0<=RULE_LEGACY_OCTAL_INT)||LA182_0==RULE_SCIENTIFIC_INT||LA182_0==RULE_IDENTIFIER||LA182_0==RULE_STRING||(LA182_0>=RULE_TEMPLATE_HEAD && LA182_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA182_0==RULE_INT) ) {s = 6;}

                         
                        input.seek(index182_0);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA182_1 = input.LA(1);

                         
                        int index182_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred93_InternalN4JSParser()) ) {s = 4;}

                        else if ( (true) ) {s = 6;}

                         
                        input.seek(index182_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 182, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_103s = "\102\uffff";
    static final String dfa_104s = "\1\4\1\0\100\uffff";
    static final String dfa_105s = "\1\u0095\1\0\100\uffff";
    static final String dfa_106s = "\2\uffff\1\2\76\uffff\1\1";
    static final String dfa_107s = "\1\uffff\1\0\100\uffff}>";
    static final String[] dfa_108s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\3\2\2\uffff\1\2\1\uffff\1\2\1\uffff\5\2\2\uffff\4\2\1\uffff\1\2\1\uffff\2\2\3\uffff\6\2\6\uffff\1\2\1\1\2\2\1\uffff\1\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\7\uffff\1\2\3\uffff\1\2\2\uffff\1\2\2\uffff\1\2\2\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\3\uffff\2\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_103 = DFA.unpackEncodedString(dfa_103s);
    static final char[] dfa_104 = DFA.unpackEncodedStringToUnsignedChars(dfa_104s);
    static final char[] dfa_105 = DFA.unpackEncodedStringToUnsignedChars(dfa_105s);
    static final short[] dfa_106 = DFA.unpackEncodedString(dfa_106s);
    static final short[] dfa_107 = DFA.unpackEncodedString(dfa_107s);
    static final short[][] dfa_108 = unpackEncodedStringArray(dfa_108s);

    class DFA201 extends DFA {

        public DFA201(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 201;
            this.eot = dfa_103;
            this.eof = dfa_103;
            this.min = dfa_104;
            this.max = dfa_105;
            this.accept = dfa_106;
            this.special = dfa_107;
            this.transition = dfa_108;
        }
        public String getDescription() {
            return "3642:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm1_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm1_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await_1 | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA201_1 = input.LA(1);

                         
                        int index201_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred95_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index201_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 201, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_109s = "\1\4\2\uffff\1\0\75\uffff";
    static final String dfa_110s = "\1\u0095\2\uffff\1\0\75\uffff";
    static final String dfa_111s = "\1\uffff\2\1\1\uffff\1\2\73\uffff\1\3";
    static final String dfa_112s = "\1\0\2\uffff\1\1\75\uffff}>";
    static final String[] dfa_113s = {
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\5\4\2\uffff\1\4\1\2\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\6\uffff\1\4\1\3\2\4\1\uffff\1\1\5\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\1\100\1\4\3\uffff\2\4\2\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_109 = DFA.unpackEncodedStringToUnsignedChars(dfa_109s);
    static final char[] dfa_110 = DFA.unpackEncodedStringToUnsignedChars(dfa_110s);
    static final short[] dfa_111 = DFA.unpackEncodedString(dfa_111s);
    static final short[] dfa_112 = DFA.unpackEncodedString(dfa_112s);
    static final short[][] dfa_113 = unpackEncodedStringArray(dfa_113s);

    class DFA200 extends DFA {

        public DFA200(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 200;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "3673:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await_1 | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= ruleExpression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm1_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA200_0 = input.LA(1);

                         
                        int index200_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA200_0==Var) && (synpred96_InternalN4JSParser())) {s = 1;}

                        else if ( (LA200_0==Const) && (synpred96_InternalN4JSParser())) {s = 2;}

                        else if ( (LA200_0==Let) ) {s = 3;}

                        else if ( ((LA200_0>=Intersection && LA200_0<=Implements)||(LA200_0>=Promisify && LA200_0<=Abstract)||(LA200_0>=External && LA200_0<=Function)||(LA200_0>=Private && LA200_0<=Delete)||LA200_0==Public||LA200_0==Static||(LA200_0>=Target && LA200_0<=Await_1)||LA200_0==Class||(LA200_0>=False && LA200_0<=Super)||LA200_0==Union||(LA200_0>=Yield && LA200_0<=This)||(LA200_0>=From && LA200_0<=Void)||LA200_0==Get||(LA200_0>=New && LA200_0<=Set)||LA200_0==PlusSignPlusSign||LA200_0==HyphenMinusHyphenMinus||LA200_0==SolidusEqualsSign||LA200_0==As||LA200_0==Of||LA200_0==ExclamationMark||LA200_0==LeftParenthesis||LA200_0==PlusSign||LA200_0==HyphenMinus||LA200_0==Solidus||LA200_0==LessThanSign||(LA200_0>=CommercialAt && LA200_0<=LeftSquareBracket)||LA200_0==LeftCurlyBracket||LA200_0==Tilde||LA200_0==RULE_DOUBLE||(LA200_0>=RULE_HEX_INT && LA200_0<=RULE_LEGACY_OCTAL_INT)||LA200_0==RULE_SCIENTIFIC_INT||LA200_0==RULE_IDENTIFIER||LA200_0==RULE_STRING||(LA200_0>=RULE_TEMPLATE_HEAD && LA200_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA200_0==RULE_INT) ) {s = 4;}

                        else if ( (LA200_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index200_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA200_3 = input.LA(1);

                         
                        int index200_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred96_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index200_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 200, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_114s = "\40\uffff";
    static final String dfa_115s = "\1\4\33\125\1\uffff\2\0\1\uffff";
    static final String dfa_116s = "\1\176\33\147\1\uffff\2\0\1\uffff";
    static final String dfa_117s = "\34\uffff\1\2\2\uffff\1\1";
    static final String dfa_118s = "\35\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_119s = {
            "\1\21\1\14\1\27\1\uffff\1\24\1\30\1\32\1\10\2\uffff\1\7\4\uffff\1\31\1\6\3\uffff\1\33\1\uffff\1\11\1\uffff\1\16\1\uffff\1\23\1\26\1\25\7\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\uffff\1\17\7\uffff\1\3\1\5\1\uffff\1\4\23\uffff\1\12\3\uffff\1\15\23\uffff\2\34\2\uffff\1\34\17\uffff\1\1",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "\1\35\1\36\11\uffff\1\34\3\uffff\2\34\1\uffff\1\34",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_114 = DFA.unpackEncodedString(dfa_114s);
    static final char[] dfa_115 = DFA.unpackEncodedStringToUnsignedChars(dfa_115s);
    static final char[] dfa_116 = DFA.unpackEncodedStringToUnsignedChars(dfa_116s);
    static final short[] dfa_117 = DFA.unpackEncodedString(dfa_117s);
    static final short[] dfa_118 = DFA.unpackEncodedString(dfa_118s);
    static final short[][] dfa_119 = unpackEncodedStringArray(dfa_119s);

    class DFA192 extends DFA {

        public DFA192(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 192;
            this.eot = dfa_114;
            this.eof = dfa_114;
            this.min = dfa_115;
            this.max = dfa_116;
            this.accept = dfa_117;
            this.special = dfa_118;
            this.transition = dfa_119;
        }
        public String getDescription() {
            return "3680:2: ( ( ( ( ( ( ruleBindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await_1 | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= ruleBindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm4_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= ruleVariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm1_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm1_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm1_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm1_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA192_29 = input.LA(1);

                         
                        int index192_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index192_29);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA192_30 = input.LA(1);

                         
                        int index192_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred97_InternalN4JSParser()) ) {s = 31;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index192_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 192, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_120s = "\1\4\76\uffff";
    static final String dfa_121s = "\1\u0095\76\uffff";
    static final String dfa_122s = "\1\uffff\75\1\1\2";
    static final String dfa_123s = "\1\0\76\uffff}>";
    static final String[] dfa_124s = {
            "\1\25\1\20\1\31\1\uffff\1\30\1\32\1\34\1\14\2\uffff\1\13\1\61\3\uffff\1\33\1\12\1\65\2\uffff\1\35\1\uffff\1\15\1\uffff\1\22\1\67\1\27\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\1\54\1\37\1\51\1\23\1\66\6\uffff\1\7\1\11\1\36\1\10\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\16\3\uffff\1\21\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_120 = DFA.unpackEncodedStringToUnsignedChars(dfa_120s);
    static final char[] dfa_121 = DFA.unpackEncodedStringToUnsignedChars(dfa_121s);
    static final short[] dfa_122 = DFA.unpackEncodedString(dfa_122s);
    static final short[] dfa_123 = DFA.unpackEncodedString(dfa_123s);
    static final short[][] dfa_124 = unpackEncodedStringArray(dfa_124s);

    class DFA185 extends DFA {

        public DFA185(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 185;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_120;
            this.max = dfa_121;
            this.accept = dfa_122;
            this.special = dfa_123;
            this.transition = dfa_124;
        }
        public String getDescription() {
            return "3824:3: ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm1_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA185_0 = input.LA(1);

                         
                        int index185_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA185_0>=4 && LA185_0<=149 && (s=T2S.M_16[LA185_0-(4)])>=0) && (synpred98_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA185_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index185_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 185, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA219 extends DFA {

        public DFA219(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 219;
            this.eot = dfa_103;
            this.eof = dfa_103;
            this.min = dfa_104;
            this.max = dfa_105;
            this.accept = dfa_106;
            this.special = dfa_107;
            this.transition = dfa_108;
        }
        public String getDescription() {
            return "3987:154: ( ( ( ( ( ( ruleLetIdentifierRef ) ) ( ( In ) ) ( ( norm3_Expression ) ) RightParenthesis ) )=> ( ( (InitExprLetIdentifierRefParserRuleCall_3_0_0_0_0= ruleLetIdentifierRef ) ) ( (ForInInKeyword_3_0_0_1_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_0_0_2_0= norm3_Expression ) ) RightParenthesisKeyword_3_0_0_3= RightParenthesis ) ) | ( ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) ) RightParenthesisKeyword_3_1_1= RightParenthesis ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA219_1 = input.LA(1);

                         
                        int index219_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred99_InternalN4JSParser()) ) {s = 65;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index219_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 219, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA218 extends DFA {

        public DFA218(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 218;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_109;
            this.max = dfa_110;
            this.accept = dfa_111;
            this.special = dfa_112;
            this.transition = dfa_113;
        }
        public String getDescription() {
            return "4018:7: ( ( ( ( Var | Const | Let )=> ( ruleVariableStatementKeyword ) ) ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) ) ) | ( ( (InitExprExpressionParserRuleCall_3_1_0_1_0_0= norm2_Expression ) ) ( (SemicolonKeyword_3_1_0_1_1_0_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_0_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_1_1_0_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_1_1_0_3_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) | (SemicolonKeyword_3_1_0_2_0= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_2_1_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_2_2= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_2_3_0= norm3_Expression ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA218_0 = input.LA(1);

                         
                        int index218_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA218_0==Var) && (synpred100_InternalN4JSParser())) {s = 1;}

                        else if ( (LA218_0==Const) && (synpred100_InternalN4JSParser())) {s = 2;}

                        else if ( (LA218_0==Let) ) {s = 3;}

                        else if ( ((LA218_0>=Intersection && LA218_0<=Implements)||(LA218_0>=Promisify && LA218_0<=Abstract)||(LA218_0>=External && LA218_0<=Function)||(LA218_0>=Private && LA218_0<=Delete)||LA218_0==Public||LA218_0==Static||(LA218_0>=Target && LA218_0<=Await_1)||LA218_0==Class||(LA218_0>=False && LA218_0<=Super)||LA218_0==Union||(LA218_0>=Yield && LA218_0<=This)||(LA218_0>=From && LA218_0<=Void)||LA218_0==Get||(LA218_0>=New && LA218_0<=Set)||LA218_0==PlusSignPlusSign||LA218_0==HyphenMinusHyphenMinus||LA218_0==SolidusEqualsSign||LA218_0==As||LA218_0==Of||LA218_0==ExclamationMark||LA218_0==LeftParenthesis||LA218_0==PlusSign||LA218_0==HyphenMinus||LA218_0==Solidus||LA218_0==LessThanSign||(LA218_0>=CommercialAt && LA218_0<=LeftSquareBracket)||LA218_0==LeftCurlyBracket||LA218_0==Tilde||LA218_0==RULE_DOUBLE||(LA218_0>=RULE_HEX_INT && LA218_0<=RULE_LEGACY_OCTAL_INT)||LA218_0==RULE_SCIENTIFIC_INT||LA218_0==RULE_IDENTIFIER||LA218_0==RULE_STRING||(LA218_0>=RULE_TEMPLATE_HEAD && LA218_0<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA218_0==RULE_INT) ) {s = 4;}

                        else if ( (LA218_0==Semicolon) ) {s = 64;}

                         
                        input.seek(index218_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA218_3 = input.LA(1);

                         
                        int index218_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred100_InternalN4JSParser()) ) {s = 2;}

                        else if ( (true) ) {s = 4;}

                         
                        input.seek(index218_3);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 218, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_125s = "\37\uffff";
    static final String dfa_126s = "\1\4\32\125\1\uffff\2\0\1\uffff";
    static final String dfa_127s = "\1\176\32\147\1\uffff\2\0\1\uffff";
    static final String dfa_128s = "\33\uffff\1\2\2\uffff\1\1";
    static final String dfa_129s = "\34\uffff\1\0\1\1\1\uffff}>";
    static final String[] dfa_130s = {
            "\1\20\1\13\1\26\1\uffff\1\23\1\27\1\31\1\7\2\uffff\1\6\4\uffff\1\30\1\5\3\uffff\1\32\1\uffff\1\10\1\uffff\1\15\1\uffff\1\22\1\25\1\24\7\uffff\1\17\2\uffff\1\21\3\uffff\1\12\3\uffff\1\16\7\uffff\1\2\1\4\1\uffff\1\3\23\uffff\1\11\3\uffff\1\14\23\uffff\2\33\2\uffff\1\33\17\uffff\1\1",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "\1\34\1\35\11\uffff\1\33\3\uffff\2\33\1\uffff\1\33",
            "",
            "\1\uffff",
            "\1\uffff",
            ""
    };

    static final short[] dfa_125 = DFA.unpackEncodedString(dfa_125s);
    static final char[] dfa_126 = DFA.unpackEncodedStringToUnsignedChars(dfa_126s);
    static final char[] dfa_127 = DFA.unpackEncodedStringToUnsignedChars(dfa_127s);
    static final short[] dfa_128 = DFA.unpackEncodedString(dfa_128s);
    static final short[] dfa_129 = DFA.unpackEncodedString(dfa_129s);
    static final short[][] dfa_130 = unpackEncodedStringArray(dfa_130s);

    class DFA210 extends DFA {

        public DFA210(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 210;
            this.eot = dfa_125;
            this.eof = dfa_125;
            this.min = dfa_126;
            this.max = dfa_127;
            this.accept = dfa_128;
            this.special = dfa_129;
            this.transition = dfa_130;
        }
        public String getDescription() {
            return "4025:2: ( ( ( ( ( ( norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( ( In ) ) | ( ( Of ) ) ) ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )? ) )=> ( ( (VarDeclsOrBindingsBindingIdentifierAsVariableDeclarationParserRuleCall_3_1_0_0_1_0_0_0_0= norm2_BindingIdentifierAsVariableDeclaration ) ) ( ( (ForInInKeyword_3_1_0_0_1_0_0_1_0_0= In ) ) | ( (ForOfOfKeyword_3_1_0_0_1_0_0_1_1_0= Of ) ) ) ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )? ) ) | ( ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_0_0= norm6_VariableDeclarationOrBinding ) ) ( ( (CommaKeyword_3_1_0_0_1_1_1_0_0_0= Comma ( (VarDeclsOrBindingsVariableDeclarationOrBindingParserRuleCall_3_1_0_0_1_1_1_0_0_1_0= norm2_VariableDeclarationOrBinding ) ) )* SemicolonKeyword_3_1_0_0_1_1_1_0_1= Semicolon ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_0_2_0= norm3_Expression ) )? SemicolonKeyword_3_1_0_0_1_1_1_0_3= Semicolon ( (UpdateExprExpressionParserRuleCall_3_1_0_0_1_1_1_0_4_0= norm3_Expression ) )? ) | ( ( (ForInInKeyword_3_1_0_0_1_1_1_1_0_0= In ) ) ( (ExpressionExpressionParserRuleCall_3_1_0_0_1_1_1_1_1_0= norm3_Expression ) )? ) | ( ( (ForOfOfKeyword_3_1_0_0_1_1_1_2_0_0= Of ) ) ( (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_1_1_2_1_0= norm3_AssignmentExpression ) )? ) ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA210_28 = input.LA(1);

                         
                        int index210_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index210_28);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA210_29 = input.LA(1);

                         
                        int index210_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred101_InternalN4JSParser()) ) {s = 30;}

                        else if ( (true) ) {s = 27;}

                         
                        input.seek(index210_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 210, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_131s = {
            "\1\24\1\17\1\30\1\uffff\1\27\1\31\1\33\1\13\2\uffff\1\12\1\61\3\uffff\1\32\1\11\1\65\2\uffff\1\34\1\uffff\1\14\1\uffff\1\21\1\67\1\26\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\6\uffff\1\6\1\10\1\36\1\7\7\uffff\1\70\1\uffff\1\71\1\uffff\1\56\7\uffff\1\15\3\uffff\1\20\2\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\uffff\1\73\1\uffff\1\55\2\uffff\1\41\3\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_131 = unpackEncodedStringArray(dfa_131s);

    class DFA203 extends DFA {

        public DFA203(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 203;
            this.eot = dfa_67;
            this.eof = dfa_67;
            this.min = dfa_120;
            this.max = dfa_121;
            this.accept = dfa_122;
            this.special = dfa_123;
            this.transition = dfa_131;
        }
        public String getDescription() {
            return "4169:3: ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_1_0_0_1_0_0_2_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA203_0 = input.LA(1);

                         
                        int index203_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA203_0>=4 && LA203_0<=149 && (s=T2S.M_17[LA203_0-(4)])>=0) && (synpred102_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA203_0==RightParenthesis) ) {s = 62;}

                         
                        input.seek(index203_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 203, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_132s = "\3\uffff\33\36\2\uffff";
    static final String dfa_133s = "\1\4\2\uffff\33\135\2\uffff";
    static final String dfa_134s = "\1\176\2\uffff\33\144\2\uffff";
    static final String dfa_135s = "\1\uffff\2\1\33\uffff\1\3\1\2";
    static final String dfa_136s = "\1\0\2\uffff\1\10\1\17\1\1\1\11\1\20\1\26\1\2\1\12\1\21\1\27\1\3\1\13\1\22\1\30\1\4\1\14\1\23\1\31\1\5\1\15\1\24\1\32\1\6\1\16\1\25\1\33\1\7\2\uffff}>";
    static final String[] dfa_137s = {
            "\1\23\1\16\1\31\1\uffff\1\26\1\32\1\34\1\12\2\uffff\1\11\4\uffff\1\33\1\10\3\uffff\1\35\1\uffff\1\13\1\uffff\1\20\1\uffff\1\25\1\30\1\27\7\uffff\1\22\1\uffff\1\4\1\24\3\uffff\1\15\3\uffff\1\21\7\uffff\1\5\1\7\1\uffff\1\6\23\uffff\1\14\3\uffff\1\17\24\uffff\1\2\2\uffff\1\1\17\uffff\1\3",
            "",
            "",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "\1\36\6\uffff\1\37",
            "",
            ""
    };
    static final short[] dfa_132 = DFA.unpackEncodedString(dfa_132s);
    static final char[] dfa_133 = DFA.unpackEncodedStringToUnsignedChars(dfa_133s);
    static final char[] dfa_134 = DFA.unpackEncodedStringToUnsignedChars(dfa_134s);
    static final short[] dfa_135 = DFA.unpackEncodedString(dfa_135s);
    static final short[] dfa_136 = DFA.unpackEncodedString(dfa_136s);
    static final short[][] dfa_137 = unpackEncodedStringArray(dfa_137s);

    class DFA240 extends DFA {

        public DFA240(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 240;
            this.eot = dfa_114;
            this.eof = dfa_132;
            this.min = dfa_133;
            this.max = dfa_134;
            this.accept = dfa_135;
            this.special = dfa_136;
            this.transition = dfa_137;
        }
        public String getDescription() {
            return "4990:1: ( ( ( ( ruleBindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= ruleBindingPattern ) ) | ( ( ( ( ( ruleBindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= ruleBindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (NameBindingIdentifierParserRuleCall_2_0= ruleBindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA240_0 = input.LA(1);

                         
                        int index240_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_0==LeftCurlyBracket) && (synpred109_InternalN4JSParser())) {s = 1;}

                        else if ( (LA240_0==LeftSquareBracket) && (synpred109_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA240_0>=4 && LA240_0<=126 && (s=T2S.M_18[LA240_0-(4)])>=0)) { /* 27 cases */ }
                        input.seek(index240_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA240_5 = input.LA(1);

                         
                        int index240_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_5==EOF||LA240_5==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_5==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_5);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA240_9 = input.LA(1);

                         
                        int index240_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_9==EOF||LA240_9==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_9==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_9);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA240_13 = input.LA(1);

                         
                        int index240_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_13==EOF||LA240_13==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_13==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_13);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA240_17 = input.LA(1);

                         
                        int index240_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_17==EOF||LA240_17==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_17==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_17);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA240_21 = input.LA(1);

                         
                        int index240_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_21==EOF||LA240_21==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_21==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_21);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA240_25 = input.LA(1);

                         
                        int index240_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_25==EOF||LA240_25==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_25==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_25);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA240_29 = input.LA(1);

                         
                        int index240_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_29==EOF||LA240_29==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_29==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_29);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA240_3 = input.LA(1);

                         
                        int index240_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_3==EOF||LA240_3==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_3==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_3);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA240_6 = input.LA(1);

                         
                        int index240_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_6==EOF||LA240_6==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_6==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA240_10 = input.LA(1);

                         
                        int index240_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_10==EOF||LA240_10==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_10==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA240_14 = input.LA(1);

                         
                        int index240_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_14==EOF||LA240_14==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_14==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_14);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA240_18 = input.LA(1);

                         
                        int index240_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_18==EOF||LA240_18==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_18==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_18);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA240_22 = input.LA(1);

                         
                        int index240_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_22==EOF||LA240_22==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_22==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_22);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA240_26 = input.LA(1);

                         
                        int index240_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_26==EOF||LA240_26==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_26==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_26);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA240_4 = input.LA(1);

                         
                        int index240_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_4==EOF||LA240_4==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_4==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_4);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA240_7 = input.LA(1);

                         
                        int index240_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_7==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                        else if ( (LA240_7==EOF||LA240_7==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index240_7);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA240_11 = input.LA(1);

                         
                        int index240_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_11==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                        else if ( (LA240_11==EOF||LA240_11==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index240_11);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA240_15 = input.LA(1);

                         
                        int index240_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_15==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                        else if ( (LA240_15==EOF||LA240_15==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index240_15);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA240_19 = input.LA(1);

                         
                        int index240_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_19==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                        else if ( (LA240_19==EOF||LA240_19==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index240_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA240_23 = input.LA(1);

                         
                        int index240_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_23==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                        else if ( (LA240_23==EOF||LA240_23==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index240_23);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA240_27 = input.LA(1);

                         
                        int index240_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_27==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                        else if ( (LA240_27==EOF||LA240_27==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index240_27);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA240_8 = input.LA(1);

                         
                        int index240_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_8==EOF||LA240_8==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_8==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_8);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA240_12 = input.LA(1);

                         
                        int index240_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_12==EOF||LA240_12==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_12==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_12);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA240_16 = input.LA(1);

                         
                        int index240_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_16==EOF||LA240_16==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_16==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_16);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA240_20 = input.LA(1);

                         
                        int index240_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_20==EOF||LA240_20==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_20==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_20);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA240_24 = input.LA(1);

                         
                        int index240_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_24==EOF||LA240_24==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_24==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_24);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA240_28 = input.LA(1);

                         
                        int index240_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA240_28==EOF||LA240_28==RightParenthesis) ) {s = 30;}

                        else if ( (LA240_28==Colon) && (synpred110_InternalN4JSParser())) {s = 31;}

                         
                        input.seek(index240_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 240, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_138s = "\1\4\2\uffff\32\135\2\uffff";
    static final String dfa_139s = "\1\176\2\uffff\32\144\2\uffff";
    static final String dfa_140s = "\1\uffff\2\1\32\uffff\1\2\1\3";
    static final String dfa_141s = "\1\7\2\uffff\1\0\1\27\1\4\1\13\1\21\1\30\1\5\1\14\1\22\1\31\1\6\1\15\1\23\1\32\1\1\1\10\1\16\1\24\1\2\1\11\1\17\1\25\1\3\1\12\1\20\1\26\2\uffff}>";
    static final String[] dfa_142s = {
            "\1\22\1\15\1\30\1\uffff\1\25\1\31\1\33\1\11\2\uffff\1\10\4\uffff\1\32\1\7\3\uffff\1\34\1\uffff\1\12\1\uffff\1\17\1\uffff\1\24\1\27\1\26\7\uffff\1\21\2\uffff\1\23\3\uffff\1\14\3\uffff\1\20\7\uffff\1\4\1\6\1\uffff\1\5\23\uffff\1\13\3\uffff\1\16\24\uffff\1\2\2\uffff\1\1\17\uffff\1\3",
            "",
            "",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "\1\36\6\uffff\1\35",
            "",
            ""
    };
    static final char[] dfa_138 = DFA.unpackEncodedStringToUnsignedChars(dfa_138s);
    static final char[] dfa_139 = DFA.unpackEncodedStringToUnsignedChars(dfa_139s);
    static final short[] dfa_140 = DFA.unpackEncodedString(dfa_140s);
    static final short[] dfa_141 = DFA.unpackEncodedString(dfa_141s);
    static final short[][] dfa_142 = unpackEncodedStringArray(dfa_142s);

    class DFA241 extends DFA {

        public DFA241(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 241;
            this.eot = dfa_125;
            this.eof = dfa_125;
            this.min = dfa_138;
            this.max = dfa_139;
            this.accept = dfa_140;
            this.special = dfa_141;
            this.transition = dfa_142;
        }
        public String getDescription() {
            return "5027:1: ( ( ( ( norm1_BindingPattern ) )=> (BindingPatternBindingPatternParserRuleCall_0_0= norm1_BindingPattern ) ) | ( ( ( ( ( norm1_BindingIdentifier ) ) Colon ) )=> ( ( (NameBindingIdentifierParserRuleCall_1_0_0_0= norm1_BindingIdentifier ) ) ( ( Colon )=>ColonSepTypeRefParserRuleCall_1_0_1= ruleColonSepTypeRef ) ) ) | ( (NameBindingIdentifierParserRuleCall_2_0= norm1_BindingIdentifier ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA241_3 = input.LA(1);

                         
                        int index241_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_3==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_3==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA241_17 = input.LA(1);

                         
                        int index241_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_17==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_17==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_17);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA241_21 = input.LA(1);

                         
                        int index241_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_21==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_21==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_21);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA241_25 = input.LA(1);

                         
                        int index241_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_25==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_25==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_25);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA241_5 = input.LA(1);

                         
                        int index241_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_5==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_5==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA241_9 = input.LA(1);

                         
                        int index241_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_9==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_9==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_9);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA241_13 = input.LA(1);

                         
                        int index241_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_13==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_13==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_13);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA241_0 = input.LA(1);

                         
                        int index241_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_0==LeftCurlyBracket) && (synpred112_InternalN4JSParser())) {s = 1;}

                        else if ( (LA241_0==LeftSquareBracket) && (synpred112_InternalN4JSParser())) {s = 2;}

                        
                        else if ((LA241_0>=4 && LA241_0<=126 && (s=T2S.M_19[LA241_0-(4)])>=0)) { /* 26 cases */ }
                        input.seek(index241_0);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA241_18 = input.LA(1);

                         
                        int index241_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_18==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_18==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA241_22 = input.LA(1);

                         
                        int index241_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_22==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_22==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_22);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA241_26 = input.LA(1);

                         
                        int index241_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_26==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_26==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_26);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA241_6 = input.LA(1);

                         
                        int index241_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_6==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_6==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_6);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA241_10 = input.LA(1);

                         
                        int index241_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_10==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_10==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_10);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA241_14 = input.LA(1);

                         
                        int index241_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_14==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                        else if ( (LA241_14==RightParenthesis) ) {s = 30;}

                         
                        input.seek(index241_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA241_19 = input.LA(1);

                         
                        int index241_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_19==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_19==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_19);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA241_23 = input.LA(1);

                         
                        int index241_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_23==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_23==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_23);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA241_27 = input.LA(1);

                         
                        int index241_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_27==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_27==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_27);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA241_7 = input.LA(1);

                         
                        int index241_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_7==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_7==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_7);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA241_11 = input.LA(1);

                         
                        int index241_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_11==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_11==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_11);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA241_15 = input.LA(1);

                         
                        int index241_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_15==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_15==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_15);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA241_20 = input.LA(1);

                         
                        int index241_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_20==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_20==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA241_24 = input.LA(1);

                         
                        int index241_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_24==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_24==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_24);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA241_28 = input.LA(1);

                         
                        int index241_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_28==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_28==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_28);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA241_4 = input.LA(1);

                         
                        int index241_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_4==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_4==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_4);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA241_8 = input.LA(1);

                         
                        int index241_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_8==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_8==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_8);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA241_12 = input.LA(1);

                         
                        int index241_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_12==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_12==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_12);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA241_16 = input.LA(1);

                         
                        int index241_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA241_16==RightParenthesis) ) {s = 30;}

                        else if ( (LA241_16==Colon) && (synpred113_InternalN4JSParser())) {s = 29;}

                         
                        input.seek(index241_16);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 241, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_143s = "\20\uffff";
    static final String dfa_144s = "\4\uffff\1\3\13\uffff";
    static final String dfa_145s = "\1\4\3\uffff\1\7\13\uffff";
    static final String dfa_146s = "\1\u0095\3\uffff\1\u0099\13\uffff";
    static final String dfa_147s = "\1\uffff\1\1\1\2\1\3\1\uffff\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\14\1\15\2\13";
    static final String dfa_148s = "\4\uffff\1\0\13\uffff}>";
    static final String[] dfa_149s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\1\uffff\2\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\1\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\46\uffff\1\3\1\uffff\2\3\7\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_143 = DFA.unpackEncodedString(dfa_143s);
    static final short[] dfa_144 = DFA.unpackEncodedString(dfa_144s);
    static final char[] dfa_145 = DFA.unpackEncodedStringToUnsignedChars(dfa_145s);
    static final char[] dfa_146 = DFA.unpackEncodedStringToUnsignedChars(dfa_146s);
    static final short[] dfa_147 = DFA.unpackEncodedString(dfa_147s);
    static final short[] dfa_148 = DFA.unpackEncodedString(dfa_148s);
    static final short[][] dfa_149 = unpackEncodedStringArray(dfa_149s);

    class DFA242 extends DFA {

        public DFA242(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 242;
            this.eot = dfa_143;
            this.eof = dfa_144;
            this.min = dfa_145;
            this.max = dfa_146;
            this.accept = dfa_147;
            this.special = dfa_148;
            this.transition = dfa_149;
        }
        public String getDescription() {
            return "5132:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= ruleIdentifierRef | ParameterizedCallExpressionParserRuleCall_3= ruleParameterizedCallExpression | LiteralParserRuleCall_4= ruleLiteral | ArrayLiteralParserRuleCall_5= ruleArrayLiteral | ObjectLiteralParserRuleCall_6= ruleObjectLiteral | ParenExpressionParserRuleCall_7= ruleParenExpression | AnnotatedExpressionParserRuleCall_8= ruleAnnotatedExpression | FunctionExpressionParserRuleCall_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_10= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_11= ruleN4ClassExpression | TemplateLiteralParserRuleCall_12= ruleTemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA242_4 = input.LA(1);

                         
                        int index242_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA242_4==EOF||LA242_4==Instanceof||LA242_4==ExclamationMarkEqualsSignEqualsSign||(LA242_4>=LessThanSignLessThanSignEqualsSign && LA242_4<=EqualsSignEqualsSignEqualsSign)||(LA242_4>=ExclamationMarkEqualsSign && LA242_4<=EqualsSignEqualsSign)||LA242_4==GreaterThanSignEqualsSign||(LA242_4>=CircumflexAccentEqualsSign && LA242_4<=As)||(LA242_4>=In && LA242_4<=VerticalLineVerticalLine)||(LA242_4>=PercentSign && LA242_4<=QuestionMark)||(LA242_4>=LeftSquareBracket && LA242_4<=RightCurlyBracket)||(LA242_4>=RULE_TEMPLATE_HEAD && LA242_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA242_4==RULE_ML_COMMENT||LA242_4==RULE_EOL) ) {s = 3;}

                        else if ( (LA242_4==RULE_NO_LINE_TERMINATOR) && (synpred117_InternalN4JSParser())) {s = 14;}

                        else if ( (LA242_4==Function) && (synpred117_InternalN4JSParser())) {s = 15;}

                         
                        input.seek(index242_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 242, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_150s = {
            "\3\3\1\uffff\4\3\2\uffff\1\3\1\13\3\uffff\2\3\3\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\uffff\1\3\1\4\1\3\2\uffff\1\14\1\uffff\1\6\1\2\1\uffff\1\3\2\uffff\1\3\3\uffff\1\3\1\6\1\1\1\6\1\3\7\uffff\2\3\1\uffff\1\3\13\uffff\1\6\7\uffff\1\3\3\uffff\1\3\5\uffff\1\11\6\uffff\1\6\2\uffff\1\5\3\uffff\1\12\1\7\2\uffff\1\10\6\uffff\1\6\1\uffff\4\6\1\uffff\1\6\1\uffff\1\3\2\uffff\1\6\11\uffff\2\15\10\uffff\1\6",
            "",
            "",
            "",
            "\1\3\7\uffff\1\17\46\uffff\1\3\1\uffff\2\3\7\uffff\15\3\1\uffff\1\3\1\uffff\2\3\2\uffff\4\3\1\uffff\20\3\1\uffff\6\3\32\uffff\2\3\4\uffff\1\16\5\uffff\1\3\1\uffff\1\3",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[][] dfa_150 = unpackEncodedStringArray(dfa_150s);

    class DFA243 extends DFA {

        public DFA243(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 243;
            this.eot = dfa_143;
            this.eof = dfa_144;
            this.min = dfa_145;
            this.max = dfa_146;
            this.accept = dfa_147;
            this.special = dfa_148;
            this.transition = dfa_150;
        }
        public String getDescription() {
            return "5176:1: (ThisLiteralParserRuleCall_0= ruleThisLiteral | SuperLiteralParserRuleCall_1= ruleSuperLiteral | IdentifierRefParserRuleCall_2= norm1_IdentifierRef | ParameterizedCallExpressionParserRuleCall_3= norm1_ParameterizedCallExpression | LiteralParserRuleCall_4= ruleLiteral | ArrayLiteralParserRuleCall_5= norm1_ArrayLiteral | ObjectLiteralParserRuleCall_6= norm1_ObjectLiteral | ParenExpressionParserRuleCall_7= norm1_ParenExpression | AnnotatedExpressionParserRuleCall_8= norm1_AnnotatedExpression | FunctionExpressionParserRuleCall_9= ruleFunctionExpression | ( ( ( ( ( Async ) ) ruleNoLineTerminator Function ) )=>AsyncFunctionExpressionParserRuleCall_10= ruleAsyncFunctionExpression ) | N4ClassExpressionParserRuleCall_11= norm1_N4ClassExpression | TemplateLiteralParserRuleCall_12= norm1_TemplateLiteral )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA243_4 = input.LA(1);

                         
                        int index243_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA243_4==RULE_NO_LINE_TERMINATOR) && (synpred118_InternalN4JSParser())) {s = 14;}

                        else if ( (LA243_4==Function) && (synpred118_InternalN4JSParser())) {s = 15;}

                        else if ( (LA243_4==EOF||LA243_4==Instanceof||LA243_4==ExclamationMarkEqualsSignEqualsSign||(LA243_4>=LessThanSignLessThanSignEqualsSign && LA243_4<=EqualsSignEqualsSignEqualsSign)||(LA243_4>=ExclamationMarkEqualsSign && LA243_4<=EqualsSignEqualsSign)||LA243_4==GreaterThanSignEqualsSign||(LA243_4>=CircumflexAccentEqualsSign && LA243_4<=As)||(LA243_4>=In && LA243_4<=VerticalLineVerticalLine)||(LA243_4>=PercentSign && LA243_4<=QuestionMark)||(LA243_4>=LeftSquareBracket && LA243_4<=RightCurlyBracket)||(LA243_4>=RULE_TEMPLATE_HEAD && LA243_4<=RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL)||LA243_4==RULE_ML_COMMENT||LA243_4==RULE_EOL) ) {s = 3;}

                         
                        input.seek(index243_4);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 243, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_151s = "\5\uffff";
    static final String dfa_152s = "\1\140\1\4\1\uffff\1\4\1\uffff";
    static final String dfa_153s = "\1\154\1\u0095\1\uffff\1\u0095\1\uffff";
    static final String dfa_154s = "\2\uffff\1\2\1\uffff\1\1";
    static final String dfa_155s = "\5\uffff}>";
    static final String[] dfa_156s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\5\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\4\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\2\4\3\uffff\3\4\2\uffff\1\4\1\uffff\1\4\1\uffff\5\4\2\uffff\1\4\1\uffff\2\4\1\uffff\1\4\1\uffff\2\4\3\uffff\6\4\2\uffff\1\4\3\uffff\4\4\7\uffff\1\4\1\uffff\1\4\1\uffff\1\4\7\uffff\1\4\3\uffff\1\4\2\uffff\1\4\2\uffff\1\4\2\uffff\1\4\1\3\1\4\1\uffff\1\4\2\uffff\1\4\3\uffff\2\4\1\2\1\uffff\1\4\2\uffff\1\4\3\uffff\1\4\1\uffff\4\4\1\uffff\1\4\1\uffff\1\4\2\uffff\1\4\11\uffff\2\4\10\uffff\1\4",
            ""
    };

    static final short[] dfa_151 = DFA.unpackEncodedString(dfa_151s);
    static final char[] dfa_152 = DFA.unpackEncodedStringToUnsignedChars(dfa_152s);
    static final char[] dfa_153 = DFA.unpackEncodedStringToUnsignedChars(dfa_153s);
    static final short[] dfa_154 = DFA.unpackEncodedString(dfa_154s);
    static final short[] dfa_155 = DFA.unpackEncodedString(dfa_155s);
    static final short[][] dfa_156 = unpackEncodedStringArray(dfa_156s);

    class DFA246 extends DFA {

        public DFA246(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 246;
            this.eot = dfa_151;
            this.eof = dfa_151;
            this.min = dfa_152;
            this.max = dfa_153;
            this.accept = dfa_154;
            this.special = dfa_155;
            this.transition = dfa_156;
        }
        public String getDescription() {
            return "()* loopback of 5355:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= ruleArrayElement ) ) )*";
        }
    }

    class DFA252 extends DFA {

        public DFA252(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 252;
            this.eot = dfa_151;
            this.eof = dfa_151;
            this.min = dfa_152;
            this.max = dfa_153;
            this.accept = dfa_154;
            this.special = dfa_155;
            this.transition = dfa_156;
        }
        public String getDescription() {
            return "()* loopback of 5396:2: (CommaKeyword_3_1_0= Comma ( (ElementsArrayPaddingParserRuleCall_3_1_1_0= ruleArrayPadding ) )* ( (ElementsArrayElementParserRuleCall_3_1_2_0= norm1_ArrayElement ) ) )*";
        }
    }
    static final String dfa_157s = "\115\uffff";
    static final String dfa_158s = "\1\4\1\uffff\105\0\6\uffff";
    static final String dfa_159s = "\1\u0095\1\uffff\105\0\6\uffff";
    static final String dfa_160s = "\1\uffff\1\1\105\uffff\2\5\1\2\1\6\1\3\1\4";
    static final String dfa_161s = "\1\0\1\uffff\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_162s = {
            "\1\16\1\12\1\77\1\43\1\5\1\100\1\102\1\70\1\25\1\26\1\67\1\37\1\27\1\34\1\35\1\101\1\66\1\30\1\33\1\41\1\103\1\45\1\71\1\47\1\6\1\52\1\75\1\76\1\4\1\20\1\22\1\23\1\24\1\61\1\46\1\50\1\15\1\54\1\56\1\3\1\21\1\32\1\62\1\73\1\57\1\11\1\60\1\13\1\2\1\55\4\uffff\1\36\1\63\1\65\1\44\1\64\1\51\1\53\21\uffff\1\72\1\31\1\40\1\42\1\74\7\uffff\1\110\7\uffff\1\107\2\uffff\1\17\1\1\1\106\2\uffff\1\14\2\uffff\1\10\3\uffff\1\105\1\uffff\1\105\1\uffff\1\105\2\uffff\1\105\1\uffff\1\7\2\uffff\1\104\23\uffff\1\105",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_157 = DFA.unpackEncodedString(dfa_157s);
    static final char[] dfa_158 = DFA.unpackEncodedStringToUnsignedChars(dfa_158s);
    static final char[] dfa_159 = DFA.unpackEncodedStringToUnsignedChars(dfa_159s);
    static final short[] dfa_160 = DFA.unpackEncodedString(dfa_160s);
    static final short[] dfa_161 = DFA.unpackEncodedString(dfa_161s);
    static final short[][] dfa_162 = unpackEncodedStringArray(dfa_162s);

    class DFA264 extends DFA {

        public DFA264(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 264;
            this.eot = dfa_157;
            this.eof = dfa_157;
            this.min = dfa_158;
            this.max = dfa_159;
            this.accept = dfa_160;
            this.special = dfa_161;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "5557:1: (AnnotatedPropertyAssignmentParserRuleCall_0= ruleAnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRef ) )? ruleLiteralOrComputedPropertyName Colon ) )=>PropertyNameValuePairParserRuleCall_1= rulePropertyNameValuePair ) | ( ( ( ruleGetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= rulePropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= rulePropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRef ) )? ( ( ( ( Asterisk ) ) ruleLiteralOrComputedPropertyName LeftParenthesis ) | ( ruleLiteralOrComputedPropertyName LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= rulePropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= rulePropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA264_0 = input.LA(1);

                         
                        int index264_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA264_0>=4 && LA264_0<=129 && (s=T2S.M_20[LA264_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA264_0==RULE_DOUBLE||LA264_0==RULE_HEX_INT||LA264_0==RULE_OCTAL_INT||LA264_0==RULE_SCIENTIFIC_INT||LA264_0==RULE_INT) ) {s = 69;}

                        else if ( (LA264_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA264_0==LessThanSign) && (synpred122_InternalN4JSParser())) {s = 71;}

                        else if ( (LA264_0==Asterisk) && (synpred122_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index264_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA264_2 = input.LA(1);

                         
                        int index264_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA264_3 = input.LA(1);

                         
                        int index264_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA264_4 = input.LA(1);

                         
                        int index264_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA264_5 = input.LA(1);

                         
                        int index264_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA264_6 = input.LA(1);

                         
                        int index264_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA264_7 = input.LA(1);

                         
                        int index264_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA264_8 = input.LA(1);

                         
                        int index264_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA264_9 = input.LA(1);

                         
                        int index264_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA264_10 = input.LA(1);

                         
                        int index264_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA264_11 = input.LA(1);

                         
                        int index264_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA264_12 = input.LA(1);

                         
                        int index264_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA264_13 = input.LA(1);

                         
                        int index264_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA264_14 = input.LA(1);

                         
                        int index264_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA264_15 = input.LA(1);

                         
                        int index264_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA264_16 = input.LA(1);

                         
                        int index264_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA264_17 = input.LA(1);

                         
                        int index264_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA264_18 = input.LA(1);

                         
                        int index264_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA264_19 = input.LA(1);

                         
                        int index264_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA264_20 = input.LA(1);

                         
                        int index264_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA264_21 = input.LA(1);

                         
                        int index264_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA264_22 = input.LA(1);

                         
                        int index264_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA264_23 = input.LA(1);

                         
                        int index264_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA264_24 = input.LA(1);

                         
                        int index264_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA264_25 = input.LA(1);

                         
                        int index264_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA264_26 = input.LA(1);

                         
                        int index264_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA264_27 = input.LA(1);

                         
                        int index264_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA264_28 = input.LA(1);

                         
                        int index264_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA264_29 = input.LA(1);

                         
                        int index264_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA264_30 = input.LA(1);

                         
                        int index264_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA264_31 = input.LA(1);

                         
                        int index264_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA264_32 = input.LA(1);

                         
                        int index264_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA264_33 = input.LA(1);

                         
                        int index264_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA264_34 = input.LA(1);

                         
                        int index264_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA264_35 = input.LA(1);

                         
                        int index264_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA264_36 = input.LA(1);

                         
                        int index264_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA264_37 = input.LA(1);

                         
                        int index264_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA264_38 = input.LA(1);

                         
                        int index264_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA264_39 = input.LA(1);

                         
                        int index264_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA264_40 = input.LA(1);

                         
                        int index264_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA264_41 = input.LA(1);

                         
                        int index264_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA264_42 = input.LA(1);

                         
                        int index264_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA264_43 = input.LA(1);

                         
                        int index264_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA264_44 = input.LA(1);

                         
                        int index264_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA264_45 = input.LA(1);

                         
                        int index264_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA264_46 = input.LA(1);

                         
                        int index264_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA264_47 = input.LA(1);

                         
                        int index264_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA264_48 = input.LA(1);

                         
                        int index264_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA264_49 = input.LA(1);

                         
                        int index264_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA264_50 = input.LA(1);

                         
                        int index264_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA264_51 = input.LA(1);

                         
                        int index264_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred120_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA264_52 = input.LA(1);

                         
                        int index264_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred121_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA264_53 = input.LA(1);

                         
                        int index264_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA264_54 = input.LA(1);

                         
                        int index264_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA264_55 = input.LA(1);

                         
                        int index264_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA264_56 = input.LA(1);

                         
                        int index264_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA264_57 = input.LA(1);

                         
                        int index264_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA264_58 = input.LA(1);

                         
                        int index264_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA264_59 = input.LA(1);

                         
                        int index264_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA264_60 = input.LA(1);

                         
                        int index264_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA264_61 = input.LA(1);

                         
                        int index264_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA264_62 = input.LA(1);

                         
                        int index264_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA264_63 = input.LA(1);

                         
                        int index264_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA264_64 = input.LA(1);

                         
                        int index264_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA264_65 = input.LA(1);

                         
                        int index264_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA264_66 = input.LA(1);

                         
                        int index264_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA264_67 = input.LA(1);

                         
                        int index264_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index264_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA264_68 = input.LA(1);

                         
                        int index264_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA264_69 = input.LA(1);

                         
                        int index264_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA264_70 = input.LA(1);

                         
                        int index264_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred119_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred122_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index264_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 264, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA265 extends DFA {

        public DFA265(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 265;
            this.eot = dfa_157;
            this.eof = dfa_157;
            this.min = dfa_158;
            this.max = dfa_159;
            this.accept = dfa_160;
            this.special = dfa_161;
            this.transition = dfa_162;
        }
        public String getDescription() {
            return "5731:1: (AnnotatedPropertyAssignmentParserRuleCall_0= norm1_AnnotatedPropertyAssignment | ( ( ( ( ( ruleTypeRef ) )? norm1_LiteralOrComputedPropertyName Colon ) )=>PropertyNameValuePairParserRuleCall_1= norm1_PropertyNameValuePair ) | ( ( ( norm1_GetterHeader ) )=>PropertyGetterDeclarationParserRuleCall_2= norm1_PropertyGetterDeclaration ) | ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>PropertySetterDeclarationParserRuleCall_3= norm1_PropertySetterDeclaration ) | ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRef ) )? ( ( ( ( Asterisk ) ) norm1_LiteralOrComputedPropertyName LeftParenthesis ) | ( norm1_LiteralOrComputedPropertyName LeftParenthesis ) ) ) )=>PropertyMethodDeclarationParserRuleCall_4= norm1_PropertyMethodDeclaration ) | PropertyNameValuePairSingleNameParserRuleCall_5= norm1_PropertyNameValuePairSingleName )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA265_0 = input.LA(1);

                         
                        int index265_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA265_0>=4 && LA265_0<=129 && (s=T2S.M_20[LA265_0-(4)])>=0)) { /* 68 cases */ }
                        else if ( (LA265_0==RULE_DOUBLE||LA265_0==RULE_HEX_INT||LA265_0==RULE_OCTAL_INT||LA265_0==RULE_SCIENTIFIC_INT||LA265_0==RULE_INT) ) {s = 69;}

                        else if ( (LA265_0==LeftSquareBracket) ) {s = 70;}

                        else if ( (LA265_0==LessThanSign) && (synpred126_InternalN4JSParser())) {s = 71;}

                        else if ( (LA265_0==Asterisk) && (synpred126_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index265_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA265_2 = input.LA(1);

                         
                        int index265_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA265_3 = input.LA(1);

                         
                        int index265_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA265_4 = input.LA(1);

                         
                        int index265_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA265_5 = input.LA(1);

                         
                        int index265_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA265_6 = input.LA(1);

                         
                        int index265_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA265_7 = input.LA(1);

                         
                        int index265_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA265_8 = input.LA(1);

                         
                        int index265_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA265_9 = input.LA(1);

                         
                        int index265_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA265_10 = input.LA(1);

                         
                        int index265_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA265_11 = input.LA(1);

                         
                        int index265_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA265_12 = input.LA(1);

                         
                        int index265_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA265_13 = input.LA(1);

                         
                        int index265_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA265_14 = input.LA(1);

                         
                        int index265_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA265_15 = input.LA(1);

                         
                        int index265_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA265_16 = input.LA(1);

                         
                        int index265_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA265_17 = input.LA(1);

                         
                        int index265_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA265_18 = input.LA(1);

                         
                        int index265_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA265_19 = input.LA(1);

                         
                        int index265_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA265_20 = input.LA(1);

                         
                        int index265_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA265_21 = input.LA(1);

                         
                        int index265_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA265_22 = input.LA(1);

                         
                        int index265_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA265_23 = input.LA(1);

                         
                        int index265_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA265_24 = input.LA(1);

                         
                        int index265_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA265_25 = input.LA(1);

                         
                        int index265_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA265_26 = input.LA(1);

                         
                        int index265_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA265_27 = input.LA(1);

                         
                        int index265_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA265_28 = input.LA(1);

                         
                        int index265_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA265_29 = input.LA(1);

                         
                        int index265_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_29);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA265_30 = input.LA(1);

                         
                        int index265_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_30);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA265_31 = input.LA(1);

                         
                        int index265_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_31);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA265_32 = input.LA(1);

                         
                        int index265_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_32);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA265_33 = input.LA(1);

                         
                        int index265_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_33);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA265_34 = input.LA(1);

                         
                        int index265_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_34);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA265_35 = input.LA(1);

                         
                        int index265_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_35);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA265_36 = input.LA(1);

                         
                        int index265_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_36);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA265_37 = input.LA(1);

                         
                        int index265_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_37);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA265_38 = input.LA(1);

                         
                        int index265_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_38);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA265_39 = input.LA(1);

                         
                        int index265_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_39);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA265_40 = input.LA(1);

                         
                        int index265_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_40);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA265_41 = input.LA(1);

                         
                        int index265_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_41);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA265_42 = input.LA(1);

                         
                        int index265_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_42);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA265_43 = input.LA(1);

                         
                        int index265_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_43);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA265_44 = input.LA(1);

                         
                        int index265_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_44);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA265_45 = input.LA(1);

                         
                        int index265_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_45);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA265_46 = input.LA(1);

                         
                        int index265_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_46);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA265_47 = input.LA(1);

                         
                        int index265_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_47);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA265_48 = input.LA(1);

                         
                        int index265_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_48);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA265_49 = input.LA(1);

                         
                        int index265_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_49);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA265_50 = input.LA(1);

                         
                        int index265_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_50);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA265_51 = input.LA(1);

                         
                        int index265_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred124_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_51);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA265_52 = input.LA(1);

                         
                        int index265_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred125_InternalN4JSParser()) ) {s = 76;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_52);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA265_53 = input.LA(1);

                         
                        int index265_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_53);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA265_54 = input.LA(1);

                         
                        int index265_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_54);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA265_55 = input.LA(1);

                         
                        int index265_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_55);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA265_56 = input.LA(1);

                         
                        int index265_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_56);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA265_57 = input.LA(1);

                         
                        int index265_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_57);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA265_58 = input.LA(1);

                         
                        int index265_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_58);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA265_59 = input.LA(1);

                         
                        int index265_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_59);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA265_60 = input.LA(1);

                         
                        int index265_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA265_61 = input.LA(1);

                         
                        int index265_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_61);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA265_62 = input.LA(1);

                         
                        int index265_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_62);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA265_63 = input.LA(1);

                         
                        int index265_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_63);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA265_64 = input.LA(1);

                         
                        int index265_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_64);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA265_65 = input.LA(1);

                         
                        int index265_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_65);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA265_66 = input.LA(1);

                         
                        int index265_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_66);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA265_67 = input.LA(1);

                         
                        int index265_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                        else if ( (true) ) {s = 74;}

                         
                        input.seek(index265_67);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA265_68 = input.LA(1);

                         
                        int index265_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_68);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA265_69 = input.LA(1);

                         
                        int index265_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_69);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA265_70 = input.LA(1);

                         
                        int index265_70 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred123_InternalN4JSParser()) ) {s = 73;}

                        else if ( (synpred126_InternalN4JSParser()) ) {s = 72;}

                         
                        input.seek(index265_70);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 265, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_163s = "\114\uffff";
    static final String dfa_164s = "\1\4\105\0\6\uffff";
    static final String dfa_165s = "\1\u0095\105\0\6\uffff";
    static final String dfa_166s = "\106\uffff\2\4\1\1\1\5\1\2\1\3";
    static final String dfa_167s = "\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60\1\61\1\62\1\63\1\64\1\65\1\66\1\67\1\70\1\71\1\72\1\73\1\74\1\75\1\76\1\77\1\100\1\101\1\102\1\103\1\104\1\105\6\uffff}>";
    static final String[] dfa_168s = {
            "\1\15\1\11\1\76\1\42\1\4\1\77\1\101\1\67\1\24\1\25\1\66\1\36\1\26\1\33\1\34\1\100\1\65\1\27\1\32\1\40\1\102\1\44\1\70\1\46\1\5\1\51\1\74\1\75\1\3\1\17\1\21\1\22\1\23\1\60\1\45\1\47\1\14\1\53\1\55\1\2\1\20\1\31\1\61\1\72\1\56\1\10\1\57\1\12\1\1\1\54\4\uffff\1\35\1\62\1\64\1\43\1\63\1\50\1\52\21\uffff\1\71\1\30\1\37\1\41\1\73\7\uffff\1\107\7\uffff\1\106\2\uffff\1\16\1\uffff\1\105\2\uffff\1\13\2\uffff\1\7\3\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\6\2\uffff\1\103\23\uffff\1\104",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_163 = DFA.unpackEncodedString(dfa_163s);
    static final char[] dfa_164 = DFA.unpackEncodedStringToUnsignedChars(dfa_164s);
    static final char[] dfa_165 = DFA.unpackEncodedStringToUnsignedChars(dfa_165s);
    static final short[] dfa_166 = DFA.unpackEncodedString(dfa_166s);
    static final short[] dfa_167 = DFA.unpackEncodedString(dfa_167s);
    static final short[][] dfa_168 = unpackEncodedStringArray(dfa_168s);

    class DFA273 extends DFA {

        public DFA273(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 273;
            this.eot = dfa_163;
            this.eof = dfa_163;
            this.min = dfa_164;
            this.max = dfa_165;
            this.accept = dfa_166;
            this.special = dfa_167;
            this.transition = dfa_168;
        }
        public String getDescription() {
            return "5912:1: ( ( ( ( ( ( ( ruleTypeRef ) )? ruleLiteralOrComputedPropertyName Colon ) )=> ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0= ruleTypeRef ) )? LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2= ruleLiteralOrComputedPropertyName ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm1_AssignmentExpression ) ) ) | ( ( ( ( ruleGetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=>LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2= ruleLiteralOrComputedPropertyName ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRef ) )? ( ( ( ( Asterisk ) ) ruleLiteralOrComputedPropertyName LeftParenthesis ) | ( ruleLiteralOrComputedPropertyName LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0= ruleTypeRef ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1= ruleLiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | (LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0= ruleLiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= ruleIdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA273_0 = input.LA(1);

                         
                        int index273_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA273_0>=4 && LA273_0<=129 && (s=T2S.M_22[LA273_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA273_0==RULE_DOUBLE||LA273_0==RULE_HEX_INT||LA273_0==RULE_OCTAL_INT||LA273_0==RULE_SCIENTIFIC_INT||LA273_0==RULE_INT) ) {s = 68;}

                        else if ( (LA273_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA273_0==LessThanSign) && (synpred133_InternalN4JSParser())) {s = 70;}

                        else if ( (LA273_0==Asterisk) && (synpred133_InternalN4JSParser())) {s = 71;}

                         
                        input.seek(index273_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA273_1 = input.LA(1);

                         
                        int index273_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA273_2 = input.LA(1);

                         
                        int index273_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA273_3 = input.LA(1);

                         
                        int index273_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA273_4 = input.LA(1);

                         
                        int index273_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA273_5 = input.LA(1);

                         
                        int index273_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA273_6 = input.LA(1);

                         
                        int index273_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA273_7 = input.LA(1);

                         
                        int index273_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA273_8 = input.LA(1);

                         
                        int index273_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA273_9 = input.LA(1);

                         
                        int index273_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA273_10 = input.LA(1);

                         
                        int index273_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA273_11 = input.LA(1);

                         
                        int index273_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA273_12 = input.LA(1);

                         
                        int index273_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA273_13 = input.LA(1);

                         
                        int index273_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA273_14 = input.LA(1);

                         
                        int index273_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA273_15 = input.LA(1);

                         
                        int index273_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA273_16 = input.LA(1);

                         
                        int index273_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA273_17 = input.LA(1);

                         
                        int index273_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA273_18 = input.LA(1);

                         
                        int index273_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA273_19 = input.LA(1);

                         
                        int index273_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA273_20 = input.LA(1);

                         
                        int index273_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA273_21 = input.LA(1);

                         
                        int index273_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA273_22 = input.LA(1);

                         
                        int index273_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA273_23 = input.LA(1);

                         
                        int index273_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA273_24 = input.LA(1);

                         
                        int index273_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA273_25 = input.LA(1);

                         
                        int index273_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA273_26 = input.LA(1);

                         
                        int index273_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA273_27 = input.LA(1);

                         
                        int index273_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA273_28 = input.LA(1);

                         
                        int index273_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA273_29 = input.LA(1);

                         
                        int index273_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA273_30 = input.LA(1);

                         
                        int index273_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA273_31 = input.LA(1);

                         
                        int index273_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA273_32 = input.LA(1);

                         
                        int index273_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA273_33 = input.LA(1);

                         
                        int index273_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA273_34 = input.LA(1);

                         
                        int index273_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA273_35 = input.LA(1);

                         
                        int index273_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA273_36 = input.LA(1);

                         
                        int index273_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA273_37 = input.LA(1);

                         
                        int index273_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA273_38 = input.LA(1);

                         
                        int index273_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA273_39 = input.LA(1);

                         
                        int index273_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA273_40 = input.LA(1);

                         
                        int index273_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA273_41 = input.LA(1);

                         
                        int index273_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA273_42 = input.LA(1);

                         
                        int index273_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA273_43 = input.LA(1);

                         
                        int index273_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA273_44 = input.LA(1);

                         
                        int index273_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA273_45 = input.LA(1);

                         
                        int index273_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA273_46 = input.LA(1);

                         
                        int index273_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA273_47 = input.LA(1);

                         
                        int index273_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA273_48 = input.LA(1);

                         
                        int index273_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA273_49 = input.LA(1);

                         
                        int index273_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA273_50 = input.LA(1);

                         
                        int index273_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred128_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA273_51 = input.LA(1);

                         
                        int index273_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred130_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA273_52 = input.LA(1);

                         
                        int index273_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA273_53 = input.LA(1);

                         
                        int index273_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA273_54 = input.LA(1);

                         
                        int index273_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA273_55 = input.LA(1);

                         
                        int index273_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA273_56 = input.LA(1);

                         
                        int index273_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA273_57 = input.LA(1);

                         
                        int index273_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA273_58 = input.LA(1);

                         
                        int index273_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA273_59 = input.LA(1);

                         
                        int index273_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA273_60 = input.LA(1);

                         
                        int index273_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA273_61 = input.LA(1);

                         
                        int index273_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA273_62 = input.LA(1);

                         
                        int index273_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA273_63 = input.LA(1);

                         
                        int index273_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA273_64 = input.LA(1);

                         
                        int index273_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA273_65 = input.LA(1);

                         
                        int index273_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA273_66 = input.LA(1);

                         
                        int index273_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index273_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA273_67 = input.LA(1);

                         
                        int index273_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA273_68 = input.LA(1);

                         
                        int index273_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA273_69 = input.LA(1);

                         
                        int index273_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred127_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred133_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index273_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 273, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_169s = "\16\uffff";
    static final String dfa_170s = "\7\4\1\uffff\1\4\4\144\1\uffff";
    static final String dfa_171s = "\7\u0095\1\uffff\1\u0095\4\156\1\uffff";
    static final String dfa_172s = "\7\uffff\1\1\5\uffff\1\2";
    static final String dfa_173s = "\16\uffff}>";
    static final String[] dfa_174s = {
            "\1\14\1\11\2\15\1\4\23\15\1\5\3\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\12\1\1\1\15\4\uffff\7\15\21\uffff\5\15\22\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\62\7\4\uffff\7\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\10\uffff\1\7\2\uffff\1\7\1\uffff\1\15\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\62\7\4\uffff\7\7\21\uffff\5\7\10\uffff\1\7\4\uffff\1\15\4\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            "\1\15\11\uffff\1\7",
            ""
    };

    static final short[] dfa_169 = DFA.unpackEncodedString(dfa_169s);
    static final char[] dfa_170 = DFA.unpackEncodedStringToUnsignedChars(dfa_170s);
    static final char[] dfa_171 = DFA.unpackEncodedStringToUnsignedChars(dfa_171s);
    static final short[] dfa_172 = DFA.unpackEncodedString(dfa_172s);
    static final short[] dfa_173 = DFA.unpackEncodedString(dfa_173s);
    static final short[][] dfa_174 = unpackEncodedStringArray(dfa_174s);

    class DFA266 extends DFA {

        public DFA266(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 266;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_170;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "5917:14: ( (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_175s = "\7\4\1\uffff\1\4\4\134\1\uffff";
    static final String[] dfa_176s = {
            "\1\14\1\11\2\15\1\4\23\15\1\5\3\15\1\3\7\15\1\13\2\15\1\2\5\15\1\10\1\15\1\12\1\1\1\15\4\uffff\7\15\21\uffff\5\15\7\uffff\1\15\12\uffff\1\7\1\uffff\1\15\2\uffff\1\7\2\uffff\1\7\3\uffff\1\15\1\uffff\1\15\1\uffff\1\15\2\uffff\1\15\1\uffff\1\6\2\uffff\1\15\23\uffff\1\15",
            "\62\7\4\uffff\7\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\6\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\62\7\4\uffff\7\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\2\uffff\1\7\3\uffff\1\7\2\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "",
            "\62\7\4\uffff\7\7\21\uffff\5\7\5\uffff\1\15\1\uffff\2\7\11\uffff\1\7\1\uffff\1\7\11\uffff\1\7\1\uffff\1\7\1\uffff\1\7\2\uffff\1\7\1\uffff\1\7\2\uffff\1\7\23\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            "\1\15\21\uffff\1\7",
            ""
    };
    static final char[] dfa_175 = DFA.unpackEncodedStringToUnsignedChars(dfa_175s);
    static final short[][] dfa_176 = unpackEncodedStringArray(dfa_176s);

    class DFA268 extends DFA {

        public DFA268(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 268;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_175;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "6159:3: ( (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_177s = "\2\uffff\11\13\1\uffff";
    static final String dfa_178s = "\1\4\1\uffff\5\4\4\140\1\uffff";
    static final String dfa_179s = "\1\176\1\uffff\5\176\4\160\1\uffff";
    static final String dfa_180s = "\1\uffff\1\1\11\uffff\1\2";
    static final String[] dfa_181s = {
            "\1\12\1\7\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\2\13\1\3\7\uffff\1\11\1\uffff\1\13\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\10\1\1\6\uffff\2\13\1\uffff\1\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\1\uffff\2\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[] dfa_177 = DFA.unpackEncodedString(dfa_177s);
    static final char[] dfa_178 = DFA.unpackEncodedStringToUnsignedChars(dfa_178s);
    static final char[] dfa_179 = DFA.unpackEncodedStringToUnsignedChars(dfa_179s);
    static final short[] dfa_180 = DFA.unpackEncodedString(dfa_180s);
    static final short[][] dfa_181 = unpackEncodedStringArray(dfa_181s);

    class DFA271 extends DFA {

        public DFA271(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 271;
            this.eot = dfa_39;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_44;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "6178:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA281 extends DFA {

        public DFA281(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 281;
            this.eot = dfa_163;
            this.eof = dfa_163;
            this.min = dfa_164;
            this.max = dfa_165;
            this.accept = dfa_166;
            this.special = dfa_167;
            this.transition = dfa_168;
        }
        public String getDescription() {
            return "6204:1: ( ( ( ( ( ( ( ruleTypeRef ) )? norm1_LiteralOrComputedPropertyName Colon ) )=> ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0= ruleTypeRef ) )? LiteralOrComputedPropertyNameParserRuleCall_1_0_0_0_2= norm1_LiteralOrComputedPropertyName ColonKeyword_1_0_0_0_3= Colon ) ) ( (ExpressionAssignmentExpressionParserRuleCall_1_0_1_0= norm3_AssignmentExpression ) ) ) | ( ( ( ( norm1_GetterHeader ) )=> (GetterHeaderParserRuleCall_1_1_0_0_1= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_1_0= ruleBlock ) ) ) | ( ( ( ( Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> (SetKeyword_1_2_0_0_1= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=>LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_2= norm1_LiteralOrComputedPropertyName ) ) ) LeftParenthesisKeyword_1_2_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_2_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_2_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_2_4_0= ruleBlock ) ) ) | ( ( ( ( ( ruleTypeVariables )? ( ( ruleTypeRef ) )? ( ( ( ( Asterisk ) ) norm1_LiteralOrComputedPropertyName LeftParenthesis ) | ( norm1_LiteralOrComputedPropertyName LeftParenthesis ) ) ) )=> ( (TypeVariablesParserRuleCall_1_3_0_0_1= ruleTypeVariables )? ( (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0= ruleTypeRef ) )? ( ( ( (GeneratorAsteriskKeyword_1_3_0_0_3_0_0_0= Asterisk ) ) LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_0_1= norm1_LiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_0_2= norm1_MethodParamsAndBody ) ) | (LiteralOrComputedPropertyNameParserRuleCall_1_3_0_0_3_1_0= norm1_LiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsAndBodyParserRuleCall_1_3_0_0_3_1_1= ruleMethodParamsAndBody ) ) ) ) ) (SemicolonKeyword_1_3_1= Semicolon )? ) | ( ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )? ( (IdentifierRefIdentifierRefParserRuleCall_1_4_2_0= norm1_IdentifierRef ) ) (EqualsSignKeyword_1_4_3_0= EqualsSign ( (ExpressionAssignmentExpressionParserRuleCall_1_4_3_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA281_0 = input.LA(1);

                         
                        int index281_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA281_0>=4 && LA281_0<=129 && (s=T2S.M_22[LA281_0-(4)])>=0)) { /* 67 cases */ }
                        else if ( (LA281_0==RULE_DOUBLE||LA281_0==RULE_HEX_INT||LA281_0==RULE_OCTAL_INT||LA281_0==RULE_SCIENTIFIC_INT||LA281_0==RULE_INT) ) {s = 68;}

                        else if ( (LA281_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA281_0==LessThanSign) && (synpred142_InternalN4JSParser())) {s = 70;}

                        else if ( (LA281_0==Asterisk) && (synpred142_InternalN4JSParser())) {s = 71;}

                         
                        input.seek(index281_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA281_1 = input.LA(1);

                         
                        int index281_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA281_2 = input.LA(1);

                         
                        int index281_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA281_3 = input.LA(1);

                         
                        int index281_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_3);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA281_4 = input.LA(1);

                         
                        int index281_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_4);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA281_5 = input.LA(1);

                         
                        int index281_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_5);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA281_6 = input.LA(1);

                         
                        int index281_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_6);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA281_7 = input.LA(1);

                         
                        int index281_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_7);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA281_8 = input.LA(1);

                         
                        int index281_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_8);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA281_9 = input.LA(1);

                         
                        int index281_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_9);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA281_10 = input.LA(1);

                         
                        int index281_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_10);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA281_11 = input.LA(1);

                         
                        int index281_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_11);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA281_12 = input.LA(1);

                         
                        int index281_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_12);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA281_13 = input.LA(1);

                         
                        int index281_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_13);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA281_14 = input.LA(1);

                         
                        int index281_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_14);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA281_15 = input.LA(1);

                         
                        int index281_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_15);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA281_16 = input.LA(1);

                         
                        int index281_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_16);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA281_17 = input.LA(1);

                         
                        int index281_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_17);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA281_18 = input.LA(1);

                         
                        int index281_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_18);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA281_19 = input.LA(1);

                         
                        int index281_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_19);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA281_20 = input.LA(1);

                         
                        int index281_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_20);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA281_21 = input.LA(1);

                         
                        int index281_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_21);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA281_22 = input.LA(1);

                         
                        int index281_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_22);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA281_23 = input.LA(1);

                         
                        int index281_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_23);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA281_24 = input.LA(1);

                         
                        int index281_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_24);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA281_25 = input.LA(1);

                         
                        int index281_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_25);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA281_26 = input.LA(1);

                         
                        int index281_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_26);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA281_27 = input.LA(1);

                         
                        int index281_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_27);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA281_28 = input.LA(1);

                         
                        int index281_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_28);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA281_29 = input.LA(1);

                         
                        int index281_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_29);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA281_30 = input.LA(1);

                         
                        int index281_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_30);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA281_31 = input.LA(1);

                         
                        int index281_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_31);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA281_32 = input.LA(1);

                         
                        int index281_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_32);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA281_33 = input.LA(1);

                         
                        int index281_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_33);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA281_34 = input.LA(1);

                         
                        int index281_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_34);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA281_35 = input.LA(1);

                         
                        int index281_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_35);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA281_36 = input.LA(1);

                         
                        int index281_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_36);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA281_37 = input.LA(1);

                         
                        int index281_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_37);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA281_38 = input.LA(1);

                         
                        int index281_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_38);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA281_39 = input.LA(1);

                         
                        int index281_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_39);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA281_40 = input.LA(1);

                         
                        int index281_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_40);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA281_41 = input.LA(1);

                         
                        int index281_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_41);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA281_42 = input.LA(1);

                         
                        int index281_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_42);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA281_43 = input.LA(1);

                         
                        int index281_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_43);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA281_44 = input.LA(1);

                         
                        int index281_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_44);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA281_45 = input.LA(1);

                         
                        int index281_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_45);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA281_46 = input.LA(1);

                         
                        int index281_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_46);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA281_47 = input.LA(1);

                         
                        int index281_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_47);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA281_48 = input.LA(1);

                         
                        int index281_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_48);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA281_49 = input.LA(1);

                         
                        int index281_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_49);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA281_50 = input.LA(1);

                         
                        int index281_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred137_InternalN4JSParser()) ) {s = 74;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_50);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA281_51 = input.LA(1);

                         
                        int index281_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred139_InternalN4JSParser()) ) {s = 75;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_51);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA281_52 = input.LA(1);

                         
                        int index281_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_52);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA281_53 = input.LA(1);

                         
                        int index281_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_53);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA281_54 = input.LA(1);

                         
                        int index281_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_54);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA281_55 = input.LA(1);

                         
                        int index281_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_55);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA281_56 = input.LA(1);

                         
                        int index281_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_56);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA281_57 = input.LA(1);

                         
                        int index281_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_57);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA281_58 = input.LA(1);

                         
                        int index281_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_58);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA281_59 = input.LA(1);

                         
                        int index281_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_59);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA281_60 = input.LA(1);

                         
                        int index281_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_60);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA281_61 = input.LA(1);

                         
                        int index281_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_61);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA281_62 = input.LA(1);

                         
                        int index281_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_62);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA281_63 = input.LA(1);

                         
                        int index281_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_63);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA281_64 = input.LA(1);

                         
                        int index281_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_64);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA281_65 = input.LA(1);

                         
                        int index281_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_65);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA281_66 = input.LA(1);

                         
                        int index281_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                        else if ( (true) ) {s = 73;}

                         
                        input.seek(index281_66);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA281_67 = input.LA(1);

                         
                        int index281_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_67);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA281_68 = input.LA(1);

                         
                        int index281_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_68);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA281_69 = input.LA(1);

                         
                        int index281_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred136_InternalN4JSParser()) ) {s = 72;}

                        else if ( (synpred142_InternalN4JSParser()) ) {s = 71;}

                         
                        input.seek(index281_69);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 281, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA274 extends DFA {

        public DFA274(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 274;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_170;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "6209:14: ( (DeclaredTypeRefTypeRefParserRuleCall_1_0_0_0_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA276 extends DFA {

        public DFA276(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 276;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_175;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "6451:3: ( (ReturnTypeRefTypeRefParserRuleCall_1_3_0_0_2_0= ruleTypeRef ) )?";
        }
    }
    static final String[] dfa_182s = {
            "\1\12\1\7\1\13\1\uffff\1\4\3\13\2\uffff\1\13\4\uffff\2\13\3\uffff\1\13\1\uffff\1\13\1\uffff\1\5\1\uffff\2\13\1\3\7\uffff\1\11\2\uffff\1\2\3\uffff\1\13\1\uffff\1\1\1\uffff\1\10\1\1\6\uffff\2\13\1\uffff\1\13\23\uffff\1\13\3\uffff\1\13\22\uffff\1\1\4\uffff\1\1\2\uffff\1\1\14\uffff\1\6",
            "",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\5\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\3\1\1\uffff\4\1\2\uffff\1\1\4\uffff\2\1\3\uffff\1\1\1\uffff\1\1\1\uffff\1\1\1\uffff\3\1\7\uffff\1\1\2\uffff\1\1\3\uffff\1\1\3\uffff\1\1\7\uffff\2\1\1\uffff\1\1\23\uffff\1\1\3\uffff\1\1\10\uffff\1\1\1\13\1\uffff\1\1\3\uffff\1\1\1\13\1\uffff\1\1\6\uffff\1\13\15\uffff\1\1",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            "\1\13\6\uffff\1\13\6\uffff\1\1\1\uffff\1\13",
            ""
    };
    static final short[][] dfa_182 = unpackEncodedStringArray(dfa_182s);

    class DFA279 extends DFA {

        public DFA279(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 279;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_44;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "6470:7: ( (DeclaredTypeRefTypeRefParserRuleCall_1_4_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA283 extends DFA {

        public DFA283(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 283;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_175;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "6515:3: ( (ReturnTypeRefTypeRefParserRuleCall_0_0_2_0= ruleTypeRef ) )?";
        }
    }

    class DFA287 extends DFA {

        public DFA287(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 287;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_175;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "6559:3: ( (ReturnTypeRefTypeRefParserRuleCall_0_0_2_0= ruleTypeRef ) )?";
        }
    }

    class DFA290 extends DFA {

        public DFA290(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 290;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_170;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "6600:14: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA291 extends DFA {

        public DFA291(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 291;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_170;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "6627:14: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0_1_0= ruleTypeRef ) )?";
        }
    }

    class DFA292 extends DFA {

        public DFA292(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 292;
            this.eot = dfa_39;
            this.eof = dfa_177;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_44;
            this.transition = dfa_181;
        }
        public String getDescription() {
            return "6655:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }

    class DFA294 extends DFA {

        public DFA294(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 294;
            this.eot = dfa_39;
            this.eof = dfa_39;
            this.min = dfa_178;
            this.max = dfa_179;
            this.accept = dfa_180;
            this.special = dfa_44;
            this.transition = dfa_182;
        }
        public String getDescription() {
            return "6680:2: ( (DeclaredTypeRefTypeRefParserRuleCall_0_0= ruleTypeRef ) )?";
        }
    }
    static final String dfa_183s = "\70\uffff";
    static final String dfa_184s = "\2\4\66\uffff";
    static final String dfa_185s = "\2\u0095\66\uffff";
    static final String dfa_186s = "\2\uffff\1\3\1\1\64\2";
    static final String dfa_187s = "\1\uffff\1\0\66\uffff}>";
    static final String[] dfa_188s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\1\uffff\2\2\3\uffff\5\2\7\uffff\2\2\1\1\1\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\27\1\22\1\35\1\uffff\1\32\1\36\1\40\1\16\2\uffff\1\15\1\64\3\uffff\1\37\1\14\3\uffff\1\41\1\uffff\1\17\1\uffff\1\24\1\uffff\1\31\1\34\1\33\2\uffff\1\65\1\uffff\1\53\1\6\1\uffff\1\26\1\uffff\1\10\1\30\3\uffff\1\21\1\55\1\5\1\52\1\25\7\uffff\1\11\1\13\1\4\1\12\13\uffff\1\57\7\uffff\1\20\3\uffff\1\23\5\uffff\1\62\5\uffff\1\3\1\56\2\uffff\1\42\3\uffff\1\63\1\60\2\uffff\1\61\6\uffff\1\43\1\uffff\1\50\1\45\1\46\1\47\1\uffff\1\51\1\uffff\1\7\2\uffff\1\54\11\uffff\1\67\1\66\10\uffff\1\44",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_183 = DFA.unpackEncodedString(dfa_183s);
    static final char[] dfa_184 = DFA.unpackEncodedStringToUnsignedChars(dfa_184s);
    static final char[] dfa_185 = DFA.unpackEncodedStringToUnsignedChars(dfa_185s);
    static final short[] dfa_186 = DFA.unpackEncodedString(dfa_186s);
    static final short[] dfa_187 = DFA.unpackEncodedString(dfa_187s);
    static final short[][] dfa_188 = unpackEncodedStringArray(dfa_188s);

    class DFA314 extends DFA {

        public DFA314(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 314;
            this.eot = dfa_183;
            this.eof = dfa_183;
            this.min = dfa_184;
            this.max = dfa_185;
            this.accept = dfa_186;
            this.special = dfa_187;
            this.transition = dfa_188;
        }
        public String getDescription() {
            return "7436:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= ruleMemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= ruleArguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= ruleTemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= rulePrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= ruleIndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= ruleParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= ruleTemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA314_1 = input.LA(1);

                         
                        int index314_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA314_1==FullStop) && (synpred165_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA314_1>=4 && LA314_1<=149 && (s=T2S.M_24[LA314_1-(4)])>=0) && (synpred166_InternalN4JSParser())) { /* 53 cases */ }
                        input.seek(index314_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 314, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_189s = "\2\4\65\uffff";
    static final String dfa_190s = "\2\u0095\65\uffff";
    static final String dfa_191s = "\2\uffff\1\3\1\1\63\2";
    static final String dfa_192s = "\1\uffff\1\0\65\uffff}>";
    static final String[] dfa_193s = {
            "\3\2\1\uffff\4\2\2\uffff\2\2\3\uffff\2\2\3\uffff\1\2\1\uffff\1\2\1\uffff\1\2\1\uffff\3\2\2\uffff\1\2\1\uffff\2\2\1\uffff\1\2\2\uffff\1\2\3\uffff\5\2\7\uffff\2\2\1\1\1\2\13\uffff\1\2\7\uffff\1\2\3\uffff\1\2\5\uffff\1\2\6\uffff\1\2\2\uffff\1\2\3\uffff\2\2\2\uffff\1\2\6\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\26\1\21\1\34\1\uffff\1\31\1\35\1\37\1\15\2\uffff\1\14\1\63\3\uffff\1\36\1\13\3\uffff\1\40\1\uffff\1\16\1\uffff\1\23\1\uffff\1\30\1\33\1\32\2\uffff\1\64\1\uffff\1\52\1\6\1\uffff\1\25\2\uffff\1\27\3\uffff\1\20\1\54\1\5\1\51\1\24\7\uffff\1\10\1\12\1\4\1\11\13\uffff\1\56\7\uffff\1\17\3\uffff\1\22\5\uffff\1\61\5\uffff\1\3\1\55\2\uffff\1\41\3\uffff\1\62\1\57\2\uffff\1\60\6\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\7\2\uffff\1\53\11\uffff\1\66\1\65\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_189 = DFA.unpackEncodedStringToUnsignedChars(dfa_189s);
    static final char[] dfa_190 = DFA.unpackEncodedStringToUnsignedChars(dfa_190s);
    static final short[] dfa_191 = DFA.unpackEncodedString(dfa_191s);
    static final short[] dfa_192 = DFA.unpackEncodedString(dfa_192s);
    static final short[][] dfa_193 = unpackEncodedStringArray(dfa_193s);

    class DFA320 extends DFA {

        public DFA320(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 320;
            this.eot = dfa_25;
            this.eof = dfa_25;
            this.min = dfa_189;
            this.max = dfa_190;
            this.accept = dfa_191;
            this.special = dfa_192;
            this.transition = dfa_193;
        }
        public String getDescription() {
            return "7494:1: ( ( ( ( ( New FullStop ) )=> (NewKeyword_0_0_0_1= New FullStopKeyword_0_0_0_2= FullStop ) ) TargetKeyword_0_1= Target ) | ( ( ( ( New ) )=> (NewKeyword_1_0_0_1= New ) ) ( (CalleeMemberExpressionParserRuleCall_1_1_0= norm1_MemberExpression ) ) ( ( LessThanSign )=>TypeArgumentsParserRuleCall_1_2= ruleTypeArguments )? ( ( ( ( LeftParenthesis ) )=> (WithArgsLeftParenthesisKeyword_1_3_0_0= LeftParenthesis ) ) (ArgumentsParserRuleCall_1_3_1= norm1_Arguments )? RightParenthesisKeyword_1_3_2= RightParenthesis ( (IndexedAccessExpressionTailParserRuleCall_1_3_3_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_1_3_3_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_1_3_3_2_1_0= norm1_TemplateLiteral ) ) ) )* )? ) | (PrimaryExpressionParserRuleCall_2_0= norm1_PrimaryExpression ( (IndexedAccessExpressionTailParserRuleCall_2_1_0_1= norm1_IndexedAccessExpressionTail ) | (ParameterizedPropertyAccessExpressionTailParserRuleCall_2_1_1_1= norm1_ParameterizedPropertyAccessExpressionTail ) | ( ( (TemplateTemplateLiteralParserRuleCall_2_1_2_1_0= norm1_TemplateLiteral ) ) ) )* ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA320_1 = input.LA(1);

                         
                        int index320_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA320_1==FullStop) && (synpred169_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA320_1>=4 && LA320_1<=149 && (s=T2S.M_25[LA320_1-(4)])>=0) && (synpred170_InternalN4JSParser())) { /* 52 cases */ }
                        input.seek(index320_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 320, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_194s = "\103\uffff";
    static final String dfa_195s = "\1\1\102\uffff";
    static final String dfa_196s = "\1\7\1\uffff\1\4\1\uffff\1\4\76\uffff";
    static final String dfa_197s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\76\uffff";
    static final String dfa_198s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\76\1";
    static final String dfa_199s = "\1\1\3\uffff\1\0\76\uffff}>";
    static final String[] dfa_200s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\7\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\5\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\1\uffff\2\1\3\uffff\6\1\6\uffff\4\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\31\1\24\1\37\1\uffff\1\34\1\40\1\42\1\20\2\uffff\1\17\1\66\3\uffff\1\41\1\16\1\72\2\uffff\1\43\1\uffff\1\21\1\uffff\1\26\1\74\1\33\1\36\1\35\2\uffff\1\67\1\uffff\1\55\1\10\1\uffff\1\30\1\uffff\1\12\1\32\3\uffff\1\23\1\57\1\7\1\54\1\27\1\73\6\uffff\1\13\1\15\1\6\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\5\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\11\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_194 = DFA.unpackEncodedString(dfa_194s);
    static final short[] dfa_195 = DFA.unpackEncodedString(dfa_195s);
    static final char[] dfa_196 = DFA.unpackEncodedStringToUnsignedChars(dfa_196s);
    static final char[] dfa_197 = DFA.unpackEncodedStringToUnsignedChars(dfa_197s);
    static final short[] dfa_198 = DFA.unpackEncodedString(dfa_198s);
    static final short[] dfa_199 = DFA.unpackEncodedString(dfa_199s);
    static final short[][] dfa_200 = unpackEncodedStringArray(dfa_200s);

    class DFA333 extends DFA {

        public DFA333(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 333;
            this.eot = dfa_194;
            this.eof = dfa_195;
            this.min = dfa_196;
            this.max = dfa_197;
            this.accept = dfa_198;
            this.special = dfa_199;
            this.transition = dfa_200;
        }
        public String getDescription() {
            return "()* loopback of 7899:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( ruleAdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= ruleAdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA333_4 = input.LA(1);

                         
                        int index333_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA333_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA333_4>=4 && LA333_4<=149 && (s=T2S.M_26[LA333_4-(4)])>=0) && (synpred181_InternalN4JSParser())) { /* 63 cases */ }
                        input.seek(index333_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA333_0 = input.LA(1);

                         
                        int index333_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA333_0==EOF||LA333_0==Instanceof||LA333_0==ExclamationMarkEqualsSignEqualsSign||(LA333_0>=LessThanSignLessThanSignEqualsSign && LA333_0<=EqualsSignEqualsSignEqualsSign)||(LA333_0>=ExclamationMarkEqualsSign && LA333_0<=AsteriskEqualsSign)||LA333_0==PlusSignEqualsSign||(LA333_0>=HyphenMinusEqualsSign && LA333_0<=SolidusEqualsSign)||(LA333_0>=LessThanSignEqualsSign && LA333_0<=EqualsSignEqualsSign)||LA333_0==GreaterThanSignEqualsSign||LA333_0==CircumflexAccentEqualsSign||(LA333_0>=In && LA333_0<=VerticalLineVerticalLine)||LA333_0==Ampersand||LA333_0==RightParenthesis||LA333_0==Comma||(LA333_0>=Colon && LA333_0<=EqualsSign)||LA333_0==QuestionMark||(LA333_0>=RightSquareBracket && LA333_0<=CircumflexAccent)||(LA333_0>=VerticalLine && LA333_0<=RightCurlyBracket)||LA333_0==RULE_ML_COMMENT||LA333_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA333_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA333_0==LessThanSignLessThanSign) && (synpred181_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index333_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 333, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_201s = "\1\1\101\uffff";
    static final String dfa_202s = "\1\7\1\uffff\1\4\1\uffff\1\4\75\uffff";
    static final String dfa_203s = "\1\u0099\1\uffff\1\u0095\1\uffff\1\u0095\75\uffff";
    static final String dfa_204s = "\1\uffff\1\2\1\uffff\1\1\1\uffff\75\1";
    static final String dfa_205s = "\1\1\3\uffff\1\0\75\uffff}>";
    static final String[] dfa_206s = {
            "\1\1\56\uffff\1\1\1\uffff\2\1\7\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\3\2\1\1\uffff\1\1\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\4\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\3\1\1\uffff\4\1\2\uffff\2\1\3\uffff\3\1\2\uffff\1\1\1\uffff\1\1\1\uffff\5\1\2\uffff\1\1\1\uffff\2\1\1\uffff\1\1\2\uffff\1\1\3\uffff\6\1\6\uffff\4\1\7\uffff\1\1\1\uffff\1\1\1\uffff\1\1\4\uffff\1\1\2\uffff\1\1\3\uffff\1\1\2\uffff\1\1\2\uffff\1\1\2\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\4\1\uffff\2\1\2\uffff\1\1\2\uffff\1\1\3\uffff\1\1\1\uffff\4\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\11\uffff\2\1\10\uffff\1\1",
            "",
            "\1\30\1\23\1\36\1\uffff\1\33\1\37\1\41\1\17\2\uffff\1\16\1\65\3\uffff\1\40\1\15\1\71\2\uffff\1\42\1\uffff\1\20\1\uffff\1\25\1\73\1\32\1\35\1\34\2\uffff\1\66\1\uffff\1\54\1\10\1\uffff\1\27\2\uffff\1\31\3\uffff\1\22\1\56\1\7\1\53\1\26\1\72\6\uffff\1\12\1\14\1\6\1\13\7\uffff\1\74\1\uffff\1\75\1\uffff\1\60\4\uffff\1\1\2\uffff\1\21\3\uffff\1\24\2\uffff\1\101\2\uffff\1\63\2\uffff\1\76\1\uffff\1\77\1\uffff\1\57\2\uffff\1\43\1\uffff\1\5\1\uffff\1\64\1\61\2\uffff\1\62\2\uffff\1\100\3\uffff\1\44\1\uffff\1\51\1\46\1\47\1\50\1\uffff\1\52\1\uffff\1\11\2\uffff\1\55\11\uffff\1\70\1\67\10\uffff\1\45",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_201 = DFA.unpackEncodedString(dfa_201s);
    static final char[] dfa_202 = DFA.unpackEncodedStringToUnsignedChars(dfa_202s);
    static final char[] dfa_203 = DFA.unpackEncodedStringToUnsignedChars(dfa_203s);
    static final short[] dfa_204 = DFA.unpackEncodedString(dfa_204s);
    static final short[] dfa_205 = DFA.unpackEncodedString(dfa_205s);
    static final short[][] dfa_206 = unpackEncodedStringArray(dfa_206s);

    class DFA334 extends DFA {

        public DFA334(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 334;
            this.eot = dfa_103;
            this.eof = dfa_201;
            this.min = dfa_202;
            this.max = dfa_203;
            this.accept = dfa_204;
            this.special = dfa_205;
            this.transition = dfa_206;
        }
        public String getDescription() {
            return "()* loopback of 7928:1: ( ( ( ( ( ruleShiftOperator ) ) ( ( norm1_AdditiveExpression ) ) ) )=> ( ( (OpShiftOperatorParserRuleCall_1_0_1_0= ruleShiftOperator ) ) ( (RhsAdditiveExpressionParserRuleCall_1_0_2_0= norm1_AdditiveExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA334_4 = input.LA(1);

                         
                        int index334_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA334_4==GreaterThanSignEqualsSign) ) {s = 1;}

                        
                        else if ((LA334_4>=4 && LA334_4<=149 && (s=T2S.M_27[LA334_4-(4)])>=0) && (synpred182_InternalN4JSParser())) { /* 62 cases */ }
                        input.seek(index334_4);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA334_0 = input.LA(1);

                         
                        int index334_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA334_0==EOF||LA334_0==Instanceof||LA334_0==ExclamationMarkEqualsSignEqualsSign||(LA334_0>=LessThanSignLessThanSignEqualsSign && LA334_0<=EqualsSignEqualsSignEqualsSign)||(LA334_0>=ExclamationMarkEqualsSign && LA334_0<=AsteriskEqualsSign)||LA334_0==PlusSignEqualsSign||(LA334_0>=HyphenMinusEqualsSign && LA334_0<=SolidusEqualsSign)||(LA334_0>=LessThanSignEqualsSign && LA334_0<=EqualsSignEqualsSign)||LA334_0==GreaterThanSignEqualsSign||LA334_0==CircumflexAccentEqualsSign||(LA334_0>=In && LA334_0<=VerticalLineVerticalLine)||LA334_0==Ampersand||LA334_0==RightParenthesis||LA334_0==Comma||(LA334_0>=Colon && LA334_0<=EqualsSign)||LA334_0==QuestionMark||(LA334_0>=RightSquareBracket && LA334_0<=CircumflexAccent)||(LA334_0>=VerticalLine && LA334_0<=RightCurlyBracket)||LA334_0==RULE_ML_COMMENT||LA334_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA334_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA334_0==LessThanSignLessThanSign) && (synpred182_InternalN4JSParser())) {s = 3;}

                         
                        input.seek(index334_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 334, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_207s = "\104\uffff";
    static final String dfa_208s = "\1\1\103\uffff";
    static final String dfa_209s = "\1\7\1\uffff\1\4\101\uffff";
    static final String dfa_210s = "\1\157\1\uffff\1\u0095\101\uffff";
    static final String dfa_211s = "\1\uffff\1\2\1\uffff\101\1";
    static final String dfa_212s = "\1\0\1\uffff\1\1\101\uffff}>";
    static final String[] dfa_213s = {
            "\1\6\56\uffff\1\1\1\uffff\2\1\7\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\40\1\uffff\1\35\1\41\1\43\1\21\2\uffff\1\20\1\67\3\uffff\1\42\1\17\1\73\2\uffff\1\44\1\uffff\1\22\1\uffff\1\27\1\75\1\34\1\37\1\36\2\uffff\1\70\1\uffff\1\56\1\11\1\uffff\1\31\1\uffff\1\13\1\33\3\uffff\1\24\1\60\1\10\1\55\1\30\1\74\6\uffff\1\14\1\16\1\7\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\12\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_207 = DFA.unpackEncodedString(dfa_207s);
    static final short[] dfa_208 = DFA.unpackEncodedString(dfa_208s);
    static final char[] dfa_209 = DFA.unpackEncodedStringToUnsignedChars(dfa_209s);
    static final char[] dfa_210 = DFA.unpackEncodedStringToUnsignedChars(dfa_210s);
    static final short[] dfa_211 = DFA.unpackEncodedString(dfa_211s);
    static final short[] dfa_212 = DFA.unpackEncodedString(dfa_212s);
    static final short[][] dfa_213 = unpackEncodedStringArray(dfa_213s);

    class DFA337 extends DFA {

        public DFA337(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 337;
            this.eot = dfa_207;
            this.eof = dfa_208;
            this.min = dfa_209;
            this.max = dfa_210;
            this.accept = dfa_211;
            this.special = dfa_212;
            this.transition = dfa_213;
        }
        public String getDescription() {
            return "()* loopback of 7994:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA337_0 = input.LA(1);

                         
                        int index337_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA337_0==EOF||LA337_0==ExclamationMarkEqualsSignEqualsSign||(LA337_0>=LessThanSignLessThanSignEqualsSign && LA337_0<=EqualsSignEqualsSignEqualsSign)||(LA337_0>=ExclamationMarkEqualsSign && LA337_0<=AsteriskEqualsSign)||LA337_0==PlusSignEqualsSign||(LA337_0>=HyphenMinusEqualsSign && LA337_0<=SolidusEqualsSign)||LA337_0==EqualsSignEqualsSign||LA337_0==CircumflexAccentEqualsSign||(LA337_0>=In && LA337_0<=VerticalLineVerticalLine)||LA337_0==Ampersand||LA337_0==Comma||LA337_0==Semicolon||LA337_0==EqualsSign||LA337_0==QuestionMark||LA337_0==CircumflexAccent||LA337_0==VerticalLine) ) {s = 1;}

                        else if ( (LA337_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA337_0==LessThanSign) && (synpred183_InternalN4JSParser())) {s = 3;}

                        else if ( (LA337_0==LessThanSignEqualsSign) && (synpred183_InternalN4JSParser())) {s = 4;}

                        else if ( (LA337_0==GreaterThanSignEqualsSign) && (synpred183_InternalN4JSParser())) {s = 5;}

                        else if ( (LA337_0==Instanceof) && (synpred183_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index337_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA337_2 = input.LA(1);

                         
                        int index337_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA337_2==GreaterThanSignEqualsSign||LA337_2==GreaterThanSign) ) {s = 1;}

                        else if ( (LA337_2==New) && (synpred183_InternalN4JSParser())) {s = 7;}

                        else if ( (LA337_2==This_1) && (synpred183_InternalN4JSParser())) {s = 8;}

                        else if ( (LA337_2==Super) && (synpred183_InternalN4JSParser())) {s = 9;}

                        else if ( (LA337_2==RULE_IDENTIFIER) && (synpred183_InternalN4JSParser())) {s = 10;}

                        else if ( (LA337_2==Yield) && (synpred183_InternalN4JSParser())) {s = 11;}

                        else if ( (LA337_2==Get) && (synpred183_InternalN4JSParser())) {s = 12;}

                        else if ( (LA337_2==Set) && (synpred183_InternalN4JSParser())) {s = 13;}

                        else if ( (LA337_2==Let) && (synpred183_InternalN4JSParser())) {s = 14;}

                        else if ( (LA337_2==Project) && (synpred183_InternalN4JSParser())) {s = 15;}

                        else if ( (LA337_2==External) && (synpred183_InternalN4JSParser())) {s = 16;}

                        else if ( (LA337_2==Abstract) && (synpred183_InternalN4JSParser())) {s = 17;}

                        else if ( (LA337_2==Static) && (synpred183_InternalN4JSParser())) {s = 18;}

                        else if ( (LA337_2==As) && (synpred183_InternalN4JSParser())) {s = 19;}

                        else if ( (LA337_2==From) && (synpred183_InternalN4JSParser())) {s = 20;}

                        else if ( (LA337_2==Constructor) && (synpred183_InternalN4JSParser())) {s = 21;}

                        else if ( (LA337_2==Of) && (synpred183_InternalN4JSParser())) {s = 22;}

                        else if ( (LA337_2==Target) && (synpred183_InternalN4JSParser())) {s = 23;}

                        else if ( (LA337_2==Type) && (synpred183_InternalN4JSParser())) {s = 24;}

                        else if ( (LA337_2==Union) && (synpred183_InternalN4JSParser())) {s = 25;}

                        else if ( (LA337_2==Intersection) && (synpred183_InternalN4JSParser())) {s = 26;}

                        else if ( (LA337_2==This) && (synpred183_InternalN4JSParser())) {s = 27;}

                        else if ( (LA337_2==Await) && (synpred183_InternalN4JSParser())) {s = 28;}

                        else if ( (LA337_2==Promisify) && (synpred183_InternalN4JSParser())) {s = 29;}

                        else if ( (LA337_2==Await_1) && (synpred183_InternalN4JSParser())) {s = 30;}

                        else if ( (LA337_2==Async) && (synpred183_InternalN4JSParser())) {s = 31;}

                        else if ( (LA337_2==Implements) && (synpred183_InternalN4JSParser())) {s = 32;}

                        else if ( (LA337_2==Interface) && (synpred183_InternalN4JSParser())) {s = 33;}

                        else if ( (LA337_2==Private) && (synpred183_InternalN4JSParser())) {s = 34;}

                        else if ( (LA337_2==Protected) && (synpred183_InternalN4JSParser())) {s = 35;}

                        else if ( (LA337_2==Public) && (synpred183_InternalN4JSParser())) {s = 36;}

                        else if ( (LA337_2==LessThanSign) && (synpred183_InternalN4JSParser())) {s = 37;}

                        else if ( (LA337_2==RULE_DOUBLE) && (synpred183_InternalN4JSParser())) {s = 38;}

                        else if ( (LA337_2==RULE_INT) && (synpred183_InternalN4JSParser())) {s = 39;}

                        else if ( (LA337_2==RULE_BINARY_INT) && (synpred183_InternalN4JSParser())) {s = 40;}

                        else if ( (LA337_2==RULE_OCTAL_INT) && (synpred183_InternalN4JSParser())) {s = 41;}

                        else if ( (LA337_2==RULE_LEGACY_OCTAL_INT) && (synpred183_InternalN4JSParser())) {s = 42;}

                        else if ( (LA337_2==RULE_HEX_INT) && (synpred183_InternalN4JSParser())) {s = 43;}

                        else if ( (LA337_2==RULE_SCIENTIFIC_INT) && (synpred183_InternalN4JSParser())) {s = 44;}

                        else if ( (LA337_2==True) && (synpred183_InternalN4JSParser())) {s = 45;}

                        else if ( (LA337_2==False) && (synpred183_InternalN4JSParser())) {s = 46;}

                        else if ( (LA337_2==RULE_STRING) && (synpred183_InternalN4JSParser())) {s = 47;}

                        else if ( (LA337_2==Null) && (synpred183_InternalN4JSParser())) {s = 48;}

                        else if ( (LA337_2==Solidus) && (synpred183_InternalN4JSParser())) {s = 49;}

                        else if ( (LA337_2==SolidusEqualsSign) && (synpred183_InternalN4JSParser())) {s = 50;}

                        else if ( (LA337_2==LeftSquareBracket) && (synpred183_InternalN4JSParser())) {s = 51;}

                        else if ( (LA337_2==LeftCurlyBracket) && (synpred183_InternalN4JSParser())) {s = 52;}

                        else if ( (LA337_2==LeftParenthesis) && (synpred183_InternalN4JSParser())) {s = 53;}

                        else if ( (LA337_2==CommercialAt) && (synpred183_InternalN4JSParser())) {s = 54;}

                        else if ( (LA337_2==Function) && (synpred183_InternalN4JSParser())) {s = 55;}

                        else if ( (LA337_2==Class) && (synpred183_InternalN4JSParser())) {s = 56;}

                        else if ( (LA337_2==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred183_InternalN4JSParser())) {s = 57;}

                        else if ( (LA337_2==RULE_TEMPLATE_HEAD) && (synpred183_InternalN4JSParser())) {s = 58;}

                        else if ( (LA337_2==Delete) && (synpred183_InternalN4JSParser())) {s = 59;}

                        else if ( (LA337_2==Void) && (synpred183_InternalN4JSParser())) {s = 60;}

                        else if ( (LA337_2==Typeof) && (synpred183_InternalN4JSParser())) {s = 61;}

                        else if ( (LA337_2==PlusSignPlusSign) && (synpred183_InternalN4JSParser())) {s = 62;}

                        else if ( (LA337_2==HyphenMinusHyphenMinus) && (synpred183_InternalN4JSParser())) {s = 63;}

                        else if ( (LA337_2==PlusSign) && (synpred183_InternalN4JSParser())) {s = 64;}

                        else if ( (LA337_2==HyphenMinus) && (synpred183_InternalN4JSParser())) {s = 65;}

                        else if ( (LA337_2==Tilde) && (synpred183_InternalN4JSParser())) {s = 66;}

                        else if ( (LA337_2==ExclamationMark) && (synpred183_InternalN4JSParser())) {s = 67;}

                         
                        input.seek(index337_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 337, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_214s = "\105\uffff";
    static final String dfa_215s = "\1\1\104\uffff";
    static final String dfa_216s = "\1\7\1\uffff\1\4\102\uffff";
    static final String dfa_217s = "\1\u0099\1\uffff\1\u0095\102\uffff";
    static final String dfa_218s = "\1\uffff\1\2\1\uffff\102\1";
    static final String dfa_219s = "\1\1\1\uffff\1\0\102\uffff}>";
    static final String[] dfa_220s = {
            "\1\6\56\uffff\1\1\1\uffff\2\1\7\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\33\1\26\1\41\1\uffff\1\36\1\42\1\44\1\22\2\uffff\1\21\1\70\3\uffff\1\43\1\20\1\74\2\uffff\1\45\1\uffff\1\23\1\uffff\1\30\1\76\1\35\1\40\1\37\2\uffff\1\71\1\uffff\1\57\1\12\1\uffff\1\32\1\uffff\1\14\1\34\3\uffff\1\25\1\61\1\11\1\56\1\31\1\75\6\uffff\1\15\1\17\1\10\1\16\7\uffff\1\77\1\uffff\1\100\1\uffff\1\63\4\uffff\1\1\2\uffff\1\24\3\uffff\1\27\2\uffff\1\104\2\uffff\1\66\2\uffff\1\101\1\uffff\1\102\1\uffff\1\62\2\uffff\1\46\1\uffff\1\1\1\uffff\1\67\1\64\2\uffff\1\65\2\uffff\1\103\3\uffff\1\47\1\uffff\1\54\1\51\1\52\1\53\1\uffff\1\55\1\uffff\1\13\2\uffff\1\60\11\uffff\1\73\1\72\10\uffff\1\50",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_214 = DFA.unpackEncodedString(dfa_214s);
    static final short[] dfa_215 = DFA.unpackEncodedString(dfa_215s);
    static final char[] dfa_216 = DFA.unpackEncodedStringToUnsignedChars(dfa_216s);
    static final char[] dfa_217 = DFA.unpackEncodedStringToUnsignedChars(dfa_217s);
    static final short[] dfa_218 = DFA.unpackEncodedString(dfa_218s);
    static final short[] dfa_219 = DFA.unpackEncodedString(dfa_219s);
    static final short[][] dfa_220 = unpackEncodedStringArray(dfa_220s);

    class DFA338 extends DFA {

        public DFA338(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 338;
            this.eot = dfa_214;
            this.eof = dfa_215;
            this.min = dfa_216;
            this.max = dfa_217;
            this.accept = dfa_218;
            this.special = dfa_219;
            this.transition = dfa_220;
        }
        public String getDescription() {
            return "()* loopback of 8179:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Yield | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= ruleShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA338_2 = input.LA(1);

                         
                        int index338_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA338_2>=4 && LA338_2<=149 && (s=T2S.M_28[LA338_2-(4)])>=0) && (synpred185_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA338_2==GreaterThanSignEqualsSign||LA338_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index338_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA338_0 = input.LA(1);

                         
                        int index338_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA338_0==EOF||LA338_0==ExclamationMarkEqualsSignEqualsSign||(LA338_0>=LessThanSignLessThanSignEqualsSign && LA338_0<=EqualsSignEqualsSignEqualsSign)||(LA338_0>=ExclamationMarkEqualsSign && LA338_0<=AsteriskEqualsSign)||LA338_0==PlusSignEqualsSign||(LA338_0>=HyphenMinusEqualsSign && LA338_0<=SolidusEqualsSign)||LA338_0==EqualsSignEqualsSign||LA338_0==CircumflexAccentEqualsSign||(LA338_0>=VerticalLineEqualsSign && LA338_0<=VerticalLineVerticalLine)||LA338_0==Ampersand||LA338_0==RightParenthesis||LA338_0==Comma||(LA338_0>=Colon && LA338_0<=Semicolon)||LA338_0==EqualsSign||LA338_0==QuestionMark||(LA338_0>=RightSquareBracket && LA338_0<=CircumflexAccent)||(LA338_0>=VerticalLine && LA338_0<=RightCurlyBracket)||LA338_0==RULE_ML_COMMENT||LA338_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA338_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA338_0==LessThanSign) && (synpred185_InternalN4JSParser())) {s = 3;}

                        else if ( (LA338_0==LessThanSignEqualsSign) && (synpred185_InternalN4JSParser())) {s = 4;}

                        else if ( (LA338_0==GreaterThanSignEqualsSign) && (synpred185_InternalN4JSParser())) {s = 5;}

                        else if ( (LA338_0==Instanceof) && (synpred185_InternalN4JSParser())) {s = 6;}

                        else if ( (LA338_0==In) && (synpred185_InternalN4JSParser())) {s = 7;}

                         
                        input.seek(index338_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 338, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_221s = "\1\7\1\uffff\1\4\100\uffff";
    static final String dfa_222s = "\1\157\1\uffff\1\u0095\100\uffff";
    static final String dfa_223s = "\1\uffff\1\2\1\uffff\100\1";
    static final String dfa_224s = "\1\0\1\uffff\1\1\100\uffff}>";
    static final String[] dfa_225s = {
            "\1\6\56\uffff\1\1\1\uffff\2\1\7\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\4\1\2\uffff\1\1\4\uffff\1\1\4\uffff\1\1\1\3\1\1\1\2\1\1\3\uffff\1\1\1\uffff\1\1",
            "",
            "\1\31\1\24\1\37\1\uffff\1\34\1\40\1\42\1\20\2\uffff\1\17\1\66\3\uffff\1\41\1\16\1\72\2\uffff\1\43\1\uffff\1\21\1\uffff\1\26\1\74\1\33\1\36\1\35\2\uffff\1\67\1\uffff\1\55\1\11\1\uffff\1\30\2\uffff\1\32\3\uffff\1\23\1\57\1\10\1\54\1\27\1\73\6\uffff\1\13\1\15\1\7\1\14\7\uffff\1\75\1\uffff\1\76\1\uffff\1\61\4\uffff\1\1\2\uffff\1\22\3\uffff\1\25\2\uffff\1\102\2\uffff\1\64\2\uffff\1\77\1\uffff\1\100\1\uffff\1\60\2\uffff\1\44\1\uffff\1\1\1\uffff\1\65\1\62\2\uffff\1\63\2\uffff\1\101\3\uffff\1\45\1\uffff\1\52\1\47\1\50\1\51\1\uffff\1\53\1\uffff\1\12\2\uffff\1\56\11\uffff\1\71\1\70\10\uffff\1\46",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_221 = DFA.unpackEncodedStringToUnsignedChars(dfa_221s);
    static final char[] dfa_222 = DFA.unpackEncodedStringToUnsignedChars(dfa_222s);
    static final short[] dfa_223 = DFA.unpackEncodedString(dfa_223s);
    static final short[] dfa_224 = DFA.unpackEncodedString(dfa_224s);
    static final short[][] dfa_225 = unpackEncodedStringArray(dfa_225s);

    class DFA339 extends DFA {

        public DFA339(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 339;
            this.eot = dfa_194;
            this.eof = dfa_195;
            this.min = dfa_221;
            this.max = dfa_222;
            this.accept = dfa_223;
            this.special = dfa_224;
            this.transition = dfa_225;
        }
        public String getDescription() {
            return "()* loopback of 8364:1: ( ( ( ( ( ruleRelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= ruleRelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA339_0 = input.LA(1);

                         
                        int index339_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA339_0==EOF||LA339_0==ExclamationMarkEqualsSignEqualsSign||(LA339_0>=LessThanSignLessThanSignEqualsSign && LA339_0<=EqualsSignEqualsSignEqualsSign)||(LA339_0>=ExclamationMarkEqualsSign && LA339_0<=AsteriskEqualsSign)||LA339_0==PlusSignEqualsSign||(LA339_0>=HyphenMinusEqualsSign && LA339_0<=SolidusEqualsSign)||LA339_0==EqualsSignEqualsSign||LA339_0==CircumflexAccentEqualsSign||(LA339_0>=In && LA339_0<=VerticalLineVerticalLine)||LA339_0==Ampersand||LA339_0==Comma||LA339_0==Semicolon||LA339_0==EqualsSign||LA339_0==QuestionMark||LA339_0==CircumflexAccent||LA339_0==VerticalLine) ) {s = 1;}

                        else if ( (LA339_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA339_0==LessThanSign) && (synpred187_InternalN4JSParser())) {s = 3;}

                        else if ( (LA339_0==LessThanSignEqualsSign) && (synpred187_InternalN4JSParser())) {s = 4;}

                        else if ( (LA339_0==GreaterThanSignEqualsSign) && (synpred187_InternalN4JSParser())) {s = 5;}

                        else if ( (LA339_0==Instanceof) && (synpred187_InternalN4JSParser())) {s = 6;}

                         
                        input.seek(index339_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA339_2 = input.LA(1);

                         
                        int index339_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA339_2>=4 && LA339_2<=149 && (s=T2S.M_29[LA339_2-(4)])>=0) && (synpred187_InternalN4JSParser())) { /* 60 cases */ }
                        else if ( (LA339_2==GreaterThanSignEqualsSign||LA339_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index339_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 339, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_226s = "\1\u0099\1\uffff\1\u0095\101\uffff";
    static final String[] dfa_227s = {
            "\1\6\56\uffff\1\1\1\uffff\2\1\7\uffff\5\1\1\uffff\1\1\1\uffff\2\1\1\uffff\1\4\1\1\1\uffff\1\5\1\uffff\1\1\3\uffff\1\7\1\uffff\2\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\3\uffff\2\1\1\3\1\1\1\2\1\1\2\uffff\2\1\1\uffff\2\1\46\uffff\1\1\1\uffff\1\1",
            "",
            "\1\32\1\25\1\40\1\uffff\1\35\1\41\1\43\1\21\2\uffff\1\20\1\67\3\uffff\1\42\1\17\1\73\2\uffff\1\44\1\uffff\1\22\1\uffff\1\27\1\75\1\34\1\37\1\36\2\uffff\1\70\1\uffff\1\56\1\12\1\uffff\1\31\2\uffff\1\33\3\uffff\1\24\1\60\1\11\1\55\1\30\1\74\6\uffff\1\14\1\16\1\10\1\15\7\uffff\1\76\1\uffff\1\77\1\uffff\1\62\4\uffff\1\1\2\uffff\1\23\3\uffff\1\26\2\uffff\1\103\2\uffff\1\65\2\uffff\1\100\1\uffff\1\101\1\uffff\1\61\2\uffff\1\45\1\uffff\1\1\1\uffff\1\66\1\63\2\uffff\1\64\2\uffff\1\102\3\uffff\1\46\1\uffff\1\53\1\50\1\51\1\52\1\uffff\1\54\1\uffff\1\13\2\uffff\1\57\11\uffff\1\72\1\71\10\uffff\1\47",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_226 = DFA.unpackEncodedStringToUnsignedChars(dfa_226s);
    static final short[][] dfa_227 = unpackEncodedStringArray(dfa_227s);

    class DFA340 extends DFA {

        public DFA340(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 340;
            this.eot = dfa_207;
            this.eof = dfa_208;
            this.min = dfa_209;
            this.max = dfa_226;
            this.accept = dfa_211;
            this.special = dfa_212;
            this.transition = dfa_227;
        }
        public String getDescription() {
            return "()* loopback of 8546:1: ( ( ( ( ( norm1_RelationalOperator ) ) ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD ) ) )=> ( ( (OpRelationalOperatorParserRuleCall_1_0_1_0= norm1_RelationalOperator ) ) ( ( New | This_1 | Super | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | LeftParenthesis | CommercialAt | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (RhsShiftExpressionParserRuleCall_1_0_2_0= norm1_ShiftExpression ) ) ) )*";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA340_0 = input.LA(1);

                         
                        int index340_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA340_0==EOF||LA340_0==ExclamationMarkEqualsSignEqualsSign||(LA340_0>=LessThanSignLessThanSignEqualsSign && LA340_0<=EqualsSignEqualsSignEqualsSign)||(LA340_0>=ExclamationMarkEqualsSign && LA340_0<=AsteriskEqualsSign)||LA340_0==PlusSignEqualsSign||(LA340_0>=HyphenMinusEqualsSign && LA340_0<=SolidusEqualsSign)||LA340_0==EqualsSignEqualsSign||LA340_0==CircumflexAccentEqualsSign||(LA340_0>=VerticalLineEqualsSign && LA340_0<=VerticalLineVerticalLine)||LA340_0==Ampersand||LA340_0==RightParenthesis||LA340_0==Comma||(LA340_0>=Colon && LA340_0<=Semicolon)||LA340_0==EqualsSign||LA340_0==QuestionMark||(LA340_0>=RightSquareBracket && LA340_0<=CircumflexAccent)||(LA340_0>=VerticalLine && LA340_0<=RightCurlyBracket)||LA340_0==RULE_ML_COMMENT||LA340_0==RULE_EOL) ) {s = 1;}

                        else if ( (LA340_0==GreaterThanSign) ) {s = 2;}

                        else if ( (LA340_0==LessThanSign) && (synpred189_InternalN4JSParser())) {s = 3;}

                        else if ( (LA340_0==LessThanSignEqualsSign) && (synpred189_InternalN4JSParser())) {s = 4;}

                        else if ( (LA340_0==GreaterThanSignEqualsSign) && (synpred189_InternalN4JSParser())) {s = 5;}

                        else if ( (LA340_0==Instanceof) && (synpred189_InternalN4JSParser())) {s = 6;}

                        else if ( (LA340_0==In) && (synpred189_InternalN4JSParser())) {s = 7;}

                         
                        input.seek(index340_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA340_2 = input.LA(1);

                         
                        int index340_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA340_2>=4 && LA340_2<=149 && (s=T2S.M_30[LA340_2-(4)])>=0) && (synpred189_InternalN4JSParser())) { /* 60 cases */ }
                        else if ( (LA340_2==GreaterThanSignEqualsSign||LA340_2==GreaterThanSign) ) {s = 1;}

                         
                        input.seek(index340_2);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 340, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_228s = "\1\4\35\0\43\uffff";
    static final String dfa_229s = "\1\u0095\35\0\43\uffff";
    static final String dfa_230s = "\36\uffff\1\4\37\uffff\1\1\1\3\1\2";
    static final String dfa_231s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\1\34\43\uffff}>";
    static final String[] dfa_232s = {
            "\1\25\1\20\1\31\1\uffff\1\30\1\32\1\34\1\14\2\uffff\1\13\1\36\3\uffff\1\33\1\12\1\36\2\uffff\1\35\1\uffff\1\15\1\uffff\1\22\1\36\1\27\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\24\1\uffff\1\6\1\26\3\uffff\1\17\3\36\1\23\1\36\6\uffff\1\7\1\11\1\36\1\10\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\16\3\uffff\1\21\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_228 = DFA.unpackEncodedStringToUnsignedChars(dfa_228s);
    static final char[] dfa_229 = DFA.unpackEncodedStringToUnsignedChars(dfa_229s);
    static final short[] dfa_230 = DFA.unpackEncodedString(dfa_230s);
    static final short[] dfa_231 = DFA.unpackEncodedString(dfa_231s);
    static final short[][] dfa_232 = unpackEncodedStringArray(dfa_232s);

    class DFA372 extends DFA {

        public DFA372(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 372;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_228;
            this.max = dfa_229;
            this.accept = dfa_230;
            this.special = dfa_231;
            this.transition = dfa_232;
        }
        public String getDescription() {
            return "9648:1: ( ( ( ( Await_1 ) )=>AwaitExpressionParserRuleCall_0= ruleAwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= rulePromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= ruleArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= ruleConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA372_1 = input.LA(1);

                         
                        int index372_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred219_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA372_2 = input.LA(1);

                         
                        int index372_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred220_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA372_3 = input.LA(1);

                         
                        int index372_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA372_4 = input.LA(1);

                         
                        int index372_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA372_5 = input.LA(1);

                         
                        int index372_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA372_6 = input.LA(1);

                         
                        int index372_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA372_7 = input.LA(1);

                         
                        int index372_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA372_8 = input.LA(1);

                         
                        int index372_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA372_9 = input.LA(1);

                         
                        int index372_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA372_10 = input.LA(1);

                         
                        int index372_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA372_11 = input.LA(1);

                         
                        int index372_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA372_12 = input.LA(1);

                         
                        int index372_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA372_13 = input.LA(1);

                         
                        int index372_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA372_14 = input.LA(1);

                         
                        int index372_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA372_15 = input.LA(1);

                         
                        int index372_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA372_16 = input.LA(1);

                         
                        int index372_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA372_17 = input.LA(1);

                         
                        int index372_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA372_18 = input.LA(1);

                         
                        int index372_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA372_19 = input.LA(1);

                         
                        int index372_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA372_20 = input.LA(1);

                         
                        int index372_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA372_21 = input.LA(1);

                         
                        int index372_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA372_22 = input.LA(1);

                         
                        int index372_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA372_23 = input.LA(1);

                         
                        int index372_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA372_24 = input.LA(1);

                         
                        int index372_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA372_25 = input.LA(1);

                         
                        int index372_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA372_26 = input.LA(1);

                         
                        int index372_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA372_27 = input.LA(1);

                         
                        int index372_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA372_28 = input.LA(1);

                         
                        int index372_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA372_29 = input.LA(1);

                         
                        int index372_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred222_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index372_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 372, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_233s = "\1\14\15\uffff";
    static final String dfa_234s = "\1\70\13\0\2\uffff";
    static final String dfa_235s = "\1\150\13\0\2\uffff";
    static final String dfa_236s = "\14\uffff\1\2\1\1";
    static final String dfa_237s = "\1\uffff\1\5\1\10\1\0\1\3\1\6\1\11\1\1\1\2\1\4\1\7\1\12\2\uffff}>";
    static final String[] dfa_238s = {
            "\1\7\11\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\3\uffff\2\14\1\13\10\uffff\1\14\4\uffff\1\14\1\uffff\1\1\1\10",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final short[] dfa_233 = DFA.unpackEncodedString(dfa_233s);
    static final char[] dfa_234 = DFA.unpackEncodedStringToUnsignedChars(dfa_234s);
    static final char[] dfa_235 = DFA.unpackEncodedStringToUnsignedChars(dfa_235s);
    static final short[] dfa_236 = DFA.unpackEncodedString(dfa_236s);
    static final short[] dfa_237 = DFA.unpackEncodedString(dfa_237s);
    static final short[][] dfa_238 = unpackEncodedStringArray(dfa_238s);

    class DFA371 extends DFA {

        public DFA371(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 371;
            this.eot = dfa_169;
            this.eof = dfa_233;
            this.min = dfa_234;
            this.max = dfa_235;
            this.accept = dfa_236;
            this.special = dfa_237;
            this.transition = dfa_238;
        }
        public String getDescription() {
            return "9710:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= ruleAssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA371_3 = input.LA(1);

                         
                        int index371_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_3);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA371_7 = input.LA(1);

                         
                        int index371_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA371_8 = input.LA(1);

                         
                        int index371_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_8);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA371_4 = input.LA(1);

                         
                        int index371_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA371_9 = input.LA(1);

                         
                        int index371_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_9);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA371_1 = input.LA(1);

                         
                        int index371_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_1);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA371_5 = input.LA(1);

                         
                        int index371_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_5);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA371_10 = input.LA(1);

                         
                        int index371_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_10);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA371_2 = input.LA(1);

                         
                        int index371_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_2);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA371_6 = input.LA(1);

                         
                        int index371_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_6);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA371_11 = input.LA(1);

                         
                        int index371_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred223_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index371_11);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 371, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA374 extends DFA {

        public DFA374(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 374;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_228;
            this.max = dfa_229;
            this.accept = dfa_230;
            this.special = dfa_231;
            this.transition = dfa_232;
        }
        public String getDescription() {
            return "9734:1: ( ( ( ( Await_1 ) )=>AwaitExpressionParserRuleCall_0= norm1_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm1_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( ruleFormalParameter ) ) ( Comma ( ( ruleFormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ruleBindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm1_ArrowExpression ) | (ConditionalExpressionParserRuleCall_4_0= norm1_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA374_1 = input.LA(1);

                         
                        int index374_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred224_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA374_2 = input.LA(1);

                         
                        int index374_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred225_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA374_3 = input.LA(1);

                         
                        int index374_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA374_4 = input.LA(1);

                         
                        int index374_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA374_5 = input.LA(1);

                         
                        int index374_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA374_6 = input.LA(1);

                         
                        int index374_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA374_7 = input.LA(1);

                         
                        int index374_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA374_8 = input.LA(1);

                         
                        int index374_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA374_9 = input.LA(1);

                         
                        int index374_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA374_10 = input.LA(1);

                         
                        int index374_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA374_11 = input.LA(1);

                         
                        int index374_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA374_12 = input.LA(1);

                         
                        int index374_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA374_13 = input.LA(1);

                         
                        int index374_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA374_14 = input.LA(1);

                         
                        int index374_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA374_15 = input.LA(1);

                         
                        int index374_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA374_16 = input.LA(1);

                         
                        int index374_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA374_17 = input.LA(1);

                         
                        int index374_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA374_18 = input.LA(1);

                         
                        int index374_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA374_19 = input.LA(1);

                         
                        int index374_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA374_20 = input.LA(1);

                         
                        int index374_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA374_21 = input.LA(1);

                         
                        int index374_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA374_22 = input.LA(1);

                         
                        int index374_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA374_23 = input.LA(1);

                         
                        int index374_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA374_24 = input.LA(1);

                         
                        int index374_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA374_25 = input.LA(1);

                         
                        int index374_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA374_26 = input.LA(1);

                         
                        int index374_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA374_27 = input.LA(1);

                         
                        int index374_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA374_28 = input.LA(1);

                         
                        int index374_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_28);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA374_29 = input.LA(1);

                         
                        int index374_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred227_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index374_29);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 374, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_239s = "\1\u0099\13\0\2\uffff";
    static final String dfa_240s = "\1\uffff\1\10\1\1\1\4\1\6\1\11\1\2\1\5\1\0\1\7\1\12\1\3\2\uffff}>";
    static final String[] dfa_241s = {
            "\1\7\11\uffff\1\4\1\uffff\1\11\1\2\1\uffff\1\5\1\uffff\1\6\1\3\6\uffff\1\12\5\uffff\1\13\5\uffff\1\14\2\uffff\1\14\3\uffff\2\14\1\uffff\1\1\1\10\3\uffff\1\14\3\uffff\1\14\46\uffff\1\14\1\uffff\1\14",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            ""
    };
    static final char[] dfa_239 = DFA.unpackEncodedStringToUnsignedChars(dfa_239s);
    static final short[] dfa_240 = DFA.unpackEncodedString(dfa_240s);
    static final short[][] dfa_241 = unpackEncodedStringArray(dfa_241s);

    class DFA373 extends DFA {

        public DFA373(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 373;
            this.eot = dfa_169;
            this.eof = dfa_233;
            this.min = dfa_234;
            this.max = dfa_239;
            this.accept = dfa_236;
            this.special = dfa_240;
            this.transition = dfa_241;
        }
        public String getDescription() {
            return "9796:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm1_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA373_8 = input.LA(1);

                         
                        int index373_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_8);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA373_2 = input.LA(1);

                         
                        int index373_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA373_6 = input.LA(1);

                         
                        int index373_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA373_11 = input.LA(1);

                         
                        int index373_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_11);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA373_3 = input.LA(1);

                         
                        int index373_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_3);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA373_7 = input.LA(1);

                         
                        int index373_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_7);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA373_4 = input.LA(1);

                         
                        int index373_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_4);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA373_9 = input.LA(1);

                         
                        int index373_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_9);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA373_1 = input.LA(1);

                         
                        int index373_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_1);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA373_5 = input.LA(1);

                         
                        int index373_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_5);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA373_10 = input.LA(1);

                         
                        int index373_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred228_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index373_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 373, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_242s = "\1\4\34\0\44\uffff";
    static final String dfa_243s = "\1\u0095\34\0\44\uffff";
    static final String dfa_244s = "\35\uffff\1\4\1\5\37\uffff\1\1\1\3\1\2";
    static final String dfa_245s = "\1\uffff\1\0\1\1\1\2\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31\1\32\1\33\44\uffff}>";
    static final String[] dfa_246s = {
            "\1\24\1\17\1\30\1\uffff\1\27\1\31\1\33\1\13\2\uffff\1\12\1\36\3\uffff\1\32\1\11\1\36\2\uffff\1\34\1\uffff\1\14\1\uffff\1\21\1\36\1\26\1\4\1\1\2\uffff\1\36\1\uffff\2\36\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\3\36\1\22\1\36\6\uffff\1\6\1\10\1\36\1\7\7\uffff\1\36\1\uffff\1\36\1\uffff\1\36\7\uffff\1\15\3\uffff\1\20\2\uffff\1\36\2\uffff\1\3\2\uffff\1\36\1\uffff\1\36\1\uffff\1\36\2\uffff\1\36\3\uffff\1\2\1\36\2\uffff\1\36\2\uffff\1\36\3\uffff\1\36\1\uffff\4\36\1\uffff\1\36\1\uffff\1\5\2\uffff\1\36\11\uffff\2\36\10\uffff\1\36",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_242 = DFA.unpackEncodedStringToUnsignedChars(dfa_242s);
    static final char[] dfa_243 = DFA.unpackEncodedStringToUnsignedChars(dfa_243s);
    static final short[] dfa_244 = DFA.unpackEncodedString(dfa_244s);
    static final short[] dfa_245 = DFA.unpackEncodedString(dfa_245s);
    static final short[][] dfa_246 = unpackEncodedStringArray(dfa_246s);

    class DFA376 extends DFA {

        public DFA376(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 376;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_242;
            this.max = dfa_243;
            this.accept = dfa_244;
            this.special = dfa_245;
            this.transition = dfa_246;
        }
        public String getDescription() {
            return "9820:1: ( ( ( ( Await_1 ) )=>AwaitExpressionParserRuleCall_0= norm2_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm2_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm2_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= ruleYieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm2_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA376_1 = input.LA(1);

                         
                        int index376_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred229_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA376_2 = input.LA(1);

                         
                        int index376_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred230_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA376_3 = input.LA(1);

                         
                        int index376_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA376_4 = input.LA(1);

                         
                        int index376_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA376_5 = input.LA(1);

                         
                        int index376_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA376_6 = input.LA(1);

                         
                        int index376_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA376_7 = input.LA(1);

                         
                        int index376_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA376_8 = input.LA(1);

                         
                        int index376_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA376_9 = input.LA(1);

                         
                        int index376_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA376_10 = input.LA(1);

                         
                        int index376_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA376_11 = input.LA(1);

                         
                        int index376_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA376_12 = input.LA(1);

                         
                        int index376_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA376_13 = input.LA(1);

                         
                        int index376_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA376_14 = input.LA(1);

                         
                        int index376_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA376_15 = input.LA(1);

                         
                        int index376_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA376_16 = input.LA(1);

                         
                        int index376_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA376_17 = input.LA(1);

                         
                        int index376_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA376_18 = input.LA(1);

                         
                        int index376_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA376_19 = input.LA(1);

                         
                        int index376_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA376_20 = input.LA(1);

                         
                        int index376_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA376_21 = input.LA(1);

                         
                        int index376_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA376_22 = input.LA(1);

                         
                        int index376_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA376_23 = input.LA(1);

                         
                        int index376_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA376_24 = input.LA(1);

                         
                        int index376_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA376_25 = input.LA(1);

                         
                        int index376_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA376_26 = input.LA(1);

                         
                        int index376_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA376_27 = input.LA(1);

                         
                        int index376_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA376_28 = input.LA(1);

                         
                        int index376_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred232_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index376_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 376, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_247s = "\1\uffff\1\6\1\0\1\7\1\1\1\10\1\2\1\11\1\5\1\3\1\12\1\4\2\uffff}>";
    static final short[] dfa_247 = DFA.unpackEncodedString(dfa_247s);

    class DFA375 extends DFA {

        public DFA375(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 375;
            this.eot = dfa_169;
            this.eof = dfa_233;
            this.min = dfa_234;
            this.max = dfa_235;
            this.accept = dfa_236;
            this.special = dfa_247;
            this.transition = dfa_238;
        }
        public String getDescription() {
            return "9884:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm2_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA375_2 = input.LA(1);

                         
                        int index375_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA375_4 = input.LA(1);

                         
                        int index375_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA375_6 = input.LA(1);

                         
                        int index375_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA375_9 = input.LA(1);

                         
                        int index375_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA375_11 = input.LA(1);

                         
                        int index375_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA375_8 = input.LA(1);

                         
                        int index375_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_8);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA375_1 = input.LA(1);

                         
                        int index375_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_1);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA375_3 = input.LA(1);

                         
                        int index375_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_3);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA375_5 = input.LA(1);

                         
                        int index375_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_5);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA375_7 = input.LA(1);

                         
                        int index375_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_7);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA375_10 = input.LA(1);

                         
                        int index375_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred233_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index375_10);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 375, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA378 extends DFA {

        public DFA378(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 378;
            this.eot = dfa_19;
            this.eof = dfa_19;
            this.min = dfa_242;
            this.max = dfa_243;
            this.accept = dfa_244;
            this.special = dfa_245;
            this.transition = dfa_246;
        }
        public String getDescription() {
            return "9908:1: ( ( ( ( Await_1 ) )=>AwaitExpressionParserRuleCall_0= norm3_AwaitExpression ) | ( ( ( CommercialAt Promisify ) )=>PromisifyExpressionParserRuleCall_1= norm3_PromisifyExpression ) | ( ( ( ( ( LeftParenthesis ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( ( ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) )=> ( ( ( Async ) ) ruleNoLineTerminator LeftParenthesis ) ) ( ( ( norm1_FormalParameter ) ) ( Comma ( ( norm1_FormalParameter ) ) )* )? RightParenthesis ( Colon ( ( ruleTypeRef ) ) )? ) | ( ( norm1_BindingIdentifierAsFormalParameter ) ) ) EqualsSignGreaterThanSign ) )=>ArrowExpressionParserRuleCall_2= norm3_ArrowExpression ) | YieldExpressionParserRuleCall_3_0= norm1_YieldExpression | (ConditionalExpressionParserRuleCall_4_0= norm3_ConditionalExpression ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )? ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA378_1 = input.LA(1);

                         
                        int index378_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred234_InternalN4JSParser()) ) {s = 62;}

                        else if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA378_2 = input.LA(1);

                         
                        int index378_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred235_InternalN4JSParser()) ) {s = 64;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_2);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA378_3 = input.LA(1);

                         
                        int index378_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_3);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA378_4 = input.LA(1);

                         
                        int index378_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA378_5 = input.LA(1);

                         
                        int index378_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA378_6 = input.LA(1);

                         
                        int index378_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA378_7 = input.LA(1);

                         
                        int index378_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA378_8 = input.LA(1);

                         
                        int index378_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA378_9 = input.LA(1);

                         
                        int index378_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA378_10 = input.LA(1);

                         
                        int index378_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA378_11 = input.LA(1);

                         
                        int index378_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA378_12 = input.LA(1);

                         
                        int index378_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA378_13 = input.LA(1);

                         
                        int index378_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_13);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA378_14 = input.LA(1);

                         
                        int index378_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA378_15 = input.LA(1);

                         
                        int index378_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_15);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA378_16 = input.LA(1);

                         
                        int index378_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_16);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA378_17 = input.LA(1);

                         
                        int index378_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_17);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA378_18 = input.LA(1);

                         
                        int index378_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA378_19 = input.LA(1);

                         
                        int index378_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_19);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA378_20 = input.LA(1);

                         
                        int index378_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_20);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA378_21 = input.LA(1);

                         
                        int index378_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_21);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA378_22 = input.LA(1);

                         
                        int index378_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_22);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA378_23 = input.LA(1);

                         
                        int index378_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_23);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA378_24 = input.LA(1);

                         
                        int index378_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_24);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA378_25 = input.LA(1);

                         
                        int index378_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_25);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA378_26 = input.LA(1);

                         
                        int index378_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_26);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA378_27 = input.LA(1);

                         
                        int index378_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_27);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA378_28 = input.LA(1);

                         
                        int index378_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred237_InternalN4JSParser()) ) {s = 63;}

                        else if ( (true) ) {s = 30;}

                         
                        input.seek(index378_28);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 378, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_248s = "\1\uffff\1\5\1\0\1\6\1\1\1\7\1\2\1\10\1\12\1\3\1\11\1\4\2\uffff}>";
    static final short[] dfa_248 = DFA.unpackEncodedString(dfa_248s);

    class DFA377 extends DFA {

        public DFA377(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 377;
            this.eot = dfa_169;
            this.eof = dfa_233;
            this.min = dfa_234;
            this.max = dfa_239;
            this.accept = dfa_236;
            this.special = dfa_248;
            this.transition = dfa_241;
        }
        public String getDescription() {
            return "9972:1: ( ( ( ( ( ( ruleAssignmentOperator ) ) ) )=> ( ( (OpAssignmentOperatorParserRuleCall_4_1_0_0_1_0= ruleAssignmentOperator ) ) ) ) ( (RhsAssignmentExpressionParserRuleCall_4_1_1_0= norm3_AssignmentExpression ) ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA377_2 = input.LA(1);

                         
                        int index377_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_2);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA377_4 = input.LA(1);

                         
                        int index377_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_4);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA377_6 = input.LA(1);

                         
                        int index377_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_6);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA377_9 = input.LA(1);

                         
                        int index377_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_9);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA377_11 = input.LA(1);

                         
                        int index377_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA377_1 = input.LA(1);

                         
                        int index377_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_1);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA377_3 = input.LA(1);

                         
                        int index377_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_3);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA377_5 = input.LA(1);

                         
                        int index377_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_5);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA377_7 = input.LA(1);

                         
                        int index377_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_7);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA377_10 = input.LA(1);

                         
                        int index377_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA377_8 = input.LA(1);

                         
                        int index377_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred238_InternalN4JSParser()) ) {s = 13;}

                        else if ( (true) ) {s = 12;}

                         
                        input.seek(index377_8);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 377, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_249s = "\1\76\113\uffff";
    static final String dfa_250s = "\1\4\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_251s = "\1\u0095\17\uffff\1\0\35\uffff\1\0\35\uffff";
    static final String dfa_252s = "\1\uffff\17\1\1\uffff\35\1\1\uffff\17\1\1\2\15\uffff";
    static final String dfa_253s = "\1\0\17\uffff\1\1\35\uffff\1\2\35\uffff}>";
    static final String[] dfa_254s = {
            "\1\24\1\17\1\30\1\uffff\1\27\1\31\1\33\1\13\2\uffff\1\12\1\61\3\uffff\1\32\1\11\1\65\2\uffff\1\34\1\uffff\1\14\1\uffff\1\21\1\67\1\26\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\2\uffff\1\76\1\20\1\76\1\uffff\1\75\2\uffff\1\3\2\uffff\1\72\1\76\1\73\1\uffff\1\55\1\uffff\1\76\1\41\2\76\1\uffff\1\2\1\57\2\uffff\1\60\2\uffff\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_249 = DFA.unpackEncodedString(dfa_249s);
    static final char[] dfa_250 = DFA.unpackEncodedStringToUnsignedChars(dfa_250s);
    static final char[] dfa_251 = DFA.unpackEncodedStringToUnsignedChars(dfa_251s);
    static final short[] dfa_252 = DFA.unpackEncodedString(dfa_252s);
    static final short[] dfa_253 = DFA.unpackEncodedString(dfa_253s);
    static final short[][] dfa_254 = unpackEncodedStringArray(dfa_254s);

    class DFA380 extends DFA {

        public DFA380(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 380;
            this.eot = dfa_163;
            this.eof = dfa_249;
            this.min = dfa_250;
            this.max = dfa_251;
            this.accept = dfa_252;
            this.special = dfa_253;
            this.transition = dfa_254;
        }
        public String getDescription() {
            return "10015:3: ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm2_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA380_0 = input.LA(1);

                         
                        int index380_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA380_0>=5 && LA380_0<=126 && (s=T2S.M_31[LA380_0-(5)])>=0) && (synpred240_InternalN4JSParser())) { /* 15 cases */ }
                        else if ( (LA380_0==Of) ) {s = 16;}

                        
                        else if ((LA380_0>=4 && LA380_0<=149 && (s=T2S.M_32[LA380_0-(4)])>=0) && (synpred240_InternalN4JSParser())) { /* 30 cases */ }
                        else if ( (LA380_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA380_0>=15 && LA380_0<=140 && (s=T2S.M_33[LA380_0-(15)])>=0) && (synpred240_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA380_0==EOF||LA380_0==LessThanSignLessThanSignEqualsSign||LA380_0==PercentSignEqualsSign||(LA380_0>=AmpersandEqualsSign && LA380_0<=AsteriskEqualsSign)||LA380_0==PlusSignEqualsSign||LA380_0==HyphenMinusEqualsSign||LA380_0==CircumflexAccentEqualsSign||LA380_0==In||LA380_0==VerticalLineEqualsSign||LA380_0==Comma||LA380_0==Semicolon||(LA380_0>=EqualsSign && LA380_0<=GreaterThanSign)) ) {s = 62;}

                         
                        input.seek(index380_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA380_16 = input.LA(1);

                         
                        int index380_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index380_16);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA380_46 = input.LA(1);

                         
                        int index380_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred240_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index380_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 380, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_255s = "\121\uffff";
    static final String dfa_256s = "\1\76\120\uffff";
    static final String dfa_257s = "\1\4\55\uffff\1\0\42\uffff";
    static final String dfa_258s = "\1\u0099\55\uffff\1\0\42\uffff";
    static final String dfa_259s = "\1\uffff\55\1\1\uffff\17\1\1\2\22\uffff";
    static final String dfa_260s = "\1\0\55\uffff\1\1\42\uffff}>";
    static final String[] dfa_261s = {
            "\1\24\1\17\1\30\1\uffff\1\27\1\31\1\33\1\13\2\uffff\1\12\1\61\3\uffff\1\32\1\11\1\65\2\uffff\1\34\1\uffff\1\14\1\uffff\1\21\1\67\1\26\1\4\1\1\2\uffff\1\62\1\uffff\1\52\1\40\1\uffff\1\23\1\uffff\1\35\1\25\3\uffff\1\16\1\54\1\37\1\51\1\22\1\66\3\uffff\1\76\2\uffff\1\6\1\10\1\36\1\7\3\uffff\1\76\1\uffff\2\76\1\70\1\76\1\71\1\76\1\56\6\uffff\1\76\1\15\3\uffff\1\20\1\76\1\uffff\1\75\2\uffff\1\3\1\76\1\uffff\1\72\1\76\1\73\1\uffff\1\55\2\76\1\41\2\76\1\uffff\1\2\1\57\1\76\1\uffff\1\60\1\uffff\1\76\1\74\3\uffff\1\42\1\uffff\1\47\1\44\1\45\1\46\1\uffff\1\50\1\uffff\1\5\2\uffff\1\53\11\uffff\1\64\1\63\10\uffff\1\43\1\uffff\1\76\1\uffff\1\76",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_255 = DFA.unpackEncodedString(dfa_255s);
    static final short[] dfa_256 = DFA.unpackEncodedString(dfa_256s);
    static final char[] dfa_257 = DFA.unpackEncodedStringToUnsignedChars(dfa_257s);
    static final char[] dfa_258 = DFA.unpackEncodedStringToUnsignedChars(dfa_258s);
    static final short[] dfa_259 = DFA.unpackEncodedString(dfa_259s);
    static final short[] dfa_260 = DFA.unpackEncodedString(dfa_260s);
    static final short[][] dfa_261 = unpackEncodedStringArray(dfa_261s);

    class DFA382 extends DFA {

        public DFA382(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 382;
            this.eot = dfa_255;
            this.eof = dfa_256;
            this.min = dfa_257;
            this.max = dfa_258;
            this.accept = dfa_259;
            this.special = dfa_260;
            this.transition = dfa_261;
        }
        public String getDescription() {
            return "10094:3: ( ( Await_1 | CommercialAt | LeftParenthesis | Async | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Implements | Interface | Private | Protected | Public | Yield | New | This_1 | Super | LessThanSign | True | False | Null | Solidus | SolidusEqualsSign | LeftSquareBracket | LeftCurlyBracket | Function | Class | Delete | Void | Typeof | PlusSignPlusSign | HyphenMinusHyphenMinus | PlusSign | HyphenMinus | Tilde | ExclamationMark | RULE_IDENTIFIER | RULE_DOUBLE | RULE_INT | RULE_BINARY_INT | RULE_OCTAL_INT | RULE_LEGACY_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT | RULE_STRING | RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL | RULE_TEMPLATE_HEAD )=> (ExpressionAssignmentExpressionParserRuleCall_3_0= norm3_AssignmentExpression ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA382_0 = input.LA(1);

                         
                        int index382_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA382_0>=4 && LA382_0<=149 && (s=T2S.M_34[LA382_0-(4)])>=0) && (synpred242_InternalN4JSParser())) { /* 45 cases */ }
                        else if ( (LA382_0==SolidusEqualsSign) ) {s = 46;}

                        
                        else if ((LA382_0>=15 && LA382_0<=140 && (s=T2S.M_33[LA382_0-(15)])>=0) && (synpred242_InternalN4JSParser())) { /* 16 cases */ }
                        else if ( (LA382_0==EOF||LA382_0==LessThanSignLessThanSignEqualsSign||LA382_0==PercentSignEqualsSign||(LA382_0>=AmpersandEqualsSign && LA382_0<=AsteriskEqualsSign)||LA382_0==PlusSignEqualsSign||LA382_0==HyphenMinusEqualsSign||LA382_0==CircumflexAccentEqualsSign||LA382_0==VerticalLineEqualsSign||LA382_0==RightParenthesis||LA382_0==Comma||(LA382_0>=Colon && LA382_0<=Semicolon)||(LA382_0>=EqualsSign && LA382_0<=GreaterThanSign)||LA382_0==RightSquareBracket||LA382_0==RightCurlyBracket||LA382_0==RULE_ML_COMMENT||LA382_0==RULE_EOL) ) {s = 62;}

                         
                        input.seek(index382_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA382_46 = input.LA(1);

                         
                        int index382_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred242_InternalN4JSParser()) ) {s = 61;}

                        else if ( (true) ) {s = 62;}

                         
                        input.seek(index382_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 382, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_262s = "\136\uffff";
    static final String dfa_263s = "\1\2\135\uffff";
    static final String dfa_264s = "\1\4\1\0\134\uffff";
    static final String dfa_265s = "\1\u0095\1\0\134\uffff";
    static final String dfa_266s = "\2\uffff\1\2\132\uffff\1\1";
    static final String dfa_267s = "\1\uffff\1\0\134\uffff}>";
    static final String[] dfa_268s = {
            "\62\2\1\uffff\1\2\2\uffff\7\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\5\uffff\1\2\1\uffff\5\2\2\uffff\1\2\2\uffff\1\1\1\uffff\2\2\1\uffff\1\2\1\uffff\1\2\1\uffff\2\2\2\uffff\3\2\2\uffff\1\2\2\uffff\1\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_262 = DFA.unpackEncodedString(dfa_262s);
    static final short[] dfa_263 = DFA.unpackEncodedString(dfa_263s);
    static final char[] dfa_264 = DFA.unpackEncodedStringToUnsignedChars(dfa_264s);
    static final char[] dfa_265 = DFA.unpackEncodedStringToUnsignedChars(dfa_265s);
    static final short[] dfa_266 = DFA.unpackEncodedString(dfa_266s);
    static final short[] dfa_267 = DFA.unpackEncodedString(dfa_267s);
    static final short[][] dfa_268 = unpackEncodedStringArray(dfa_268s);

    class DFA420 extends DFA {

        public DFA420(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 420;
            this.eot = dfa_262;
            this.eof = dfa_263;
            this.min = dfa_264;
            this.max = dfa_265;
            this.accept = dfa_266;
            this.special = dfa_267;
            this.transition = dfa_268;
        }
        public String getDescription() {
            return "11600:2: ( ( ( LeftParenthesis )=>LeftParenthesisKeyword_1_0= LeftParenthesis ) ( ( (ArgsAnnotationArgumentParserRuleCall_1_1_0_0= ruleAnnotationArgument ) ) (CommaKeyword_1_1_1_0= Comma ( (ArgsAnnotationArgumentParserRuleCall_1_1_1_1_0= ruleAnnotationArgument ) ) )* )? RightParenthesisKeyword_1_2= RightParenthesis )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA420_1 = input.LA(1);

                         
                        int index420_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred251_InternalN4JSParser()) ) {s = 93;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index420_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 420, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_269s = "\u01f8\uffff";
    static final String dfa_270s = "\1\4\1\uffff\12\4\2\uffff\1\4\66\134\1\4\u00ca\uffff\24\7\1\4\7\7\42\uffff\1\4\46\uffff\1\134\102\uffff\77\7\1\uffff";
    static final String dfa_271s = "\1\u0095\1\uffff\12\u0095\2\uffff\1\u0095\66\147\1\u0095\u00ca\uffff\24\u008c\1\u0095\1\u0091\6\u008c\42\uffff\1\176\46\uffff\1\147\102\uffff\77\u008c\1\uffff";
    static final String dfa_272s = "\1\uffff\1\1\12\uffff\2\4\70\uffff\1\6\1\4\1\5\102\2\102\3\103\4\34\uffff\42\4\1\uffff\46\4\1\uffff\102\4\77\uffff\1\4";
    static final String dfa_273s = "\1\u0081\1\uffff\1\33\1\u0094\1\56\1\136\1\5\1\46\1\37\1\44\1\117\1\u0083\2\uffff\1\15\1\55\1\11\1\16\1\21\1\24\1\32\1\35\1\41\1\42\1\45\1\50\1\54\1\61\1\66\1\74\1\77\1\104\1\110\1\112\1\116\1\121\1\124\1\127\1\134\1\140\1\143\1\145\1\147\1\152\1\154\1\155\1\161\1\162\1\165\1\167\1\172\1\174\1\31\1\47\1\53\1\60\1\65\1\73\1\76\1\103\1\107\1\111\1\115\1\120\1\123\1\133\1\137\1\u0082\1\34\1\125\u00ca\uffff\1\14\1\u0092\1\u008a\1\u0096\1\u008f\1\u009e\1\u009a\1\6\1\2\1\22\1\12\1\36\1\27\1\51\1\43\1\75\1\62\1\113\1\105\1\130\1\71\1\u0085\1\141\1\156\1\153\1\170\1\163\1\146\42\uffff\1\151\46\uffff\1\u0095\102\uffff\1\157\1\67\1\57\1\63\1\114\1\100\1\126\1\131\1\122\1\144\1\135\1\142\1\160\1\150\1\166\1\171\1\164\1\176\1\173\1\175\1\u0080\1\177\1\u0086\1\u0087\1\u0084\1\u008c\1\u0089\1\u008b\1\u0097\1\u008e\1\u009d\1\u009f\1\u009b\1\4\1\1\1\3\1\23\1\10\1\u008d\1\u0088\1\u0091\1\u0093\1\u0090\1\u009c\1\u0098\1\u0099\1\7\1\0\1\17\1\20\1\13\1\30\1\25\1\26\1\52\1\40\1\70\1\72\1\64\1\106\1\101\1\102\1\132\1\uffff}>";
    static final String[] dfa_274s = {
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\106\1\uffff\1\15\7\uffff\1\14\3\uffff\1\1\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\107\1\uffff\1\15\5\uffff\2\110\1\14\1\110\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\107\1\uffff\1\15\5\uffff\2\110\1\14\1\110\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\107\1\uffff\1\15\5\uffff\2\110\1\14\1\110\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\107\1\uffff\1\15\5\uffff\2\110\1\14\1\110\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\107\1\uffff\1\15\5\uffff\2\110\1\14\1\110\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\107\1\uffff\1\15\5\uffff\2\110\1\14\1\110\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\107\1\uffff\1\15\5\uffff\2\110\1\14\1\110\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\107\1\uffff\1\15\5\uffff\2\110\1\14\1\110\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\175\1\170\1\u0083\1\135\1\u0080\1\u0084\1\u0086\1\164\1\117\1\120\1\163\1\131\1\121\1\126\1\127\1\u0085\1\162\1\122\1\125\1\133\1\u0087\1\137\1\165\1\141\1\172\1\145\1\177\1\u0082\1\u0081\1\112\1\114\1\115\1\116\1\155\1\140\1\143\1\174\1\150\1\152\1\176\1\113\1\124\1\156\1\167\1\153\1\142\1\154\1\173\1\147\1\151\4\uffff\1\130\1\157\1\161\1\136\1\160\1\144\1\146\21\uffff\1\166\1\123\1\132\1\134\1\171\5\uffff\1\107\7\uffff\2\110\1\uffff\1\110\3\uffff\1\u008a\11\uffff\1\u0089\1\uffff\1\u0089\1\uffff\1\u0089\2\uffff\1\u0089\1\uffff\1\111\2\uffff\1\u0088\23\uffff\1\u0089",
            "\1\u00bf\1\u00ba\1\u00c5\1\u009f\1\u00c2\1\u00c6\1\u00c8\1\u00b6\1\u0091\1\u0092\1\u00b5\1\u009b\1\u0093\1\u0098\1\u0099\1\u00c7\1\u00b4\1\u0094\1\u0097\1\u009d\1\u00c9\1\u00a1\1\u00b7\1\u00a3\1\u00bc\1\u00a7\1\u00c1\1\u00c4\1\u00c3\1\u008c\1\u008e\1\u008f\1\u0090\1\u00af\1\u00a2\1\u00a5\1\u00be\1\u00aa\1\u00ac\1\u00c0\1\u008d\1\u0096\1\u00b0\1\u00b9\1\u00ad\1\u00a4\1\u00ae\1\u00bd\1\u00a9\1\u00ab\4\uffff\1\u009a\1\u00b1\1\u00b3\1\u00a0\1\u00b2\1\u00a6\1\u00a8\21\uffff\1\u00b8\1\u0095\1\u009c\1\u009e\1\u00bb\5\uffff\1\107\7\uffff\2\110\1\uffff\1\110\3\uffff\1\u00cc\11\uffff\1\u00cb\1\uffff\1\u00cb\1\uffff\1\u00cb\2\uffff\1\u00cb\1\uffff\1\u008b\2\uffff\1\u00ca\23\uffff\1\u00cb",
            "",
            "",
            "\1\u0102\1\u00fd\1\u0108\1\u00e2\1\u0105\1\u0109\1\u010b\1\u00f9\1\u00d4\1\u00d5\1\u00f8\1\u00de\1\u00d6\1\u00db\1\u00dc\1\u010a\1\u00f7\1\u00d7\1\u00da\1\u00e0\1\u010c\1\u00e4\1\u00fa\1\u00e6\1\u00ff\1\u00ea\1\u0104\1\u0107\1\u0106\1\u00cf\1\u00d1\1\u00d2\1\u00d3\1\u00f2\1\u00e5\1\u00e8\1\u0101\1\u00ed\1\u00ef\1\u0103\1\u00d0\1\u00d9\1\u00f3\1\u00fc\1\u00f0\1\u00e7\1\u00f1\1\u0100\1\u00ec\1\u00ee\4\uffff\1\u00dd\1\u00f4\1\u00f6\1\u00e3\1\u00f5\1\u00e9\1\u00eb\21\uffff\1\u00fb\1\u00d8\1\u00df\1\u00e1\1\u00fe\5\uffff\1\107\7\uffff\2\110\1\uffff\1\110\3\uffff\1\u010f\11\uffff\1\u010e\1\uffff\1\u010e\1\uffff\1\u010e\2\uffff\1\u010e\1\uffff\1\u00ce\2\uffff\1\u010d\17\uffff\1\u00cd\3\uffff\1\u010e",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "\1\u0120\1\u011b\1\u0126\1\uffff\1\u0123\1\u0127\1\u0129\1\u0117\2\uffff\1\u0116\1\u0140\3\uffff\1\u0128\1\u0115\1\u0144\2\uffff\1\u012a\1\uffff\1\u0118\1\uffff\1\u011d\1\u0146\1\u0122\1\u0125\1\u0124\2\uffff\1\u0141\1\uffff\1\u013a\1\u0130\1\uffff\1\u011f\1\uffff\1\u0111\1\u0121\3\uffff\1\u011a\1\u013b\1\u012f\1\u0139\1\u011e\1\u0145\6\uffff\1\u0112\1\u0114\1\u012e\1\u0113\7\uffff\1\u0147\1\uffff\1\u0148\1\uffff\1\u013d\7\uffff\1\u0119\3\uffff\1\u011c\2\uffff\1\u014c\2\uffff\1\u012d\2\uffff\1\u0149\1\uffff\1\u014a\1\uffff\1\u013c\2\uffff\1\u0131\3\uffff\1\u012c\1\u013e\2\uffff\1\u013f\2\uffff\1\u014b\3\uffff\1\u0132\1\uffff\1\u0137\1\u0134\1\u0135\1\u0136\1\uffff\1\u0138\1\uffff\1\u0110\2\uffff\1\u012b\11\uffff\1\u0143\1\u0142\10\uffff\1\u0133",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u0195\1\u0190\1\u0199\1\u015f\1\u0198\1\u019a\1\u019c\1\u018d\2\uffff\1\u018c\1\u01ad\3\uffff\1\u019b\1\u018b\1\u01af\2\uffff\1\u019d\1\uffff\1\u018e\1\uffff\1\u0192\1\u01b1\1\u0197\1\u0185\1\u0183\2\uffff\1\u01ae\1\uffff\1\u01a9\1\u01a0\1\uffff\1\u0194\1\uffff\1\u0187\1\u0196\3\uffff\1\u018f\1\u01ab\1\u019f\1\u01a8\1\u0193\1\u01b0\1\uffff\1\u0162\1\uffff\1\u0171\1\u0161\1\uffff\1\u0188\1\u018a\1\u019e\1\u0189\2\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u017b\1\u016f\1\u017c\1\u0170\1\u0182\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u017d\2\uffff\1\u0160\1\u0191\1\u0174\1\u0169\1\u01b3\1\u0157\1\u0165\1\u017a\1\uffff\1\u0155\1\u017f\1\uffff\1\u0180\1\u014e\1\u017e\2\uffff\1\u0181\1\u016b\1\u015a\1\u016a\1\u0184\1\u0177\1\u0175\1\u0166\1\u01ac\1\u0167\1\uffff\1\u01b2\3\uffff\1\u01a1\1\uffff\1\u01a6\1\u01a3\1\u01a4\1\u01a5\1\uffff\1\u01a7\1\uffff\1\u0186\2\uffff\1\u01aa\11\uffff\1\u0179\1\u0178\10\uffff\1\u01a2",
            "\1\u015f\7\uffff\1\u01b5\46\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u01b6\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f\4\uffff\1\u01b4",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u01ec\1\u01e7\1\u01f2\1\u01cc\1\u01ef\1\u01f3\1\u01f5\1\u01e3\1\u01be\1\u01bf\1\u01e2\1\u01c8\1\u01c0\1\u01c5\1\u01c6\1\u01f4\1\u01e1\1\u01c1\1\u01c4\1\u01ca\1\u01f6\1\u01ce\1\u01e4\1\u01d0\1\u01e9\1\u01d4\1\u01ee\1\u01f1\1\u01f0\1\u01b9\1\u01bb\1\u01bc\1\u01bd\1\u01dc\1\u01cf\1\u01d2\1\u01eb\1\u01d7\1\u01d9\1\u01ed\1\u01ba\1\u01c3\1\u01dd\1\u01e6\1\u01da\1\u01d1\1\u01db\1\u01ea\1\u01d6\1\u01d8\4\uffff\1\u01c7\1\u01de\1\u01e0\1\u01cd\1\u01df\1\u01d3\1\u01d5\21\uffff\1\u01e5\1\u01c2\1\u01c9\1\u01cb\1\u01e8\17\uffff\1\u01f7\27\uffff\1\u01b8",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\107\7\uffff\2\110\1\uffff\1\110",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            ""
    };

    static final short[] dfa_269 = DFA.unpackEncodedString(dfa_269s);
    static final char[] dfa_270 = DFA.unpackEncodedStringToUnsignedChars(dfa_270s);
    static final char[] dfa_271 = DFA.unpackEncodedStringToUnsignedChars(dfa_271s);
    static final short[] dfa_272 = DFA.unpackEncodedString(dfa_272s);
    static final short[] dfa_273 = DFA.unpackEncodedString(dfa_273s);
    static final short[][] dfa_274 = unpackEncodedStringArray(dfa_274s);

    class DFA462 extends DFA {

        public DFA462(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 462;
            this.eot = dfa_269;
            this.eof = dfa_269;
            this.min = dfa_270;
            this.max = dfa_271;
            this.accept = dfa_272;
            this.special = dfa_273;
            this.transition = dfa_274;
        }
        public String getDescription() {
            return "12228:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= ruleAnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= ruleN4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= ruleN4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) ruleLiteralOrComputedPropertyName LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ruleLiteralOrComputedPropertyName LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= ruleN4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= ruleN4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= ruleN4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA462_487 = input.LA(1);

                         
                        int index462_487 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_487>=7 && LA462_487<=111 && (s=T2S.M_36[LA462_487-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_487==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_487==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_487==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_487==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_487==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_487);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA462_474 = input.LA(1);

                         
                        int index462_474 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_474>=7 && LA462_474<=111 && (s=T2S.M_36[LA462_474-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_474==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_474==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_474==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_474==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_474==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_474);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA462_280 = input.LA(1);

                         
                        int index462_280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_280==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_280==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_280==FullStop) ) {s = 334;}

                        
                        else if ((LA462_280>=7 && LA462_280<=140 && (s=T2S.M_38[LA462_280-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_280==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_280);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA462_475 = input.LA(1);

                         
                        int index462_475 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_475>=7 && LA462_475<=111 && (s=T2S.M_36[LA462_475-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_475==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_475==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_475==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_475==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_475==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_475);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA462_473 = input.LA(1);

                         
                        int index462_473 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_473>=7 && LA462_473<=111 && (s=T2S.M_36[LA462_473-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_473==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_473==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_473==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_473==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_473==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_473);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA462_6 = input.LA(1);

                         
                        int index462_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_6==Set) ) {s = 11;}

                        else if ( (LA462_6==Private) ) {s = 2;}

                        else if ( (LA462_6==Project) ) {s = 3;}

                        else if ( (LA462_6==Protected) ) {s = 4;}

                        else if ( (LA462_6==Public) ) {s = 5;}

                        else if ( (LA462_6==External) ) {s = 6;}

                        else if ( (LA462_6==Abstract) ) {s = 7;}

                        else if ( (LA462_6==Static) ) {s = 8;}

                        else if ( (LA462_6==Const) ) {s = 9;}

                        else if ( (LA462_6==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_6==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                        
                        else if ((LA462_6>=4 && LA462_6<=129 && (s=T2S.M_41[LA462_6-(4)])>=0)) { /* 55 cases */ }
                        else if ( (LA462_6==RULE_DOUBLE||LA462_6==RULE_HEX_INT||LA462_6==RULE_OCTAL_INT||LA462_6==RULE_SCIENTIFIC_INT||LA462_6==RULE_INT) ) {s = 68;}

                        else if ( (LA462_6==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA462_6==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_6>=Colon && LA462_6<=Semicolon)||LA462_6==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA462_279 = input.LA(1);

                         
                        int index462_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_279==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_279==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_279==FullStop) ) {s = 334;}

                        
                        else if ((LA462_279>=7 && LA462_279<=140 && (s=T2S.M_38[LA462_279-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_279==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_279);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA462_486 = input.LA(1);

                         
                        int index462_486 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_486>=7 && LA462_486<=111 && (s=T2S.M_36[LA462_486-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_486==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_486==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_486==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_486==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_486==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_486);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA462_477 = input.LA(1);

                         
                        int index462_477 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_477>=7 && LA462_477<=111 && (s=T2S.M_36[LA462_477-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_477==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_477==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_477==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_477==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_477==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_477);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA462_16 = input.LA(1);

                         
                        int index462_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_16==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_16>=Colon && LA462_16<=Semicolon)||LA462_16==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_16);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA462_282 = input.LA(1);

                         
                        int index462_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_282==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_282==FullStop) ) {s = 334;}

                        
                        else if ((LA462_282>=7 && LA462_282<=140 && (s=T2S.M_45[LA462_282-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA462_282==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_282==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index462_282);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA462_490 = input.LA(1);

                         
                        int index462_490 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_490>=7 && LA462_490<=111 && (s=T2S.M_36[LA462_490-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_490==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_490==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_490==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_490==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_490==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_490);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA462_272 = input.LA(1);

                         
                        int index462_272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_272==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_272==FullStop) ) {s = 334;}

                        
                        else if ((LA462_272>=7 && LA462_272<=140 && (s=T2S.M_45[LA462_272-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA462_272==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_272==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index462_272);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA462_14 = input.LA(1);

                         
                        int index462_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_14>=4 && LA462_14<=145 && (s=T2S.M_48[LA462_14-(4)])>=0) && (synpred261_InternalN4JSParser())) { /* 65 cases */ }
                        else if ( (LA462_14==RULE_DOUBLE||LA462_14==RULE_HEX_INT||LA462_14==RULE_OCTAL_INT||LA462_14==RULE_SCIENTIFIC_INT||LA462_14==RULE_INT) && (synpred261_InternalN4JSParser())) {s = 270;}

                        else if ( (LA462_14==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 271;}

                        else if ( (LA462_14==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_14>=Colon && LA462_14<=Semicolon)||LA462_14==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_14);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA462_17 = input.LA(1);

                         
                        int index462_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_17==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_17>=Colon && LA462_17<=Semicolon)||LA462_17==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_17);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA462_488 = input.LA(1);

                         
                        int index462_488 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_488==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_488>=7 && LA462_488<=140 && (s=T2S.M_49[LA462_488-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_488);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA462_489 = input.LA(1);

                         
                        int index462_489 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_489>=7 && LA462_489<=111 && (s=T2S.M_36[LA462_489-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_489==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_489==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_489==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_489==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_489==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_489);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA462_18 = input.LA(1);

                         
                        int index462_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_18==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_18>=Colon && LA462_18<=Semicolon)||LA462_18==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_18);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA462_281 = input.LA(1);

                         
                        int index462_281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_281==FullStop) ) {s = 334;}

                        else if ( (LA462_281==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_281>=7 && LA462_281<=140 && (s=T2S.M_51[LA462_281-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index462_281);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA462_476 = input.LA(1);

                         
                        int index462_476 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_476==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_476>=7 && LA462_476<=140 && (s=T2S.M_49[LA462_476-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_476);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA462_19 = input.LA(1);

                         
                        int index462_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_19==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_19>=Colon && LA462_19<=Semicolon)||LA462_19==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_19);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA462_492 = input.LA(1);

                         
                        int index462_492 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_492==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_492>=7 && LA462_492<=140 && (s=T2S.M_49[LA462_492-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_492);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA462_493 = input.LA(1);

                         
                        int index462_493 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_493>=7 && LA462_493<=111 && (s=T2S.M_36[LA462_493-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_493==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_493==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_493==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_493==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_493==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_493);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA462_284 = input.LA(1);

                         
                        int index462_284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_284==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_284==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_284==FullStop) ) {s = 334;}

                        
                        else if ((LA462_284>=7 && LA462_284<=140 && (s=T2S.M_38[LA462_284-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_284==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_284);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA462_491 = input.LA(1);

                         
                        int index462_491 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_491>=7 && LA462_491<=111 && (s=T2S.M_36[LA462_491-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_491==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_491==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_491==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_491==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_491==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_491);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA462_52 = input.LA(1);

                         
                        int index462_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_52==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_52>=Colon && LA462_52<=Semicolon)||LA462_52==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_52);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA462_20 = input.LA(1);

                         
                        int index462_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_20==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_20>=Colon && LA462_20<=Semicolon)||LA462_20==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_20);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA462_2 = input.LA(1);

                         
                        int index462_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_2==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        
                        else if ((LA462_2>=4 && LA462_2<=129 && (s=T2S.M_57[LA462_2-(4)])>=0)) { /* 65 cases */ }
                        else if ( (LA462_2==RULE_DOUBLE||LA462_2==RULE_HEX_INT||LA462_2==RULE_OCTAL_INT||LA462_2==RULE_SCIENTIFIC_INT||LA462_2==RULE_INT) ) {s = 68;}

                        else if ( (LA462_2==LeftSquareBracket) ) {s = 69;}

                        else if ( ((LA462_2>=Colon && LA462_2<=Semicolon)||LA462_2==EqualsSign) ) {s = 72;}

                        else if ( (LA462_2==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_2==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                         
                        input.seek(index462_2);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA462_68 = input.LA(1);

                         
                        int index462_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_68==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_68>=Colon && LA462_68<=Semicolon)||LA462_68==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_68);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA462_21 = input.LA(1);

                         
                        int index462_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_21==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_21>=Colon && LA462_21<=Semicolon)||LA462_21==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_21);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA462_283 = input.LA(1);

                         
                        int index462_283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_283==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_283==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_283==FullStop) ) {s = 334;}

                        
                        else if ((LA462_283>=7 && LA462_283<=140 && (s=T2S.M_38[LA462_283-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_283==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_283);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA462_8 = input.LA(1);

                         
                        int index462_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_8>=4 && LA462_8<=129 && (s=T2S.M_59[LA462_8-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA462_8==RULE_DOUBLE||LA462_8==RULE_HEX_INT||LA462_8==RULE_OCTAL_INT||LA462_8==RULE_SCIENTIFIC_INT||LA462_8==RULE_INT) ) {s = 68;}

                        else if ( (LA462_8==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA462_8==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_8>=Colon && LA462_8<=Semicolon)||LA462_8==EqualsSign) ) {s = 72;}

                        else if ( (LA462_8==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_8==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                         
                        input.seek(index462_8);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA462_495 = input.LA(1);

                         
                        int index462_495 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_495>=7 && LA462_495<=111 && (s=T2S.M_36[LA462_495-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_495==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_495==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_495==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_495==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_495==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_495);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA462_22 = input.LA(1);

                         
                        int index462_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_22==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_22>=Colon && LA462_22<=Semicolon)||LA462_22==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_22);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA462_23 = input.LA(1);

                         
                        int index462_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_23==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_23>=Colon && LA462_23<=Semicolon)||LA462_23==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_23);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA462_286 = input.LA(1);

                         
                        int index462_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_286==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_286==FullStop) ) {s = 334;}

                        
                        else if ((LA462_286>=7 && LA462_286<=140 && (s=T2S.M_45[LA462_286-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA462_286==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_286==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index462_286);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA462_9 = input.LA(1);

                         
                        int index462_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_9==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_9==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                        
                        else if ((LA462_9>=4 && LA462_9<=129 && (s=T2S.M_59[LA462_9-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA462_9==RULE_DOUBLE||LA462_9==RULE_HEX_INT||LA462_9==RULE_OCTAL_INT||LA462_9==RULE_SCIENTIFIC_INT||LA462_9==RULE_INT) ) {s = 68;}

                        else if ( (LA462_9==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA462_9==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_9>=Colon && LA462_9<=Semicolon)||LA462_9==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_9);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA462_24 = input.LA(1);

                         
                        int index462_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_24==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_24>=Colon && LA462_24<=Semicolon)||LA462_24==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_24);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA462_7 = input.LA(1);

                         
                        int index462_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_7==Get) ) {s = 10;}

                        else if ( (LA462_7==Private) ) {s = 2;}

                        else if ( (LA462_7==Project) ) {s = 3;}

                        else if ( (LA462_7==Protected) ) {s = 4;}

                        else if ( (LA462_7==Public) ) {s = 5;}

                        else if ( (LA462_7==External) ) {s = 6;}

                        else if ( (LA462_7==Abstract) ) {s = 7;}

                        else if ( (LA462_7==Static) ) {s = 8;}

                        else if ( (LA462_7==Const) ) {s = 9;}

                        else if ( (LA462_7==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_7>=Colon && LA462_7<=Semicolon)||LA462_7==EqualsSign) ) {s = 72;}

                        else if ( (LA462_7==Set) ) {s = 11;}

                        else if ( (LA462_7==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_7==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                        else if ( (LA462_7==Async) ) {s = 14;}

                        else if ( (LA462_7==RULE_IDENTIFIER) ) {s = 15;}

                        else if ( (LA462_7==Break) ) {s = 16;}

                        else if ( (LA462_7==Case) ) {s = 17;}

                        else if ( (LA462_7==Catch) ) {s = 18;}

                        else if ( (LA462_7==Class) ) {s = 19;}

                        else if ( (LA462_7==Continue) ) {s = 20;}

                        else if ( (LA462_7==Debugger) ) {s = 21;}

                        else if ( (LA462_7==Default) ) {s = 22;}

                        else if ( (LA462_7==Delete) ) {s = 23;}

                        else if ( (LA462_7==Do) ) {s = 24;}

                        else if ( (LA462_7==Else) ) {s = 25;}

                        else if ( (LA462_7==Export) ) {s = 26;}

                        else if ( (LA462_7==Extends) ) {s = 27;}

                        else if ( (LA462_7==Finally) ) {s = 28;}

                        else if ( (LA462_7==For) ) {s = 29;}

                        else if ( (LA462_7==Function) ) {s = 30;}

                        else if ( (LA462_7==If) ) {s = 31;}

                        else if ( (LA462_7==Import) ) {s = 32;}

                        else if ( (LA462_7==In) ) {s = 33;}

                        else if ( (LA462_7==Instanceof) ) {s = 34;}

                        else if ( (LA462_7==New) ) {s = 35;}

                        else if ( (LA462_7==Return) ) {s = 36;}

                        else if ( (LA462_7==Super) ) {s = 37;}

                        else if ( (LA462_7==Switch) ) {s = 38;}

                        else if ( (LA462_7==This_1) ) {s = 39;}

                        else if ( (LA462_7==Throw) ) {s = 40;}

                        else if ( (LA462_7==Try) ) {s = 41;}

                        else if ( (LA462_7==Typeof) ) {s = 42;}

                        else if ( (LA462_7==Var) ) {s = 43;}

                        else if ( (LA462_7==Void) ) {s = 44;}

                        else if ( (LA462_7==While) ) {s = 45;}

                        else if ( (LA462_7==With) ) {s = 46;}

                        else if ( (LA462_7==Yield) ) {s = 47;}

                        else if ( (LA462_7==Null) ) {s = 48;}

                        else if ( (LA462_7==True) ) {s = 49;}

                        else if ( (LA462_7==False) ) {s = 50;}

                        else if ( (LA462_7==Enum) ) {s = 51;}

                        else if ( (LA462_7==Let) ) {s = 52;}

                        else if ( (LA462_7==As) ) {s = 53;}

                        else if ( (LA462_7==From) ) {s = 54;}

                        else if ( (LA462_7==Constructor) ) {s = 55;}

                        else if ( (LA462_7==Of) ) {s = 56;}

                        else if ( (LA462_7==Target) ) {s = 57;}

                        else if ( (LA462_7==Type) ) {s = 58;}

                        else if ( (LA462_7==Union) ) {s = 59;}

                        else if ( (LA462_7==Intersection) ) {s = 60;}

                        else if ( (LA462_7==This) ) {s = 61;}

                        else if ( (LA462_7==Await) ) {s = 62;}

                        else if ( (LA462_7==Promisify) ) {s = 63;}

                        else if ( (LA462_7==Await_1) ) {s = 64;}

                        else if ( (LA462_7==Implements) ) {s = 65;}

                        else if ( (LA462_7==Interface) ) {s = 66;}

                        else if ( (LA462_7==RULE_STRING) ) {s = 67;}

                        else if ( (LA462_7==RULE_DOUBLE||LA462_7==RULE_HEX_INT||LA462_7==RULE_OCTAL_INT||LA462_7==RULE_SCIENTIFIC_INT||LA462_7==RULE_INT) ) {s = 68;}

                        else if ( (LA462_7==LeftSquareBracket) ) {s = 69;}

                         
                        input.seek(index462_7);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA462_53 = input.LA(1);

                         
                        int index462_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_53==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_53>=Colon && LA462_53<=Semicolon)||LA462_53==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_53);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA462_25 = input.LA(1);

                         
                        int index462_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_25==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_25>=Colon && LA462_25<=Semicolon)||LA462_25==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_25);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA462_285 = input.LA(1);

                         
                        int index462_285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_285==FullStop) ) {s = 334;}

                        else if ( (LA462_285==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_285>=7 && LA462_285<=140 && (s=T2S.M_51[LA462_285-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index462_285);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA462_494 = input.LA(1);

                         
                        int index462_494 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_494>=7 && LA462_494<=111 && (s=T2S.M_36[LA462_494-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_494==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_494==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_494==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_494==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_494==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_494);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA462_54 = input.LA(1);

                         
                        int index462_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_54==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_54>=Colon && LA462_54<=Semicolon)||LA462_54==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_54);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA462_26 = input.LA(1);

                         
                        int index462_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_26==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_26>=Colon && LA462_26<=Semicolon)||LA462_26==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_26);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA462_15 = input.LA(1);

                         
                        int index462_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_15==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_15>=Colon && LA462_15<=Semicolon)||LA462_15==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_15);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA462_4 = input.LA(1);

                         
                        int index462_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_4>=10 && LA462_4<=62 && (s=T2S.M_65[LA462_4-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA462_4==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_4==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                        
                        else if ((LA462_4>=4 && LA462_4<=129 && (s=T2S.M_66[LA462_4-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA462_4==RULE_DOUBLE||LA462_4==RULE_HEX_INT||LA462_4==RULE_OCTAL_INT||LA462_4==RULE_SCIENTIFIC_INT||LA462_4==RULE_INT) ) {s = 68;}

                        else if ( (LA462_4==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA462_4==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_4>=Colon && LA462_4<=Semicolon)||LA462_4==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_4);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA462_442 = input.LA(1);

                         
                        int index462_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_442>=7 && LA462_442<=111 && (s=T2S.M_36[LA462_442-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_442==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_442==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_442==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_442==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_442==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_442);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA462_55 = input.LA(1);

                         
                        int index462_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_55==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_55>=Colon && LA462_55<=Semicolon)||LA462_55==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_55);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA462_27 = input.LA(1);

                         
                        int index462_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_27==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_27>=Colon && LA462_27<=Semicolon)||LA462_27==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_27);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA462_288 = input.LA(1);

                         
                        int index462_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_288==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_288==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_288==FullStop) ) {s = 334;}

                        
                        else if ((LA462_288>=7 && LA462_288<=140 && (s=T2S.M_38[LA462_288-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_288==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_288);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA462_443 = input.LA(1);

                         
                        int index462_443 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_443>=7 && LA462_443<=111 && (s=T2S.M_36[LA462_443-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_443==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_443==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_443==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_443==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_443==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_443);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA462_498 = input.LA(1);

                         
                        int index462_498 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_498>=7 && LA462_498<=111 && (s=T2S.M_36[LA462_498-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_498==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_498==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_498==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_498==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_498==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_498);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA462_56 = input.LA(1);

                         
                        int index462_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_56==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_56>=Colon && LA462_56<=Semicolon)||LA462_56==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_56);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA462_28 = input.LA(1);

                         
                        int index462_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_28==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_28>=Colon && LA462_28<=Semicolon)||LA462_28==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_28);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA462_441 = input.LA(1);

                         
                        int index462_441 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_441>=7 && LA462_441<=111 && (s=T2S.M_36[LA462_441-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_441==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_441==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_441==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_441==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_441==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_441);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA462_496 = input.LA(1);

                         
                        int index462_496 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_496==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_496>=7 && LA462_496<=140 && (s=T2S.M_49[LA462_496-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_496);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA462_292 = input.LA(1);

                         
                        int index462_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_292==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_292==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 375;}

                        else if ( (LA462_292==FullStop) ) {s = 334;}

                        
                        else if ((LA462_292>=7 && LA462_292<=140 && (s=T2S.M_73[LA462_292-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_292==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_292>=4 && LA462_292<=149 && (s=T2S.M_74[LA462_292-(4)])>=0) && (synpred261_InternalN4JSParser())) { /* 50 cases */ }
                        input.seek(index462_292);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA462_497 = input.LA(1);

                         
                        int index462_497 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_497>=7 && LA462_497<=111 && (s=T2S.M_36[LA462_497-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_497==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_497==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_497==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_497==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_497==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_497);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA462_57 = input.LA(1);

                         
                        int index462_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_57==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_57>=Colon && LA462_57<=Semicolon)||LA462_57==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_57);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA462_29 = input.LA(1);

                         
                        int index462_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_29==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_29>=Colon && LA462_29<=Semicolon)||LA462_29==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_29);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA462_287 = input.LA(1);

                         
                        int index462_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_287==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_287==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_287==FullStop) ) {s = 334;}

                        
                        else if ((LA462_287>=7 && LA462_287<=140 && (s=T2S.M_38[LA462_287-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_287==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_287);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA462_58 = input.LA(1);

                         
                        int index462_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_58==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_58>=Colon && LA462_58<=Semicolon)||LA462_58==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_58);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA462_30 = input.LA(1);

                         
                        int index462_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_30==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_30>=Colon && LA462_30<=Semicolon)||LA462_30==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_30);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA462_445 = input.LA(1);

                         
                        int index462_445 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_445>=7 && LA462_445<=111 && (s=T2S.M_36[LA462_445-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_445==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_445==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_445==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_445==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_445==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_445);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA462_500 = input.LA(1);

                         
                        int index462_500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_500==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_500>=7 && LA462_500<=140 && (s=T2S.M_49[LA462_500-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_500);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA462_501 = input.LA(1);

                         
                        int index462_501 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_501>=7 && LA462_501<=111 && (s=T2S.M_36[LA462_501-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_501==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_501==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_501==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_501==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_501==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_501);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA462_59 = input.LA(1);

                         
                        int index462_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_59==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_59>=Colon && LA462_59<=Semicolon)||LA462_59==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_59);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA462_31 = input.LA(1);

                         
                        int index462_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_31==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_31>=Colon && LA462_31<=Semicolon)||LA462_31==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_31);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA462_290 = input.LA(1);

                         
                        int index462_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_290==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_290==FullStop) ) {s = 334;}

                        
                        else if ((LA462_290>=7 && LA462_290<=140 && (s=T2S.M_45[LA462_290-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA462_290==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_290==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index462_290);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA462_499 = input.LA(1);

                         
                        int index462_499 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_499>=7 && LA462_499<=111 && (s=T2S.M_36[LA462_499-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_499==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_499==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_499==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_499==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_499==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_499);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA462_60 = input.LA(1);

                         
                        int index462_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_60==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_60>=Colon && LA462_60<=Semicolon)||LA462_60==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_60);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA462_32 = input.LA(1);

                         
                        int index462_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_32==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_32>=Colon && LA462_32<=Semicolon)||LA462_32==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_32);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA462_61 = input.LA(1);

                         
                        int index462_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_61==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_61>=Colon && LA462_61<=Semicolon)||LA462_61==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_61);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA462_33 = input.LA(1);

                         
                        int index462_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_33==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_33>=Colon && LA462_33<=Semicolon)||LA462_33==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_33);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA462_289 = input.LA(1);

                         
                        int index462_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_289==FullStop) ) {s = 334;}

                        else if ( (LA462_289==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_289>=7 && LA462_289<=140 && (s=T2S.M_51[LA462_289-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index462_289);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA462_444 = input.LA(1);

                         
                        int index462_444 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_444==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_444>=7 && LA462_444<=140 && (s=T2S.M_49[LA462_444-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_444);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA462_62 = input.LA(1);

                         
                        int index462_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_62==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_62>=Colon && LA462_62<=Semicolon)||LA462_62==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_62);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA462_34 = input.LA(1);

                         
                        int index462_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_34==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_34>=Colon && LA462_34<=Semicolon)||LA462_34==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_34);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA462_10 = input.LA(1);

                         
                        int index462_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_10>=4 && LA462_10<=129 && (s=T2S.M_84[LA462_10-(4)])>=0) && (synpred259_InternalN4JSParser())) { /* 64 cases */ }
                        else if ( (LA462_10==RULE_DOUBLE||LA462_10==RULE_HEX_INT||LA462_10==RULE_OCTAL_INT||LA462_10==RULE_SCIENTIFIC_INT||LA462_10==RULE_INT) && (synpred259_InternalN4JSParser())) {s = 137;}

                        else if ( (LA462_10==LeftSquareBracket) && (synpred259_InternalN4JSParser())) {s = 138;}

                        else if ( (LA462_10==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_10>=Colon && LA462_10<=Semicolon)||LA462_10==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_10);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA462_63 = input.LA(1);

                         
                        int index462_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_63==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_63>=Colon && LA462_63<=Semicolon)||LA462_63==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_63);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA462_35 = input.LA(1);

                         
                        int index462_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_35==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_35>=Colon && LA462_35<=Semicolon)||LA462_35==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_35);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA462_448 = input.LA(1);

                         
                        int index462_448 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_448==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_448>=7 && LA462_448<=140 && (s=T2S.M_49[LA462_448-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_448);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA462_64 = input.LA(1);

                         
                        int index462_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_64==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_64>=Colon && LA462_64<=Semicolon)||LA462_64==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_64);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA462_36 = input.LA(1);

                         
                        int index462_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_36==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_36>=Colon && LA462_36<=Semicolon)||LA462_36==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_36);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA462_69 = input.LA(1);

                         
                        int index462_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_69>=4 && LA462_69<=129 && (s=T2S.M_86[LA462_69-(4)])>=0)) { /* 28 cases */ }
                        
                        else if ((LA462_69>=15 && LA462_69<=149 && (s=T2S.M_87[LA462_69-(15)])>=0) && (synpred261_InternalN4JSParser())) { /* 33 cases */ }
                        input.seek(index462_69);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA462_446 = input.LA(1);

                         
                        int index462_446 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_446>=7 && LA462_446<=111 && (s=T2S.M_36[LA462_446-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_446==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_446==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_446==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_446==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_446==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_446);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA462_37 = input.LA(1);

                         
                        int index462_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_37==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_37>=Colon && LA462_37<=Semicolon)||LA462_37==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_37);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA462_291 = input.LA(1);

                         
                        int index462_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_291==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_291==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_291==FullStop) ) {s = 334;}

                        
                        else if ((LA462_291>=7 && LA462_291<=140 && (s=T2S.M_38[LA462_291-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_291==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_291);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA462_447 = input.LA(1);

                         
                        int index462_447 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_447>=7 && LA462_447<=111 && (s=T2S.M_36[LA462_447-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_447==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_447==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_447==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_447==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_447==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_447);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA462_502 = input.LA(1);

                         
                        int index462_502 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_502>=7 && LA462_502<=111 && (s=T2S.M_36[LA462_502-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_502==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_502==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_502==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_502==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_502==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_502);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA462_65 = input.LA(1);

                         
                        int index462_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_65==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_65>=Colon && LA462_65<=Semicolon)||LA462_65==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_65);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA462_38 = input.LA(1);

                         
                        int index462_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_38==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_38>=Colon && LA462_38<=Semicolon)||LA462_38==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_38);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA462_450 = input.LA(1);

                         
                        int index462_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_450>=7 && LA462_450<=111 && (s=T2S.M_36[LA462_450-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_450==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_450==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_450==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_450==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_450==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_450);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA462_5 = input.LA(1);

                         
                        int index462_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_5>=4 && LA462_5<=129 && (s=T2S.M_59[LA462_5-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA462_5==RULE_DOUBLE||LA462_5==RULE_HEX_INT||LA462_5==RULE_OCTAL_INT||LA462_5==RULE_SCIENTIFIC_INT||LA462_5==RULE_INT) ) {s = 68;}

                        else if ( (LA462_5==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA462_5==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_5==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                        else if ( (LA462_5==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_5>=Colon && LA462_5<=Semicolon)||LA462_5==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_5);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA462_66 = input.LA(1);

                         
                        int index462_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_66==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_66>=Colon && LA462_66<=Semicolon)||LA462_66==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_66);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA462_39 = input.LA(1);

                         
                        int index462_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_39==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_39>=Colon && LA462_39<=Semicolon)||LA462_39==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_39);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA462_294 = input.LA(1);

                         
                        int index462_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_294==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_294==FullStop) ) {s = 334;}

                        
                        else if ((LA462_294>=7 && LA462_294<=140 && (s=T2S.M_45[LA462_294-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA462_294==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_294==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index462_294);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA462_451 = input.LA(1);

                         
                        int index462_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_451>=7 && LA462_451<=111 && (s=T2S.M_36[LA462_451-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_451==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_451==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_451==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_451==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_451==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_451);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA462_40 = input.LA(1);

                         
                        int index462_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_40==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_40>=Colon && LA462_40<=Semicolon)||LA462_40==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_40);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA462_449 = input.LA(1);

                         
                        int index462_449 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_449>=7 && LA462_449<=111 && (s=T2S.M_36[LA462_449-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_449==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_449==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_449==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_449==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_449==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_449);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA462_41 = input.LA(1);

                         
                        int index462_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_41==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_41>=Colon && LA462_41<=Semicolon)||LA462_41==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_41);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA462_299 = input.LA(1);

                         
                        int index462_299 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_299>=7 && LA462_299<=140 && (s=T2S.M_97[LA462_299-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 40 cases */ }
                        else if ( (LA462_299==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_299);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA462_42 = input.LA(1);

                         
                        int index462_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_42==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_42>=Colon && LA462_42<=Semicolon)||LA462_42==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_42);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA462_453 = input.LA(1);

                         
                        int index462_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_453>=7 && LA462_453<=111 && (s=T2S.M_36[LA462_453-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_453==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_453==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_453==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_453==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_453==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_453);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA462_334 = input.LA(1);

                         
                        int index462_334 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_334>=4 && LA462_334<=126 && (s=T2S.M_99[LA462_334-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA462_334==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 503;}

                         
                        input.seek(index462_334);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA462_43 = input.LA(1);

                         
                        int index462_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_43==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_43>=Colon && LA462_43<=Semicolon)||LA462_43==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_43);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA462_296 = input.LA(1);

                         
                        int index462_296 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_296==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_296==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_296==FullStop) ) {s = 334;}

                        
                        else if ((LA462_296>=7 && LA462_296<=140 && (s=T2S.M_38[LA462_296-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_296==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_296);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA462_44 = input.LA(1);

                         
                        int index462_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_44==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_44>=Colon && LA462_44<=Semicolon)||LA462_44==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_44);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA462_45 = input.LA(1);

                         
                        int index462_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_45==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_45>=Colon && LA462_45<=Semicolon)||LA462_45==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_45);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA462_295 = input.LA(1);

                         
                        int index462_295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_295==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_295==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_295==FullStop) ) {s = 334;}

                        
                        else if ((LA462_295>=7 && LA462_295<=140 && (s=T2S.M_38[LA462_295-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_295==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_295);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA462_440 = input.LA(1);

                         
                        int index462_440 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_440>=7 && LA462_440<=111 && (s=T2S.M_36[LA462_440-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_440==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_440==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_440==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_440==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_440==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_440);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA462_452 = input.LA(1);

                         
                        int index462_452 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_452==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_452>=7 && LA462_452<=140 && (s=T2S.M_49[LA462_452-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_452);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA462_46 = input.LA(1);

                         
                        int index462_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_46==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_46>=Colon && LA462_46<=Semicolon)||LA462_46==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_46);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA462_47 = input.LA(1);

                         
                        int index462_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_47==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_47>=Colon && LA462_47<=Semicolon)||LA462_47==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_47);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA462_298 = input.LA(1);

                         
                        int index462_298 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_298==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_298==FullStop) ) {s = 334;}

                        
                        else if ((LA462_298>=7 && LA462_298<=140 && (s=T2S.M_45[LA462_298-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA462_298==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_298==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index462_298);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA462_456 = input.LA(1);

                         
                        int index462_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_456==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_456>=7 && LA462_456<=140 && (s=T2S.M_49[LA462_456-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_456);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA462_48 = input.LA(1);

                         
                        int index462_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_48==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_48>=Colon && LA462_48<=Semicolon)||LA462_48==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_48);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA462_454 = input.LA(1);

                         
                        int index462_454 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_454>=7 && LA462_454<=111 && (s=T2S.M_36[LA462_454-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_454==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_454==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_454==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_454==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_454==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_454);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA462_49 = input.LA(1);

                         
                        int index462_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_49==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_49>=Colon && LA462_49<=Semicolon)||LA462_49==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_49);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA462_297 = input.LA(1);

                         
                        int index462_297 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_297==FullStop) ) {s = 334;}

                        else if ( (LA462_297==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_297>=7 && LA462_297<=140 && (s=T2S.M_51[LA462_297-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index462_297);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA462_455 = input.LA(1);

                         
                        int index462_455 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_455>=7 && LA462_455<=111 && (s=T2S.M_36[LA462_455-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_455==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_455==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_455==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_455==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_455==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_455);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA462_50 = input.LA(1);

                         
                        int index462_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_50==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_50>=Colon && LA462_50<=Semicolon)||LA462_50==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_50);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA462_458 = input.LA(1);

                         
                        int index462_458 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_458>=7 && LA462_458<=111 && (s=T2S.M_36[LA462_458-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_458==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_458==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_458==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_458==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_458==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_458);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA462_51 = input.LA(1);

                         
                        int index462_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_51==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_51>=Colon && LA462_51<=Semicolon)||LA462_51==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_51);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA462_459 = input.LA(1);

                         
                        int index462_459 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_459>=7 && LA462_459<=111 && (s=T2S.M_36[LA462_459-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_459==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_459==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_459==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_459==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_459==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_459);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA462_457 = input.LA(1);

                         
                        int index462_457 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_457>=7 && LA462_457<=111 && (s=T2S.M_36[LA462_457-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_457==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_457==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_457==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_457==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_457==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_457);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA462_461 = input.LA(1);

                         
                        int index462_461 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_461>=7 && LA462_461<=111 && (s=T2S.M_36[LA462_461-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_461==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_461==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_461==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_461==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_461==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_461);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA462_460 = input.LA(1);

                         
                        int index462_460 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_460==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_460>=7 && LA462_460<=140 && (s=T2S.M_49[LA462_460-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_460);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA462_0 = input.LA(1);

                         
                        int index462_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_0>=10 && LA462_0<=106 && (s=T2S.M_114[LA462_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA462_0==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_0==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                        
                        else if ((LA462_0>=4 && LA462_0<=129 && (s=T2S.M_66[LA462_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA462_0==RULE_DOUBLE||LA462_0==RULE_HEX_INT||LA462_0==RULE_OCTAL_INT||LA462_0==RULE_SCIENTIFIC_INT||LA462_0==RULE_INT) ) {s = 68;}

                        else if ( (LA462_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA462_0==LeftParenthesis) ) {s = 70;}

                         
                        input.seek(index462_0);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA462_67 = input.LA(1);

                         
                        int index462_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_67==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_67>=Colon && LA462_67<=Semicolon)||LA462_67==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_67);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA462_11 = input.LA(1);

                         
                        int index462_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_11==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_11>=Colon && LA462_11<=Semicolon)||LA462_11==EqualsSign) ) {s = 72;}

                        else if ( (LA462_11==RULE_IDENTIFIER) && (synpred260_InternalN4JSParser())) {s = 139;}

                        else if ( (LA462_11==Break) && (synpred260_InternalN4JSParser())) {s = 140;}

                        else if ( (LA462_11==Case) && (synpred260_InternalN4JSParser())) {s = 141;}

                        else if ( (LA462_11==Catch) && (synpred260_InternalN4JSParser())) {s = 142;}

                        else if ( (LA462_11==Class) && (synpred260_InternalN4JSParser())) {s = 143;}

                        else if ( (LA462_11==Const) && (synpred260_InternalN4JSParser())) {s = 144;}

                        else if ( (LA462_11==Continue) && (synpred260_InternalN4JSParser())) {s = 145;}

                        else if ( (LA462_11==Debugger) && (synpred260_InternalN4JSParser())) {s = 146;}

                        else if ( (LA462_11==Default) && (synpred260_InternalN4JSParser())) {s = 147;}

                        else if ( (LA462_11==Delete) && (synpred260_InternalN4JSParser())) {s = 148;}

                        else if ( (LA462_11==Do) && (synpred260_InternalN4JSParser())) {s = 149;}

                        else if ( (LA462_11==Else) && (synpred260_InternalN4JSParser())) {s = 150;}

                        else if ( (LA462_11==Export) && (synpred260_InternalN4JSParser())) {s = 151;}

                        else if ( (LA462_11==Extends) && (synpred260_InternalN4JSParser())) {s = 152;}

                        else if ( (LA462_11==Finally) && (synpred260_InternalN4JSParser())) {s = 153;}

                        else if ( (LA462_11==For) && (synpred260_InternalN4JSParser())) {s = 154;}

                        else if ( (LA462_11==Function) && (synpred260_InternalN4JSParser())) {s = 155;}

                        else if ( (LA462_11==If) && (synpred260_InternalN4JSParser())) {s = 156;}

                        else if ( (LA462_11==Import) && (synpred260_InternalN4JSParser())) {s = 157;}

                        else if ( (LA462_11==In) && (synpred260_InternalN4JSParser())) {s = 158;}

                        else if ( (LA462_11==Instanceof) && (synpred260_InternalN4JSParser())) {s = 159;}

                        else if ( (LA462_11==New) && (synpred260_InternalN4JSParser())) {s = 160;}

                        else if ( (LA462_11==Return) && (synpred260_InternalN4JSParser())) {s = 161;}

                        else if ( (LA462_11==Super) && (synpred260_InternalN4JSParser())) {s = 162;}

                        else if ( (LA462_11==Switch) && (synpred260_InternalN4JSParser())) {s = 163;}

                        else if ( (LA462_11==This_1) && (synpred260_InternalN4JSParser())) {s = 164;}

                        else if ( (LA462_11==Throw) && (synpred260_InternalN4JSParser())) {s = 165;}

                        else if ( (LA462_11==Try) && (synpred260_InternalN4JSParser())) {s = 166;}

                        else if ( (LA462_11==Typeof) && (synpred260_InternalN4JSParser())) {s = 167;}

                        else if ( (LA462_11==Var) && (synpred260_InternalN4JSParser())) {s = 168;}

                        else if ( (LA462_11==Void) && (synpred260_InternalN4JSParser())) {s = 169;}

                        else if ( (LA462_11==While) && (synpred260_InternalN4JSParser())) {s = 170;}

                        else if ( (LA462_11==With) && (synpred260_InternalN4JSParser())) {s = 171;}

                        else if ( (LA462_11==Yield) && (synpred260_InternalN4JSParser())) {s = 172;}

                        else if ( (LA462_11==Null) && (synpred260_InternalN4JSParser())) {s = 173;}

                        else if ( (LA462_11==True) && (synpred260_InternalN4JSParser())) {s = 174;}

                        else if ( (LA462_11==False) && (synpred260_InternalN4JSParser())) {s = 175;}

                        else if ( (LA462_11==Enum) && (synpred260_InternalN4JSParser())) {s = 176;}

                        else if ( (LA462_11==Get) && (synpred260_InternalN4JSParser())) {s = 177;}

                        else if ( (LA462_11==Set) && (synpred260_InternalN4JSParser())) {s = 178;}

                        else if ( (LA462_11==Let) && (synpred260_InternalN4JSParser())) {s = 179;}

                        else if ( (LA462_11==Project) && (synpred260_InternalN4JSParser())) {s = 180;}

                        else if ( (LA462_11==External) && (synpred260_InternalN4JSParser())) {s = 181;}

                        else if ( (LA462_11==Abstract) && (synpred260_InternalN4JSParser())) {s = 182;}

                        else if ( (LA462_11==Static) && (synpred260_InternalN4JSParser())) {s = 183;}

                        else if ( (LA462_11==As) && (synpred260_InternalN4JSParser())) {s = 184;}

                        else if ( (LA462_11==From) && (synpred260_InternalN4JSParser())) {s = 185;}

                        else if ( (LA462_11==Constructor) && (synpred260_InternalN4JSParser())) {s = 186;}

                        else if ( (LA462_11==Of) && (synpred260_InternalN4JSParser())) {s = 187;}

                        else if ( (LA462_11==Target) && (synpred260_InternalN4JSParser())) {s = 188;}

                        else if ( (LA462_11==Type) && (synpred260_InternalN4JSParser())) {s = 189;}

                        else if ( (LA462_11==Union) && (synpred260_InternalN4JSParser())) {s = 190;}

                        else if ( (LA462_11==Intersection) && (synpred260_InternalN4JSParser())) {s = 191;}

                        else if ( (LA462_11==This) && (synpred260_InternalN4JSParser())) {s = 192;}

                        else if ( (LA462_11==Await) && (synpred260_InternalN4JSParser())) {s = 193;}

                        else if ( (LA462_11==Promisify) && (synpred260_InternalN4JSParser())) {s = 194;}

                        else if ( (LA462_11==Await_1) && (synpred260_InternalN4JSParser())) {s = 195;}

                        else if ( (LA462_11==Async) && (synpred260_InternalN4JSParser())) {s = 196;}

                        else if ( (LA462_11==Implements) && (synpred260_InternalN4JSParser())) {s = 197;}

                        else if ( (LA462_11==Interface) && (synpred260_InternalN4JSParser())) {s = 198;}

                        else if ( (LA462_11==Private) && (synpred260_InternalN4JSParser())) {s = 199;}

                        else if ( (LA462_11==Protected) && (synpred260_InternalN4JSParser())) {s = 200;}

                        else if ( (LA462_11==Public) && (synpred260_InternalN4JSParser())) {s = 201;}

                        else if ( (LA462_11==RULE_STRING) && (synpred260_InternalN4JSParser())) {s = 202;}

                        else if ( (LA462_11==RULE_DOUBLE||LA462_11==RULE_HEX_INT||LA462_11==RULE_OCTAL_INT||LA462_11==RULE_SCIENTIFIC_INT||LA462_11==RULE_INT) && (synpred260_InternalN4JSParser())) {s = 203;}

                        else if ( (LA462_11==LeftSquareBracket) && (synpred260_InternalN4JSParser())) {s = 204;}

                         
                        input.seek(index462_11);
                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA462_464 = input.LA(1);

                         
                        int index462_464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_464==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_464>=7 && LA462_464<=140 && (s=T2S.M_49[LA462_464-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_464);
                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA462_293 = input.LA(1);

                         
                        int index462_293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_293==FullStop) ) {s = 334;}

                        else if ( (LA462_293==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_293>=7 && LA462_293<=145 && (s=T2S.M_117[LA462_293-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 42 cases */ }
                        input.seek(index462_293);
                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA462_462 = input.LA(1);

                         
                        int index462_462 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_462>=7 && LA462_462<=111 && (s=T2S.M_36[LA462_462-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_462==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_462==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_462==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_462==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_462==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_462);
                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA462_463 = input.LA(1);

                         
                        int index462_463 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_463>=7 && LA462_463<=111 && (s=T2S.M_36[LA462_463-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_463==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_463==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_463==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_463==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_463==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_463);
                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA462_479 = input.LA(1);

                         
                        int index462_479 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_479>=7 && LA462_479<=111 && (s=T2S.M_36[LA462_479-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_479==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_479==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_479==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_479==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_479==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_479);
                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA462_466 = input.LA(1);

                         
                        int index462_466 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_466>=7 && LA462_466<=111 && (s=T2S.M_36[LA462_466-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_466==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_466==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_466==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_466==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_466==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_466);
                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA462_274 = input.LA(1);

                         
                        int index462_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_274==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_274==FullStop) ) {s = 334;}

                        
                        else if ((LA462_274>=7 && LA462_274<=140 && (s=T2S.M_45[LA462_274-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA462_274==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_274==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index462_274);
                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA462_467 = input.LA(1);

                         
                        int index462_467 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_467>=7 && LA462_467<=111 && (s=T2S.M_36[LA462_467-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_467==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_467==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_467==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_467==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_467==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_467);
                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA462_465 = input.LA(1);

                         
                        int index462_465 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_465>=7 && LA462_465<=111 && (s=T2S.M_36[LA462_465-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_465==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_465==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_465==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_465==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_465==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_465);
                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA462_478 = input.LA(1);

                         
                        int index462_478 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_478>=7 && LA462_478<=111 && (s=T2S.M_36[LA462_478-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_478==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_478==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_478==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_478==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_478==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_478);
                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA462_469 = input.LA(1);

                         
                        int index462_469 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_469>=7 && LA462_469<=111 && (s=T2S.M_36[LA462_469-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_469==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_469==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_469==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_469==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_469==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_469);
                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA462_276 = input.LA(1);

                         
                        int index462_276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_276==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_276==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_276==FullStop) ) {s = 334;}

                        
                        else if ((LA462_276>=7 && LA462_276<=140 && (s=T2S.M_38[LA462_276-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_276==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_276);
                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA462_482 = input.LA(1);

                         
                        int index462_482 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_482>=7 && LA462_482<=111 && (s=T2S.M_36[LA462_482-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_482==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_482==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_482==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_482==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_482==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_482);
                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA462_480 = input.LA(1);

                         
                        int index462_480 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_480==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_480>=7 && LA462_480<=140 && (s=T2S.M_49[LA462_480-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_480);
                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA462_273 = input.LA(1);

                         
                        int index462_273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_273==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_273==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_273==FullStop) ) {s = 334;}

                        
                        else if ((LA462_273>=7 && LA462_273<=140 && (s=T2S.M_38[LA462_273-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_273==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_273);
                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA462_481 = input.LA(1);

                         
                        int index462_481 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_481>=7 && LA462_481<=111 && (s=T2S.M_36[LA462_481-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_481==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_481==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_481==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_481==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_481==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_481);
                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA462_3 = input.LA(1);

                         
                        int index462_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_3==Set) ) {s = 11;}

                        else if ( (LA462_3==Private) ) {s = 2;}

                        else if ( (LA462_3==Project) ) {s = 3;}

                        else if ( (LA462_3==Protected) ) {s = 4;}

                        else if ( (LA462_3==Public) ) {s = 5;}

                        else if ( (LA462_3==External) ) {s = 6;}

                        else if ( (LA462_3==Abstract) ) {s = 7;}

                        else if ( (LA462_3==Static) ) {s = 8;}

                        else if ( (LA462_3==Const) ) {s = 9;}

                        else if ( (LA462_3==LessThanSign) && (synpred261_InternalN4JSParser())) {s = 12;}

                        else if ( (LA462_3==Asterisk) && (synpred261_InternalN4JSParser())) {s = 13;}

                        
                        else if ((LA462_3>=4 && LA462_3<=129 && (s=T2S.M_41[LA462_3-(4)])>=0)) { /* 55 cases */ }
                        else if ( (LA462_3==RULE_DOUBLE||LA462_3==RULE_HEX_INT||LA462_3==RULE_OCTAL_INT||LA462_3==RULE_SCIENTIFIC_INT||LA462_3==RULE_INT) ) {s = 68;}

                        else if ( (LA462_3==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA462_3==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                        else if ( ((LA462_3>=Colon && LA462_3<=Semicolon)||LA462_3==EqualsSign) ) {s = 72;}

                         
                        input.seek(index462_3);
                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA462_373 = input.LA(1);

                         
                        int index462_373 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA462_373>=Colon && LA462_373<=Semicolon)||LA462_373==EqualsSign) ) {s = 72;}

                        else if ( (LA462_373==LeftParenthesis) && (synpred261_InternalN4JSParser())) {s = 71;}

                         
                        input.seek(index462_373);
                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA462_275 = input.LA(1);

                         
                        int index462_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_275==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                        else if ( (LA462_275==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_275==FullStop) ) {s = 334;}

                        
                        else if ((LA462_275>=7 && LA462_275<=140 && (s=T2S.M_38[LA462_275-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA462_275==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index462_275);
                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA462_468 = input.LA(1);

                         
                        int index462_468 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_468==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_468>=7 && LA462_468<=140 && (s=T2S.M_49[LA462_468-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_468);
                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA462_484 = input.LA(1);

                         
                        int index462_484 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_484==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_484>=7 && LA462_484<=140 && (s=T2S.M_49[LA462_484-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_484);
                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA462_485 = input.LA(1);

                         
                        int index462_485 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_485>=7 && LA462_485<=111 && (s=T2S.M_36[LA462_485-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_485==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_485==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_485==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_485==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_485==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_485);
                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA462_278 = input.LA(1);

                         
                        int index462_278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_278==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_278==FullStop) ) {s = 334;}

                        
                        else if ((LA462_278>=7 && LA462_278<=140 && (s=T2S.M_45[LA462_278-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA462_278==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_278==EqualsSignGreaterThanSign) && (synpred261_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index462_278);
                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA462_472 = input.LA(1);

                         
                        int index462_472 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_472==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_472>=7 && LA462_472<=140 && (s=T2S.M_49[LA462_472-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index462_472);
                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA462_483 = input.LA(1);

                         
                        int index462_483 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_483>=7 && LA462_483<=111 && (s=T2S.M_36[LA462_483-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_483==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_483==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_483==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_483==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_483==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_483);
                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA462_470 = input.LA(1);

                         
                        int index462_470 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_470>=7 && LA462_470<=111 && (s=T2S.M_36[LA462_470-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_470==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_470==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_470==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_470==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_470==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_470);
                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA462_277 = input.LA(1);

                         
                        int index462_277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA462_277==FullStop) ) {s = 334;}

                        else if ( (LA462_277==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA462_277>=7 && LA462_277<=140 && (s=T2S.M_51[LA462_277-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index462_277);
                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA462_471 = input.LA(1);

                         
                        int index462_471 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA462_471>=7 && LA462_471<=111 && (s=T2S.M_36[LA462_471-(7)])>=0) && (synpred261_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA462_471==RightSquareBracket) ) {s = 373;}

                        else if ( (LA462_471==LeftSquareBracket) && (synpred261_InternalN4JSParser())) {s = 333;}

                        else if ( (LA462_471==FullStop) && (synpred261_InternalN4JSParser())) {s = 439;}

                        else if ( (LA462_471==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred261_InternalN4JSParser())) {s = 335;}

                        else if ( (LA462_471==RULE_TEMPLATE_HEAD) && (synpred261_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index462_471);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 462, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_275s = "\1\4\1\uffff\12\4\2\uffff\1\4\66\134\1\4\u00ca\uffff\23\7\1\4\7\7\43\uffff\1\4\46\uffff\1\134\103\uffff\77\7";
    static final String dfa_276s = "\1\u0095\1\uffff\12\u0095\2\uffff\1\u0095\66\147\1\u0095\u00ca\uffff\23\u008c\1\u0095\1\u0091\6\u008c\43\uffff\1\176\46\uffff\1\147\103\uffff\77\u008c";
    static final String dfa_277s = "\1\uffff\1\1\12\uffff\2\4\70\uffff\1\6\1\5\1\4\102\2\102\3\103\4\33\uffff\43\4\1\uffff\46\4\1\uffff\103\4\77\uffff";
    static final String dfa_278s = "\1\11\1\uffff\1\u0081\1\142\1\u009c\1\u0095\1\162\1\u008c\1\u0085\1\u008b\1\20\1\144\2\uffff\1\u0082\1\42\1\3\1\6\1\10\1\13\1\22\1\27\1\31\1\34\1\35\1\41\1\44\1\47\1\54\1\57\1\64\1\71\1\74\1\102\1\105\1\111\1\113\1\117\1\121\1\125\1\131\1\132\1\135\1\137\1\140\1\143\1\145\1\146\1\147\1\152\1\154\1\157\1\21\1\40\1\43\1\46\1\53\1\56\1\63\1\70\1\73\1\101\1\104\1\110\1\112\1\120\1\124\1\174\1\23\1\75\u00ca\uffff\1\u0094\1\170\1\164\1\175\1\172\1\u0088\1\u0083\1\u008f\1\u008d\1\u0096\1\u0092\1\u009e\1\u0099\1\2\1\1\1\15\1\7\1\33\1\25\1\116\1\u0089\1\66\1\55\1\107\1\77\1\123\1\4\43\uffff\1\u008e\46\uffff\1\14\103\uffff\1\u0090\1\156\1\151\1\153\1\171\1\163\1\176\1\177\1\173\1\u0087\1\u0084\1\u0086\1\u0091\1\u008a\1\u0097\1\u0098\1\u0093\1\u009d\1\u009a\1\u009b\1\5\1\0\1\16\1\17\1\12\1\32\1\26\1\30\1\52\1\37\1\67\1\72\1\62\1\106\1\100\1\103\1\130\1\115\1\36\1\24\1\50\1\51\1\45\1\65\1\60\1\61\1\114\1\76\1\126\1\127\1\122\1\136\1\133\1\134\1\150\1\141\1\160\1\161\1\155\1\167\1\165\1\166\1\u0080}>";
    static final String[] dfa_279s = {
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\106\1\uffff\1\15\7\uffff\1\14\3\uffff\1\1\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\110\1\uffff\1\15\5\uffff\2\107\1\14\1\107\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\110\1\uffff\1\15\5\uffff\2\107\1\14\1\107\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\110\1\uffff\1\15\5\uffff\2\107\1\14\1\107\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\110\1\uffff\1\15\5\uffff\2\107\1\14\1\107\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\110\1\uffff\1\15\5\uffff\2\107\1\14\1\107\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\110\1\uffff\1\15\5\uffff\2\107\1\14\1\107\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\110\1\uffff\1\15\5\uffff\2\107\1\14\1\107\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\74\1\67\1\101\1\42\1\77\1\102\1\4\1\7\1\24\1\25\1\6\1\36\1\26\1\33\1\34\1\2\1\3\1\27\1\32\1\40\1\5\1\44\1\10\1\46\1\71\1\52\1\76\1\16\1\100\1\20\1\22\1\23\1\11\1\62\1\45\1\50\1\73\1\55\1\57\1\75\1\21\1\31\1\63\1\66\1\60\1\47\1\61\1\72\1\54\1\56\4\uffff\1\35\1\12\1\64\1\43\1\13\1\51\1\53\21\uffff\1\65\1\30\1\37\1\41\1\70\5\uffff\1\110\1\uffff\1\15\5\uffff\2\107\1\14\1\107\3\uffff\1\105\11\uffff\1\104\1\uffff\1\104\1\uffff\1\104\2\uffff\1\104\1\uffff\1\17\2\uffff\1\103\23\uffff\1\104",
            "\1\175\1\170\1\u0083\1\135\1\u0080\1\u0084\1\u0086\1\164\1\117\1\120\1\163\1\131\1\121\1\126\1\127\1\u0085\1\162\1\122\1\125\1\133\1\u0087\1\137\1\165\1\141\1\172\1\145\1\177\1\u0082\1\u0081\1\112\1\114\1\115\1\116\1\155\1\140\1\143\1\174\1\150\1\152\1\176\1\113\1\124\1\156\1\167\1\153\1\142\1\154\1\173\1\147\1\151\4\uffff\1\130\1\157\1\161\1\136\1\160\1\144\1\146\21\uffff\1\166\1\123\1\132\1\134\1\171\5\uffff\1\110\7\uffff\2\107\1\uffff\1\107\3\uffff\1\u008a\11\uffff\1\u0089\1\uffff\1\u0089\1\uffff\1\u0089\2\uffff\1\u0089\1\uffff\1\111\2\uffff\1\u0088\23\uffff\1\u0089",
            "\1\u00bf\1\u00ba\1\u00c5\1\u009f\1\u00c2\1\u00c6\1\u00c8\1\u00b6\1\u0091\1\u0092\1\u00b5\1\u009b\1\u0093\1\u0098\1\u0099\1\u00c7\1\u00b4\1\u0094\1\u0097\1\u009d\1\u00c9\1\u00a1\1\u00b7\1\u00a3\1\u00bc\1\u00a7\1\u00c1\1\u00c4\1\u00c3\1\u008c\1\u008e\1\u008f\1\u0090\1\u00af\1\u00a2\1\u00a5\1\u00be\1\u00aa\1\u00ac\1\u00c0\1\u008d\1\u0096\1\u00b0\1\u00b9\1\u00ad\1\u00a4\1\u00ae\1\u00bd\1\u00a9\1\u00ab\4\uffff\1\u009a\1\u00b1\1\u00b3\1\u00a0\1\u00b2\1\u00a6\1\u00a8\21\uffff\1\u00b8\1\u0095\1\u009c\1\u009e\1\u00bb\5\uffff\1\110\7\uffff\2\107\1\uffff\1\107\3\uffff\1\u00cc\11\uffff\1\u00cb\1\uffff\1\u00cb\1\uffff\1\u00cb\2\uffff\1\u00cb\1\uffff\1\u008b\2\uffff\1\u00ca\23\uffff\1\u00cb",
            "",
            "",
            "\1\u0102\1\u00fd\1\u0108\1\u00e2\1\u0105\1\u0109\1\u010b\1\u00f9\1\u00d4\1\u00d5\1\u00f8\1\u00de\1\u00d6\1\u00db\1\u00dc\1\u010a\1\u00f7\1\u00d7\1\u00da\1\u00e0\1\u010c\1\u00e4\1\u00fa\1\u00e6\1\u00ff\1\u00ea\1\u0104\1\u0107\1\u0106\1\u00cf\1\u00d1\1\u00d2\1\u00d3\1\u00f2\1\u00e5\1\u00e8\1\u0101\1\u00ed\1\u00ef\1\u0103\1\u00d0\1\u00d9\1\u00f3\1\u00fc\1\u00f0\1\u00e7\1\u00f1\1\u0100\1\u00ec\1\u00ee\4\uffff\1\u00dd\1\u00f4\1\u00f6\1\u00e3\1\u00f5\1\u00e9\1\u00eb\21\uffff\1\u00fb\1\u00d8\1\u00df\1\u00e1\1\u00fe\5\uffff\1\110\7\uffff\2\107\1\uffff\1\107\3\uffff\1\u010f\11\uffff\1\u010e\1\uffff\1\u010e\1\uffff\1\u010e\2\uffff\1\u010e\1\uffff\1\u00ce\2\uffff\1\u010d\17\uffff\1\u00cd\3\uffff\1\u010e",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "\1\u011f\1\u011a\1\u0125\1\uffff\1\u0122\1\u0126\1\u0128\1\u0116\2\uffff\1\u0115\1\u0140\3\uffff\1\u0127\1\u0114\1\u0144\2\uffff\1\u0129\1\uffff\1\u0117\1\uffff\1\u011c\1\u0146\1\u0121\1\u0124\1\u0123\2\uffff\1\u0141\1\uffff\1\u013a\1\u0130\1\uffff\1\u011e\1\uffff\1\u012d\1\u0120\3\uffff\1\u0119\1\u013b\1\u012f\1\u0139\1\u011d\1\u0145\6\uffff\1\u0111\1\u0113\1\u012e\1\u0112\7\uffff\1\u0147\1\uffff\1\u0148\1\uffff\1\u013d\7\uffff\1\u0118\3\uffff\1\u011b\2\uffff\1\u014c\2\uffff\1\u012c\2\uffff\1\u0149\1\uffff\1\u014a\1\uffff\1\u013c\2\uffff\1\u0131\3\uffff\1\u012b\1\u013e\2\uffff\1\u013f\2\uffff\1\u014b\3\uffff\1\u0132\1\uffff\1\u0137\1\u0134\1\u0135\1\u0136\1\uffff\1\u0138\1\uffff\1\u0110\2\uffff\1\u012a\11\uffff\1\u0143\1\u0142\10\uffff\1\u0133",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u018a\1\u0185\1\u018e\1\u015f\1\u018d\1\u018f\1\u0191\1\u0181\2\uffff\1\u0180\1\u01a7\3\uffff\1\u0190\1\u017f\1\u01ab\2\uffff\1\u0192\1\uffff\1\u0182\1\uffff\1\u0187\1\u01ad\1\u018c\1\u017a\1\u0177\2\uffff\1\u01a8\1\uffff\1\u01a0\1\u0196\1\uffff\1\u0189\1\uffff\1\u0193\1\u018b\3\uffff\1\u0184\1\u01a2\1\u0195\1\u019f\1\u0188\1\u01ac\1\uffff\1\u0162\1\uffff\1\u0171\1\u0161\1\uffff\1\u017c\1\u017e\1\u0194\1\u017d\2\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u01ae\1\u016f\1\u01af\1\u0170\1\u01a4\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0183\2\uffff\1\u0160\1\u0186\1\u0174\1\u0169\1\u01b3\1\u0157\1\u0165\1\u0179\1\uffff\1\u0155\1\u01b0\1\uffff\1\u01b1\1\u014e\1\u01a3\2\uffff\1\u0197\1\u016b\1\u015a\1\u016a\1\u0178\1\u01a5\1\u0175\1\u0166\1\u01a6\1\u0167\1\uffff\1\u01b2\3\uffff\1\u0198\1\uffff\1\u019d\1\u019a\1\u019b\1\u019c\1\uffff\1\u019e\1\uffff\1\u017b\2\uffff\1\u01a1\11\uffff\1\u01aa\1\u01a9\10\uffff\1\u0199",
            "\1\u015f\7\uffff\1\u01b6\46\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u01b5\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f\4\uffff\1\u01b4",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u0176\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014e\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u01ed\1\u01e8\1\u01f3\1\u01cd\1\u01f0\1\u01f4\1\u01f6\1\u01e4\1\u01bf\1\u01c0\1\u01e3\1\u01c9\1\u01c1\1\u01c6\1\u01c7\1\u01f5\1\u01e2\1\u01c2\1\u01c5\1\u01cb\1\u01f7\1\u01cf\1\u01e5\1\u01d1\1\u01ea\1\u01d5\1\u01ef\1\u01f2\1\u01f1\1\u01ba\1\u01bc\1\u01bd\1\u01be\1\u01dd\1\u01d0\1\u01d3\1\u01ec\1\u01d8\1\u01da\1\u01ee\1\u01bb\1\u01c4\1\u01de\1\u01e7\1\u01db\1\u01d2\1\u01dc\1\u01eb\1\u01d7\1\u01d9\4\uffff\1\u01c8\1\u01df\1\u01e1\1\u01ce\1\u01e0\1\u01d4\1\u01d6\21\uffff\1\u01e6\1\u01c3\1\u01ca\1\u01cc\1\u01e9\17\uffff\1\u01b8\27\uffff\1\u01b9",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\110\7\uffff\2\107\1\uffff\1\107",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b7\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014d\1\u0175\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f"
    };
    static final char[] dfa_275 = DFA.unpackEncodedStringToUnsignedChars(dfa_275s);
    static final char[] dfa_276 = DFA.unpackEncodedStringToUnsignedChars(dfa_276s);
    static final short[] dfa_277 = DFA.unpackEncodedString(dfa_277s);
    static final short[] dfa_278 = DFA.unpackEncodedString(dfa_278s);
    static final short[][] dfa_279 = unpackEncodedStringArray(dfa_279s);

    class DFA463 extends DFA {

        public DFA463(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 463;
            this.eot = dfa_269;
            this.eof = dfa_269;
            this.min = dfa_275;
            this.max = dfa_276;
            this.accept = dfa_277;
            this.special = dfa_278;
            this.transition = dfa_279;
        }
        public String getDescription() {
            return "12405:1: (AnnotatedN4MemberDeclarationParserRuleCall_0= norm1_AnnotatedN4MemberDeclaration | ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=>N4GetterDeclarationParserRuleCall_1= norm1_N4GetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=>N4SetterDeclarationParserRuleCall_2= norm1_N4SetterDeclaration ) | ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) norm1_LiteralOrComputedPropertyName LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak norm1_LiteralOrComputedPropertyName LeftParenthesis ) ) ) )=>N4MethodDeclarationParserRuleCall_3= norm1_N4MethodDeclaration ) | N4FieldDeclarationParserRuleCall_4= norm1_N4FieldDeclaration | N4CallableConstructorDeclarationParserRuleCall_5= norm1_N4CallableConstructorDeclaration )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA463_462 = input.LA(1);

                         
                        int index463_462 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_462==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_462>=7 && LA463_462<=140 && (s=T2S.M_49[LA463_462-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_462);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA463_286 = input.LA(1);

                         
                        int index463_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_286==FullStop) ) {s = 334;}

                        else if ( (LA463_286==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_286>=7 && LA463_286<=140 && (s=T2S.M_51[LA463_286-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_286);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA463_285 = input.LA(1);

                         
                        int index463_285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_285==FullStop) ) {s = 334;}

                        else if ( (LA463_285==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_285>=7 && LA463_285<=140 && (s=T2S.M_51[LA463_285-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_285);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA463_16 = input.LA(1);

                         
                        int index463_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_16>=Colon && LA463_16<=Semicolon)||LA463_16==EqualsSign) ) {s = 71;}

                        else if ( (LA463_16==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_16);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA463_298 = input.LA(1);

                         
                        int index463_298 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_298>=7 && LA463_298<=140 && (s=T2S.M_97[LA463_298-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        else if ( (LA463_298==RightSquareBracket) ) {s = 373;}

                         
                        input.seek(index463_298);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA463_461 = input.LA(1);

                         
                        int index463_461 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_461==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_461>=7 && LA463_461<=140 && (s=T2S.M_49[LA463_461-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_461);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA463_17 = input.LA(1);

                         
                        int index463_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_17==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_17>=Colon && LA463_17<=Semicolon)||LA463_17==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_17);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA463_288 = input.LA(1);

                         
                        int index463_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_288==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_288==FullStop) ) {s = 334;}

                        
                        else if ((LA463_288>=7 && LA463_288<=140 && (s=T2S.M_45[LA463_288-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA463_288==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_288==EqualsSignGreaterThanSign) && (synpred264_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index463_288);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA463_18 = input.LA(1);

                         
                        int index463_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_18==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_18>=Colon && LA463_18<=Semicolon)||LA463_18==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_18);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA463_0 = input.LA(1);

                         
                        int index463_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_0>=10 && LA463_0<=106 && (s=T2S.M_114[LA463_0-(10)])>=0)) { /* 11 cases */ }
                        else if ( (LA463_0==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_0==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                        
                        else if ((LA463_0>=4 && LA463_0<=129 && (s=T2S.M_66[LA463_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA463_0==RULE_DOUBLE||LA463_0==RULE_HEX_INT||LA463_0==RULE_OCTAL_INT||LA463_0==RULE_SCIENTIFIC_INT||LA463_0==RULE_INT) ) {s = 68;}

                        else if ( (LA463_0==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA463_0==LeftParenthesis) ) {s = 70;}

                         
                        input.seek(index463_0);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA463_465 = input.LA(1);

                         
                        int index463_465 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_465==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_465>=7 && LA463_465<=140 && (s=T2S.M_49[LA463_465-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_465);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA463_19 = input.LA(1);

                         
                        int index463_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_19>=Colon && LA463_19<=Semicolon)||LA463_19==EqualsSign) ) {s = 71;}

                        else if ( (LA463_19==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_19);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA463_373 = input.LA(1);

                         
                        int index463_373 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_373==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_373>=Colon && LA463_373<=Semicolon)||LA463_373==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_373);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA463_287 = input.LA(1);

                         
                        int index463_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_287==FullStop) ) {s = 334;}

                        else if ( (LA463_287==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_287>=7 && LA463_287<=140 && (s=T2S.M_51[LA463_287-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_287);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA463_463 = input.LA(1);

                         
                        int index463_463 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_463>=7 && LA463_463<=111 && (s=T2S.M_36[LA463_463-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_463==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_463==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_463==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_463==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_463==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_463);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA463_464 = input.LA(1);

                         
                        int index463_464 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_464==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_464>=7 && LA463_464<=140 && (s=T2S.M_49[LA463_464-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_464);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA463_10 = input.LA(1);

                         
                        int index463_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_10==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        
                        else if ((LA463_10>=4 && LA463_10<=129 && (s=T2S.M_155[LA463_10-(4)])>=0) && (synpred262_InternalN4JSParser())) { /* 65 cases */ }
                        else if ( (LA463_10==RULE_DOUBLE||LA463_10==RULE_HEX_INT||LA463_10==RULE_OCTAL_INT||LA463_10==RULE_SCIENTIFIC_INT||LA463_10==RULE_INT) && (synpred262_InternalN4JSParser())) {s = 137;}

                        else if ( (LA463_10==LeftSquareBracket) && (synpred262_InternalN4JSParser())) {s = 138;}

                        else if ( ((LA463_10>=Colon && LA463_10<=Semicolon)||LA463_10==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_10);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA463_52 = input.LA(1);

                         
                        int index463_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_52>=Colon && LA463_52<=Semicolon)||LA463_52==EqualsSign) ) {s = 71;}

                        else if ( (LA463_52==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_52);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA463_20 = input.LA(1);

                         
                        int index463_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_20==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_20>=Colon && LA463_20<=Semicolon)||LA463_20==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_20);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA463_68 = input.LA(1);

                         
                        int index463_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_68==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_68>=Colon && LA463_68<=Semicolon)||LA463_68==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_68);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA463_480 = input.LA(1);

                         
                        int index463_480 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_480==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_480>=7 && LA463_480<=140 && (s=T2S.M_49[LA463_480-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_480);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA463_290 = input.LA(1);

                         
                        int index463_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_290==FullStop) ) {s = 334;}

                        else if ( (LA463_290==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_290>=7 && LA463_290<=140 && (s=T2S.M_51[LA463_290-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_290);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA463_467 = input.LA(1);

                         
                        int index463_467 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_467>=7 && LA463_467<=111 && (s=T2S.M_36[LA463_467-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_467==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_467==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_467==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_467==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_467==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_467);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA463_21 = input.LA(1);

                         
                        int index463_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_21==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_21>=Colon && LA463_21<=Semicolon)||LA463_21==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_21);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA463_468 = input.LA(1);

                         
                        int index463_468 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_468==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_468>=7 && LA463_468<=140 && (s=T2S.M_49[LA463_468-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_468);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA463_22 = input.LA(1);

                         
                        int index463_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_22>=Colon && LA463_22<=Semicolon)||LA463_22==EqualsSign) ) {s = 71;}

                        else if ( (LA463_22==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_22);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA463_466 = input.LA(1);

                         
                        int index463_466 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_466==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_466>=7 && LA463_466<=140 && (s=T2S.M_49[LA463_466-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_466);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA463_289 = input.LA(1);

                         
                        int index463_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_289==FullStop) ) {s = 334;}

                        else if ( (LA463_289==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_289>=7 && LA463_289<=140 && (s=T2S.M_51[LA463_289-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_289);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA463_23 = input.LA(1);

                         
                        int index463_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_23>=Colon && LA463_23<=Semicolon)||LA463_23==EqualsSign) ) {s = 71;}

                        else if ( (LA463_23==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_23);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA463_24 = input.LA(1);

                         
                        int index463_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_24==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_24>=Colon && LA463_24<=Semicolon)||LA463_24==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_24);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA463_479 = input.LA(1);

                         
                        int index463_479 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_479>=7 && LA463_479<=111 && (s=T2S.M_36[LA463_479-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_479==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_479==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_479==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_479==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_479==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_479);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA463_470 = input.LA(1);

                         
                        int index463_470 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_470==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_470>=7 && LA463_470<=140 && (s=T2S.M_49[LA463_470-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_470);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA463_53 = input.LA(1);

                         
                        int index463_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_53>=Colon && LA463_53<=Semicolon)||LA463_53==EqualsSign) ) {s = 71;}

                        else if ( (LA463_53==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_53);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA463_25 = input.LA(1);

                         
                        int index463_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_25==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_25>=Colon && LA463_25<=Semicolon)||LA463_25==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_25);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA463_15 = input.LA(1);

                         
                        int index463_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_15==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_15>=Colon && LA463_15<=Semicolon)||LA463_15==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_15);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA463_54 = input.LA(1);

                         
                        int index463_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_54==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_54>=Colon && LA463_54<=Semicolon)||LA463_54==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_54);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA463_26 = input.LA(1);

                         
                        int index463_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_26>=Colon && LA463_26<=Semicolon)||LA463_26==EqualsSign) ) {s = 71;}

                        else if ( (LA463_26==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_26);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA463_483 = input.LA(1);

                         
                        int index463_483 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_483>=7 && LA463_483<=111 && (s=T2S.M_36[LA463_483-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_483==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_483==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_483==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_483==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_483==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_483);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA463_55 = input.LA(1);

                         
                        int index463_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_55==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_55>=Colon && LA463_55<=Semicolon)||LA463_55==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_55);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA463_27 = input.LA(1);

                         
                        int index463_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_27>=Colon && LA463_27<=Semicolon)||LA463_27==EqualsSign) ) {s = 71;}

                        else if ( (LA463_27==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_27);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA463_481 = input.LA(1);

                         
                        int index463_481 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_481==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_481>=7 && LA463_481<=140 && (s=T2S.M_49[LA463_481-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_481);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA463_482 = input.LA(1);

                         
                        int index463_482 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_482==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_482>=7 && LA463_482<=140 && (s=T2S.M_49[LA463_482-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_482);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA463_469 = input.LA(1);

                         
                        int index463_469 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_469==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_469>=7 && LA463_469<=140 && (s=T2S.M_49[LA463_469-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_469);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA463_56 = input.LA(1);

                         
                        int index463_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_56>=Colon && LA463_56<=Semicolon)||LA463_56==EqualsSign) ) {s = 71;}

                        else if ( (LA463_56==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_56);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA463_28 = input.LA(1);

                         
                        int index463_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_28==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_28>=Colon && LA463_28<=Semicolon)||LA463_28==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_28);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA463_294 = input.LA(1);

                         
                        int index463_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_294==FullStop) ) {s = 334;}

                        else if ( (LA463_294==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_294>=7 && LA463_294<=140 && (s=T2S.M_51[LA463_294-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_294);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA463_57 = input.LA(1);

                         
                        int index463_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_57>=Colon && LA463_57<=Semicolon)||LA463_57==EqualsSign) ) {s = 71;}

                        else if ( (LA463_57==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_57);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA463_29 = input.LA(1);

                         
                        int index463_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_29==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_29>=Colon && LA463_29<=Semicolon)||LA463_29==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_29);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA463_485 = input.LA(1);

                         
                        int index463_485 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_485==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_485>=7 && LA463_485<=140 && (s=T2S.M_49[LA463_485-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_485);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA463_486 = input.LA(1);

                         
                        int index463_486 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_486==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_486>=7 && LA463_486<=140 && (s=T2S.M_49[LA463_486-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_486);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA463_473 = input.LA(1);

                         
                        int index463_473 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_473==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_473>=7 && LA463_473<=140 && (s=T2S.M_49[LA463_473-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_473);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA463_58 = input.LA(1);

                         
                        int index463_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_58==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_58>=Colon && LA463_58<=Semicolon)||LA463_58==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_58);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA463_30 = input.LA(1);

                         
                        int index463_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_30>=Colon && LA463_30<=Semicolon)||LA463_30==EqualsSign) ) {s = 71;}

                        else if ( (LA463_30==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_30);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA463_484 = input.LA(1);

                         
                        int index463_484 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_484==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_484>=7 && LA463_484<=140 && (s=T2S.M_49[LA463_484-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_484);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA463_293 = input.LA(1);

                         
                        int index463_293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_293==FullStop) ) {s = 334;}

                        else if ( (LA463_293==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_293>=7 && LA463_293<=140 && (s=T2S.M_51[LA463_293-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_293);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA463_471 = input.LA(1);

                         
                        int index463_471 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_471>=7 && LA463_471<=111 && (s=T2S.M_36[LA463_471-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_471==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_471==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_471==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_471==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_471==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_471);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA463_59 = input.LA(1);

                         
                        int index463_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_59==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_59>=Colon && LA463_59<=Semicolon)||LA463_59==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_59);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA463_31 = input.LA(1);

                         
                        int index463_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_31>=Colon && LA463_31<=Semicolon)||LA463_31==EqualsSign) ) {s = 71;}

                        else if ( (LA463_31==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_31);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA463_472 = input.LA(1);

                         
                        int index463_472 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_472==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_472>=7 && LA463_472<=140 && (s=T2S.M_49[LA463_472-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_472);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA463_60 = input.LA(1);

                         
                        int index463_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_60>=Colon && LA463_60<=Semicolon)||LA463_60==EqualsSign) ) {s = 71;}

                        else if ( (LA463_60==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_60);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA463_32 = input.LA(1);

                         
                        int index463_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_32==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_32>=Colon && LA463_32<=Semicolon)||LA463_32==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_32);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA463_69 = input.LA(1);

                         
                        int index463_69 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_69>=4 && LA463_69<=129 && (s=T2S.M_176[LA463_69-(4)])>=0)) { /* 27 cases */ }
                        
                        else if ((LA463_69>=15 && LA463_69<=149 && (s=T2S.M_177[LA463_69-(15)])>=0) && (synpred264_InternalN4JSParser())) { /* 34 cases */ }
                        input.seek(index463_69);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA463_488 = input.LA(1);

                         
                        int index463_488 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_488==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_488>=7 && LA463_488<=140 && (s=T2S.M_49[LA463_488-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_488);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA463_296 = input.LA(1);

                         
                        int index463_296 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_296==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_296==FullStop) ) {s = 334;}

                        
                        else if ((LA463_296>=7 && LA463_296<=140 && (s=T2S.M_45[LA463_296-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA463_296==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_296==EqualsSignGreaterThanSign) && (synpred264_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index463_296);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA463_475 = input.LA(1);

                         
                        int index463_475 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_475>=7 && LA463_475<=111 && (s=T2S.M_36[LA463_475-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_475==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_475==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_475==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_475==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_475==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_475);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA463_61 = input.LA(1);

                         
                        int index463_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_61>=Colon && LA463_61<=Semicolon)||LA463_61==EqualsSign) ) {s = 71;}

                        else if ( (LA463_61==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_61);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA463_33 = input.LA(1);

                         
                        int index463_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_33==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_33>=Colon && LA463_33<=Semicolon)||LA463_33==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_33);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA463_476 = input.LA(1);

                         
                        int index463_476 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_476==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_476>=7 && LA463_476<=140 && (s=T2S.M_49[LA463_476-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_476);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA463_62 = input.LA(1);

                         
                        int index463_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_62==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_62>=Colon && LA463_62<=Semicolon)||LA463_62==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_62);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA463_34 = input.LA(1);

                         
                        int index463_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_34>=Colon && LA463_34<=Semicolon)||LA463_34==EqualsSign) ) {s = 71;}

                        else if ( (LA463_34==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_34);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA463_474 = input.LA(1);

                         
                        int index463_474 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_474==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_474>=7 && LA463_474<=140 && (s=T2S.M_49[LA463_474-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_474);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA463_295 = input.LA(1);

                         
                        int index463_295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_295==FullStop) ) {s = 334;}

                        else if ( (LA463_295==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_295>=7 && LA463_295<=140 && (s=T2S.M_51[LA463_295-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_295);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA463_63 = input.LA(1);

                         
                        int index463_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_63==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_63>=Colon && LA463_63<=Semicolon)||LA463_63==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_63);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA463_35 = input.LA(1);

                         
                        int index463_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_35>=Colon && LA463_35<=Semicolon)||LA463_35==EqualsSign) ) {s = 71;}

                        else if ( (LA463_35==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_35);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA463_64 = input.LA(1);

                         
                        int index463_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_64>=Colon && LA463_64<=Semicolon)||LA463_64==EqualsSign) ) {s = 71;}

                        else if ( (LA463_64==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_64);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA463_36 = input.LA(1);

                         
                        int index463_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_36==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_36>=Colon && LA463_36<=Semicolon)||LA463_36==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_36);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA463_487 = input.LA(1);

                         
                        int index463_487 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_487>=7 && LA463_487<=111 && (s=T2S.M_36[LA463_487-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_487==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_487==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_487==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_487==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_487==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_487);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA463_478 = input.LA(1);

                         
                        int index463_478 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_478==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_478>=7 && LA463_478<=140 && (s=T2S.M_49[LA463_478-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_478);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA463_291 = input.LA(1);

                         
                        int index463_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_291==FullStop) ) {s = 334;}

                        else if ( (LA463_291==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_291>=4 && LA463_291<=149 && (s=T2S.M_186[LA463_291-(4)])>=0) && (synpred264_InternalN4JSParser())) { /* 89 cases */ }
                        input.seek(index463_291);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA463_37 = input.LA(1);

                         
                        int index463_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_37==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_37>=Colon && LA463_37<=Semicolon)||LA463_37==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_37);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA463_65 = input.LA(1);

                         
                        int index463_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_65==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_65>=Colon && LA463_65<=Semicolon)||LA463_65==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_65);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA463_38 = input.LA(1);

                         
                        int index463_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_38>=Colon && LA463_38<=Semicolon)||LA463_38==EqualsSign) ) {s = 71;}

                        else if ( (LA463_38==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_38);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA463_491 = input.LA(1);

                         
                        int index463_491 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_491>=7 && LA463_491<=111 && (s=T2S.M_36[LA463_491-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_491==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_491==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_491==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_491==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_491==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_491);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA463_297 = input.LA(1);

                         
                        int index463_297 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_297==FullStop) ) {s = 334;}

                        else if ( (LA463_297==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_297>=7 && LA463_297<=140 && (s=T2S.M_51[LA463_297-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_297);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA463_66 = input.LA(1);

                         
                        int index463_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_66==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_66>=Colon && LA463_66<=Semicolon)||LA463_66==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_66);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA463_39 = input.LA(1);

                         
                        int index463_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_39>=Colon && LA463_39<=Semicolon)||LA463_39==EqualsSign) ) {s = 71;}

                        else if ( (LA463_39==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_39);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA463_489 = input.LA(1);

                         
                        int index463_489 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_489==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_489>=7 && LA463_489<=140 && (s=T2S.M_49[LA463_489-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_489);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA463_490 = input.LA(1);

                         
                        int index463_490 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_490==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_490>=7 && LA463_490<=140 && (s=T2S.M_49[LA463_490-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_490);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA463_477 = input.LA(1);

                         
                        int index463_477 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_477==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_477>=7 && LA463_477<=140 && (s=T2S.M_49[LA463_477-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_477);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA463_40 = input.LA(1);

                         
                        int index463_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_40==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_40>=Colon && LA463_40<=Semicolon)||LA463_40==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_40);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA463_41 = input.LA(1);

                         
                        int index463_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_41==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_41>=Colon && LA463_41<=Semicolon)||LA463_41==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_41);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA463_493 = input.LA(1);

                         
                        int index463_493 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_493==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_493>=7 && LA463_493<=140 && (s=T2S.M_49[LA463_493-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_493);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA463_494 = input.LA(1);

                         
                        int index463_494 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_494==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_494>=7 && LA463_494<=140 && (s=T2S.M_49[LA463_494-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_494);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA463_42 = input.LA(1);

                         
                        int index463_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_42>=Colon && LA463_42<=Semicolon)||LA463_42==EqualsSign) ) {s = 71;}

                        else if ( (LA463_42==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_42);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA463_492 = input.LA(1);

                         
                        int index463_492 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_492==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_492>=7 && LA463_492<=140 && (s=T2S.M_49[LA463_492-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_492);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA463_43 = input.LA(1);

                         
                        int index463_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_43>=Colon && LA463_43<=Semicolon)||LA463_43==EqualsSign) ) {s = 71;}

                        else if ( (LA463_43==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_43);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA463_44 = input.LA(1);

                         
                        int index463_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_44==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_44>=Colon && LA463_44<=Semicolon)||LA463_44==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_44);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA463_496 = input.LA(1);

                         
                        int index463_496 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_496==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_496>=7 && LA463_496<=140 && (s=T2S.M_49[LA463_496-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_496);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA463_3 = input.LA(1);

                         
                        int index463_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_3>=4 && LA463_3<=129 && (s=T2S.M_59[LA463_3-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA463_3==RULE_DOUBLE||LA463_3==RULE_HEX_INT||LA463_3==RULE_OCTAL_INT||LA463_3==RULE_SCIENTIFIC_INT||LA463_3==RULE_INT) ) {s = 68;}

                        else if ( (LA463_3==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA463_3==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_3==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                        else if ( ((LA463_3>=Colon && LA463_3<=Semicolon)||LA463_3==EqualsSign) ) {s = 71;}

                        else if ( (LA463_3==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_3);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA463_45 = input.LA(1);

                         
                        int index463_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_45==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_45>=Colon && LA463_45<=Semicolon)||LA463_45==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_45);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA463_11 = input.LA(1);

                         
                        int index463_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_11>=4 && LA463_11<=129 && (s=T2S.M_197[LA463_11-(4)])>=0) && (synpred263_InternalN4JSParser())) { /* 64 cases */ }
                        else if ( (LA463_11==RULE_DOUBLE||LA463_11==RULE_HEX_INT||LA463_11==RULE_OCTAL_INT||LA463_11==RULE_SCIENTIFIC_INT||LA463_11==RULE_INT) && (synpred263_InternalN4JSParser())) {s = 203;}

                        else if ( (LA463_11==LeftSquareBracket) && (synpred263_InternalN4JSParser())) {s = 204;}

                        else if ( (LA463_11==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_11>=Colon && LA463_11<=Semicolon)||LA463_11==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_11);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA463_46 = input.LA(1);

                         
                        int index463_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_46>=Colon && LA463_46<=Semicolon)||LA463_46==EqualsSign) ) {s = 71;}

                        else if ( (LA463_46==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_46);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA463_47 = input.LA(1);

                         
                        int index463_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_47>=Colon && LA463_47<=Semicolon)||LA463_47==EqualsSign) ) {s = 71;}

                        else if ( (LA463_47==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_47);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA463_48 = input.LA(1);

                         
                        int index463_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_48==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_48>=Colon && LA463_48<=Semicolon)||LA463_48==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_48);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA463_495 = input.LA(1);

                         
                        int index463_495 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_495>=7 && LA463_495<=111 && (s=T2S.M_36[LA463_495-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_495==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_495==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_495==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_495==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_495==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_495);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA463_443 = input.LA(1);

                         
                        int index463_443 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_443>=7 && LA463_443<=111 && (s=T2S.M_36[LA463_443-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_443==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_443==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_443==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_443==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_443==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_443);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA463_49 = input.LA(1);

                         
                        int index463_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_49==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_49>=Colon && LA463_49<=Semicolon)||LA463_49==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_49);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA463_444 = input.LA(1);

                         
                        int index463_444 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_444==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_444>=7 && LA463_444<=140 && (s=T2S.M_49[LA463_444-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_444);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA463_50 = input.LA(1);

                         
                        int index463_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_50>=Colon && LA463_50<=Semicolon)||LA463_50==EqualsSign) ) {s = 71;}

                        else if ( (LA463_50==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_50);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA463_499 = input.LA(1);

                         
                        int index463_499 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_499>=7 && LA463_499<=111 && (s=T2S.M_36[LA463_499-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_499==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_499==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_499==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_499==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_499==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_499);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA463_442 = input.LA(1);

                         
                        int index463_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_442==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_442>=7 && LA463_442<=140 && (s=T2S.M_49[LA463_442-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_442);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA463_51 = input.LA(1);

                         
                        int index463_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_51>=Colon && LA463_51<=Semicolon)||LA463_51==EqualsSign) ) {s = 71;}

                        else if ( (LA463_51==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_51);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA463_497 = input.LA(1);

                         
                        int index463_497 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_497==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_497>=7 && LA463_497<=140 && (s=T2S.M_49[LA463_497-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_497);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA463_498 = input.LA(1);

                         
                        int index463_498 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_498==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_498>=7 && LA463_498<=140 && (s=T2S.M_49[LA463_498-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_498);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA463_6 = input.LA(1);

                         
                        int index463_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_6>=4 && LA463_6<=129 && (s=T2S.M_59[LA463_6-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA463_6==RULE_DOUBLE||LA463_6==RULE_HEX_INT||LA463_6==RULE_OCTAL_INT||LA463_6==RULE_SCIENTIFIC_INT||LA463_6==RULE_INT) ) {s = 68;}

                        else if ( (LA463_6==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA463_6==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_6==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                        else if ( (LA463_6==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_6>=Colon && LA463_6<=Semicolon)||LA463_6==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_6);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA463_446 = input.LA(1);

                         
                        int index463_446 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_446==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_446>=7 && LA463_446<=140 && (s=T2S.M_49[LA463_446-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_446);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA463_274 = input.LA(1);

                         
                        int index463_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_274==FullStop) ) {s = 334;}

                        else if ( (LA463_274==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_274>=7 && LA463_274<=140 && (s=T2S.M_51[LA463_274-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_274);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA463_501 = input.LA(1);

                         
                        int index463_501 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_501==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_501>=7 && LA463_501<=140 && (s=T2S.M_49[LA463_501-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_501);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA463_502 = input.LA(1);

                         
                        int index463_502 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_502==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_502>=7 && LA463_502<=140 && (s=T2S.M_49[LA463_502-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_502);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA463_500 = input.LA(1);

                         
                        int index463_500 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_500==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_500>=7 && LA463_500<=140 && (s=T2S.M_49[LA463_500-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_500);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA463_273 = input.LA(1);

                         
                        int index463_273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_273==FullStop) ) {s = 334;}

                        else if ( (LA463_273==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_273>=7 && LA463_273<=140 && (s=T2S.M_51[LA463_273-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_273);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA463_445 = input.LA(1);

                         
                        int index463_445 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_445==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_445>=7 && LA463_445<=140 && (s=T2S.M_49[LA463_445-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_445);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA463_276 = input.LA(1);

                         
                        int index463_276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_276==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_276==FullStop) ) {s = 334;}

                        
                        else if ((LA463_276>=7 && LA463_276<=140 && (s=T2S.M_45[LA463_276-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA463_276==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_276==EqualsSignGreaterThanSign) && (synpred264_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index463_276);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA463_449 = input.LA(1);

                         
                        int index463_449 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_449==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_449>=7 && LA463_449<=140 && (s=T2S.M_49[LA463_449-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_449);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA463_67 = input.LA(1);

                         
                        int index463_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_67==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_67>=Colon && LA463_67<=Semicolon)||LA463_67==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_67);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA463_275 = input.LA(1);

                         
                        int index463_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_275==FullStop) ) {s = 334;}

                        else if ( (LA463_275==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_275>=7 && LA463_275<=140 && (s=T2S.M_51[LA463_275-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_275);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA463_447 = input.LA(1);

                         
                        int index463_447 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_447>=7 && LA463_447<=111 && (s=T2S.M_36[LA463_447-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_447==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_447==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_447==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_447==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_447==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_447);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA463_448 = input.LA(1);

                         
                        int index463_448 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_448==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_448>=7 && LA463_448<=140 && (s=T2S.M_49[LA463_448-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_448);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA463_503 = input.LA(1);

                         
                        int index463_503 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_503>=7 && LA463_503<=111 && (s=T2S.M_36[LA463_503-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_503==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_503==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_503==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_503==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_503==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_503);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA463_2 = input.LA(1);

                         
                        int index463_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_2==Set) ) {s = 11;}

                        else if ( (LA463_2==Private) ) {s = 2;}

                        else if ( (LA463_2==Project) ) {s = 3;}

                        else if ( (LA463_2==Protected) ) {s = 4;}

                        else if ( (LA463_2==Public) ) {s = 5;}

                        else if ( (LA463_2==External) ) {s = 6;}

                        else if ( (LA463_2==Abstract) ) {s = 7;}

                        else if ( (LA463_2==Static) ) {s = 8;}

                        else if ( (LA463_2==Const) ) {s = 9;}

                        else if ( ((LA463_2>=Colon && LA463_2<=Semicolon)||LA463_2==EqualsSign) ) {s = 71;}

                        else if ( (LA463_2==Get) ) {s = 10;}

                        else if ( (LA463_2==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( (LA463_2==RULE_IDENTIFIER) ) {s = 15;}

                        else if ( (LA463_2==Break) ) {s = 16;}

                        else if ( (LA463_2==Case) ) {s = 17;}

                        else if ( (LA463_2==Catch) ) {s = 18;}

                        else if ( (LA463_2==Class) ) {s = 19;}

                        else if ( (LA463_2==Continue) ) {s = 20;}

                        else if ( (LA463_2==Debugger) ) {s = 21;}

                        else if ( (LA463_2==Default) ) {s = 22;}

                        else if ( (LA463_2==Delete) ) {s = 23;}

                        else if ( (LA463_2==Do) ) {s = 24;}

                        else if ( (LA463_2==Else) ) {s = 25;}

                        else if ( (LA463_2==Export) ) {s = 26;}

                        else if ( (LA463_2==Extends) ) {s = 27;}

                        else if ( (LA463_2==Finally) ) {s = 28;}

                        else if ( (LA463_2==For) ) {s = 29;}

                        else if ( (LA463_2==Function) ) {s = 30;}

                        else if ( (LA463_2==If) ) {s = 31;}

                        else if ( (LA463_2==Import) ) {s = 32;}

                        else if ( (LA463_2==In) ) {s = 33;}

                        else if ( (LA463_2==Instanceof) ) {s = 34;}

                        else if ( (LA463_2==New) ) {s = 35;}

                        else if ( (LA463_2==Return) ) {s = 36;}

                        else if ( (LA463_2==Super) ) {s = 37;}

                        else if ( (LA463_2==Switch) ) {s = 38;}

                        else if ( (LA463_2==This_1) ) {s = 39;}

                        else if ( (LA463_2==Throw) ) {s = 40;}

                        else if ( (LA463_2==Try) ) {s = 41;}

                        else if ( (LA463_2==Typeof) ) {s = 42;}

                        else if ( (LA463_2==Var) ) {s = 43;}

                        else if ( (LA463_2==Void) ) {s = 44;}

                        else if ( (LA463_2==While) ) {s = 45;}

                        else if ( (LA463_2==With) ) {s = 46;}

                        else if ( (LA463_2==Yield) ) {s = 47;}

                        else if ( (LA463_2==Null) ) {s = 48;}

                        else if ( (LA463_2==True) ) {s = 49;}

                        else if ( (LA463_2==False) ) {s = 50;}

                        else if ( (LA463_2==Enum) ) {s = 51;}

                        else if ( (LA463_2==Let) ) {s = 52;}

                        else if ( (LA463_2==As) ) {s = 53;}

                        else if ( (LA463_2==From) ) {s = 54;}

                        else if ( (LA463_2==Constructor) ) {s = 55;}

                        else if ( (LA463_2==Of) ) {s = 56;}

                        else if ( (LA463_2==Target) ) {s = 57;}

                        else if ( (LA463_2==Type) ) {s = 58;}

                        else if ( (LA463_2==Union) ) {s = 59;}

                        else if ( (LA463_2==Intersection) ) {s = 60;}

                        else if ( (LA463_2==This) ) {s = 61;}

                        else if ( (LA463_2==Await) ) {s = 62;}

                        else if ( (LA463_2==Promisify) ) {s = 63;}

                        else if ( (LA463_2==Await_1) ) {s = 64;}

                        else if ( (LA463_2==Async) ) {s = 14;}

                        else if ( (LA463_2==Implements) ) {s = 65;}

                        else if ( (LA463_2==Interface) ) {s = 66;}

                        else if ( (LA463_2==RULE_STRING) ) {s = 67;}

                        else if ( (LA463_2==RULE_DOUBLE||LA463_2==RULE_HEX_INT||LA463_2==RULE_OCTAL_INT||LA463_2==RULE_SCIENTIFIC_INT||LA463_2==RULE_INT) ) {s = 68;}

                        else if ( (LA463_2==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA463_2==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_2==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                         
                        input.seek(index463_2);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA463_14 = input.LA(1);

                         
                        int index463_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_14>=4 && LA463_14<=145 && (s=T2S.M_48[LA463_14-(4)])>=0) && (synpred264_InternalN4JSParser())) { /* 65 cases */ }
                        else if ( (LA463_14==RULE_DOUBLE||LA463_14==RULE_HEX_INT||LA463_14==RULE_OCTAL_INT||LA463_14==RULE_SCIENTIFIC_INT||LA463_14==RULE_INT) && (synpred264_InternalN4JSParser())) {s = 270;}

                        else if ( (LA463_14==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 271;}

                        else if ( ((LA463_14>=Colon && LA463_14<=Semicolon)||LA463_14==EqualsSign) ) {s = 71;}

                        else if ( (LA463_14==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_14);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA463_278 = input.LA(1);

                         
                        int index463_278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_278==FullStop) ) {s = 334;}

                        else if ( (LA463_278==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_278>=7 && LA463_278<=140 && (s=T2S.M_51[LA463_278-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_278);
                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA463_451 = input.LA(1);

                         
                        int index463_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_451>=7 && LA463_451<=111 && (s=T2S.M_36[LA463_451-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_451==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_451==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_451==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_451==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_451==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_451);
                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA463_8 = input.LA(1);

                         
                        int index463_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA463_8>=Colon && LA463_8<=Semicolon)||LA463_8==EqualsSign) ) {s = 71;}

                        else if ( (LA463_8==Get) ) {s = 10;}

                        else if ( (LA463_8==Private) ) {s = 2;}

                        else if ( (LA463_8==Project) ) {s = 3;}

                        else if ( (LA463_8==Protected) ) {s = 4;}

                        else if ( (LA463_8==Public) ) {s = 5;}

                        else if ( (LA463_8==External) ) {s = 6;}

                        else if ( (LA463_8==Abstract) ) {s = 7;}

                        else if ( (LA463_8==Static) ) {s = 8;}

                        else if ( (LA463_8==Const) ) {s = 9;}

                        else if ( (LA463_8==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( (LA463_8==RULE_IDENTIFIER) ) {s = 15;}

                        else if ( (LA463_8==Break) ) {s = 16;}

                        else if ( (LA463_8==Case) ) {s = 17;}

                        else if ( (LA463_8==Catch) ) {s = 18;}

                        else if ( (LA463_8==Class) ) {s = 19;}

                        else if ( (LA463_8==Continue) ) {s = 20;}

                        else if ( (LA463_8==Debugger) ) {s = 21;}

                        else if ( (LA463_8==Default) ) {s = 22;}

                        else if ( (LA463_8==Delete) ) {s = 23;}

                        else if ( (LA463_8==Do) ) {s = 24;}

                        else if ( (LA463_8==Else) ) {s = 25;}

                        else if ( (LA463_8==Export) ) {s = 26;}

                        else if ( (LA463_8==Extends) ) {s = 27;}

                        else if ( (LA463_8==Finally) ) {s = 28;}

                        else if ( (LA463_8==For) ) {s = 29;}

                        else if ( (LA463_8==Function) ) {s = 30;}

                        else if ( (LA463_8==If) ) {s = 31;}

                        else if ( (LA463_8==Import) ) {s = 32;}

                        else if ( (LA463_8==In) ) {s = 33;}

                        else if ( (LA463_8==Instanceof) ) {s = 34;}

                        else if ( (LA463_8==New) ) {s = 35;}

                        else if ( (LA463_8==Return) ) {s = 36;}

                        else if ( (LA463_8==Super) ) {s = 37;}

                        else if ( (LA463_8==Switch) ) {s = 38;}

                        else if ( (LA463_8==This_1) ) {s = 39;}

                        else if ( (LA463_8==Throw) ) {s = 40;}

                        else if ( (LA463_8==Try) ) {s = 41;}

                        else if ( (LA463_8==Typeof) ) {s = 42;}

                        else if ( (LA463_8==Var) ) {s = 43;}

                        else if ( (LA463_8==Void) ) {s = 44;}

                        else if ( (LA463_8==While) ) {s = 45;}

                        else if ( (LA463_8==With) ) {s = 46;}

                        else if ( (LA463_8==Yield) ) {s = 47;}

                        else if ( (LA463_8==Null) ) {s = 48;}

                        else if ( (LA463_8==True) ) {s = 49;}

                        else if ( (LA463_8==False) ) {s = 50;}

                        else if ( (LA463_8==Enum) ) {s = 51;}

                        else if ( (LA463_8==Set) ) {s = 11;}

                        else if ( (LA463_8==Let) ) {s = 52;}

                        else if ( (LA463_8==As) ) {s = 53;}

                        else if ( (LA463_8==From) ) {s = 54;}

                        else if ( (LA463_8==Constructor) ) {s = 55;}

                        else if ( (LA463_8==Of) ) {s = 56;}

                        else if ( (LA463_8==Target) ) {s = 57;}

                        else if ( (LA463_8==Type) ) {s = 58;}

                        else if ( (LA463_8==Union) ) {s = 59;}

                        else if ( (LA463_8==Intersection) ) {s = 60;}

                        else if ( (LA463_8==This) ) {s = 61;}

                        else if ( (LA463_8==Await) ) {s = 62;}

                        else if ( (LA463_8==Promisify) ) {s = 63;}

                        else if ( (LA463_8==Await_1) ) {s = 64;}

                        else if ( (LA463_8==Async) ) {s = 14;}

                        else if ( (LA463_8==Implements) ) {s = 65;}

                        else if ( (LA463_8==Interface) ) {s = 66;}

                        else if ( (LA463_8==RULE_STRING) ) {s = 67;}

                        else if ( (LA463_8==RULE_DOUBLE||LA463_8==RULE_HEX_INT||LA463_8==RULE_OCTAL_INT||LA463_8==RULE_SCIENTIFIC_INT||LA463_8==RULE_INT) ) {s = 68;}

                        else if ( (LA463_8==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA463_8==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_8==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                         
                        input.seek(index463_8);
                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA463_452 = input.LA(1);

                         
                        int index463_452 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_452==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_452>=7 && LA463_452<=140 && (s=T2S.M_49[LA463_452-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_452);
                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA463_450 = input.LA(1);

                         
                        int index463_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_450==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_450>=7 && LA463_450<=140 && (s=T2S.M_49[LA463_450-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_450);
                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA463_277 = input.LA(1);

                         
                        int index463_277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_277==FullStop) ) {s = 334;}

                        else if ( (LA463_277==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_277>=7 && LA463_277<=140 && (s=T2S.M_51[LA463_277-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_277);
                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA463_292 = input.LA(1);

                         
                        int index463_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_292==RULE_NO_LINE_TERMINATOR) && (synpred264_InternalN4JSParser())) {s = 436;}

                        else if ( (LA463_292==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 437;}

                        else if ( (LA463_292==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_292==FullStop) ) {s = 334;}

                        
                        else if ((LA463_292>=7 && LA463_292<=140 && (s=T2S.M_225[LA463_292-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA463_292==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_292==Function) && (synpred264_InternalN4JSParser())) {s = 438;}

                        else if ( (LA463_292==EqualsSignGreaterThanSign) && (synpred264_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index463_292);
                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA463_454 = input.LA(1);

                         
                        int index463_454 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_454==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_454>=7 && LA463_454<=140 && (s=T2S.M_49[LA463_454-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_454);
                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA463_9 = input.LA(1);

                         
                        int index463_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_9>=4 && LA463_9<=129 && (s=T2S.M_59[LA463_9-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA463_9==RULE_DOUBLE||LA463_9==RULE_HEX_INT||LA463_9==RULE_OCTAL_INT||LA463_9==RULE_SCIENTIFIC_INT||LA463_9==RULE_INT) ) {s = 68;}

                        else if ( (LA463_9==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA463_9==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_9==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                        else if ( ((LA463_9>=Colon && LA463_9<=Semicolon)||LA463_9==EqualsSign) ) {s = 71;}

                        else if ( (LA463_9==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_9);
                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA463_7 = input.LA(1);

                         
                        int index463_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_7>=4 && LA463_7<=129 && (s=T2S.M_59[LA463_7-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA463_7==RULE_DOUBLE||LA463_7==RULE_HEX_INT||LA463_7==RULE_OCTAL_INT||LA463_7==RULE_SCIENTIFIC_INT||LA463_7==RULE_INT) ) {s = 68;}

                        else if ( (LA463_7==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA463_7==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_7==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                        else if ( (LA463_7==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        else if ( ((LA463_7>=Colon && LA463_7<=Semicolon)||LA463_7==EqualsSign) ) {s = 71;}

                         
                        input.seek(index463_7);
                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA463_280 = input.LA(1);

                         
                        int index463_280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_280==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_280==FullStop) ) {s = 334;}

                        
                        else if ((LA463_280>=7 && LA463_280<=140 && (s=T2S.M_45[LA463_280-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA463_280==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_280==EqualsSignGreaterThanSign) && (synpred264_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index463_280);
                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA463_334 = input.LA(1);

                         
                        int index463_334 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_334==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 440;}

                        
                        else if ((LA463_334>=4 && LA463_334<=126 && (s=T2S.M_230[LA463_334-(4)])>=0)) { /* 64 cases */ }
                        input.seek(index463_334);
                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA463_279 = input.LA(1);

                         
                        int index463_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_279==FullStop) ) {s = 334;}

                        else if ( (LA463_279==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_279>=7 && LA463_279<=140 && (s=T2S.M_51[LA463_279-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_279);
                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA463_441 = input.LA(1);

                         
                        int index463_441 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_441==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_441>=7 && LA463_441<=140 && (s=T2S.M_49[LA463_441-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_441);
                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA463_453 = input.LA(1);

                         
                        int index463_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_453==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_453>=7 && LA463_453<=140 && (s=T2S.M_49[LA463_453-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_453);
                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA463_282 = input.LA(1);

                         
                        int index463_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_282==FullStop) ) {s = 334;}

                        else if ( (LA463_282==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_282>=7 && LA463_282<=140 && (s=T2S.M_51[LA463_282-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_282);
                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA463_457 = input.LA(1);

                         
                        int index463_457 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_457==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_457>=7 && LA463_457<=140 && (s=T2S.M_49[LA463_457-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_457);
                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA463_272 = input.LA(1);

                         
                        int index463_272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_272==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_272==FullStop) ) {s = 334;}

                        
                        else if ((LA463_272>=7 && LA463_272<=140 && (s=T2S.M_45[LA463_272-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA463_272==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_272==EqualsSignGreaterThanSign) && (synpred264_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index463_272);
                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA463_5 = input.LA(1);

                         
                        int index463_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_5==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                        
                        else if ((LA463_5>=10 && LA463_5<=92 && (s=T2S.M_237[LA463_5-(10)])>=0)) { /* 10 cases */ }
                        else if ( ((LA463_5>=Colon && LA463_5<=Semicolon)||LA463_5==EqualsSign) ) {s = 71;}

                        else if ( (LA463_5==RULE_IDENTIFIER) ) {s = 15;}

                        else if ( (LA463_5==Break) ) {s = 16;}

                        else if ( (LA463_5==Case) ) {s = 17;}

                        else if ( (LA463_5==Catch) ) {s = 18;}

                        else if ( (LA463_5==Class) ) {s = 19;}

                        else if ( (LA463_5==Continue) ) {s = 20;}

                        else if ( (LA463_5==Debugger) ) {s = 21;}

                        else if ( (LA463_5==Default) ) {s = 22;}

                        else if ( (LA463_5==Delete) ) {s = 23;}

                        else if ( (LA463_5==Do) ) {s = 24;}

                        else if ( (LA463_5==Else) ) {s = 25;}

                        else if ( (LA463_5==Export) ) {s = 26;}

                        else if ( (LA463_5==Extends) ) {s = 27;}

                        else if ( (LA463_5==Finally) ) {s = 28;}

                        else if ( (LA463_5==For) ) {s = 29;}

                        else if ( (LA463_5==Function) ) {s = 30;}

                        else if ( (LA463_5==If) ) {s = 31;}

                        else if ( (LA463_5==Import) ) {s = 32;}

                        else if ( (LA463_5==In) ) {s = 33;}

                        else if ( (LA463_5==Instanceof) ) {s = 34;}

                        else if ( (LA463_5==New) ) {s = 35;}

                        else if ( (LA463_5==Return) ) {s = 36;}

                        else if ( (LA463_5==Super) ) {s = 37;}

                        else if ( (LA463_5==Switch) ) {s = 38;}

                        else if ( (LA463_5==This_1) ) {s = 39;}

                        else if ( (LA463_5==Throw) ) {s = 40;}

                        else if ( (LA463_5==Try) ) {s = 41;}

                        else if ( (LA463_5==Typeof) ) {s = 42;}

                        else if ( (LA463_5==Var) ) {s = 43;}

                        else if ( (LA463_5==Void) ) {s = 44;}

                        else if ( (LA463_5==While) ) {s = 45;}

                        else if ( (LA463_5==With) ) {s = 46;}

                        else if ( (LA463_5==Yield) ) {s = 47;}

                        else if ( (LA463_5==Null) ) {s = 48;}

                        else if ( (LA463_5==True) ) {s = 49;}

                        else if ( (LA463_5==False) ) {s = 50;}

                        else if ( (LA463_5==Enum) ) {s = 51;}

                        else if ( (LA463_5==Set) ) {s = 11;}

                        else if ( (LA463_5==Let) ) {s = 52;}

                        else if ( (LA463_5==As) ) {s = 53;}

                        else if ( (LA463_5==From) ) {s = 54;}

                        else if ( (LA463_5==Constructor) ) {s = 55;}

                        else if ( (LA463_5==Of) ) {s = 56;}

                        else if ( (LA463_5==Target) ) {s = 57;}

                        else if ( (LA463_5==Type) ) {s = 58;}

                        else if ( (LA463_5==Union) ) {s = 59;}

                        else if ( (LA463_5==Intersection) ) {s = 60;}

                        else if ( (LA463_5==This) ) {s = 61;}

                        else if ( (LA463_5==Await) ) {s = 62;}

                        else if ( (LA463_5==Promisify) ) {s = 63;}

                        else if ( (LA463_5==Await_1) ) {s = 64;}

                        else if ( (LA463_5==Async) ) {s = 14;}

                        else if ( (LA463_5==Implements) ) {s = 65;}

                        else if ( (LA463_5==Interface) ) {s = 66;}

                        else if ( (LA463_5==RULE_STRING) ) {s = 67;}

                        else if ( (LA463_5==RULE_DOUBLE||LA463_5==RULE_HEX_INT||LA463_5==RULE_OCTAL_INT||LA463_5==RULE_SCIENTIFIC_INT||LA463_5==RULE_INT) ) {s = 68;}

                        else if ( (LA463_5==LeftSquareBracket) ) {s = 69;}

                        else if ( (LA463_5==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_5==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                         
                        input.seek(index463_5);
                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA463_281 = input.LA(1);

                         
                        int index463_281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_281==FullStop) ) {s = 334;}

                        else if ( (LA463_281==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_281>=7 && LA463_281<=140 && (s=T2S.M_51[LA463_281-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_281);
                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA463_455 = input.LA(1);

                         
                        int index463_455 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_455>=7 && LA463_455<=111 && (s=T2S.M_36[LA463_455-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_455==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_455==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_455==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_455==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_455==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_455);
                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA463_456 = input.LA(1);

                         
                        int index463_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_456==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_456>=7 && LA463_456<=140 && (s=T2S.M_49[LA463_456-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_456);
                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA463_284 = input.LA(1);

                         
                        int index463_284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_284==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_284==FullStop) ) {s = 334;}

                        
                        else if ((LA463_284>=7 && LA463_284<=140 && (s=T2S.M_45[LA463_284-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA463_284==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_284==EqualsSignGreaterThanSign) && (synpred264_InternalN4JSParser())) {s = 374;}

                         
                        input.seek(index463_284);
                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA463_459 = input.LA(1);

                         
                        int index463_459 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_459>=7 && LA463_459<=111 && (s=T2S.M_36[LA463_459-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA463_459==RightSquareBracket) ) {s = 373;}

                        else if ( (LA463_459==LeftSquareBracket) && (synpred264_InternalN4JSParser())) {s = 333;}

                        else if ( (LA463_459==FullStop) && (synpred264_InternalN4JSParser())) {s = 439;}

                        else if ( (LA463_459==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred264_InternalN4JSParser())) {s = 335;}

                        else if ( (LA463_459==RULE_TEMPLATE_HEAD) && (synpred264_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index463_459);
                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA463_460 = input.LA(1);

                         
                        int index463_460 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_460==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_460>=7 && LA463_460<=140 && (s=T2S.M_49[LA463_460-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_460);
                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA463_4 = input.LA(1);

                         
                        int index463_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA463_4>=4 && LA463_4<=129 && (s=T2S.M_59[LA463_4-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA463_4==RULE_DOUBLE||LA463_4==RULE_HEX_INT||LA463_4==RULE_OCTAL_INT||LA463_4==RULE_SCIENTIFIC_INT||LA463_4==RULE_INT) ) {s = 68;}

                        else if ( (LA463_4==LeftSquareBracket) ) {s = 69;}

                        else if ( ((LA463_4>=Colon && LA463_4<=Semicolon)||LA463_4==EqualsSign) ) {s = 71;}

                        else if ( (LA463_4==LessThanSign) && (synpred264_InternalN4JSParser())) {s = 12;}

                        else if ( (LA463_4==Asterisk) && (synpred264_InternalN4JSParser())) {s = 13;}

                        else if ( (LA463_4==LeftParenthesis) && (synpred264_InternalN4JSParser())) {s = 72;}

                         
                        input.seek(index463_4);
                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA463_458 = input.LA(1);

                         
                        int index463_458 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_458==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_458>=7 && LA463_458<=140 && (s=T2S.M_49[LA463_458-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index463_458);
                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA463_283 = input.LA(1);

                         
                        int index463_283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA463_283==FullStop) ) {s = 334;}

                        else if ( (LA463_283==RightSquareBracket) ) {s = 373;}

                        
                        else if ((LA463_283>=7 && LA463_283<=140 && (s=T2S.M_51[LA463_283-(7)])>=0) && (synpred264_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index463_283);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 463, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_280s = "\u01f6\uffff";
    static final String dfa_281s = "\13\4\2\uffff\1\4\66\134\1\4\u00c9\uffff\24\7\1\4\7\7\41\uffff\1\4\1\134\151\uffff\77\7\1\uffff";
    static final String dfa_282s = "\13\u0095\2\uffff\1\u0095\66\147\1\u0095\u00c9\uffff\24\u008c\1\u0095\1\u0091\6\u008c\41\uffff\1\176\1\147\151\uffff\77\u008c\1\uffff";
    static final String dfa_283s = "\13\uffff\2\3\70\uffff\1\4\1\3\102\1\102\2\103\3\34\uffff\41\3\2\uffff\151\3\77\uffff\1\3";
    static final String dfa_284s = "\1\23\1\63\1\7\1\106\1\107\1\40\1\17\1\55\1\25\1\64\1\145\2\uffff\1\u0091\1\71\1\30\1\32\1\36\1\41\1\44\1\51\1\53\1\57\1\61\1\62\1\67\1\73\1\75\1\77\1\102\1\104\1\111\1\115\1\120\1\125\1\131\1\133\1\135\1\140\1\144\1\151\1\153\1\157\1\162\1\166\1\170\1\174\1\176\1\u0080\1\u0083\1\u0086\1\47\1\66\1\72\1\74\1\76\1\101\1\103\1\110\1\114\1\116\1\123\1\130\1\132\1\136\1\143\1\u0096\1\52\1\u0093\u00c9\uffff\1\u0084\1\142\1\124\1\150\1\137\1\165\1\156\1\177\1\173\1\u008a\1\u0085\1\u0092\1\u008e\1\u0097\1\u0095\1\u009f\1\u009b\1\5\1\3\1\15\1\126\1\70\1\22\1\35\1\27\1\50\1\42\1\33\41\uffff\1\34\1\11\151\uffff\1\31\1\u0099\1\u009a\1\6\1\0\1\13\1\14\1\12\1\24\1\20\1\21\1\37\1\26\1\45\1\46\1\43\1\60\1\54\1\56\1\100\1\65\1\112\1\113\1\105\1\127\1\121\1\122\1\152\1\134\1\163\1\164\1\160\1\175\1\171\1\172\1\u008b\1\u0082\1\u0090\1\117\1\146\1\147\1\141\1\161\1\154\1\155\1\u0081\1\167\1\u0088\1\u0089\1\u0087\1\u008f\1\u008c\1\u008d\1\u0098\1\u0094\1\u009d\1\u009e\1\u009c\1\4\1\1\1\2\1\16\1\10\1\uffff}>";
    static final String[] dfa_285s = {
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\7\uffff\1\14\7\uffff\1\13\4\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\173\1\166\1\u0081\1\133\1\176\1\u0082\1\u0084\1\162\1\115\1\116\1\161\1\127\1\117\1\124\1\125\1\u0083\1\160\1\120\1\123\1\131\1\u0085\1\135\1\163\1\137\1\170\1\143\1\175\1\u0080\1\177\1\110\1\112\1\113\1\114\1\153\1\136\1\141\1\172\1\146\1\150\1\174\1\111\1\122\1\154\1\165\1\151\1\140\1\152\1\171\1\145\1\147\4\uffff\1\126\1\155\1\157\1\134\1\156\1\142\1\144\21\uffff\1\164\1\121\1\130\1\132\1\167\5\uffff\1\106\7\uffff\2\105\1\uffff\1\105\3\uffff\1\u0088\11\uffff\1\u0087\1\uffff\1\u0087\1\uffff\1\u0087\2\uffff\1\u0087\1\uffff\1\107\2\uffff\1\u0086\23\uffff\1\u0087",
            "\1\u00bd\1\u00b8\1\u00c3\1\u009d\1\u00c0\1\u00c4\1\u00c6\1\u00b4\1\u008f\1\u0090\1\u00b3\1\u0099\1\u0091\1\u0096\1\u0097\1\u00c5\1\u00b2\1\u0092\1\u0095\1\u009b\1\u00c7\1\u009f\1\u00b5\1\u00a1\1\u00ba\1\u00a5\1\u00bf\1\u00c2\1\u00c1\1\u008a\1\u008c\1\u008d\1\u008e\1\u00ad\1\u00a0\1\u00a3\1\u00bc\1\u00a8\1\u00aa\1\u00be\1\u008b\1\u0094\1\u00ae\1\u00b7\1\u00ab\1\u00a2\1\u00ac\1\u00bb\1\u00a7\1\u00a9\4\uffff\1\u0098\1\u00af\1\u00b1\1\u009e\1\u00b0\1\u00a4\1\u00a6\21\uffff\1\u00b6\1\u0093\1\u009a\1\u009c\1\u00b9\5\uffff\1\106\7\uffff\2\105\1\uffff\1\105\3\uffff\1\u00ca\11\uffff\1\u00c9\1\uffff\1\u00c9\1\uffff\1\u00c9\2\uffff\1\u00c9\1\uffff\1\u0089\2\uffff\1\u00c8\23\uffff\1\u00c9",
            "",
            "",
            "\1\u0100\1\u00fb\1\u0106\1\u00e0\1\u0103\1\u0107\1\u0109\1\u00f7\1\u00d2\1\u00d3\1\u00f6\1\u00dc\1\u00d4\1\u00d9\1\u00da\1\u0108\1\u00f5\1\u00d5\1\u00d8\1\u00de\1\u010a\1\u00e2\1\u00f8\1\u00e4\1\u00fd\1\u00e8\1\u0102\1\u0105\1\u0104\1\u00cd\1\u00cf\1\u00d0\1\u00d1\1\u00f0\1\u00e3\1\u00e6\1\u00ff\1\u00eb\1\u00ed\1\u0101\1\u00ce\1\u00d7\1\u00f1\1\u00fa\1\u00ee\1\u00e5\1\u00ef\1\u00fe\1\u00ea\1\u00ec\4\uffff\1\u00db\1\u00f2\1\u00f4\1\u00e1\1\u00f3\1\u00e7\1\u00e9\21\uffff\1\u00f9\1\u00d6\1\u00dd\1\u00df\1\u00fc\5\uffff\1\106\7\uffff\2\105\1\uffff\1\105\3\uffff\1\u010d\11\uffff\1\u010c\1\uffff\1\u010c\1\uffff\1\u010c\2\uffff\1\u010c\1\uffff\1\u00cc\2\uffff\1\u010b\17\uffff\1\u00cb\3\uffff\1\u010c",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\u011e\1\u0119\1\u0124\1\uffff\1\u0121\1\u0125\1\u0127\1\u0115\2\uffff\1\u0114\1\u013e\3\uffff\1\u0126\1\u0113\1\u0142\2\uffff\1\u0128\1\uffff\1\u0116\1\uffff\1\u011b\1\u0144\1\u0120\1\u0123\1\u0122\2\uffff\1\u013f\1\uffff\1\u0138\1\u012e\1\uffff\1\u011d\1\uffff\1\u010f\1\u011f\3\uffff\1\u0118\1\u0139\1\u012d\1\u0137\1\u011c\1\u0143\6\uffff\1\u0110\1\u0112\1\u012c\1\u0111\7\uffff\1\u0145\1\uffff\1\u0146\1\uffff\1\u013b\7\uffff\1\u0117\3\uffff\1\u011a\2\uffff\1\u014a\2\uffff\1\u012b\2\uffff\1\u0147\1\uffff\1\u0148\1\uffff\1\u013a\2\uffff\1\u012f\3\uffff\1\u012a\1\u013c\2\uffff\1\u013d\2\uffff\1\u0149\3\uffff\1\u0130\1\uffff\1\u0135\1\u0132\1\u0133\1\u0134\1\uffff\1\u0136\1\uffff\1\u010e\2\uffff\1\u0129\11\uffff\1\u0141\1\u0140\10\uffff\1\u0131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u0189\1\u0184\1\u018d\1\u015f\1\u018c\1\u018e\1\u0190\1\u0180\2\uffff\1\u017f\1\u01a5\3\uffff\1\u018f\1\u017e\1\u01a9\2\uffff\1\u0191\1\uffff\1\u0181\1\uffff\1\u0186\1\u01ab\1\u018b\1\u0178\1\u0175\2\uffff\1\u01a6\1\uffff\1\u019e\1\u0194\1\uffff\1\u0188\1\uffff\1\u017a\1\u018a\3\uffff\1\u0183\1\u01a0\1\u0193\1\u019d\1\u0187\1\u01aa\1\uffff\1\u0162\1\uffff\1\u0171\1\u0161\1\uffff\1\u017b\1\u017d\1\u0192\1\u017c\2\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u01ac\1\u016f\1\u01ad\1\u0170\1\u01a2\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0182\2\uffff\1\u0160\1\u0185\1\u0174\1\u0169\1\u01b1\1\u0157\1\u0165\1\u0177\1\uffff\1\u0155\1\u01ae\1\uffff\1\u01af\1\u014b\1\u01a1\2\uffff\1\u0195\1\u016b\1\u015a\1\u016a\1\u0176\1\u01a3\1\u014c\1\u0166\1\u01a4\1\u0167\1\uffff\1\u01b0\3\uffff\1\u0196\1\uffff\1\u019b\1\u0198\1\u0199\1\u019a\1\uffff\1\u019c\1\uffff\1\u0179\2\uffff\1\u019f\11\uffff\1\u01a8\1\u01a7\10\uffff\1\u0197",
            "\1\u015f\7\uffff\1\u01b3\46\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u01b4\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f\4\uffff\1\u01b2",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u01ea\1\u01e5\1\u01f0\1\u01ca\1\u01ed\1\u01f1\1\u01f3\1\u01e1\1\u01bc\1\u01bd\1\u01e0\1\u01c6\1\u01be\1\u01c3\1\u01c4\1\u01f2\1\u01df\1\u01bf\1\u01c2\1\u01c8\1\u01f4\1\u01cc\1\u01e2\1\u01ce\1\u01e7\1\u01d2\1\u01ec\1\u01ef\1\u01ee\1\u01b7\1\u01b9\1\u01ba\1\u01bb\1\u01da\1\u01cd\1\u01d0\1\u01e9\1\u01d5\1\u01d7\1\u01eb\1\u01b8\1\u01c1\1\u01db\1\u01e4\1\u01d8\1\u01cf\1\u01d9\1\u01e8\1\u01d4\1\u01d6\4\uffff\1\u01c5\1\u01dc\1\u01de\1\u01cb\1\u01dd\1\u01d1\1\u01d3\21\uffff\1\u01e3\1\u01c0\1\u01c7\1\u01c9\1\u01e6\17\uffff\1\u01f5\27\uffff\1\u01b6",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            ""
    };

    static final short[] dfa_280 = DFA.unpackEncodedString(dfa_280s);
    static final char[] dfa_281 = DFA.unpackEncodedStringToUnsignedChars(dfa_281s);
    static final char[] dfa_282 = DFA.unpackEncodedStringToUnsignedChars(dfa_282s);
    static final short[] dfa_283 = DFA.unpackEncodedString(dfa_283s);
    static final short[] dfa_284 = DFA.unpackEncodedString(dfa_284s);
    static final short[][] dfa_285 = unpackEncodedStringArray(dfa_285s);

    class DFA474 extends DFA {

        public DFA474(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 474;
            this.eot = dfa_280;
            this.eof = dfa_280;
            this.min = dfa_281;
            this.max = dfa_282;
            this.accept = dfa_283;
            this.special = dfa_284;
            this.transition = dfa_285;
        }
        public String getDescription() {
            return "12589:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* ruleGetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= ruleGetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= ruleBlock ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=>LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3= ruleLiteralOrComputedPropertyName ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= ruleFormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= ruleBlock ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) ruleLiteralOrComputedPropertyName LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak ruleLiteralOrComputedPropertyName LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0= Asterisk ) ) LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1= ruleLiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0= ruleAsyncNoTrailingLineBreak LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1= ruleLiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= ruleFieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA474_442 = input.LA(1);

                         
                        int index474_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_442>=7 && LA474_442<=111 && (s=T2S.M_36[LA474_442-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_442==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_442==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_442==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_442==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_442==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_442);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA474_497 = input.LA(1);

                         
                        int index474_497 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_497>=7 && LA474_497<=111 && (s=T2S.M_36[LA474_497-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_497==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_497==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_497==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_497==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_497==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_497);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA474_498 = input.LA(1);

                         
                        int index474_498 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_498>=7 && LA474_498<=111 && (s=T2S.M_36[LA474_498-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_498==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_498==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_498==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_498==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_498==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_498);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA474_288 = input.LA(1);

                         
                        int index474_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_288==FullStop) ) {s = 331;}

                        else if ( (LA474_288==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_288>=7 && LA474_288<=140 && (s=T2S.M_250[LA474_288-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index474_288);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA474_496 = input.LA(1);

                         
                        int index474_496 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_496>=7 && LA474_496<=111 && (s=T2S.M_36[LA474_496-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_496==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_496==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_496==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_496==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_496==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_496);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA474_287 = input.LA(1);

                         
                        int index474_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_287==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                        else if ( (LA474_287==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_287==FullStop) ) {s = 331;}

                        
                        else if ((LA474_287>=7 && LA474_287<=140 && (s=T2S.M_252[LA474_287-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA474_287==RightSquareBracket) ) {s = 332;}

                         
                        input.seek(index474_287);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA474_441 = input.LA(1);

                         
                        int index474_441 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_441>=7 && LA474_441<=111 && (s=T2S.M_36[LA474_441-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_441==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_441==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_441==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_441==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_441==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_441);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA474_2 = input.LA(1);

                         
                        int index474_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_2==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        
                        else if ((LA474_2>=10 && LA474_2<=92 && (s=T2S.M_254[LA474_2-(10)])>=0)) { /* 10 cases */ }
                        else if ( ((LA474_2>=Colon && LA474_2<=Semicolon)||LA474_2==EqualsSign) ) {s = 69;}

                        else if ( (LA474_2==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA474_2==Break) ) {s = 15;}

                        else if ( (LA474_2==Case) ) {s = 16;}

                        else if ( (LA474_2==Catch) ) {s = 17;}

                        else if ( (LA474_2==Class) ) {s = 18;}

                        else if ( (LA474_2==Continue) ) {s = 19;}

                        else if ( (LA474_2==Debugger) ) {s = 20;}

                        else if ( (LA474_2==Default) ) {s = 21;}

                        else if ( (LA474_2==Delete) ) {s = 22;}

                        else if ( (LA474_2==Do) ) {s = 23;}

                        else if ( (LA474_2==Else) ) {s = 24;}

                        else if ( (LA474_2==Export) ) {s = 25;}

                        else if ( (LA474_2==Extends) ) {s = 26;}

                        else if ( (LA474_2==Finally) ) {s = 27;}

                        else if ( (LA474_2==For) ) {s = 28;}

                        else if ( (LA474_2==Function) ) {s = 29;}

                        else if ( (LA474_2==If) ) {s = 30;}

                        else if ( (LA474_2==Import) ) {s = 31;}

                        else if ( (LA474_2==In) ) {s = 32;}

                        else if ( (LA474_2==Instanceof) ) {s = 33;}

                        else if ( (LA474_2==New) ) {s = 34;}

                        else if ( (LA474_2==Return) ) {s = 35;}

                        else if ( (LA474_2==Super) ) {s = 36;}

                        else if ( (LA474_2==Switch) ) {s = 37;}

                        else if ( (LA474_2==This_1) ) {s = 38;}

                        else if ( (LA474_2==Throw) ) {s = 39;}

                        else if ( (LA474_2==Try) ) {s = 40;}

                        else if ( (LA474_2==Typeof) ) {s = 41;}

                        else if ( (LA474_2==Var) ) {s = 42;}

                        else if ( (LA474_2==Void) ) {s = 43;}

                        else if ( (LA474_2==While) ) {s = 44;}

                        else if ( (LA474_2==With) ) {s = 45;}

                        else if ( (LA474_2==Yield) ) {s = 46;}

                        else if ( (LA474_2==Null) ) {s = 47;}

                        else if ( (LA474_2==True) ) {s = 48;}

                        else if ( (LA474_2==False) ) {s = 49;}

                        else if ( (LA474_2==Enum) ) {s = 50;}

                        else if ( (LA474_2==Get) ) {s = 9;}

                        else if ( (LA474_2==Let) ) {s = 51;}

                        else if ( (LA474_2==As) ) {s = 52;}

                        else if ( (LA474_2==From) ) {s = 53;}

                        else if ( (LA474_2==Constructor) ) {s = 54;}

                        else if ( (LA474_2==Of) ) {s = 55;}

                        else if ( (LA474_2==Target) ) {s = 56;}

                        else if ( (LA474_2==Type) ) {s = 57;}

                        else if ( (LA474_2==Union) ) {s = 58;}

                        else if ( (LA474_2==Intersection) ) {s = 59;}

                        else if ( (LA474_2==This) ) {s = 60;}

                        else if ( (LA474_2==Await) ) {s = 61;}

                        else if ( (LA474_2==Promisify) ) {s = 62;}

                        else if ( (LA474_2==Await_1) ) {s = 63;}

                        else if ( (LA474_2==Async) ) {s = 13;}

                        else if ( (LA474_2==Implements) ) {s = 64;}

                        else if ( (LA474_2==Interface) ) {s = 65;}

                        else if ( (LA474_2==RULE_STRING) ) {s = 66;}

                        else if ( (LA474_2==RULE_DOUBLE||LA474_2==RULE_HEX_INT||LA474_2==RULE_OCTAL_INT||LA474_2==RULE_SCIENTIFIC_INT||LA474_2==RULE_INT) ) {s = 67;}

                        else if ( (LA474_2==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA474_2==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_2==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index474_2);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA474_500 = input.LA(1);

                         
                        int index474_500 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_500>=7 && LA474_500<=111 && (s=T2S.M_36[LA474_500-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_500==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_500==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_500==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_500==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_500==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_500);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA474_332 = input.LA(1);

                         
                        int index474_332 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_332==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_332>=Colon && LA474_332<=Semicolon)||LA474_332==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_332);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA474_445 = input.LA(1);

                         
                        int index474_445 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_445>=7 && LA474_445<=111 && (s=T2S.M_36[LA474_445-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_445==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_445==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_445==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_445==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_445==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_445);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA474_443 = input.LA(1);

                         
                        int index474_443 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_443==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_443>=7 && LA474_443<=140 && (s=T2S.M_257[LA474_443-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_443);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA474_444 = input.LA(1);

                         
                        int index474_444 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_444>=7 && LA474_444<=111 && (s=T2S.M_36[LA474_444-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_444==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_444==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_444==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_444==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_444==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_444);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA474_289 = input.LA(1);

                         
                        int index474_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_289==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_289==FullStop) ) {s = 331;}

                        
                        else if ((LA474_289>=7 && LA474_289<=140 && (s=T2S.M_45[LA474_289-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_289==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_289==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_289);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA474_499 = input.LA(1);

                         
                        int index474_499 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_499==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_499>=7 && LA474_499<=140 && (s=T2S.M_257[LA474_499-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_499);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA474_6 = input.LA(1);

                         
                        int index474_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_6==Get) ) {s = 9;}

                        else if ( (LA474_6==Private) ) {s = 1;}

                        else if ( (LA474_6==Project) ) {s = 2;}

                        else if ( (LA474_6==Protected) ) {s = 3;}

                        else if ( (LA474_6==Public) ) {s = 4;}

                        else if ( (LA474_6==External) ) {s = 5;}

                        else if ( (LA474_6==Abstract) ) {s = 6;}

                        else if ( (LA474_6==Static) ) {s = 7;}

                        else if ( (LA474_6==Const) ) {s = 8;}

                        else if ( (LA474_6==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_6==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA474_6>=4 && LA474_6<=129 && (s=T2S.M_261[LA474_6-(4)])>=0)) { /* 55 cases */ }
                        else if ( (LA474_6==RULE_DOUBLE||LA474_6==RULE_HEX_INT||LA474_6==RULE_OCTAL_INT||LA474_6==RULE_SCIENTIFIC_INT||LA474_6==RULE_INT) ) {s = 67;}

                        else if ( (LA474_6==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA474_6==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_6>=Colon && LA474_6<=Semicolon)||LA474_6==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_6);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA474_447 = input.LA(1);

                         
                        int index474_447 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_447==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_447>=7 && LA474_447<=140 && (s=T2S.M_257[LA474_447-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_447);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA474_448 = input.LA(1);

                         
                        int index474_448 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_448>=7 && LA474_448<=111 && (s=T2S.M_36[LA474_448-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_448==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_448==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_448==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_448==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_448==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_448);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA474_292 = input.LA(1);

                         
                        int index474_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_292==FullStop) ) {s = 331;}

                        else if ( (LA474_292==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_292>=7 && LA474_292<=140 && (s=T2S.M_250[LA474_292-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index474_292);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA474_0 = input.LA(1);

                         
                        int index474_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_0>=10 && LA474_0<=62 && (s=T2S.M_265[LA474_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA474_0==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_0==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA474_0>=4 && LA474_0<=129 && (s=T2S.M_266[LA474_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA474_0==RULE_DOUBLE||LA474_0==RULE_HEX_INT||LA474_0==RULE_OCTAL_INT||LA474_0==RULE_SCIENTIFIC_INT||LA474_0==RULE_INT) ) {s = 67;}

                        else if ( (LA474_0==LeftSquareBracket) ) {s = 68;}

                         
                        input.seek(index474_0);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA474_446 = input.LA(1);

                         
                        int index474_446 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_446>=7 && LA474_446<=111 && (s=T2S.M_36[LA474_446-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_446==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_446==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_446==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_446==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_446==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_446);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA474_8 = input.LA(1);

                         
                        int index474_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_8==Set) ) {s = 10;}

                        else if ( (LA474_8==Private) ) {s = 1;}

                        else if ( (LA474_8==Project) ) {s = 2;}

                        else if ( (LA474_8==Protected) ) {s = 3;}

                        else if ( (LA474_8==Public) ) {s = 4;}

                        else if ( (LA474_8==External) ) {s = 5;}

                        else if ( (LA474_8==Abstract) ) {s = 6;}

                        else if ( (LA474_8==Static) ) {s = 7;}

                        else if ( (LA474_8==Const) ) {s = 8;}

                        else if ( (LA474_8==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        
                        else if ((LA474_8>=4 && LA474_8<=129 && (s=T2S.M_268[LA474_8-(4)])>=0)) { /* 56 cases */ }
                        else if ( (LA474_8==RULE_DOUBLE||LA474_8==RULE_HEX_INT||LA474_8==RULE_OCTAL_INT||LA474_8==RULE_SCIENTIFIC_INT||LA474_8==RULE_INT) ) {s = 67;}

                        else if ( (LA474_8==LeftSquareBracket) ) {s = 68;}

                        else if ( ((LA474_8>=Colon && LA474_8<=Semicolon)||LA474_8==EqualsSign) ) {s = 69;}

                        else if ( (LA474_8==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_8==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index474_8);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA474_450 = input.LA(1);

                         
                        int index474_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_450>=7 && LA474_450<=111 && (s=T2S.M_36[LA474_450-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_450==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_450==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_450==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_450==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_450==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_450);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA474_294 = input.LA(1);

                         
                        int index474_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_294==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_294==FullStop) ) {s = 331;}

                        
                        else if ((LA474_294>=7 && LA474_294<=140 && (s=T2S.M_45[LA474_294-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_294==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_294==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_294);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA474_15 = input.LA(1);

                         
                        int index474_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_15==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_15>=Colon && LA474_15<=Semicolon)||LA474_15==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_15);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA474_438 = input.LA(1);

                         
                        int index474_438 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_438>=7 && LA474_438<=111 && (s=T2S.M_36[LA474_438-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_438==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_438==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_438==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_438==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_438==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_438);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA474_16 = input.LA(1);

                         
                        int index474_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_16==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_16>=Colon && LA474_16<=Semicolon)||LA474_16==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_16);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA474_297 = input.LA(1);

                         
                        int index474_297 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_297>=7 && LA474_297<=140 && (s=T2S.M_272[LA474_297-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        else if ( (LA474_297==RightSquareBracket) ) {s = 332;}

                         
                        input.seek(index474_297);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA474_331 = input.LA(1);

                         
                        int index474_331 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_331>=4 && LA474_331<=126 && (s=T2S.M_273[LA474_331-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA474_331==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 501;}

                         
                        input.seek(index474_331);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA474_293 = input.LA(1);

                         
                        int index474_293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_293==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_293==FullStop) ) {s = 331;}

                        
                        else if ((LA474_293>=7 && LA474_293<=140 && (s=T2S.M_45[LA474_293-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_293==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_293==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_293);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA474_17 = input.LA(1);

                         
                        int index474_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_17>=Colon && LA474_17<=Semicolon)||LA474_17==EqualsSign) ) {s = 69;}

                        else if ( (LA474_17==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_17);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA474_449 = input.LA(1);

                         
                        int index474_449 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_449>=7 && LA474_449<=111 && (s=T2S.M_36[LA474_449-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_449==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_449==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_449==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_449==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_449==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_449);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA474_5 = input.LA(1);

                         
                        int index474_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_5>=4 && LA474_5<=129 && (s=T2S.M_276[LA474_5-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA474_5==RULE_DOUBLE||LA474_5==RULE_HEX_INT||LA474_5==RULE_OCTAL_INT||LA474_5==RULE_SCIENTIFIC_INT||LA474_5==RULE_INT) ) {s = 67;}

                        else if ( (LA474_5==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA474_5==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_5>=Colon && LA474_5<=Semicolon)||LA474_5==EqualsSign) ) {s = 69;}

                        else if ( (LA474_5==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_5==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                         
                        input.seek(index474_5);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA474_18 = input.LA(1);

                         
                        int index474_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_18==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_18>=Colon && LA474_18<=Semicolon)||LA474_18==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_18);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA474_296 = input.LA(1);

                         
                        int index474_296 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_296==FullStop) ) {s = 331;}

                        else if ( (LA474_296==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_296>=7 && LA474_296<=140 && (s=T2S.M_250[LA474_296-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index474_296);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA474_453 = input.LA(1);

                         
                        int index474_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_453>=7 && LA474_453<=111 && (s=T2S.M_36[LA474_453-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_453==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_453==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_453==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_453==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_453==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_453);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA474_19 = input.LA(1);

                         
                        int index474_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_19==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_19>=Colon && LA474_19<=Semicolon)||LA474_19==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_19);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA474_451 = input.LA(1);

                         
                        int index474_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_451==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_451>=7 && LA474_451<=140 && (s=T2S.M_257[LA474_451-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_451);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA474_452 = input.LA(1);

                         
                        int index474_452 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_452>=7 && LA474_452<=111 && (s=T2S.M_36[LA474_452-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_452==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_452==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_452==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_452==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_452==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_452);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA474_51 = input.LA(1);

                         
                        int index474_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_51>=Colon && LA474_51<=Semicolon)||LA474_51==EqualsSign) ) {s = 69;}

                        else if ( (LA474_51==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_51);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA474_295 = input.LA(1);

                         
                        int index474_295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_295==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                        else if ( (LA474_295==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_295==FullStop) ) {s = 331;}

                        
                        else if ((LA474_295>=7 && LA474_295<=140 && (s=T2S.M_252[LA474_295-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA474_295==RightSquareBracket) ) {s = 332;}

                         
                        input.seek(index474_295);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA474_20 = input.LA(1);

                         
                        int index474_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_20>=Colon && LA474_20<=Semicolon)||LA474_20==EqualsSign) ) {s = 69;}

                        else if ( (LA474_20==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_20);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA474_67 = input.LA(1);

                         
                        int index474_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_67==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_67>=Colon && LA474_67<=Semicolon)||LA474_67==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_67);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA474_21 = input.LA(1);

                         
                        int index474_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_21==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_21>=Colon && LA474_21<=Semicolon)||LA474_21==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_21);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA474_455 = input.LA(1);

                         
                        int index474_455 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_455==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_455>=7 && LA474_455<=140 && (s=T2S.M_257[LA474_455-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_455);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA474_7 = input.LA(1);

                         
                        int index474_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_7>=4 && LA474_7<=129 && (s=T2S.M_276[LA474_7-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA474_7==RULE_DOUBLE||LA474_7==RULE_HEX_INT||LA474_7==RULE_OCTAL_INT||LA474_7==RULE_SCIENTIFIC_INT||LA474_7==RULE_INT) ) {s = 67;}

                        else if ( (LA474_7==LeftSquareBracket) ) {s = 68;}

                        else if ( ((LA474_7>=Colon && LA474_7<=Semicolon)||LA474_7==EqualsSign) ) {s = 69;}

                        else if ( (LA474_7==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_7==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                        else if ( (LA474_7==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_7);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA474_456 = input.LA(1);

                         
                        int index474_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_456>=7 && LA474_456<=111 && (s=T2S.M_36[LA474_456-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_456==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_456==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_456==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_456==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_456==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_456);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA474_22 = input.LA(1);

                         
                        int index474_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_22==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_22>=Colon && LA474_22<=Semicolon)||LA474_22==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_22);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA474_454 = input.LA(1);

                         
                        int index474_454 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_454>=7 && LA474_454<=111 && (s=T2S.M_36[LA474_454-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_454==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_454==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_454==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_454==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_454==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_454);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA474_23 = input.LA(1);

                         
                        int index474_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_23==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_23>=Colon && LA474_23<=Semicolon)||LA474_23==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_23);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA474_24 = input.LA(1);

                         
                        int index474_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_24>=Colon && LA474_24<=Semicolon)||LA474_24==EqualsSign) ) {s = 69;}

                        else if ( (LA474_24==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_24);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA474_1 = input.LA(1);

                         
                        int index474_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_1>=4 && LA474_1<=129 && (s=T2S.M_276[LA474_1-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA474_1==RULE_DOUBLE||LA474_1==RULE_HEX_INT||LA474_1==RULE_OCTAL_INT||LA474_1==RULE_SCIENTIFIC_INT||LA474_1==RULE_INT) ) {s = 67;}

                        else if ( (LA474_1==LeftSquareBracket) ) {s = 68;}

                        else if ( ((LA474_1>=Colon && LA474_1<=Semicolon)||LA474_1==EqualsSign) ) {s = 69;}

                        else if ( (LA474_1==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_1==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                        else if ( (LA474_1==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_1);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA474_9 = input.LA(1);

                         
                        int index474_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_9==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_9>=Colon && LA474_9<=Semicolon)||LA474_9==EqualsSign) ) {s = 69;}

                        else if ( (LA474_9==RULE_IDENTIFIER) && (synpred265_InternalN4JSParser())) {s = 71;}

                        else if ( (LA474_9==Break) && (synpred265_InternalN4JSParser())) {s = 72;}

                        else if ( (LA474_9==Case) && (synpred265_InternalN4JSParser())) {s = 73;}

                        else if ( (LA474_9==Catch) && (synpred265_InternalN4JSParser())) {s = 74;}

                        else if ( (LA474_9==Class) && (synpred265_InternalN4JSParser())) {s = 75;}

                        else if ( (LA474_9==Const) && (synpred265_InternalN4JSParser())) {s = 76;}

                        else if ( (LA474_9==Continue) && (synpred265_InternalN4JSParser())) {s = 77;}

                        else if ( (LA474_9==Debugger) && (synpred265_InternalN4JSParser())) {s = 78;}

                        else if ( (LA474_9==Default) && (synpred265_InternalN4JSParser())) {s = 79;}

                        else if ( (LA474_9==Delete) && (synpred265_InternalN4JSParser())) {s = 80;}

                        else if ( (LA474_9==Do) && (synpred265_InternalN4JSParser())) {s = 81;}

                        else if ( (LA474_9==Else) && (synpred265_InternalN4JSParser())) {s = 82;}

                        else if ( (LA474_9==Export) && (synpred265_InternalN4JSParser())) {s = 83;}

                        else if ( (LA474_9==Extends) && (synpred265_InternalN4JSParser())) {s = 84;}

                        else if ( (LA474_9==Finally) && (synpred265_InternalN4JSParser())) {s = 85;}

                        else if ( (LA474_9==For) && (synpred265_InternalN4JSParser())) {s = 86;}

                        else if ( (LA474_9==Function) && (synpred265_InternalN4JSParser())) {s = 87;}

                        else if ( (LA474_9==If) && (synpred265_InternalN4JSParser())) {s = 88;}

                        else if ( (LA474_9==Import) && (synpred265_InternalN4JSParser())) {s = 89;}

                        else if ( (LA474_9==In) && (synpred265_InternalN4JSParser())) {s = 90;}

                        else if ( (LA474_9==Instanceof) && (synpred265_InternalN4JSParser())) {s = 91;}

                        else if ( (LA474_9==New) && (synpred265_InternalN4JSParser())) {s = 92;}

                        else if ( (LA474_9==Return) && (synpred265_InternalN4JSParser())) {s = 93;}

                        else if ( (LA474_9==Super) && (synpred265_InternalN4JSParser())) {s = 94;}

                        else if ( (LA474_9==Switch) && (synpred265_InternalN4JSParser())) {s = 95;}

                        else if ( (LA474_9==This_1) && (synpred265_InternalN4JSParser())) {s = 96;}

                        else if ( (LA474_9==Throw) && (synpred265_InternalN4JSParser())) {s = 97;}

                        else if ( (LA474_9==Try) && (synpred265_InternalN4JSParser())) {s = 98;}

                        else if ( (LA474_9==Typeof) && (synpred265_InternalN4JSParser())) {s = 99;}

                        else if ( (LA474_9==Var) && (synpred265_InternalN4JSParser())) {s = 100;}

                        else if ( (LA474_9==Void) && (synpred265_InternalN4JSParser())) {s = 101;}

                        else if ( (LA474_9==While) && (synpred265_InternalN4JSParser())) {s = 102;}

                        else if ( (LA474_9==With) && (synpred265_InternalN4JSParser())) {s = 103;}

                        else if ( (LA474_9==Yield) && (synpred265_InternalN4JSParser())) {s = 104;}

                        else if ( (LA474_9==Null) && (synpred265_InternalN4JSParser())) {s = 105;}

                        else if ( (LA474_9==True) && (synpred265_InternalN4JSParser())) {s = 106;}

                        else if ( (LA474_9==False) && (synpred265_InternalN4JSParser())) {s = 107;}

                        else if ( (LA474_9==Enum) && (synpred265_InternalN4JSParser())) {s = 108;}

                        else if ( (LA474_9==Get) && (synpred265_InternalN4JSParser())) {s = 109;}

                        else if ( (LA474_9==Set) && (synpred265_InternalN4JSParser())) {s = 110;}

                        else if ( (LA474_9==Let) && (synpred265_InternalN4JSParser())) {s = 111;}

                        else if ( (LA474_9==Project) && (synpred265_InternalN4JSParser())) {s = 112;}

                        else if ( (LA474_9==External) && (synpred265_InternalN4JSParser())) {s = 113;}

                        else if ( (LA474_9==Abstract) && (synpred265_InternalN4JSParser())) {s = 114;}

                        else if ( (LA474_9==Static) && (synpred265_InternalN4JSParser())) {s = 115;}

                        else if ( (LA474_9==As) && (synpred265_InternalN4JSParser())) {s = 116;}

                        else if ( (LA474_9==From) && (synpred265_InternalN4JSParser())) {s = 117;}

                        else if ( (LA474_9==Constructor) && (synpred265_InternalN4JSParser())) {s = 118;}

                        else if ( (LA474_9==Of) && (synpred265_InternalN4JSParser())) {s = 119;}

                        else if ( (LA474_9==Target) && (synpred265_InternalN4JSParser())) {s = 120;}

                        else if ( (LA474_9==Type) && (synpred265_InternalN4JSParser())) {s = 121;}

                        else if ( (LA474_9==Union) && (synpred265_InternalN4JSParser())) {s = 122;}

                        else if ( (LA474_9==Intersection) && (synpred265_InternalN4JSParser())) {s = 123;}

                        else if ( (LA474_9==This) && (synpred265_InternalN4JSParser())) {s = 124;}

                        else if ( (LA474_9==Await) && (synpred265_InternalN4JSParser())) {s = 125;}

                        else if ( (LA474_9==Promisify) && (synpred265_InternalN4JSParser())) {s = 126;}

                        else if ( (LA474_9==Await_1) && (synpred265_InternalN4JSParser())) {s = 127;}

                        else if ( (LA474_9==Async) && (synpred265_InternalN4JSParser())) {s = 128;}

                        else if ( (LA474_9==Implements) && (synpred265_InternalN4JSParser())) {s = 129;}

                        else if ( (LA474_9==Interface) && (synpred265_InternalN4JSParser())) {s = 130;}

                        else if ( (LA474_9==Private) && (synpred265_InternalN4JSParser())) {s = 131;}

                        else if ( (LA474_9==Protected) && (synpred265_InternalN4JSParser())) {s = 132;}

                        else if ( (LA474_9==Public) && (synpred265_InternalN4JSParser())) {s = 133;}

                        else if ( (LA474_9==RULE_STRING) && (synpred265_InternalN4JSParser())) {s = 134;}

                        else if ( (LA474_9==RULE_DOUBLE||LA474_9==RULE_HEX_INT||LA474_9==RULE_OCTAL_INT||LA474_9==RULE_SCIENTIFIC_INT||LA474_9==RULE_INT) && (synpred265_InternalN4JSParser())) {s = 135;}

                        else if ( (LA474_9==LeftSquareBracket) && (synpred265_InternalN4JSParser())) {s = 136;}

                         
                        input.seek(index474_9);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA474_458 = input.LA(1);

                         
                        int index474_458 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_458>=7 && LA474_458<=111 && (s=T2S.M_36[LA474_458-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_458==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_458==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_458==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_458==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_458==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_458);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA474_52 = input.LA(1);

                         
                        int index474_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_52==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_52>=Colon && LA474_52<=Semicolon)||LA474_52==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_52);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA474_25 = input.LA(1);

                         
                        int index474_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_25==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_25>=Colon && LA474_25<=Semicolon)||LA474_25==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_25);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA474_291 = input.LA(1);

                         
                        int index474_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_291==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                        else if ( (LA474_291==RULE_NO_LINE_TERMINATOR) && (synpred270_InternalN4JSParser())) {s = 434;}

                        else if ( (LA474_291==Function) && (synpred270_InternalN4JSParser())) {s = 435;}

                        else if ( (LA474_291==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 436;}

                        else if ( (LA474_291==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_291==FullStop) ) {s = 331;}

                        
                        else if ((LA474_291>=7 && LA474_291<=140 && (s=T2S.M_288[LA474_291-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_291==RightSquareBracket) ) {s = 332;}

                         
                        input.seek(index474_291);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA474_14 = input.LA(1);

                         
                        int index474_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_14==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_14>=Colon && LA474_14<=Semicolon)||LA474_14==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_14);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA474_53 = input.LA(1);

                         
                        int index474_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_53==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_53>=Colon && LA474_53<=Semicolon)||LA474_53==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_53);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA474_26 = input.LA(1);

                         
                        int index474_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_26==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_26>=Colon && LA474_26<=Semicolon)||LA474_26==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_26);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA474_54 = input.LA(1);

                         
                        int index474_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_54==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_54>=Colon && LA474_54<=Semicolon)||LA474_54==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_54);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA474_27 = input.LA(1);

                         
                        int index474_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_27==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_27>=Colon && LA474_27<=Semicolon)||LA474_27==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_27);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA474_55 = input.LA(1);

                         
                        int index474_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_55>=Colon && LA474_55<=Semicolon)||LA474_55==EqualsSign) ) {s = 69;}

                        else if ( (LA474_55==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_55);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA474_28 = input.LA(1);

                         
                        int index474_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_28>=Colon && LA474_28<=Semicolon)||LA474_28==EqualsSign) ) {s = 69;}

                        else if ( (LA474_28==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_28);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA474_457 = input.LA(1);

                         
                        int index474_457 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_457>=7 && LA474_457<=111 && (s=T2S.M_36[LA474_457-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_457==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_457==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_457==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_457==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_457==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_457);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA474_56 = input.LA(1);

                         
                        int index474_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_56==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_56>=Colon && LA474_56<=Semicolon)||LA474_56==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_56);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA474_29 = input.LA(1);

                         
                        int index474_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_29==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_29>=Colon && LA474_29<=Semicolon)||LA474_29==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_29);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA474_57 = input.LA(1);

                         
                        int index474_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_57==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_57>=Colon && LA474_57<=Semicolon)||LA474_57==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_57);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA474_30 = input.LA(1);

                         
                        int index474_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_30==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_30>=Colon && LA474_30<=Semicolon)||LA474_30==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_30);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA474_461 = input.LA(1);

                         
                        int index474_461 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_461>=7 && LA474_461<=111 && (s=T2S.M_36[LA474_461-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_461==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_461==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_461==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_461==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_461==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_461);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA474_3 = input.LA(1);

                         
                        int index474_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_3==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        
                        else if ((LA474_3>=10 && LA474_3<=92 && (s=T2S.M_291[LA474_3-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA474_3==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_3==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA474_3>=4 && LA474_3<=129 && (s=T2S.M_261[LA474_3-(4)])>=0)) { /* 55 cases */ }
                        else if ( (LA474_3==RULE_DOUBLE||LA474_3==RULE_HEX_INT||LA474_3==RULE_OCTAL_INT||LA474_3==RULE_SCIENTIFIC_INT||LA474_3==RULE_INT) ) {s = 67;}

                        else if ( (LA474_3==LeftSquareBracket) ) {s = 68;}

                        else if ( ((LA474_3>=Colon && LA474_3<=Semicolon)||LA474_3==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_3);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA474_4 = input.LA(1);

                         
                        int index474_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_4>=4 && LA474_4<=129 && (s=T2S.M_276[LA474_4-(4)])>=0)) { /* 64 cases */ }
                        else if ( (LA474_4==RULE_DOUBLE||LA474_4==RULE_HEX_INT||LA474_4==RULE_OCTAL_INT||LA474_4==RULE_SCIENTIFIC_INT||LA474_4==RULE_INT) ) {s = 67;}

                        else if ( (LA474_4==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA474_4==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( (LA474_4==LessThanSign) && (synpred270_InternalN4JSParser())) {s = 11;}

                        else if ( (LA474_4==Asterisk) && (synpred270_InternalN4JSParser())) {s = 12;}

                        else if ( ((LA474_4>=Colon && LA474_4<=Semicolon)||LA474_4==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_4);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA474_58 = input.LA(1);

                         
                        int index474_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_58==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_58>=Colon && LA474_58<=Semicolon)||LA474_58==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_58);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA474_31 = input.LA(1);

                         
                        int index474_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_31==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_31>=Colon && LA474_31<=Semicolon)||LA474_31==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_31);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA474_459 = input.LA(1);

                         
                        int index474_459 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_459==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_459>=7 && LA474_459<=140 && (s=T2S.M_257[LA474_459-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_459);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA474_460 = input.LA(1);

                         
                        int index474_460 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_460>=7 && LA474_460<=111 && (s=T2S.M_36[LA474_460-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_460==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_460==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_460==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_460==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_460==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_460);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA474_59 = input.LA(1);

                         
                        int index474_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_59>=Colon && LA474_59<=Semicolon)||LA474_59==EqualsSign) ) {s = 69;}

                        else if ( (LA474_59==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_59);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA474_32 = input.LA(1);

                         
                        int index474_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_32>=Colon && LA474_32<=Semicolon)||LA474_32==EqualsSign) ) {s = 69;}

                        else if ( (LA474_32==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_32);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA474_60 = input.LA(1);

                         
                        int index474_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_60==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_60>=Colon && LA474_60<=Semicolon)||LA474_60==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_60);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA474_476 = input.LA(1);

                         
                        int index474_476 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_476>=7 && LA474_476<=111 && (s=T2S.M_36[LA474_476-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_476==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_476==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_476==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_476==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_476==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_476);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA474_33 = input.LA(1);

                         
                        int index474_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_33==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_33>=Colon && LA474_33<=Semicolon)||LA474_33==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_33);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA474_463 = input.LA(1);

                         
                        int index474_463 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_463==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_463>=7 && LA474_463<=140 && (s=T2S.M_257[LA474_463-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_463);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA474_464 = input.LA(1);

                         
                        int index474_464 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_464>=7 && LA474_464<=111 && (s=T2S.M_36[LA474_464-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_464==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_464==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_464==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_464==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_464==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_464);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA474_61 = input.LA(1);

                         
                        int index474_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_61==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_61>=Colon && LA474_61<=Semicolon)||LA474_61==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_61);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA474_272 = input.LA(1);

                         
                        int index474_272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_272==FullStop) ) {s = 331;}

                        else if ( (LA474_272==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_272>=7 && LA474_272<=140 && (s=T2S.M_250[LA474_272-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index474_272);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA474_34 = input.LA(1);

                         
                        int index474_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_34==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_34>=Colon && LA474_34<=Semicolon)||LA474_34==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_34);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA474_290 = input.LA(1);

                         
                        int index474_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_290>=4 && LA474_290<=149 && (s=T2S.M_300[LA474_290-(4)])>=0) && (synpred270_InternalN4JSParser())) { /* 61 cases */ }
                        else if ( (LA474_290==FullStop) ) {s = 331;}

                        
                        else if ((LA474_290>=7 && LA474_290<=111 && (s=T2S.M_301[LA474_290-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 28 cases */ }
                        else if ( (LA474_290==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_290==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_290);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA474_462 = input.LA(1);

                         
                        int index474_462 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_462>=7 && LA474_462<=111 && (s=T2S.M_36[LA474_462-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_462==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_462==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_462==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_462==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_462==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_462);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA474_62 = input.LA(1);

                         
                        int index474_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_62==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_62>=Colon && LA474_62<=Semicolon)||LA474_62==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_62);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA474_35 = input.LA(1);

                         
                        int index474_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_35==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_35>=Colon && LA474_35<=Semicolon)||LA474_35==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_35);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA474_63 = input.LA(1);

                         
                        int index474_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_63>=Colon && LA474_63<=Semicolon)||LA474_63==EqualsSign) ) {s = 69;}

                        else if ( (LA474_63==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_63);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA474_36 = input.LA(1);

                         
                        int index474_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_36>=Colon && LA474_36<=Semicolon)||LA474_36==EqualsSign) ) {s = 69;}

                        else if ( (LA474_36==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_36);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA474_466 = input.LA(1);

                         
                        int index474_466 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_466>=7 && LA474_466<=111 && (s=T2S.M_36[LA474_466-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_466==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_466==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_466==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_466==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_466==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_466);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA474_37 = input.LA(1);

                         
                        int index474_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_37==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_37>=Colon && LA474_37<=Semicolon)||LA474_37==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_37);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA474_64 = input.LA(1);

                         
                        int index474_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_64==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_64>=Colon && LA474_64<=Semicolon)||LA474_64==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_64);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA474_274 = input.LA(1);

                         
                        int index474_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_274==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_274==FullStop) ) {s = 331;}

                        
                        else if ((LA474_274>=7 && LA474_274<=140 && (s=T2S.M_45[LA474_274-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_274==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_274==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_274);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA474_38 = input.LA(1);

                         
                        int index474_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_38==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_38>=Colon && LA474_38<=Semicolon)||LA474_38==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_38);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA474_479 = input.LA(1);

                         
                        int index474_479 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_479==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_479>=7 && LA474_479<=140 && (s=T2S.M_257[LA474_479-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_479);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA474_271 = input.LA(1);

                         
                        int index474_271 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_271==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_271==FullStop) ) {s = 331;}

                        
                        else if ((LA474_271>=7 && LA474_271<=140 && (s=T2S.M_45[LA474_271-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_271==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_271==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_271);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA474_65 = input.LA(1);

                         
                        int index474_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_65==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_65>=Colon && LA474_65<=Semicolon)||LA474_65==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_65);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA474_39 = input.LA(1);

                         
                        int index474_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_39==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_39>=Colon && LA474_39<=Semicolon)||LA474_39==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_39);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA474_10 = input.LA(1);

                         
                        int index474_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_10>=4 && LA474_10<=129 && (s=T2S.M_307[LA474_10-(4)])>=0) && (synpred267_InternalN4JSParser())) { /* 64 cases */ }
                        else if ( (LA474_10==RULE_DOUBLE||LA474_10==RULE_HEX_INT||LA474_10==RULE_OCTAL_INT||LA474_10==RULE_SCIENTIFIC_INT||LA474_10==RULE_INT) && (synpred267_InternalN4JSParser())) {s = 201;}

                        else if ( (LA474_10==LeftSquareBracket) && (synpred267_InternalN4JSParser())) {s = 202;}

                        else if ( (LA474_10==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_10>=Colon && LA474_10<=Semicolon)||LA474_10==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_10);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA474_477 = input.LA(1);

                         
                        int index474_477 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_477>=7 && LA474_477<=111 && (s=T2S.M_36[LA474_477-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_477==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_477==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_477==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_477==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_477==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_477);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA474_478 = input.LA(1);

                         
                        int index474_478 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_478>=7 && LA474_478<=111 && (s=T2S.M_36[LA474_478-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_478==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_478==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_478==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_478==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_478==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_478);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA474_273 = input.LA(1);

                         
                        int index474_273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_273==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_273==FullStop) ) {s = 331;}

                        
                        else if ((LA474_273>=7 && LA474_273<=140 && (s=T2S.M_45[LA474_273-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_273==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_273==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_273);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA474_40 = input.LA(1);

                         
                        int index474_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_40>=Colon && LA474_40<=Semicolon)||LA474_40==EqualsSign) ) {s = 69;}

                        else if ( (LA474_40==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_40);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA474_465 = input.LA(1);

                         
                        int index474_465 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_465>=7 && LA474_465<=111 && (s=T2S.M_36[LA474_465-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_465==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_465==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_465==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_465==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_465==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_465);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA474_41 = input.LA(1);

                         
                        int index474_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_41==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_41>=Colon && LA474_41<=Semicolon)||LA474_41==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_41);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA474_481 = input.LA(1);

                         
                        int index474_481 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_481>=7 && LA474_481<=111 && (s=T2S.M_36[LA474_481-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_481==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_481==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_481==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_481==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_481==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_481);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA474_482 = input.LA(1);

                         
                        int index474_482 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_482>=7 && LA474_482<=111 && (s=T2S.M_36[LA474_482-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_482==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_482==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_482==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_482==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_482==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_482);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA474_276 = input.LA(1);

                         
                        int index474_276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_276==FullStop) ) {s = 331;}

                        else if ( (LA474_276==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_276>=7 && LA474_276<=140 && (s=T2S.M_250[LA474_276-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index474_276);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA474_42 = input.LA(1);

                         
                        int index474_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_42==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_42>=Colon && LA474_42<=Semicolon)||LA474_42==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_42);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA474_469 = input.LA(1);

                         
                        int index474_469 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_469>=7 && LA474_469<=111 && (s=T2S.M_36[LA474_469-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_469==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_469==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_469==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_469==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_469==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_469);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA474_480 = input.LA(1);

                         
                        int index474_480 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_480>=7 && LA474_480<=111 && (s=T2S.M_36[LA474_480-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_480==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_480==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_480==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_480==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_480==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_480);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA474_43 = input.LA(1);

                         
                        int index474_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_43==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_43>=Colon && LA474_43<=Semicolon)||LA474_43==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_43);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA474_467 = input.LA(1);

                         
                        int index474_467 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_467==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_467>=7 && LA474_467<=140 && (s=T2S.M_257[LA474_467-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_467);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA474_468 = input.LA(1);

                         
                        int index474_468 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_468>=7 && LA474_468<=111 && (s=T2S.M_36[LA474_468-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_468==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_468==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_468==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_468==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_468==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_468);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA474_275 = input.LA(1);

                         
                        int index474_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_275==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                        else if ( (LA474_275==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_275==FullStop) ) {s = 331;}

                        
                        else if ((LA474_275>=7 && LA474_275<=140 && (s=T2S.M_252[LA474_275-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA474_275==RightSquareBracket) ) {s = 332;}

                         
                        input.seek(index474_275);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA474_44 = input.LA(1);

                         
                        int index474_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_44>=Colon && LA474_44<=Semicolon)||LA474_44==EqualsSign) ) {s = 69;}

                        else if ( (LA474_44==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_44);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA474_484 = input.LA(1);

                         
                        int index474_484 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_484>=7 && LA474_484<=111 && (s=T2S.M_36[LA474_484-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_484==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_484==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_484==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_484==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_484==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_484);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA474_45 = input.LA(1);

                         
                        int index474_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_45==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_45>=Colon && LA474_45<=Semicolon)||LA474_45==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_45);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA474_471 = input.LA(1);

                         
                        int index474_471 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_471==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_471>=7 && LA474_471<=140 && (s=T2S.M_257[LA474_471-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_471);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA474_472 = input.LA(1);

                         
                        int index474_472 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_472>=7 && LA474_472<=111 && (s=T2S.M_36[LA474_472-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_472==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_472==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_472==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_472==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_472==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_472);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA474_278 = input.LA(1);

                         
                        int index474_278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_278==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_278==FullStop) ) {s = 331;}

                        
                        else if ((LA474_278>=7 && LA474_278<=140 && (s=T2S.M_45[LA474_278-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_278==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_278==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_278);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA474_46 = input.LA(1);

                         
                        int index474_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_46==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_46>=Colon && LA474_46<=Semicolon)||LA474_46==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_46);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA474_470 = input.LA(1);

                         
                        int index474_470 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_470>=7 && LA474_470<=111 && (s=T2S.M_36[LA474_470-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_470==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_470==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_470==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_470==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_470==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_470);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA474_47 = input.LA(1);

                         
                        int index474_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_47==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_47>=Colon && LA474_47<=Semicolon)||LA474_47==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_47);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA474_277 = input.LA(1);

                         
                        int index474_277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_277==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_277==FullStop) ) {s = 331;}

                        
                        else if ((LA474_277>=7 && LA474_277<=140 && (s=T2S.M_45[LA474_277-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_277==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_277==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_277);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA474_48 = input.LA(1);

                         
                        int index474_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA474_48>=Colon && LA474_48<=Semicolon)||LA474_48==EqualsSign) ) {s = 69;}

                        else if ( (LA474_48==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index474_48);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA474_483 = input.LA(1);

                         
                        int index474_483 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_483==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_483>=7 && LA474_483<=140 && (s=T2S.M_257[LA474_483-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_483);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA474_474 = input.LA(1);

                         
                        int index474_474 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_474>=7 && LA474_474<=111 && (s=T2S.M_36[LA474_474-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_474==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_474==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_474==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_474==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_474==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_474);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA474_49 = input.LA(1);

                         
                        int index474_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_49==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_49>=Colon && LA474_49<=Semicolon)||LA474_49==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_49);
                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA474_270 = input.LA(1);

                         
                        int index474_270 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_270==FullStop) ) {s = 331;}

                        else if ( (LA474_270==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_270>=7 && LA474_270<=140 && (s=T2S.M_250[LA474_270-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index474_270);
                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA474_280 = input.LA(1);

                         
                        int index474_280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_280==FullStop) ) {s = 331;}

                        else if ( (LA474_280==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_280>=7 && LA474_280<=140 && (s=T2S.M_250[LA474_280-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index474_280);
                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA474_50 = input.LA(1);

                         
                        int index474_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_50==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_50>=Colon && LA474_50<=Semicolon)||LA474_50==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_50);
                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA474_487 = input.LA(1);

                         
                        int index474_487 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_487==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_487>=7 && LA474_487<=140 && (s=T2S.M_257[LA474_487-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_487);
                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA474_485 = input.LA(1);

                         
                        int index474_485 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_485>=7 && LA474_485<=111 && (s=T2S.M_36[LA474_485-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_485==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_485==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_485==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_485==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_485==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_485);
                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA474_486 = input.LA(1);

                         
                        int index474_486 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_486>=7 && LA474_486<=111 && (s=T2S.M_36[LA474_486-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_486==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_486==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_486==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_486==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_486==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_486);
                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA474_279 = input.LA(1);

                         
                        int index474_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_279==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                        else if ( (LA474_279==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_279==FullStop) ) {s = 331;}

                        
                        else if ((LA474_279>=7 && LA474_279<=140 && (s=T2S.M_252[LA474_279-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA474_279==RightSquareBracket) ) {s = 332;}

                         
                        input.seek(index474_279);
                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA474_473 = input.LA(1);

                         
                        int index474_473 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_473>=7 && LA474_473<=111 && (s=T2S.M_36[LA474_473-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_473==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_473==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_473==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_473==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_473==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_473);
                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA474_489 = input.LA(1);

                         
                        int index474_489 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_489>=7 && LA474_489<=111 && (s=T2S.M_36[LA474_489-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_489==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_489==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_489==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_489==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_489==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_489);
                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA474_490 = input.LA(1);

                         
                        int index474_490 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_490>=7 && LA474_490<=111 && (s=T2S.M_36[LA474_490-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_490==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_490==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_490==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_490==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_490==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_490);
                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA474_282 = input.LA(1);

                         
                        int index474_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_282==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_282==FullStop) ) {s = 331;}

                        
                        else if ((LA474_282>=7 && LA474_282<=140 && (s=T2S.M_45[LA474_282-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_282==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_282==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_282);
                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA474_488 = input.LA(1);

                         
                        int index474_488 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_488>=7 && LA474_488<=111 && (s=T2S.M_36[LA474_488-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_488==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_488==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_488==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_488==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_488==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_488);
                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA474_475 = input.LA(1);

                         
                        int index474_475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_475==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_475>=7 && LA474_475<=140 && (s=T2S.M_257[LA474_475-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_475);
                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA474_13 = input.LA(1);

                         
                        int index474_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_13>=4 && LA474_13<=145 && (s=T2S.M_340[LA474_13-(4)])>=0) && (synpred270_InternalN4JSParser())) { /* 65 cases */ }
                        else if ( (LA474_13==RULE_DOUBLE||LA474_13==RULE_HEX_INT||LA474_13==RULE_OCTAL_INT||LA474_13==RULE_SCIENTIFIC_INT||LA474_13==RULE_INT) && (synpred270_InternalN4JSParser())) {s = 268;}

                        else if ( (LA474_13==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 269;}

                        else if ( (LA474_13==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_13>=Colon && LA474_13<=Semicolon)||LA474_13==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_13);
                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA474_281 = input.LA(1);

                         
                        int index474_281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_281==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_281==FullStop) ) {s = 331;}

                        
                        else if ((LA474_281>=7 && LA474_281<=140 && (s=T2S.M_45[LA474_281-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_281==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_281==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_281);
                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA474_68 = input.LA(1);

                         
                        int index474_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_68>=4 && LA474_68<=129 && (s=T2S.M_342[LA474_68-(4)])>=0)) { /* 28 cases */ }
                        
                        else if ((LA474_68>=15 && LA474_68<=149 && (s=T2S.M_343[LA474_68-(15)])>=0) && (synpred270_InternalN4JSParser())) { /* 33 cases */ }
                        input.seek(index474_68);
                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA474_492 = input.LA(1);

                         
                        int index474_492 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_492>=7 && LA474_492<=111 && (s=T2S.M_36[LA474_492-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_492==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_492==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_492==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_492==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_492==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_492);
                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA474_284 = input.LA(1);

                         
                        int index474_284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_284==FullStop) ) {s = 331;}

                        else if ( (LA474_284==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_284>=7 && LA474_284<=140 && (s=T2S.M_250[LA474_284-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index474_284);
                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA474_66 = input.LA(1);

                         
                        int index474_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_66==LeftParenthesis) && (synpred270_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA474_66>=Colon && LA474_66<=Semicolon)||LA474_66==EqualsSign) ) {s = 69;}

                         
                        input.seek(index474_66);
                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA474_283 = input.LA(1);

                         
                        int index474_283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_283==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                        else if ( (LA474_283==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_283==FullStop) ) {s = 331;}

                        
                        else if ((LA474_283>=7 && LA474_283<=140 && (s=T2S.M_252[LA474_283-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 39 cases */ }
                        else if ( (LA474_283==RightSquareBracket) ) {s = 332;}

                         
                        input.seek(index474_283);
                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA474_491 = input.LA(1);

                         
                        int index474_491 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_491==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_491>=7 && LA474_491<=140 && (s=T2S.M_257[LA474_491-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_491);
                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA474_439 = input.LA(1);

                         
                        int index474_439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_439==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_439>=7 && LA474_439<=140 && (s=T2S.M_257[LA474_439-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_439);
                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA474_440 = input.LA(1);

                         
                        int index474_440 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_440>=7 && LA474_440<=111 && (s=T2S.M_36[LA474_440-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_440==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_440==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_440==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_440==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_440==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_440);
                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA474_286 = input.LA(1);

                         
                        int index474_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_286==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_286==FullStop) ) {s = 331;}

                        
                        else if ((LA474_286>=7 && LA474_286<=140 && (s=T2S.M_45[LA474_286-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_286==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_286==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_286);
                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA474_495 = input.LA(1);

                         
                        int index474_495 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_495==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA474_495>=7 && LA474_495<=140 && (s=T2S.M_257[LA474_495-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index474_495);
                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA474_493 = input.LA(1);

                         
                        int index474_493 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_493>=7 && LA474_493<=111 && (s=T2S.M_36[LA474_493-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_493==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_493==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_493==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_493==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_493==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_493);
                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA474_494 = input.LA(1);

                         
                        int index474_494 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA474_494>=7 && LA474_494<=111 && (s=T2S.M_36[LA474_494-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA474_494==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_494==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_494==FullStop) && (synpred270_InternalN4JSParser())) {s = 437;}

                        else if ( (LA474_494==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred270_InternalN4JSParser())) {s = 335;}

                        else if ( (LA474_494==RULE_TEMPLATE_HEAD) && (synpred270_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index474_494);
                        if ( s>=0 ) return s;
                        break;
                    case 159 : 
                        int LA474_285 = input.LA(1);

                         
                        int index474_285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA474_285==LeftSquareBracket) && (synpred270_InternalN4JSParser())) {s = 334;}

                        else if ( (LA474_285==FullStop) ) {s = 331;}

                        
                        else if ((LA474_285>=7 && LA474_285<=140 && (s=T2S.M_45[LA474_285-(7)])>=0) && (synpred270_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA474_285==RightSquareBracket) ) {s = 332;}

                        else if ( (LA474_285==EqualsSignGreaterThanSign) && (synpred270_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index474_285);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 474, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_286s = "\1\4\1\uffff\10\4\1\uffff";
    static final String dfa_287s = "\1\u0095\1\uffff\10\u0095\1\uffff";
    static final String dfa_288s = "\1\uffff\1\2\10\uffff\1\1";
    static final String[] dfa_289s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\11\1\1\2\21\1\4\uffff\7\1\21\uffff\5\1\7\uffff\1\1\7\uffff\1\1\4\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\62\12\4\uffff\7\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\5\uffff\1\1\1\uffff\1\12\7\uffff\1\12\4\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final char[] dfa_286 = DFA.unpackEncodedStringToUnsignedChars(dfa_286s);
    static final char[] dfa_287 = DFA.unpackEncodedStringToUnsignedChars(dfa_287s);
    static final short[] dfa_288 = DFA.unpackEncodedString(dfa_288s);
    static final short[][] dfa_289 = unpackEncodedStringArray(dfa_289s);

    class DFA470 extends DFA {

        public DFA470(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 470;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "()* loopback of 12837:26: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_290s = "\13\4\2\uffff\1\4\66\134\1\4\u00c9\uffff\23\7\1\4\7\7\42\uffff\1\4\1\134\151\uffff\77\7\1\uffff";
    static final String dfa_291s = "\13\u0095\2\uffff\1\u0095\66\147\1\u0095\u00c9\uffff\23\u008c\1\u0095\1\u0091\6\u008c\42\uffff\1\176\1\147\151\uffff\77\u008c\1\uffff";
    static final String dfa_292s = "\13\uffff\2\3\70\uffff\1\4\1\3\102\1\102\2\103\3\33\uffff\42\3\2\uffff\151\3\77\uffff\1\3";
    static final String dfa_293s = "\1\44\1\115\1\52\1\u0080\1\164\1\67\1\140\1\120\1\152\1\55\1\u0097\2\uffff\1\21\1\131\1\66\1\71\1\74\1\77\1\104\1\106\1\110\1\114\1\116\1\123\1\126\1\134\1\137\1\145\1\150\1\154\1\157\1\162\1\165\1\171\1\174\1\177\1\u0083\1\u0088\1\u008a\1\u008c\1\u008f\1\u0092\1\u0094\1\u0099\1\u009b\1\u009e\1\1\1\4\1\6\1\11\1\103\1\121\1\124\1\133\1\135\1\144\1\147\1\153\1\156\1\161\1\163\1\167\1\173\1\u0081\1\u0087\1\27\1\107\1\127\u00c9\uffff\1\112\1\47\1\40\1\54\1\53\1\63\1\60\1\100\1\72\1\111\1\105\1\130\1\117\1\151\1\141\1\166\1\160\1\u0084\1\175\1\u0086\1\65\1\u009c\1\u0095\1\7\1\2\1\17\1\143\42\uffff\1\36\1\101\151\uffff\1\75\1\34\1\31\1\45\1\37\1\42\1\56\1\50\1\62\1\64\1\61\1\76\1\70\1\73\1\113\1\102\1\125\1\132\1\122\1\146\1\136\1\142\1\170\1\155\1\u0082\1\u0085\1\176\1\u008e\1\u0089\1\u008b\1\u009d\1\u0093\1\5\1\10\1\3\1\16\1\13\1\14\1\172\1\u0090\1\u0091\1\u008d\1\u009a\1\u0096\1\u0098\1\12\1\0\1\20\1\22\1\15\1\25\1\23\1\24\1\30\1\26\1\33\1\35\1\32\1\46\1\41\1\43\1\57\1\51\1\uffff}>";
    static final String[] dfa_294s = {
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\7\uffff\1\14\7\uffff\1\13\4\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\73\1\66\1\100\1\41\1\76\1\101\1\3\1\6\1\23\1\24\1\5\1\35\1\25\1\32\1\33\1\1\1\2\1\26\1\31\1\37\1\4\1\43\1\7\1\45\1\70\1\51\1\75\1\15\1\77\1\17\1\21\1\22\1\10\1\61\1\44\1\47\1\72\1\54\1\56\1\74\1\20\1\30\1\62\1\65\1\57\1\46\1\60\1\71\1\53\1\55\4\uffff\1\34\1\11\1\63\1\42\1\12\1\50\1\52\21\uffff\1\64\1\27\1\36\1\40\1\67\5\uffff\1\106\1\uffff\1\14\5\uffff\2\105\1\13\1\105\3\uffff\1\104\11\uffff\1\103\1\uffff\1\103\1\uffff\1\103\2\uffff\1\103\1\uffff\1\16\2\uffff\1\102\23\uffff\1\103",
            "\1\173\1\166\1\u0081\1\133\1\176\1\u0082\1\u0084\1\162\1\115\1\116\1\161\1\127\1\117\1\124\1\125\1\u0083\1\160\1\120\1\123\1\131\1\u0085\1\135\1\163\1\137\1\170\1\143\1\175\1\u0080\1\177\1\110\1\112\1\113\1\114\1\153\1\136\1\141\1\172\1\146\1\150\1\174\1\111\1\122\1\154\1\165\1\151\1\140\1\152\1\171\1\145\1\147\4\uffff\1\126\1\155\1\157\1\134\1\156\1\142\1\144\21\uffff\1\164\1\121\1\130\1\132\1\167\5\uffff\1\106\7\uffff\2\105\1\uffff\1\105\3\uffff\1\u0088\11\uffff\1\u0087\1\uffff\1\u0087\1\uffff\1\u0087\2\uffff\1\u0087\1\uffff\1\107\2\uffff\1\u0086\23\uffff\1\u0087",
            "\1\u00bd\1\u00b8\1\u00c3\1\u009d\1\u00c0\1\u00c4\1\u00c6\1\u00b4\1\u008f\1\u0090\1\u00b3\1\u0099\1\u0091\1\u0096\1\u0097\1\u00c5\1\u00b2\1\u0092\1\u0095\1\u009b\1\u00c7\1\u009f\1\u00b5\1\u00a1\1\u00ba\1\u00a5\1\u00bf\1\u00c2\1\u00c1\1\u008a\1\u008c\1\u008d\1\u008e\1\u00ad\1\u00a0\1\u00a3\1\u00bc\1\u00a8\1\u00aa\1\u00be\1\u008b\1\u0094\1\u00ae\1\u00b7\1\u00ab\1\u00a2\1\u00ac\1\u00bb\1\u00a7\1\u00a9\4\uffff\1\u0098\1\u00af\1\u00b1\1\u009e\1\u00b0\1\u00a4\1\u00a6\21\uffff\1\u00b6\1\u0093\1\u009a\1\u009c\1\u00b9\5\uffff\1\106\7\uffff\2\105\1\uffff\1\105\3\uffff\1\u00ca\11\uffff\1\u00c9\1\uffff\1\u00c9\1\uffff\1\u00c9\2\uffff\1\u00c9\1\uffff\1\u0089\2\uffff\1\u00c8\23\uffff\1\u00c9",
            "",
            "",
            "\1\u0100\1\u00fb\1\u0106\1\u00e0\1\u0103\1\u0107\1\u0109\1\u00f7\1\u00d2\1\u00d3\1\u00f6\1\u00dc\1\u00d4\1\u00d9\1\u00da\1\u0108\1\u00f5\1\u00d5\1\u00d8\1\u00de\1\u010a\1\u00e2\1\u00f8\1\u00e4\1\u00fd\1\u00e8\1\u0102\1\u0105\1\u0104\1\u00cd\1\u00cf\1\u00d0\1\u00d1\1\u00f0\1\u00e3\1\u00e6\1\u00ff\1\u00eb\1\u00ed\1\u0101\1\u00ce\1\u00d7\1\u00f1\1\u00fa\1\u00ee\1\u00e5\1\u00ef\1\u00fe\1\u00ea\1\u00ec\4\uffff\1\u00db\1\u00f2\1\u00f4\1\u00e1\1\u00f3\1\u00e7\1\u00e9\21\uffff\1\u00f9\1\u00d6\1\u00dd\1\u00df\1\u00fc\5\uffff\1\106\7\uffff\2\105\1\uffff\1\105\3\uffff\1\u010d\11\uffff\1\u010c\1\uffff\1\u010c\1\uffff\1\u010c\2\uffff\1\u010c\1\uffff\1\u00cc\2\uffff\1\u010b\17\uffff\1\u00cb\3\uffff\1\u010c",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "\1\u011d\1\u0118\1\u0123\1\uffff\1\u0120\1\u0124\1\u0126\1\u0114\2\uffff\1\u0113\1\u013e\3\uffff\1\u0125\1\u0112\1\u0142\2\uffff\1\u0127\1\uffff\1\u0115\1\uffff\1\u011a\1\u0144\1\u011f\1\u0122\1\u0121\2\uffff\1\u013f\1\uffff\1\u0138\1\u012e\1\uffff\1\u011c\1\uffff\1\u012b\1\u011e\3\uffff\1\u0117\1\u0139\1\u012d\1\u0137\1\u011b\1\u0143\6\uffff\1\u010f\1\u0111\1\u012c\1\u0110\7\uffff\1\u0145\1\uffff\1\u0146\1\uffff\1\u013b\7\uffff\1\u0116\3\uffff\1\u0119\2\uffff\1\u014a\2\uffff\1\u012a\2\uffff\1\u0147\1\uffff\1\u0148\1\uffff\1\u013a\2\uffff\1\u012f\3\uffff\1\u0129\1\u013c\2\uffff\1\u013d\2\uffff\1\u0149\3\uffff\1\u0130\1\uffff\1\u0135\1\u0132\1\u0133\1\u0134\1\uffff\1\u0136\1\uffff\1\u010e\2\uffff\1\u0128\11\uffff\1\u0141\1\u0140\10\uffff\1\u0131",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u0188\1\u0183\1\u018c\1\u015f\1\u018b\1\u018d\1\u018f\1\u017f\2\uffff\1\u017e\1\u01a5\3\uffff\1\u018e\1\u017d\1\u01a9\2\uffff\1\u0190\1\uffff\1\u0180\1\uffff\1\u0185\1\u01ab\1\u018a\1\u0178\1\u0175\2\uffff\1\u01a6\1\uffff\1\u019e\1\u0194\1\uffff\1\u0187\1\uffff\1\u0191\1\u0189\3\uffff\1\u0182\1\u01a0\1\u0193\1\u019d\1\u0186\1\u01aa\1\uffff\1\u0162\1\uffff\1\u0171\1\u0161\1\uffff\1\u017a\1\u017c\1\u0192\1\u017b\2\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u01ac\1\u016f\1\u01ad\1\u0170\1\u01a2\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0181\2\uffff\1\u0160\1\u0184\1\u0174\1\u0169\1\u01b1\1\u0157\1\u0165\1\u0177\1\uffff\1\u0155\1\u01ae\1\uffff\1\u01af\1\u014b\1\u01a1\2\uffff\1\u0195\1\u016b\1\u015a\1\u016a\1\u0176\1\u01a3\1\u014c\1\u0166\1\u01a4\1\u0167\1\uffff\1\u01b0\3\uffff\1\u0196\1\uffff\1\u019b\1\u0198\1\u0199\1\u019a\1\uffff\1\u019c\1\uffff\1\u0179\2\uffff\1\u019f\11\uffff\1\u01a8\1\u01a7\10\uffff\1\u0197",
            "\1\u015f\7\uffff\1\u01b4\46\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u01b3\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f\4\uffff\1\u01b2",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\u014d\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u014b\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u01ea\1\u01e5\1\u01f0\1\u01ca\1\u01ed\1\u01f1\1\u01f3\1\u01e1\1\u01bc\1\u01bd\1\u01e0\1\u01c6\1\u01be\1\u01c3\1\u01c4\1\u01f2\1\u01df\1\u01bf\1\u01c2\1\u01c8\1\u01f4\1\u01cc\1\u01e2\1\u01ce\1\u01e7\1\u01d2\1\u01ec\1\u01ef\1\u01ee\1\u01b7\1\u01b9\1\u01ba\1\u01bb\1\u01da\1\u01cd\1\u01d0\1\u01e9\1\u01d5\1\u01d7\1\u01eb\1\u01b8\1\u01c1\1\u01db\1\u01e4\1\u01d8\1\u01cf\1\u01d9\1\u01e8\1\u01d4\1\u01d6\4\uffff\1\u01c5\1\u01dc\1\u01de\1\u01cb\1\u01dd\1\u01d1\1\u01d3\21\uffff\1\u01e3\1\u01c0\1\u01c7\1\u01c9\1\u01e6\17\uffff\1\u01f5\27\uffff\1\u01b6",
            "\1\106\7\uffff\2\105\1\uffff\1\105",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            "\1\u015f\56\uffff\1\u0162\1\uffff\1\u0171\1\u0161\7\uffff\1\u0164\1\u016e\1\u0168\1\u0172\1\u016c\1\u0152\1\u016f\1\u0153\1\u0170\1\u016d\1\u015b\1\u015d\1\u0163\1\uffff\1\u015e\1\uffff\1\u0173\1\u0154\2\uffff\1\u0160\1\uffff\1\u0174\1\u0169\1\uffff\1\u0157\1\u0165\1\u0151\1\uffff\1\u0155\1\u0158\1\uffff\1\u0159\1\u01b5\1\u0156\2\uffff\1\u015c\1\u016b\1\u015a\1\u016a\1\uffff\1\u014e\1\u014c\1\u0166\1\uffff\1\u0167\33\uffff\1\u0150\1\u014f",
            ""
    };
    static final char[] dfa_290 = DFA.unpackEncodedStringToUnsignedChars(dfa_290s);
    static final char[] dfa_291 = DFA.unpackEncodedStringToUnsignedChars(dfa_291s);
    static final short[] dfa_292 = DFA.unpackEncodedString(dfa_292s);
    static final short[] dfa_293 = DFA.unpackEncodedString(dfa_293s);
    static final short[][] dfa_294 = unpackEncodedStringArray(dfa_294s);

    class DFA485 extends DFA {

        public DFA485(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 485;
            this.eot = dfa_280;
            this.eof = dfa_280;
            this.min = dfa_290;
            this.max = dfa_291;
            this.accept = dfa_292;
            this.special = dfa_293;
            this.transition = dfa_294;
        }
        public String getDescription() {
            return "12872:1: ( ( ( ( ( ( ( ruleN4Modifier ) )* norm1_GetterHeader ) )=> ( ( ( ruleN4Modifier ) )* GetterHeaderParserRuleCall_1_0_0_0_2= norm1_GetterHeader ) ) ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_0_1_0= norm1_Block ) )? (SemicolonKeyword_1_0_2= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* Set ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT ) ) )=> ( ( ( ruleN4Modifier ) )* SetKeyword_1_1_0_0_2= Set ( ( Break | Case | Catch | Class | Const | Continue | Debugger | Default | Delete | Do | Else | Export | Extends | Finally | For | Function | If | Import | In | Instanceof | New | Return | Super | Switch | This_1 | Throw | Try | Typeof | Var | Void | While | With | Yield | Null | True | False | Enum | Get | Set | Let | Project | External | Abstract | Static | As | From | Constructor | Of | Target | Type | Union | Intersection | This | Await | Promisify | Await_1 | Async | Implements | Interface | Private | Protected | Public | LeftSquareBracket | RULE_IDENTIFIER | RULE_STRING | RULE_DOUBLE | RULE_INT | RULE_OCTAL_INT | RULE_HEX_INT | RULE_SCIENTIFIC_INT )=>LiteralOrComputedPropertyNameParserRuleCall_1_1_0_0_3= norm1_LiteralOrComputedPropertyName ) ) ) LeftParenthesisKeyword_1_1_1= LeftParenthesis ( (FparFormalParameterParserRuleCall_1_1_2_0= norm1_FormalParameter ) ) RightParenthesisKeyword_1_1_3= RightParenthesis ( ( ( LeftCurlyBracket ) )=> (BodyBlockParserRuleCall_1_1_4_0= norm1_Block ) )? (SemicolonKeyword_1_1_5= Semicolon )? ) | ( ( ( ( ( ( ruleN4Modifier ) )* ( ruleTypeVariables )? ( ( ( ( Asterisk ) ) norm1_LiteralOrComputedPropertyName LeftParenthesis ) | ( ruleAsyncNoTrailingLineBreak norm1_LiteralOrComputedPropertyName LeftParenthesis ) ) ) )=> ( ( ( ruleN4Modifier ) )* (TypeVariablesParserRuleCall_1_2_0_0_2= ruleTypeVariables )? ( ( ( (GeneratorAsteriskKeyword_1_2_0_0_3_0_0_0= Asterisk ) ) LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_0_1= norm1_LiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_0_2= norm1_MethodParamsReturnAndBody ) ) | (AsyncNoTrailingLineBreakParserRuleCall_1_2_0_0_3_1_0= ruleAsyncNoTrailingLineBreak LiteralOrComputedPropertyNameParserRuleCall_1_2_0_0_3_1_1= norm1_LiteralOrComputedPropertyName ( ( LeftParenthesis )=>MethodParamsReturnAndBodyParserRuleCall_1_2_0_0_3_1_2= ruleMethodParamsReturnAndBody ) ) ) ) ) (SemicolonKeyword_1_2_1= Semicolon )? ) | (FieldDeclarationImplParserRuleCall_1_3_1= norm1_FieldDeclarationImpl ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA485_484 = input.LA(1);

                         
                        int index485_484 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_484>=7 && LA485_484<=111 && (s=T2S.M_36[LA485_484-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_484==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_484==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_484==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_484==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_484==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_484);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA485_47 = input.LA(1);

                         
                        int index485_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_47==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_47>=Colon && LA485_47<=Semicolon)||LA485_47==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_47);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA485_294 = input.LA(1);

                         
                        int index485_294 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_294==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_294==FullStop) ) {s = 331;}

                        
                        else if ((LA485_294>=7 && LA485_294<=140 && (s=T2S.M_45[LA485_294-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA485_294==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_294==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index485_294);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA485_472 = input.LA(1);

                         
                        int index485_472 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_472>=7 && LA485_472<=111 && (s=T2S.M_36[LA485_472-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_472==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_472==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_472==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_472==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_472==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_472);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA485_48 = input.LA(1);

                         
                        int index485_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_48>=Colon && LA485_48<=Semicolon)||LA485_48==EqualsSign) ) {s = 69;}

                        else if ( (LA485_48==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_48);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA485_470 = input.LA(1);

                         
                        int index485_470 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_470==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_470>=7 && LA485_470<=140 && (s=T2S.M_257[LA485_470-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_470);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA485_49 = input.LA(1);

                         
                        int index485_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_49>=Colon && LA485_49<=Semicolon)||LA485_49==EqualsSign) ) {s = 69;}

                        else if ( (LA485_49==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_49);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA485_293 = input.LA(1);

                         
                        int index485_293 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_293==FullStop) ) {s = 331;}

                        else if ( (LA485_293==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_293>=7 && LA485_293<=140 && (s=T2S.M_250[LA485_293-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index485_293);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA485_471 = input.LA(1);

                         
                        int index485_471 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_471==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_471>=7 && LA485_471<=140 && (s=T2S.M_257[LA485_471-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_471);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA485_50 = input.LA(1);

                         
                        int index485_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_50>=Colon && LA485_50<=Semicolon)||LA485_50==EqualsSign) ) {s = 69;}

                        else if ( (LA485_50==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_50);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA485_483 = input.LA(1);

                         
                        int index485_483 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_483==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_483>=7 && LA485_483<=140 && (s=T2S.M_257[LA485_483-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_483);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA485_474 = input.LA(1);

                         
                        int index485_474 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_474==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_474>=7 && LA485_474<=140 && (s=T2S.M_257[LA485_474-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_474);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA485_475 = input.LA(1);

                         
                        int index485_475 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_475==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_475>=7 && LA485_475<=140 && (s=T2S.M_257[LA485_475-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_475);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA485_487 = input.LA(1);

                         
                        int index485_487 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_487==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_487>=7 && LA485_487<=140 && (s=T2S.M_257[LA485_487-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_487);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA485_473 = input.LA(1);

                         
                        int index485_473 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_473==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_473>=7 && LA485_473<=140 && (s=T2S.M_257[LA485_473-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_473);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA485_295 = input.LA(1);

                         
                        int index485_295 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_295==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_295==FullStop) ) {s = 331;}

                        else if ( (LA485_295==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_295>=7 && LA485_295<=140 && (s=T2S.M_366[LA485_295-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_295);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA485_485 = input.LA(1);

                         
                        int index485_485 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_485>=7 && LA485_485<=111 && (s=T2S.M_36[LA485_485-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_485==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_485==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_485==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_485==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_485==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_485);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA485_13 = input.LA(1);

                         
                        int index485_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_13>=4 && LA485_13<=145 && (s=T2S.M_340[LA485_13-(4)])>=0) && (synpred278_InternalN4JSParser())) { /* 65 cases */ }
                        else if ( (LA485_13==RULE_DOUBLE||LA485_13==RULE_HEX_INT||LA485_13==RULE_OCTAL_INT||LA485_13==RULE_SCIENTIFIC_INT||LA485_13==RULE_INT) && (synpred278_InternalN4JSParser())) {s = 268;}

                        else if ( (LA485_13==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 269;}

                        else if ( ((LA485_13>=Colon && LA485_13<=Semicolon)||LA485_13==EqualsSign) ) {s = 69;}

                        else if ( (LA485_13==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_13);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA485_486 = input.LA(1);

                         
                        int index485_486 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_486==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_486>=7 && LA485_486<=140 && (s=T2S.M_257[LA485_486-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_486);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA485_489 = input.LA(1);

                         
                        int index485_489 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_489>=7 && LA485_489<=111 && (s=T2S.M_36[LA485_489-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_489==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_489==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_489==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_489==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_489==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_489);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA485_490 = input.LA(1);

                         
                        int index485_490 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_490==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_490>=7 && LA485_490<=140 && (s=T2S.M_257[LA485_490-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_490);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA485_488 = input.LA(1);

                         
                        int index485_488 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_488>=7 && LA485_488<=111 && (s=T2S.M_36[LA485_488-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_488==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_488==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_488==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_488==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_488==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_488);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA485_492 = input.LA(1);

                         
                        int index485_492 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_492>=7 && LA485_492<=111 && (s=T2S.M_36[LA485_492-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_492==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_492==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_492==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_492==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_492==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_492);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA485_66 = input.LA(1);

                         
                        int index485_66 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_66==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_66>=Colon && LA485_66<=Semicolon)||LA485_66==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_66);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA485_491 = input.LA(1);

                         
                        int index485_491 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_491==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_491>=7 && LA485_491<=140 && (s=T2S.M_257[LA485_491-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_491);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA485_440 = input.LA(1);

                         
                        int index485_440 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_440>=7 && LA485_440<=111 && (s=T2S.M_36[LA485_440-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_440==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_440==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_440==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_440==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_440==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_440);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA485_495 = input.LA(1);

                         
                        int index485_495 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_495==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_495>=7 && LA485_495<=140 && (s=T2S.M_257[LA485_495-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_495);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA485_493 = input.LA(1);

                         
                        int index485_493 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_493>=7 && LA485_493<=111 && (s=T2S.M_36[LA485_493-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_493==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_493==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_493==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_493==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_493==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_493);
                        if ( s>=0 ) return s;
                        break;
                    case 28 : 
                        int LA485_439 = input.LA(1);

                         
                        int index485_439 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_439==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_439>=7 && LA485_439<=140 && (s=T2S.M_257[LA485_439-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_439);
                        if ( s>=0 ) return s;
                        break;
                    case 29 : 
                        int LA485_494 = input.LA(1);

                         
                        int index485_494 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_494==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_494>=7 && LA485_494<=140 && (s=T2S.M_257[LA485_494-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_494);
                        if ( s>=0 ) return s;
                        break;
                    case 30 : 
                        int LA485_331 = input.LA(1);

                         
                        int index485_331 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_331>=4 && LA485_331<=126 && (s=T2S.M_273[LA485_331-(4)])>=0)) { /* 63 cases */ }
                        else if ( (LA485_331==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 501;}

                         
                        input.seek(index485_331);
                        if ( s>=0 ) return s;
                        break;
                    case 31 : 
                        int LA485_442 = input.LA(1);

                         
                        int index485_442 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_442==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_442>=7 && LA485_442<=140 && (s=T2S.M_257[LA485_442-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_442);
                        if ( s>=0 ) return s;
                        break;
                    case 32 : 
                        int LA485_272 = input.LA(1);

                         
                        int index485_272 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_272==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_272==FullStop) ) {s = 331;}

                        else if ( (LA485_272==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_272>=7 && LA485_272<=140 && (s=T2S.M_366[LA485_272-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_272);
                        if ( s>=0 ) return s;
                        break;
                    case 33 : 
                        int LA485_497 = input.LA(1);

                         
                        int index485_497 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_497>=7 && LA485_497<=111 && (s=T2S.M_36[LA485_497-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_497==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_497==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_497==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_497==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_497==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_497);
                        if ( s>=0 ) return s;
                        break;
                    case 34 : 
                        int LA485_443 = input.LA(1);

                         
                        int index485_443 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_443==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_443>=7 && LA485_443<=140 && (s=T2S.M_257[LA485_443-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_443);
                        if ( s>=0 ) return s;
                        break;
                    case 35 : 
                        int LA485_498 = input.LA(1);

                         
                        int index485_498 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_498==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_498>=7 && LA485_498<=140 && (s=T2S.M_257[LA485_498-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_498);
                        if ( s>=0 ) return s;
                        break;
                    case 36 : 
                        int LA485_0 = input.LA(1);

                         
                        int index485_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_0>=10 && LA485_0<=62 && (s=T2S.M_265[LA485_0-(10)])>=0)) { /* 10 cases */ }
                        else if ( (LA485_0==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_0==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA485_0>=4 && LA485_0<=129 && (s=T2S.M_266[LA485_0-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA485_0==RULE_DOUBLE||LA485_0==RULE_HEX_INT||LA485_0==RULE_OCTAL_INT||LA485_0==RULE_SCIENTIFIC_INT||LA485_0==RULE_INT) ) {s = 67;}

                        else if ( (LA485_0==LeftSquareBracket) ) {s = 68;}

                         
                        input.seek(index485_0);
                        if ( s>=0 ) return s;
                        break;
                    case 37 : 
                        int LA485_441 = input.LA(1);

                         
                        int index485_441 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_441==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_441>=7 && LA485_441<=140 && (s=T2S.M_257[LA485_441-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_441);
                        if ( s>=0 ) return s;
                        break;
                    case 38 : 
                        int LA485_496 = input.LA(1);

                         
                        int index485_496 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_496>=7 && LA485_496<=111 && (s=T2S.M_36[LA485_496-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_496==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_496==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_496==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_496==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_496==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_496);
                        if ( s>=0 ) return s;
                        break;
                    case 39 : 
                        int LA485_271 = input.LA(1);

                         
                        int index485_271 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_271==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_271==FullStop) ) {s = 331;}

                        else if ( (LA485_271==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_271>=7 && LA485_271<=140 && (s=T2S.M_366[LA485_271-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_271);
                        if ( s>=0 ) return s;
                        break;
                    case 40 : 
                        int LA485_445 = input.LA(1);

                         
                        int index485_445 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_445==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_445>=7 && LA485_445<=140 && (s=T2S.M_257[LA485_445-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_445);
                        if ( s>=0 ) return s;
                        break;
                    case 41 : 
                        int LA485_500 = input.LA(1);

                         
                        int index485_500 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_500>=7 && LA485_500<=111 && (s=T2S.M_36[LA485_500-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_500==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_500==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_500==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_500==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_500==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_500);
                        if ( s>=0 ) return s;
                        break;
                    case 42 : 
                        int LA485_2 = input.LA(1);

                         
                        int index485_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_2==Get) ) {s = 9;}

                        else if ( (LA485_2==Private) ) {s = 1;}

                        else if ( (LA485_2==Project) ) {s = 2;}

                        else if ( (LA485_2==Protected) ) {s = 3;}

                        else if ( (LA485_2==Public) ) {s = 4;}

                        else if ( (LA485_2==External) ) {s = 5;}

                        else if ( (LA485_2==Abstract) ) {s = 6;}

                        else if ( (LA485_2==Static) ) {s = 7;}

                        else if ( (LA485_2==Const) ) {s = 8;}

                        else if ( (LA485_2==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_2==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA485_2>=4 && LA485_2<=129 && (s=T2S.M_261[LA485_2-(4)])>=0)) { /* 55 cases */ }
                        else if ( (LA485_2==RULE_DOUBLE||LA485_2==RULE_HEX_INT||LA485_2==RULE_OCTAL_INT||LA485_2==RULE_SCIENTIFIC_INT||LA485_2==RULE_INT) ) {s = 67;}

                        else if ( (LA485_2==LeftSquareBracket) ) {s = 68;}

                        else if ( ((LA485_2>=Colon && LA485_2<=Semicolon)||LA485_2==EqualsSign) ) {s = 69;}

                        else if ( (LA485_2==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_2);
                        if ( s>=0 ) return s;
                        break;
                    case 43 : 
                        int LA485_274 = input.LA(1);

                         
                        int index485_274 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_274==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_274==FullStop) ) {s = 331;}

                        
                        else if ((LA485_274>=7 && LA485_274<=140 && (s=T2S.M_45[LA485_274-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA485_274==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_274==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index485_274);
                        if ( s>=0 ) return s;
                        break;
                    case 44 : 
                        int LA485_273 = input.LA(1);

                         
                        int index485_273 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_273==FullStop) ) {s = 331;}

                        else if ( (LA485_273==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_273>=7 && LA485_273<=140 && (s=T2S.M_250[LA485_273-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index485_273);
                        if ( s>=0 ) return s;
                        break;
                    case 45 : 
                        int LA485_9 = input.LA(1);

                         
                        int index485_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_9==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        
                        else if ((LA485_9>=4 && LA485_9<=129 && (s=T2S.M_396[LA485_9-(4)])>=0) && (synpred273_InternalN4JSParser())) { /* 65 cases */ }
                        else if ( (LA485_9==RULE_DOUBLE||LA485_9==RULE_HEX_INT||LA485_9==RULE_OCTAL_INT||LA485_9==RULE_SCIENTIFIC_INT||LA485_9==RULE_INT) && (synpred273_InternalN4JSParser())) {s = 135;}

                        else if ( (LA485_9==LeftSquareBracket) && (synpred273_InternalN4JSParser())) {s = 136;}

                        else if ( ((LA485_9>=Colon && LA485_9<=Semicolon)||LA485_9==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_9);
                        if ( s>=0 ) return s;
                        break;
                    case 46 : 
                        int LA485_444 = input.LA(1);

                         
                        int index485_444 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_444>=7 && LA485_444<=111 && (s=T2S.M_36[LA485_444-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_444==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_444==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_444==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_444==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_444==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_444);
                        if ( s>=0 ) return s;
                        break;
                    case 47 : 
                        int LA485_499 = input.LA(1);

                         
                        int index485_499 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_499==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_499>=7 && LA485_499<=140 && (s=T2S.M_257[LA485_499-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_499);
                        if ( s>=0 ) return s;
                        break;
                    case 48 : 
                        int LA485_276 = input.LA(1);

                         
                        int index485_276 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_276==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_276==FullStop) ) {s = 331;}

                        else if ( (LA485_276==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_276>=7 && LA485_276<=140 && (s=T2S.M_366[LA485_276-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_276);
                        if ( s>=0 ) return s;
                        break;
                    case 49 : 
                        int LA485_448 = input.LA(1);

                         
                        int index485_448 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_448>=7 && LA485_448<=111 && (s=T2S.M_36[LA485_448-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_448==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_448==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_448==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_448==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_448==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_448);
                        if ( s>=0 ) return s;
                        break;
                    case 50 : 
                        int LA485_446 = input.LA(1);

                         
                        int index485_446 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_446==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_446>=7 && LA485_446<=140 && (s=T2S.M_257[LA485_446-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_446);
                        if ( s>=0 ) return s;
                        break;
                    case 51 : 
                        int LA485_275 = input.LA(1);

                         
                        int index485_275 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_275==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_275==FullStop) ) {s = 331;}

                        else if ( (LA485_275==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_275>=7 && LA485_275<=140 && (s=T2S.M_366[LA485_275-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_275);
                        if ( s>=0 ) return s;
                        break;
                    case 52 : 
                        int LA485_447 = input.LA(1);

                         
                        int index485_447 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_447==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_447>=7 && LA485_447<=140 && (s=T2S.M_257[LA485_447-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_447);
                        if ( s>=0 ) return s;
                        break;
                    case 53 : 
                        int LA485_290 = input.LA(1);

                         
                        int index485_290 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_290==RULE_NO_LINE_TERMINATOR) && (synpred278_InternalN4JSParser())) {s = 434;}

                        else if ( (LA485_290==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 435;}

                        else if ( (LA485_290==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_290==FullStop) ) {s = 331;}

                        
                        else if ((LA485_290>=7 && LA485_290<=140 && (s=T2S.M_288[LA485_290-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA485_290==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_290==Function) && (synpred278_InternalN4JSParser())) {s = 436;}

                        else if ( (LA485_290==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index485_290);
                        if ( s>=0 ) return s;
                        break;
                    case 54 : 
                        int LA485_15 = input.LA(1);

                         
                        int index485_15 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_15>=Colon && LA485_15<=Semicolon)||LA485_15==EqualsSign) ) {s = 69;}

                        else if ( (LA485_15==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_15);
                        if ( s>=0 ) return s;
                        break;
                    case 55 : 
                        int LA485_5 = input.LA(1);

                         
                        int index485_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_5==Get) ) {s = 9;}

                        else if ( (LA485_5==Private) ) {s = 1;}

                        else if ( (LA485_5==Project) ) {s = 2;}

                        else if ( (LA485_5==Protected) ) {s = 3;}

                        else if ( (LA485_5==Public) ) {s = 4;}

                        else if ( (LA485_5==External) ) {s = 5;}

                        else if ( (LA485_5==Abstract) ) {s = 6;}

                        else if ( (LA485_5==Static) ) {s = 7;}

                        else if ( (LA485_5==Const) ) {s = 8;}

                        else if ( (LA485_5==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_5==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA485_5>=4 && LA485_5<=129 && (s=T2S.M_261[LA485_5-(4)])>=0)) { /* 55 cases */ }
                        else if ( (LA485_5==RULE_DOUBLE||LA485_5==RULE_HEX_INT||LA485_5==RULE_OCTAL_INT||LA485_5==RULE_SCIENTIFIC_INT||LA485_5==RULE_INT) ) {s = 67;}

                        else if ( (LA485_5==LeftSquareBracket) ) {s = 68;}

                        else if ( (LA485_5==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_5>=Colon && LA485_5<=Semicolon)||LA485_5==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_5);
                        if ( s>=0 ) return s;
                        break;
                    case 56 : 
                        int LA485_450 = input.LA(1);

                         
                        int index485_450 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_450==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_450>=7 && LA485_450<=140 && (s=T2S.M_257[LA485_450-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_450);
                        if ( s>=0 ) return s;
                        break;
                    case 57 : 
                        int LA485_16 = input.LA(1);

                         
                        int index485_16 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_16==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_16>=Colon && LA485_16<=Semicolon)||LA485_16==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_16);
                        if ( s>=0 ) return s;
                        break;
                    case 58 : 
                        int LA485_278 = input.LA(1);

                         
                        int index485_278 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_278==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_278==FullStop) ) {s = 331;}

                        
                        else if ((LA485_278>=7 && LA485_278<=140 && (s=T2S.M_45[LA485_278-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA485_278==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_278==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index485_278);
                        if ( s>=0 ) return s;
                        break;
                    case 59 : 
                        int LA485_451 = input.LA(1);

                         
                        int index485_451 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_451==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_451>=7 && LA485_451<=140 && (s=T2S.M_257[LA485_451-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_451);
                        if ( s>=0 ) return s;
                        break;
                    case 60 : 
                        int LA485_17 = input.LA(1);

                         
                        int index485_17 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_17>=Colon && LA485_17<=Semicolon)||LA485_17==EqualsSign) ) {s = 69;}

                        else if ( (LA485_17==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_17);
                        if ( s>=0 ) return s;
                        break;
                    case 61 : 
                        int LA485_438 = input.LA(1);

                         
                        int index485_438 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_438>=7 && LA485_438<=111 && (s=T2S.M_36[LA485_438-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_438==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_438==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_438==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_438==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_438==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_438);
                        if ( s>=0 ) return s;
                        break;
                    case 62 : 
                        int LA485_449 = input.LA(1);

                         
                        int index485_449 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_449==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_449>=7 && LA485_449<=140 && (s=T2S.M_257[LA485_449-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_449);
                        if ( s>=0 ) return s;
                        break;
                    case 63 : 
                        int LA485_18 = input.LA(1);

                         
                        int index485_18 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_18>=Colon && LA485_18<=Semicolon)||LA485_18==EqualsSign) ) {s = 69;}

                        else if ( (LA485_18==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_18);
                        if ( s>=0 ) return s;
                        break;
                    case 64 : 
                        int LA485_277 = input.LA(1);

                         
                        int index485_277 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_277==FullStop) ) {s = 331;}

                        else if ( (LA485_277==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_277>=7 && LA485_277<=140 && (s=T2S.M_250[LA485_277-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index485_277);
                        if ( s>=0 ) return s;
                        break;
                    case 65 : 
                        int LA485_332 = input.LA(1);

                         
                        int index485_332 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_332==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_332>=Colon && LA485_332<=Semicolon)||LA485_332==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_332);
                        if ( s>=0 ) return s;
                        break;
                    case 66 : 
                        int LA485_453 = input.LA(1);

                         
                        int index485_453 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_453==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_453>=7 && LA485_453<=140 && (s=T2S.M_257[LA485_453-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_453);
                        if ( s>=0 ) return s;
                        break;
                    case 67 : 
                        int LA485_51 = input.LA(1);

                         
                        int index485_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_51>=Colon && LA485_51<=Semicolon)||LA485_51==EqualsSign) ) {s = 69;}

                        else if ( (LA485_51==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_51);
                        if ( s>=0 ) return s;
                        break;
                    case 68 : 
                        int LA485_19 = input.LA(1);

                         
                        int index485_19 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_19==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_19>=Colon && LA485_19<=Semicolon)||LA485_19==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_19);
                        if ( s>=0 ) return s;
                        break;
                    case 69 : 
                        int LA485_280 = input.LA(1);

                         
                        int index485_280 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_280==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_280==FullStop) ) {s = 331;}

                        else if ( (LA485_280==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_280>=7 && LA485_280<=140 && (s=T2S.M_366[LA485_280-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_280);
                        if ( s>=0 ) return s;
                        break;
                    case 70 : 
                        int LA485_20 = input.LA(1);

                         
                        int index485_20 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_20>=Colon && LA485_20<=Semicolon)||LA485_20==EqualsSign) ) {s = 69;}

                        else if ( (LA485_20==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_20);
                        if ( s>=0 ) return s;
                        break;
                    case 71 : 
                        int LA485_67 = input.LA(1);

                         
                        int index485_67 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_67>=Colon && LA485_67<=Semicolon)||LA485_67==EqualsSign) ) {s = 69;}

                        else if ( (LA485_67==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_67);
                        if ( s>=0 ) return s;
                        break;
                    case 72 : 
                        int LA485_21 = input.LA(1);

                         
                        int index485_21 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_21>=Colon && LA485_21<=Semicolon)||LA485_21==EqualsSign) ) {s = 69;}

                        else if ( (LA485_21==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_21);
                        if ( s>=0 ) return s;
                        break;
                    case 73 : 
                        int LA485_279 = input.LA(1);

                         
                        int index485_279 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_279==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_279==FullStop) ) {s = 331;}

                        else if ( (LA485_279==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_279>=7 && LA485_279<=140 && (s=T2S.M_366[LA485_279-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_279);
                        if ( s>=0 ) return s;
                        break;
                    case 74 : 
                        int LA485_270 = input.LA(1);

                         
                        int index485_270 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_270==FullStop) ) {s = 331;}

                        else if ( (LA485_270==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_270>=7 && LA485_270<=140 && (s=T2S.M_250[LA485_270-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index485_270);
                        if ( s>=0 ) return s;
                        break;
                    case 75 : 
                        int LA485_452 = input.LA(1);

                         
                        int index485_452 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_452>=7 && LA485_452<=111 && (s=T2S.M_36[LA485_452-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_452==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_452==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_452==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_452==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_452==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_452);
                        if ( s>=0 ) return s;
                        break;
                    case 76 : 
                        int LA485_22 = input.LA(1);

                         
                        int index485_22 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_22>=Colon && LA485_22<=Semicolon)||LA485_22==EqualsSign) ) {s = 69;}

                        else if ( (LA485_22==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_22);
                        if ( s>=0 ) return s;
                        break;
                    case 77 : 
                        int LA485_1 = input.LA(1);

                         
                        int index485_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_1==Set) ) {s = 10;}

                        else if ( (LA485_1==Private) ) {s = 1;}

                        else if ( (LA485_1==Project) ) {s = 2;}

                        else if ( (LA485_1==Protected) ) {s = 3;}

                        else if ( (LA485_1==Public) ) {s = 4;}

                        else if ( (LA485_1==External) ) {s = 5;}

                        else if ( (LA485_1==Abstract) ) {s = 6;}

                        else if ( (LA485_1==Static) ) {s = 7;}

                        else if ( (LA485_1==Const) ) {s = 8;}

                        else if ( ((LA485_1>=Colon && LA485_1<=Semicolon)||LA485_1==EqualsSign) ) {s = 69;}

                        else if ( (LA485_1==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( (LA485_1==Get) ) {s = 9;}

                        else if ( (LA485_1==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_1==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        else if ( (LA485_1==Async) ) {s = 13;}

                        else if ( (LA485_1==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA485_1==Break) ) {s = 15;}

                        else if ( (LA485_1==Case) ) {s = 16;}

                        else if ( (LA485_1==Catch) ) {s = 17;}

                        else if ( (LA485_1==Class) ) {s = 18;}

                        else if ( (LA485_1==Continue) ) {s = 19;}

                        else if ( (LA485_1==Debugger) ) {s = 20;}

                        else if ( (LA485_1==Default) ) {s = 21;}

                        else if ( (LA485_1==Delete) ) {s = 22;}

                        else if ( (LA485_1==Do) ) {s = 23;}

                        else if ( (LA485_1==Else) ) {s = 24;}

                        else if ( (LA485_1==Export) ) {s = 25;}

                        else if ( (LA485_1==Extends) ) {s = 26;}

                        else if ( (LA485_1==Finally) ) {s = 27;}

                        else if ( (LA485_1==For) ) {s = 28;}

                        else if ( (LA485_1==Function) ) {s = 29;}

                        else if ( (LA485_1==If) ) {s = 30;}

                        else if ( (LA485_1==Import) ) {s = 31;}

                        else if ( (LA485_1==In) ) {s = 32;}

                        else if ( (LA485_1==Instanceof) ) {s = 33;}

                        else if ( (LA485_1==New) ) {s = 34;}

                        else if ( (LA485_1==Return) ) {s = 35;}

                        else if ( (LA485_1==Super) ) {s = 36;}

                        else if ( (LA485_1==Switch) ) {s = 37;}

                        else if ( (LA485_1==This_1) ) {s = 38;}

                        else if ( (LA485_1==Throw) ) {s = 39;}

                        else if ( (LA485_1==Try) ) {s = 40;}

                        else if ( (LA485_1==Typeof) ) {s = 41;}

                        else if ( (LA485_1==Var) ) {s = 42;}

                        else if ( (LA485_1==Void) ) {s = 43;}

                        else if ( (LA485_1==While) ) {s = 44;}

                        else if ( (LA485_1==With) ) {s = 45;}

                        else if ( (LA485_1==Yield) ) {s = 46;}

                        else if ( (LA485_1==Null) ) {s = 47;}

                        else if ( (LA485_1==True) ) {s = 48;}

                        else if ( (LA485_1==False) ) {s = 49;}

                        else if ( (LA485_1==Enum) ) {s = 50;}

                        else if ( (LA485_1==Let) ) {s = 51;}

                        else if ( (LA485_1==As) ) {s = 52;}

                        else if ( (LA485_1==From) ) {s = 53;}

                        else if ( (LA485_1==Constructor) ) {s = 54;}

                        else if ( (LA485_1==Of) ) {s = 55;}

                        else if ( (LA485_1==Target) ) {s = 56;}

                        else if ( (LA485_1==Type) ) {s = 57;}

                        else if ( (LA485_1==Union) ) {s = 58;}

                        else if ( (LA485_1==Intersection) ) {s = 59;}

                        else if ( (LA485_1==This) ) {s = 60;}

                        else if ( (LA485_1==Await) ) {s = 61;}

                        else if ( (LA485_1==Promisify) ) {s = 62;}

                        else if ( (LA485_1==Await_1) ) {s = 63;}

                        else if ( (LA485_1==Implements) ) {s = 64;}

                        else if ( (LA485_1==Interface) ) {s = 65;}

                        else if ( (LA485_1==RULE_STRING) ) {s = 66;}

                        else if ( (LA485_1==RULE_DOUBLE||LA485_1==RULE_HEX_INT||LA485_1==RULE_OCTAL_INT||LA485_1==RULE_SCIENTIFIC_INT||LA485_1==RULE_INT) ) {s = 67;}

                        else if ( (LA485_1==LeftSquareBracket) ) {s = 68;}

                         
                        input.seek(index485_1);
                        if ( s>=0 ) return s;
                        break;
                    case 78 : 
                        int LA485_23 = input.LA(1);

                         
                        int index485_23 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_23==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_23>=Colon && LA485_23<=Semicolon)||LA485_23==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_23);
                        if ( s>=0 ) return s;
                        break;
                    case 79 : 
                        int LA485_282 = input.LA(1);

                         
                        int index485_282 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_282==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_282==FullStop) ) {s = 331;}

                        
                        else if ((LA485_282>=7 && LA485_282<=140 && (s=T2S.M_45[LA485_282-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA485_282==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_282==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index485_282);
                        if ( s>=0 ) return s;
                        break;
                    case 80 : 
                        int LA485_7 = input.LA(1);

                         
                        int index485_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_7==Set) ) {s = 10;}

                        else if ( (LA485_7==Private) ) {s = 1;}

                        else if ( (LA485_7==Project) ) {s = 2;}

                        else if ( (LA485_7==Protected) ) {s = 3;}

                        else if ( (LA485_7==Public) ) {s = 4;}

                        else if ( (LA485_7==External) ) {s = 5;}

                        else if ( (LA485_7==Abstract) ) {s = 6;}

                        else if ( (LA485_7==Static) ) {s = 7;}

                        else if ( (LA485_7==Const) ) {s = 8;}

                        else if ( ((LA485_7>=Colon && LA485_7<=Semicolon)||LA485_7==EqualsSign) ) {s = 69;}

                        else if ( (LA485_7==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( (LA485_7==Get) ) {s = 9;}

                        else if ( (LA485_7==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_7==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        else if ( (LA485_7==Async) ) {s = 13;}

                        else if ( (LA485_7==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA485_7==Break) ) {s = 15;}

                        else if ( (LA485_7==Case) ) {s = 16;}

                        else if ( (LA485_7==Catch) ) {s = 17;}

                        else if ( (LA485_7==Class) ) {s = 18;}

                        else if ( (LA485_7==Continue) ) {s = 19;}

                        else if ( (LA485_7==Debugger) ) {s = 20;}

                        else if ( (LA485_7==Default) ) {s = 21;}

                        else if ( (LA485_7==Delete) ) {s = 22;}

                        else if ( (LA485_7==Do) ) {s = 23;}

                        else if ( (LA485_7==Else) ) {s = 24;}

                        else if ( (LA485_7==Export) ) {s = 25;}

                        else if ( (LA485_7==Extends) ) {s = 26;}

                        else if ( (LA485_7==Finally) ) {s = 27;}

                        else if ( (LA485_7==For) ) {s = 28;}

                        else if ( (LA485_7==Function) ) {s = 29;}

                        else if ( (LA485_7==If) ) {s = 30;}

                        else if ( (LA485_7==Import) ) {s = 31;}

                        else if ( (LA485_7==In) ) {s = 32;}

                        else if ( (LA485_7==Instanceof) ) {s = 33;}

                        else if ( (LA485_7==New) ) {s = 34;}

                        else if ( (LA485_7==Return) ) {s = 35;}

                        else if ( (LA485_7==Super) ) {s = 36;}

                        else if ( (LA485_7==Switch) ) {s = 37;}

                        else if ( (LA485_7==This_1) ) {s = 38;}

                        else if ( (LA485_7==Throw) ) {s = 39;}

                        else if ( (LA485_7==Try) ) {s = 40;}

                        else if ( (LA485_7==Typeof) ) {s = 41;}

                        else if ( (LA485_7==Var) ) {s = 42;}

                        else if ( (LA485_7==Void) ) {s = 43;}

                        else if ( (LA485_7==While) ) {s = 44;}

                        else if ( (LA485_7==With) ) {s = 45;}

                        else if ( (LA485_7==Yield) ) {s = 46;}

                        else if ( (LA485_7==Null) ) {s = 47;}

                        else if ( (LA485_7==True) ) {s = 48;}

                        else if ( (LA485_7==False) ) {s = 49;}

                        else if ( (LA485_7==Enum) ) {s = 50;}

                        else if ( (LA485_7==Let) ) {s = 51;}

                        else if ( (LA485_7==As) ) {s = 52;}

                        else if ( (LA485_7==From) ) {s = 53;}

                        else if ( (LA485_7==Constructor) ) {s = 54;}

                        else if ( (LA485_7==Of) ) {s = 55;}

                        else if ( (LA485_7==Target) ) {s = 56;}

                        else if ( (LA485_7==Type) ) {s = 57;}

                        else if ( (LA485_7==Union) ) {s = 58;}

                        else if ( (LA485_7==Intersection) ) {s = 59;}

                        else if ( (LA485_7==This) ) {s = 60;}

                        else if ( (LA485_7==Await) ) {s = 61;}

                        else if ( (LA485_7==Promisify) ) {s = 62;}

                        else if ( (LA485_7==Await_1) ) {s = 63;}

                        else if ( (LA485_7==Implements) ) {s = 64;}

                        else if ( (LA485_7==Interface) ) {s = 65;}

                        else if ( (LA485_7==RULE_STRING) ) {s = 66;}

                        else if ( (LA485_7==RULE_DOUBLE||LA485_7==RULE_HEX_INT||LA485_7==RULE_OCTAL_INT||LA485_7==RULE_SCIENTIFIC_INT||LA485_7==RULE_INT) ) {s = 67;}

                        else if ( (LA485_7==LeftSquareBracket) ) {s = 68;}

                         
                        input.seek(index485_7);
                        if ( s>=0 ) return s;
                        break;
                    case 81 : 
                        int LA485_52 = input.LA(1);

                         
                        int index485_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_52>=Colon && LA485_52<=Semicolon)||LA485_52==EqualsSign) ) {s = 69;}

                        else if ( (LA485_52==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_52);
                        if ( s>=0 ) return s;
                        break;
                    case 82 : 
                        int LA485_456 = input.LA(1);

                         
                        int index485_456 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_456>=7 && LA485_456<=111 && (s=T2S.M_36[LA485_456-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_456==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_456==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_456==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_456==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_456==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_456);
                        if ( s>=0 ) return s;
                        break;
                    case 83 : 
                        int LA485_24 = input.LA(1);

                         
                        int index485_24 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_24>=Colon && LA485_24<=Semicolon)||LA485_24==EqualsSign) ) {s = 69;}

                        else if ( (LA485_24==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_24);
                        if ( s>=0 ) return s;
                        break;
                    case 84 : 
                        int LA485_53 = input.LA(1);

                         
                        int index485_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_53==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_53>=Colon && LA485_53<=Semicolon)||LA485_53==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_53);
                        if ( s>=0 ) return s;
                        break;
                    case 85 : 
                        int LA485_454 = input.LA(1);

                         
                        int index485_454 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_454==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_454>=7 && LA485_454<=140 && (s=T2S.M_257[LA485_454-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_454);
                        if ( s>=0 ) return s;
                        break;
                    case 86 : 
                        int LA485_25 = input.LA(1);

                         
                        int index485_25 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_25>=Colon && LA485_25<=Semicolon)||LA485_25==EqualsSign) ) {s = 69;}

                        else if ( (LA485_25==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_25);
                        if ( s>=0 ) return s;
                        break;
                    case 87 : 
                        int LA485_68 = input.LA(1);

                         
                        int index485_68 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_68>=4 && LA485_68<=129 && (s=T2S.M_420[LA485_68-(4)])>=0)) { /* 27 cases */ }
                        
                        else if ((LA485_68>=15 && LA485_68<=149 && (s=T2S.M_421[LA485_68-(15)])>=0) && (synpred278_InternalN4JSParser())) { /* 34 cases */ }
                        input.seek(index485_68);
                        if ( s>=0 ) return s;
                        break;
                    case 88 : 
                        int LA485_281 = input.LA(1);

                         
                        int index485_281 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_281==FullStop) ) {s = 331;}

                        else if ( (LA485_281==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_281>=7 && LA485_281<=140 && (s=T2S.M_250[LA485_281-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index485_281);
                        if ( s>=0 ) return s;
                        break;
                    case 89 : 
                        int LA485_14 = input.LA(1);

                         
                        int index485_14 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_14>=Colon && LA485_14<=Semicolon)||LA485_14==EqualsSign) ) {s = 69;}

                        else if ( (LA485_14==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_14);
                        if ( s>=0 ) return s;
                        break;
                    case 90 : 
                        int LA485_455 = input.LA(1);

                         
                        int index485_455 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_455==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_455>=7 && LA485_455<=140 && (s=T2S.M_257[LA485_455-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_455);
                        if ( s>=0 ) return s;
                        break;
                    case 91 : 
                        int LA485_54 = input.LA(1);

                         
                        int index485_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_54>=Colon && LA485_54<=Semicolon)||LA485_54==EqualsSign) ) {s = 69;}

                        else if ( (LA485_54==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_54);
                        if ( s>=0 ) return s;
                        break;
                    case 92 : 
                        int LA485_26 = input.LA(1);

                         
                        int index485_26 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_26>=Colon && LA485_26<=Semicolon)||LA485_26==EqualsSign) ) {s = 69;}

                        else if ( (LA485_26==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_26);
                        if ( s>=0 ) return s;
                        break;
                    case 93 : 
                        int LA485_55 = input.LA(1);

                         
                        int index485_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_55>=Colon && LA485_55<=Semicolon)||LA485_55==EqualsSign) ) {s = 69;}

                        else if ( (LA485_55==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_55);
                        if ( s>=0 ) return s;
                        break;
                    case 94 : 
                        int LA485_458 = input.LA(1);

                         
                        int index485_458 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_458==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_458>=7 && LA485_458<=140 && (s=T2S.M_257[LA485_458-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_458);
                        if ( s>=0 ) return s;
                        break;
                    case 95 : 
                        int LA485_27 = input.LA(1);

                         
                        int index485_27 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_27==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_27>=Colon && LA485_27<=Semicolon)||LA485_27==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_27);
                        if ( s>=0 ) return s;
                        break;
                    case 96 : 
                        int LA485_6 = input.LA(1);

                         
                        int index485_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_6>=Colon && LA485_6<=Semicolon)||LA485_6==EqualsSign) ) {s = 69;}

                        else if ( (LA485_6==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( (LA485_6==Get) ) {s = 9;}

                        else if ( (LA485_6==Private) ) {s = 1;}

                        else if ( (LA485_6==Project) ) {s = 2;}

                        else if ( (LA485_6==Protected) ) {s = 3;}

                        else if ( (LA485_6==Public) ) {s = 4;}

                        else if ( (LA485_6==External) ) {s = 5;}

                        else if ( (LA485_6==Abstract) ) {s = 6;}

                        else if ( (LA485_6==Static) ) {s = 7;}

                        else if ( (LA485_6==Const) ) {s = 8;}

                        else if ( (LA485_6==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_6==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        else if ( (LA485_6==Async) ) {s = 13;}

                        else if ( (LA485_6==RULE_IDENTIFIER) ) {s = 14;}

                        else if ( (LA485_6==Break) ) {s = 15;}

                        else if ( (LA485_6==Case) ) {s = 16;}

                        else if ( (LA485_6==Catch) ) {s = 17;}

                        else if ( (LA485_6==Class) ) {s = 18;}

                        else if ( (LA485_6==Continue) ) {s = 19;}

                        else if ( (LA485_6==Debugger) ) {s = 20;}

                        else if ( (LA485_6==Default) ) {s = 21;}

                        else if ( (LA485_6==Delete) ) {s = 22;}

                        else if ( (LA485_6==Do) ) {s = 23;}

                        else if ( (LA485_6==Else) ) {s = 24;}

                        else if ( (LA485_6==Export) ) {s = 25;}

                        else if ( (LA485_6==Extends) ) {s = 26;}

                        else if ( (LA485_6==Finally) ) {s = 27;}

                        else if ( (LA485_6==For) ) {s = 28;}

                        else if ( (LA485_6==Function) ) {s = 29;}

                        else if ( (LA485_6==If) ) {s = 30;}

                        else if ( (LA485_6==Import) ) {s = 31;}

                        else if ( (LA485_6==In) ) {s = 32;}

                        else if ( (LA485_6==Instanceof) ) {s = 33;}

                        else if ( (LA485_6==New) ) {s = 34;}

                        else if ( (LA485_6==Return) ) {s = 35;}

                        else if ( (LA485_6==Super) ) {s = 36;}

                        else if ( (LA485_6==Switch) ) {s = 37;}

                        else if ( (LA485_6==This_1) ) {s = 38;}

                        else if ( (LA485_6==Throw) ) {s = 39;}

                        else if ( (LA485_6==Try) ) {s = 40;}

                        else if ( (LA485_6==Typeof) ) {s = 41;}

                        else if ( (LA485_6==Var) ) {s = 42;}

                        else if ( (LA485_6==Void) ) {s = 43;}

                        else if ( (LA485_6==While) ) {s = 44;}

                        else if ( (LA485_6==With) ) {s = 45;}

                        else if ( (LA485_6==Yield) ) {s = 46;}

                        else if ( (LA485_6==Null) ) {s = 47;}

                        else if ( (LA485_6==True) ) {s = 48;}

                        else if ( (LA485_6==False) ) {s = 49;}

                        else if ( (LA485_6==Enum) ) {s = 50;}

                        else if ( (LA485_6==Set) ) {s = 10;}

                        else if ( (LA485_6==Let) ) {s = 51;}

                        else if ( (LA485_6==As) ) {s = 52;}

                        else if ( (LA485_6==From) ) {s = 53;}

                        else if ( (LA485_6==Constructor) ) {s = 54;}

                        else if ( (LA485_6==Of) ) {s = 55;}

                        else if ( (LA485_6==Target) ) {s = 56;}

                        else if ( (LA485_6==Type) ) {s = 57;}

                        else if ( (LA485_6==Union) ) {s = 58;}

                        else if ( (LA485_6==Intersection) ) {s = 59;}

                        else if ( (LA485_6==This) ) {s = 60;}

                        else if ( (LA485_6==Await) ) {s = 61;}

                        else if ( (LA485_6==Promisify) ) {s = 62;}

                        else if ( (LA485_6==Await_1) ) {s = 63;}

                        else if ( (LA485_6==Implements) ) {s = 64;}

                        else if ( (LA485_6==Interface) ) {s = 65;}

                        else if ( (LA485_6==RULE_STRING) ) {s = 66;}

                        else if ( (LA485_6==RULE_DOUBLE||LA485_6==RULE_HEX_INT||LA485_6==RULE_OCTAL_INT||LA485_6==RULE_SCIENTIFIC_INT||LA485_6==RULE_INT) ) {s = 67;}

                        else if ( (LA485_6==LeftSquareBracket) ) {s = 68;}

                         
                        input.seek(index485_6);
                        if ( s>=0 ) return s;
                        break;
                    case 97 : 
                        int LA485_284 = input.LA(1);

                         
                        int index485_284 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_284==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_284==FullStop) ) {s = 331;}

                        else if ( (LA485_284==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_284>=7 && LA485_284<=140 && (s=T2S.M_366[LA485_284-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_284);
                        if ( s>=0 ) return s;
                        break;
                    case 98 : 
                        int LA485_459 = input.LA(1);

                         
                        int index485_459 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_459==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_459>=7 && LA485_459<=140 && (s=T2S.M_257[LA485_459-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_459);
                        if ( s>=0 ) return s;
                        break;
                    case 99 : 
                        int LA485_296 = input.LA(1);

                         
                        int index485_296 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_296>=7 && LA485_296<=140 && (s=T2S.M_272[LA485_296-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 40 cases */ }
                        else if ( (LA485_296==RightSquareBracket) ) {s = 332;}

                         
                        input.seek(index485_296);
                        if ( s>=0 ) return s;
                        break;
                    case 100 : 
                        int LA485_56 = input.LA(1);

                         
                        int index485_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_56>=Colon && LA485_56<=Semicolon)||LA485_56==EqualsSign) ) {s = 69;}

                        else if ( (LA485_56==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_56);
                        if ( s>=0 ) return s;
                        break;
                    case 101 : 
                        int LA485_28 = input.LA(1);

                         
                        int index485_28 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_28>=Colon && LA485_28<=Semicolon)||LA485_28==EqualsSign) ) {s = 69;}

                        else if ( (LA485_28==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_28);
                        if ( s>=0 ) return s;
                        break;
                    case 102 : 
                        int LA485_457 = input.LA(1);

                         
                        int index485_457 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_457==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_457>=7 && LA485_457<=140 && (s=T2S.M_257[LA485_457-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_457);
                        if ( s>=0 ) return s;
                        break;
                    case 103 : 
                        int LA485_57 = input.LA(1);

                         
                        int index485_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_57==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_57>=Colon && LA485_57<=Semicolon)||LA485_57==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_57);
                        if ( s>=0 ) return s;
                        break;
                    case 104 : 
                        int LA485_29 = input.LA(1);

                         
                        int index485_29 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_29>=Colon && LA485_29<=Semicolon)||LA485_29==EqualsSign) ) {s = 69;}

                        else if ( (LA485_29==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_29);
                        if ( s>=0 ) return s;
                        break;
                    case 105 : 
                        int LA485_283 = input.LA(1);

                         
                        int index485_283 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_283==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_283==FullStop) ) {s = 331;}

                        else if ( (LA485_283==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_283>=7 && LA485_283<=140 && (s=T2S.M_366[LA485_283-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_283);
                        if ( s>=0 ) return s;
                        break;
                    case 106 : 
                        int LA485_8 = input.LA(1);

                         
                        int index485_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_8==Get) ) {s = 9;}

                        else if ( (LA485_8==Private) ) {s = 1;}

                        else if ( (LA485_8==Project) ) {s = 2;}

                        else if ( (LA485_8==Protected) ) {s = 3;}

                        else if ( (LA485_8==Public) ) {s = 4;}

                        else if ( (LA485_8==External) ) {s = 5;}

                        else if ( (LA485_8==Abstract) ) {s = 6;}

                        else if ( (LA485_8==Static) ) {s = 7;}

                        else if ( (LA485_8==Const) ) {s = 8;}

                        else if ( (LA485_8==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_8==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA485_8>=4 && LA485_8<=129 && (s=T2S.M_261[LA485_8-(4)])>=0)) { /* 55 cases */ }
                        else if ( (LA485_8==RULE_DOUBLE||LA485_8==RULE_HEX_INT||LA485_8==RULE_OCTAL_INT||LA485_8==RULE_SCIENTIFIC_INT||LA485_8==RULE_INT) ) {s = 67;}

                        else if ( (LA485_8==LeftSquareBracket) ) {s = 68;}

                        else if ( ((LA485_8>=Colon && LA485_8<=Semicolon)||LA485_8==EqualsSign) ) {s = 69;}

                        else if ( (LA485_8==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_8);
                        if ( s>=0 ) return s;
                        break;
                    case 107 : 
                        int LA485_58 = input.LA(1);

                         
                        int index485_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_58>=Colon && LA485_58<=Semicolon)||LA485_58==EqualsSign) ) {s = 69;}

                        else if ( (LA485_58==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_58);
                        if ( s>=0 ) return s;
                        break;
                    case 108 : 
                        int LA485_30 = input.LA(1);

                         
                        int index485_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_30>=Colon && LA485_30<=Semicolon)||LA485_30==EqualsSign) ) {s = 69;}

                        else if ( (LA485_30==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_30);
                        if ( s>=0 ) return s;
                        break;
                    case 109 : 
                        int LA485_461 = input.LA(1);

                         
                        int index485_461 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_461==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_461>=7 && LA485_461<=140 && (s=T2S.M_257[LA485_461-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_461);
                        if ( s>=0 ) return s;
                        break;
                    case 110 : 
                        int LA485_59 = input.LA(1);

                         
                        int index485_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_59>=Colon && LA485_59<=Semicolon)||LA485_59==EqualsSign) ) {s = 69;}

                        else if ( (LA485_59==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_59);
                        if ( s>=0 ) return s;
                        break;
                    case 111 : 
                        int LA485_31 = input.LA(1);

                         
                        int index485_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_31==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_31>=Colon && LA485_31<=Semicolon)||LA485_31==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_31);
                        if ( s>=0 ) return s;
                        break;
                    case 112 : 
                        int LA485_286 = input.LA(1);

                         
                        int index485_286 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_286==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_286==FullStop) ) {s = 331;}

                        
                        else if ((LA485_286>=7 && LA485_286<=140 && (s=T2S.M_45[LA485_286-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 38 cases */ }
                        else if ( (LA485_286==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_286==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                         
                        input.seek(index485_286);
                        if ( s>=0 ) return s;
                        break;
                    case 113 : 
                        int LA485_60 = input.LA(1);

                         
                        int index485_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_60>=Colon && LA485_60<=Semicolon)||LA485_60==EqualsSign) ) {s = 69;}

                        else if ( (LA485_60==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_60);
                        if ( s>=0 ) return s;
                        break;
                    case 114 : 
                        int LA485_32 = input.LA(1);

                         
                        int index485_32 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_32>=Colon && LA485_32<=Semicolon)||LA485_32==EqualsSign) ) {s = 69;}

                        else if ( (LA485_32==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_32);
                        if ( s>=0 ) return s;
                        break;
                    case 115 : 
                        int LA485_61 = input.LA(1);

                         
                        int index485_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_61==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_61>=Colon && LA485_61<=Semicolon)||LA485_61==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_61);
                        if ( s>=0 ) return s;
                        break;
                    case 116 : 
                        int LA485_4 = input.LA(1);

                         
                        int index485_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_4==Set) ) {s = 10;}

                        else if ( (LA485_4==Private) ) {s = 1;}

                        else if ( (LA485_4==Project) ) {s = 2;}

                        else if ( (LA485_4==Protected) ) {s = 3;}

                        else if ( (LA485_4==Public) ) {s = 4;}

                        else if ( (LA485_4==External) ) {s = 5;}

                        else if ( (LA485_4==Abstract) ) {s = 6;}

                        else if ( (LA485_4==Static) ) {s = 7;}

                        else if ( (LA485_4==Const) ) {s = 8;}

                        else if ( (LA485_4==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( (LA485_4==Get) ) {s = 9;}

                        else if ( (LA485_4==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_4==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA485_4>=4 && LA485_4<=129 && (s=T2S.M_266[LA485_4-(4)])>=0)) { /* 54 cases */ }
                        else if ( (LA485_4==RULE_DOUBLE||LA485_4==RULE_HEX_INT||LA485_4==RULE_OCTAL_INT||LA485_4==RULE_SCIENTIFIC_INT||LA485_4==RULE_INT) ) {s = 67;}

                        else if ( (LA485_4==LeftSquareBracket) ) {s = 68;}

                        else if ( ((LA485_4>=Colon && LA485_4<=Semicolon)||LA485_4==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_4);
                        if ( s>=0 ) return s;
                        break;
                    case 117 : 
                        int LA485_33 = input.LA(1);

                         
                        int index485_33 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_33>=Colon && LA485_33<=Semicolon)||LA485_33==EqualsSign) ) {s = 69;}

                        else if ( (LA485_33==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_33);
                        if ( s>=0 ) return s;
                        break;
                    case 118 : 
                        int LA485_285 = input.LA(1);

                         
                        int index485_285 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_285==FullStop) ) {s = 331;}

                        else if ( (LA485_285==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_285>=7 && LA485_285<=140 && (s=T2S.M_250[LA485_285-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 40 cases */ }
                        input.seek(index485_285);
                        if ( s>=0 ) return s;
                        break;
                    case 119 : 
                        int LA485_62 = input.LA(1);

                         
                        int index485_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_62>=Colon && LA485_62<=Semicolon)||LA485_62==EqualsSign) ) {s = 69;}

                        else if ( (LA485_62==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_62);
                        if ( s>=0 ) return s;
                        break;
                    case 120 : 
                        int LA485_460 = input.LA(1);

                         
                        int index485_460 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_460>=7 && LA485_460<=111 && (s=T2S.M_36[LA485_460-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_460==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_460==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_460==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_460==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_460==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_460);
                        if ( s>=0 ) return s;
                        break;
                    case 121 : 
                        int LA485_34 = input.LA(1);

                         
                        int index485_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_34>=Colon && LA485_34<=Semicolon)||LA485_34==EqualsSign) ) {s = 69;}

                        else if ( (LA485_34==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_34);
                        if ( s>=0 ) return s;
                        break;
                    case 122 : 
                        int LA485_476 = input.LA(1);

                         
                        int index485_476 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_476>=7 && LA485_476<=111 && (s=T2S.M_36[LA485_476-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_476==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_476==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_476==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_476==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_476==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_476);
                        if ( s>=0 ) return s;
                        break;
                    case 123 : 
                        int LA485_63 = input.LA(1);

                         
                        int index485_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_63>=Colon && LA485_63<=Semicolon)||LA485_63==EqualsSign) ) {s = 69;}

                        else if ( (LA485_63==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_63);
                        if ( s>=0 ) return s;
                        break;
                    case 124 : 
                        int LA485_35 = input.LA(1);

                         
                        int index485_35 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_35==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_35>=Colon && LA485_35<=Semicolon)||LA485_35==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_35);
                        if ( s>=0 ) return s;
                        break;
                    case 125 : 
                        int LA485_288 = input.LA(1);

                         
                        int index485_288 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_288==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_288==FullStop) ) {s = 331;}

                        else if ( (LA485_288==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_288>=7 && LA485_288<=140 && (s=T2S.M_366[LA485_288-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_288);
                        if ( s>=0 ) return s;
                        break;
                    case 126 : 
                        int LA485_464 = input.LA(1);

                         
                        int index485_464 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_464>=7 && LA485_464<=111 && (s=T2S.M_36[LA485_464-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_464==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_464==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_464==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_464==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_464==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_464);
                        if ( s>=0 ) return s;
                        break;
                    case 127 : 
                        int LA485_36 = input.LA(1);

                         
                        int index485_36 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_36>=Colon && LA485_36<=Semicolon)||LA485_36==EqualsSign) ) {s = 69;}

                        else if ( (LA485_36==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_36);
                        if ( s>=0 ) return s;
                        break;
                    case 128 : 
                        int LA485_3 = input.LA(1);

                         
                        int index485_3 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_3==Get) ) {s = 9;}

                        else if ( (LA485_3==Private) ) {s = 1;}

                        else if ( (LA485_3==Project) ) {s = 2;}

                        else if ( (LA485_3==Protected) ) {s = 3;}

                        else if ( (LA485_3==Public) ) {s = 4;}

                        else if ( (LA485_3==External) ) {s = 5;}

                        else if ( (LA485_3==Abstract) ) {s = 6;}

                        else if ( (LA485_3==Static) ) {s = 7;}

                        else if ( (LA485_3==Const) ) {s = 8;}

                        else if ( (LA485_3==LessThanSign) && (synpred278_InternalN4JSParser())) {s = 11;}

                        else if ( (LA485_3==Asterisk) && (synpred278_InternalN4JSParser())) {s = 12;}

                        
                        else if ((LA485_3>=4 && LA485_3<=129 && (s=T2S.M_261[LA485_3-(4)])>=0)) { /* 55 cases */ }
                        else if ( (LA485_3==RULE_DOUBLE||LA485_3==RULE_HEX_INT||LA485_3==RULE_OCTAL_INT||LA485_3==RULE_SCIENTIFIC_INT||LA485_3==RULE_INT) ) {s = 67;}

                        else if ( (LA485_3==LeftSquareBracket) ) {s = 68;}

                        else if ( ((LA485_3>=Colon && LA485_3<=Semicolon)||LA485_3==EqualsSign) ) {s = 69;}

                        else if ( (LA485_3==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_3);
                        if ( s>=0 ) return s;
                        break;
                    case 129 : 
                        int LA485_64 = input.LA(1);

                         
                        int index485_64 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_64==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_64>=Colon && LA485_64<=Semicolon)||LA485_64==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_64);
                        if ( s>=0 ) return s;
                        break;
                    case 130 : 
                        int LA485_462 = input.LA(1);

                         
                        int index485_462 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_462==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_462>=7 && LA485_462<=140 && (s=T2S.M_257[LA485_462-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_462);
                        if ( s>=0 ) return s;
                        break;
                    case 131 : 
                        int LA485_37 = input.LA(1);

                         
                        int index485_37 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_37>=Colon && LA485_37<=Semicolon)||LA485_37==EqualsSign) ) {s = 69;}

                        else if ( (LA485_37==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_37);
                        if ( s>=0 ) return s;
                        break;
                    case 132 : 
                        int LA485_287 = input.LA(1);

                         
                        int index485_287 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_287==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_287==FullStop) ) {s = 331;}

                        else if ( (LA485_287==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_287>=7 && LA485_287<=140 && (s=T2S.M_366[LA485_287-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_287);
                        if ( s>=0 ) return s;
                        break;
                    case 133 : 
                        int LA485_463 = input.LA(1);

                         
                        int index485_463 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_463==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_463>=7 && LA485_463<=140 && (s=T2S.M_257[LA485_463-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_463);
                        if ( s>=0 ) return s;
                        break;
                    case 134 : 
                        int LA485_289 = input.LA(1);

                         
                        int index485_289 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_289==FullStop) ) {s = 331;}

                        else if ( (LA485_289==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_289>=4 && LA485_289<=149 && (s=T2S.M_443[LA485_289-(4)])>=0) && (synpred278_InternalN4JSParser())) { /* 89 cases */ }
                        input.seek(index485_289);
                        if ( s>=0 ) return s;
                        break;
                    case 135 : 
                        int LA485_65 = input.LA(1);

                         
                        int index485_65 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_65>=Colon && LA485_65<=Semicolon)||LA485_65==EqualsSign) ) {s = 69;}

                        else if ( (LA485_65==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_65);
                        if ( s>=0 ) return s;
                        break;
                    case 136 : 
                        int LA485_38 = input.LA(1);

                         
                        int index485_38 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_38>=Colon && LA485_38<=Semicolon)||LA485_38==EqualsSign) ) {s = 69;}

                        else if ( (LA485_38==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_38);
                        if ( s>=0 ) return s;
                        break;
                    case 137 : 
                        int LA485_466 = input.LA(1);

                         
                        int index485_466 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_466==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_466>=7 && LA485_466<=140 && (s=T2S.M_257[LA485_466-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_466);
                        if ( s>=0 ) return s;
                        break;
                    case 138 : 
                        int LA485_39 = input.LA(1);

                         
                        int index485_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_39==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_39>=Colon && LA485_39<=Semicolon)||LA485_39==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_39);
                        if ( s>=0 ) return s;
                        break;
                    case 139 : 
                        int LA485_467 = input.LA(1);

                         
                        int index485_467 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_467==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_467>=7 && LA485_467<=140 && (s=T2S.M_257[LA485_467-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_467);
                        if ( s>=0 ) return s;
                        break;
                    case 140 : 
                        int LA485_40 = input.LA(1);

                         
                        int index485_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_40>=Colon && LA485_40<=Semicolon)||LA485_40==EqualsSign) ) {s = 69;}

                        else if ( (LA485_40==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_40);
                        if ( s>=0 ) return s;
                        break;
                    case 141 : 
                        int LA485_479 = input.LA(1);

                         
                        int index485_479 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_479==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_479>=7 && LA485_479<=140 && (s=T2S.M_257[LA485_479-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_479);
                        if ( s>=0 ) return s;
                        break;
                    case 142 : 
                        int LA485_465 = input.LA(1);

                         
                        int index485_465 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_465==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_465>=7 && LA485_465<=140 && (s=T2S.M_257[LA485_465-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_465);
                        if ( s>=0 ) return s;
                        break;
                    case 143 : 
                        int LA485_41 = input.LA(1);

                         
                        int index485_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_41>=Colon && LA485_41<=Semicolon)||LA485_41==EqualsSign) ) {s = 69;}

                        else if ( (LA485_41==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_41);
                        if ( s>=0 ) return s;
                        break;
                    case 144 : 
                        int LA485_477 = input.LA(1);

                         
                        int index485_477 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_477>=7 && LA485_477<=111 && (s=T2S.M_36[LA485_477-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_477==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_477==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_477==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_477==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_477==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_477);
                        if ( s>=0 ) return s;
                        break;
                    case 145 : 
                        int LA485_478 = input.LA(1);

                         
                        int index485_478 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_478==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_478>=7 && LA485_478<=140 && (s=T2S.M_257[LA485_478-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_478);
                        if ( s>=0 ) return s;
                        break;
                    case 146 : 
                        int LA485_42 = input.LA(1);

                         
                        int index485_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_42>=Colon && LA485_42<=Semicolon)||LA485_42==EqualsSign) ) {s = 69;}

                        else if ( (LA485_42==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_42);
                        if ( s>=0 ) return s;
                        break;
                    case 147 : 
                        int LA485_469 = input.LA(1);

                         
                        int index485_469 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_469==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_469>=7 && LA485_469<=140 && (s=T2S.M_257[LA485_469-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_469);
                        if ( s>=0 ) return s;
                        break;
                    case 148 : 
                        int LA485_43 = input.LA(1);

                         
                        int index485_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_43==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                        else if ( ((LA485_43>=Colon && LA485_43<=Semicolon)||LA485_43==EqualsSign) ) {s = 69;}

                         
                        input.seek(index485_43);
                        if ( s>=0 ) return s;
                        break;
                    case 149 : 
                        int LA485_292 = input.LA(1);

                         
                        int index485_292 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_292==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_292==FullStop) ) {s = 331;}

                        else if ( (LA485_292==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_292>=7 && LA485_292<=140 && (s=T2S.M_366[LA485_292-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_292);
                        if ( s>=0 ) return s;
                        break;
                    case 150 : 
                        int LA485_481 = input.LA(1);

                         
                        int index485_481 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_481>=7 && LA485_481<=111 && (s=T2S.M_36[LA485_481-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_481==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_481==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_481==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_481==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_481==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_481);
                        if ( s>=0 ) return s;
                        break;
                    case 151 : 
                        int LA485_10 = input.LA(1);

                         
                        int index485_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_10>=Colon && LA485_10<=Semicolon)||LA485_10==EqualsSign) ) {s = 69;}

                        else if ( (LA485_10==RULE_IDENTIFIER) && (synpred275_InternalN4JSParser())) {s = 137;}

                        else if ( (LA485_10==Break) && (synpred275_InternalN4JSParser())) {s = 138;}

                        else if ( (LA485_10==Case) && (synpred275_InternalN4JSParser())) {s = 139;}

                        else if ( (LA485_10==Catch) && (synpred275_InternalN4JSParser())) {s = 140;}

                        else if ( (LA485_10==Class) && (synpred275_InternalN4JSParser())) {s = 141;}

                        else if ( (LA485_10==Const) && (synpred275_InternalN4JSParser())) {s = 142;}

                        else if ( (LA485_10==Continue) && (synpred275_InternalN4JSParser())) {s = 143;}

                        else if ( (LA485_10==Debugger) && (synpred275_InternalN4JSParser())) {s = 144;}

                        else if ( (LA485_10==Default) && (synpred275_InternalN4JSParser())) {s = 145;}

                        else if ( (LA485_10==Delete) && (synpred275_InternalN4JSParser())) {s = 146;}

                        else if ( (LA485_10==Do) && (synpred275_InternalN4JSParser())) {s = 147;}

                        else if ( (LA485_10==Else) && (synpred275_InternalN4JSParser())) {s = 148;}

                        else if ( (LA485_10==Export) && (synpred275_InternalN4JSParser())) {s = 149;}

                        else if ( (LA485_10==Extends) && (synpred275_InternalN4JSParser())) {s = 150;}

                        else if ( (LA485_10==Finally) && (synpred275_InternalN4JSParser())) {s = 151;}

                        else if ( (LA485_10==For) && (synpred275_InternalN4JSParser())) {s = 152;}

                        else if ( (LA485_10==Function) && (synpred275_InternalN4JSParser())) {s = 153;}

                        else if ( (LA485_10==If) && (synpred275_InternalN4JSParser())) {s = 154;}

                        else if ( (LA485_10==Import) && (synpred275_InternalN4JSParser())) {s = 155;}

                        else if ( (LA485_10==In) && (synpred275_InternalN4JSParser())) {s = 156;}

                        else if ( (LA485_10==Instanceof) && (synpred275_InternalN4JSParser())) {s = 157;}

                        else if ( (LA485_10==New) && (synpred275_InternalN4JSParser())) {s = 158;}

                        else if ( (LA485_10==Return) && (synpred275_InternalN4JSParser())) {s = 159;}

                        else if ( (LA485_10==Super) && (synpred275_InternalN4JSParser())) {s = 160;}

                        else if ( (LA485_10==Switch) && (synpred275_InternalN4JSParser())) {s = 161;}

                        else if ( (LA485_10==This_1) && (synpred275_InternalN4JSParser())) {s = 162;}

                        else if ( (LA485_10==Throw) && (synpred275_InternalN4JSParser())) {s = 163;}

                        else if ( (LA485_10==Try) && (synpred275_InternalN4JSParser())) {s = 164;}

                        else if ( (LA485_10==Typeof) && (synpred275_InternalN4JSParser())) {s = 165;}

                        else if ( (LA485_10==Var) && (synpred275_InternalN4JSParser())) {s = 166;}

                        else if ( (LA485_10==Void) && (synpred275_InternalN4JSParser())) {s = 167;}

                        else if ( (LA485_10==While) && (synpred275_InternalN4JSParser())) {s = 168;}

                        else if ( (LA485_10==With) && (synpred275_InternalN4JSParser())) {s = 169;}

                        else if ( (LA485_10==Yield) && (synpred275_InternalN4JSParser())) {s = 170;}

                        else if ( (LA485_10==Null) && (synpred275_InternalN4JSParser())) {s = 171;}

                        else if ( (LA485_10==True) && (synpred275_InternalN4JSParser())) {s = 172;}

                        else if ( (LA485_10==False) && (synpred275_InternalN4JSParser())) {s = 173;}

                        else if ( (LA485_10==Enum) && (synpred275_InternalN4JSParser())) {s = 174;}

                        else if ( (LA485_10==Get) && (synpred275_InternalN4JSParser())) {s = 175;}

                        else if ( (LA485_10==Set) && (synpred275_InternalN4JSParser())) {s = 176;}

                        else if ( (LA485_10==Let) && (synpred275_InternalN4JSParser())) {s = 177;}

                        else if ( (LA485_10==Project) && (synpred275_InternalN4JSParser())) {s = 178;}

                        else if ( (LA485_10==External) && (synpred275_InternalN4JSParser())) {s = 179;}

                        else if ( (LA485_10==Abstract) && (synpred275_InternalN4JSParser())) {s = 180;}

                        else if ( (LA485_10==Static) && (synpred275_InternalN4JSParser())) {s = 181;}

                        else if ( (LA485_10==As) && (synpred275_InternalN4JSParser())) {s = 182;}

                        else if ( (LA485_10==From) && (synpred275_InternalN4JSParser())) {s = 183;}

                        else if ( (LA485_10==Constructor) && (synpred275_InternalN4JSParser())) {s = 184;}

                        else if ( (LA485_10==Of) && (synpred275_InternalN4JSParser())) {s = 185;}

                        else if ( (LA485_10==Target) && (synpred275_InternalN4JSParser())) {s = 186;}

                        else if ( (LA485_10==Type) && (synpred275_InternalN4JSParser())) {s = 187;}

                        else if ( (LA485_10==Union) && (synpred275_InternalN4JSParser())) {s = 188;}

                        else if ( (LA485_10==Intersection) && (synpred275_InternalN4JSParser())) {s = 189;}

                        else if ( (LA485_10==This) && (synpred275_InternalN4JSParser())) {s = 190;}

                        else if ( (LA485_10==Await) && (synpred275_InternalN4JSParser())) {s = 191;}

                        else if ( (LA485_10==Promisify) && (synpred275_InternalN4JSParser())) {s = 192;}

                        else if ( (LA485_10==Await_1) && (synpred275_InternalN4JSParser())) {s = 193;}

                        else if ( (LA485_10==Async) && (synpred275_InternalN4JSParser())) {s = 194;}

                        else if ( (LA485_10==Implements) && (synpred275_InternalN4JSParser())) {s = 195;}

                        else if ( (LA485_10==Interface) && (synpred275_InternalN4JSParser())) {s = 196;}

                        else if ( (LA485_10==Private) && (synpred275_InternalN4JSParser())) {s = 197;}

                        else if ( (LA485_10==Protected) && (synpred275_InternalN4JSParser())) {s = 198;}

                        else if ( (LA485_10==Public) && (synpred275_InternalN4JSParser())) {s = 199;}

                        else if ( (LA485_10==RULE_STRING) && (synpred275_InternalN4JSParser())) {s = 200;}

                        else if ( (LA485_10==RULE_DOUBLE||LA485_10==RULE_HEX_INT||LA485_10==RULE_OCTAL_INT||LA485_10==RULE_SCIENTIFIC_INT||LA485_10==RULE_INT) && (synpred275_InternalN4JSParser())) {s = 201;}

                        else if ( (LA485_10==LeftSquareBracket) && (synpred275_InternalN4JSParser())) {s = 202;}

                        else if ( (LA485_10==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_10);
                        if ( s>=0 ) return s;
                        break;
                    case 152 : 
                        int LA485_482 = input.LA(1);

                         
                        int index485_482 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_482==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_482>=7 && LA485_482<=140 && (s=T2S.M_257[LA485_482-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 41 cases */ }
                        input.seek(index485_482);
                        if ( s>=0 ) return s;
                        break;
                    case 153 : 
                        int LA485_44 = input.LA(1);

                         
                        int index485_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_44>=Colon && LA485_44<=Semicolon)||LA485_44==EqualsSign) ) {s = 69;}

                        else if ( (LA485_44==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_44);
                        if ( s>=0 ) return s;
                        break;
                    case 154 : 
                        int LA485_480 = input.LA(1);

                         
                        int index485_480 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_480>=7 && LA485_480<=111 && (s=T2S.M_36[LA485_480-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_480==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_480==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_480==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_480==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_480==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_480);
                        if ( s>=0 ) return s;
                        break;
                    case 155 : 
                        int LA485_45 = input.LA(1);

                         
                        int index485_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_45>=Colon && LA485_45<=Semicolon)||LA485_45==EqualsSign) ) {s = 69;}

                        else if ( (LA485_45==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_45);
                        if ( s>=0 ) return s;
                        break;
                    case 156 : 
                        int LA485_291 = input.LA(1);

                         
                        int index485_291 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA485_291==EqualsSignGreaterThanSign) && (synpred278_InternalN4JSParser())) {s = 333;}

                        else if ( (LA485_291==FullStop) ) {s = 331;}

                        else if ( (LA485_291==RightSquareBracket) ) {s = 332;}

                        
                        else if ((LA485_291>=7 && LA485_291<=140 && (s=T2S.M_366[LA485_291-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 39 cases */ }
                        input.seek(index485_291);
                        if ( s>=0 ) return s;
                        break;
                    case 157 : 
                        int LA485_468 = input.LA(1);

                         
                        int index485_468 = input.index();
                        input.rewind();
                        s = -1;
                        if ((LA485_468>=7 && LA485_468<=111 && (s=T2S.M_36[LA485_468-(7)])>=0) && (synpred278_InternalN4JSParser())) { /* 36 cases */ }
                        else if ( (LA485_468==RightSquareBracket) ) {s = 332;}

                        else if ( (LA485_468==LeftSquareBracket) && (synpred278_InternalN4JSParser())) {s = 334;}

                        else if ( (LA485_468==FullStop) && (synpred278_InternalN4JSParser())) {s = 437;}

                        else if ( (LA485_468==RULE_NO_SUBSTITUTION_TEMPLATE_LITERAL) && (synpred278_InternalN4JSParser())) {s = 335;}

                        else if ( (LA485_468==RULE_TEMPLATE_HEAD) && (synpred278_InternalN4JSParser())) {s = 336;}

                         
                        input.seek(index485_468);
                        if ( s>=0 ) return s;
                        break;
                    case 158 : 
                        int LA485_46 = input.LA(1);

                         
                        int index485_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( ((LA485_46>=Colon && LA485_46<=Semicolon)||LA485_46==EqualsSign) ) {s = 69;}

                        else if ( (LA485_46==LeftParenthesis) && (synpred278_InternalN4JSParser())) {s = 70;}

                         
                        input.seek(index485_46);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 485, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA481 extends DFA {

        public DFA481(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 481;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "()* loopback of 13120:26: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_295s = "\140\uffff";
    static final String dfa_296s = "\1\4\24\7\1\4\7\7\1\uffff\1\4\1\0\77\7\1\uffff";
    static final String dfa_297s = "\1\u0095\24\u008c\1\u0095\1\u0091\6\u008c\1\uffff\1\176\1\0\77\u008c\1\uffff";
    static final String dfa_298s = "\35\uffff\1\2\101\uffff\1\1";
    static final String dfa_299s = "\37\uffff\1\0\100\uffff}>";
    static final String[] dfa_300s = {
            "\1\21\1\14\1\27\1\uffff\1\24\1\30\1\32\1\10\2\uffff\1\7\1\35\3\uffff\1\31\1\6\1\35\2\uffff\1\33\1\uffff\1\11\1\uffff\1\16\1\35\1\23\1\26\1\25\2\uffff\1\35\1\uffff\2\35\1\uffff\1\20\1\uffff\1\2\1\22\3\uffff\1\13\3\35\1\17\1\35\6\uffff\1\3\1\5\1\35\1\4\7\uffff\1\35\1\uffff\1\35\1\uffff\1\35\7\uffff\1\12\3\uffff\1\15\2\uffff\1\35\2\uffff\1\35\2\uffff\1\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\3\uffff\2\35\2\uffff\1\35\2\uffff\1\35\3\uffff\1\35\1\uffff\4\35\1\uffff\1\35\1\uffff\1\1\2\uffff\1\34\11\uffff\2\35\10\uffff\1\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\10\35\2\uffff\2\35\3\uffff\3\35\2\uffff\1\35\1\uffff\1\35\1\uffff\5\35\2\uffff\1\35\1\uffff\2\35\1\uffff\1\35\1\uffff\2\35\3\uffff\6\35\1\uffff\1\35\1\uffff\2\35\1\uffff\4\35\2\uffff\17\35\1\uffff\2\35\2\uffff\10\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\6\35\1\37\3\35\1\uffff\1\35\3\uffff\1\35\1\uffff\4\35\1\uffff\1\35\1\uffff\1\35\2\uffff\1\35\11\uffff\2\35\10\uffff\1\35",
            "\1\35\7\uffff\1\35\46\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35\4\uffff\1\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\17\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\1\35\1\36\1\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "",
            "\1\124\1\117\1\132\1\64\1\127\1\133\1\135\1\113\1\46\1\47\1\112\1\60\1\50\1\55\1\56\1\134\1\111\1\51\1\54\1\62\1\136\1\66\1\114\1\70\1\121\1\74\1\126\1\131\1\130\1\41\1\43\1\44\1\45\1\104\1\67\1\72\1\123\1\77\1\101\1\125\1\42\1\53\1\105\1\116\1\102\1\71\1\103\1\122\1\76\1\100\4\uffff\1\57\1\106\1\110\1\65\1\107\1\73\1\75\21\uffff\1\115\1\52\1\61\1\63\1\120\17\uffff\1\35\27\uffff\1\40",
            "\1\uffff",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            "\1\35\56\uffff\1\35\1\uffff\2\35\7\uffff\15\35\1\uffff\1\35\1\uffff\2\35\2\uffff\1\35\1\uffff\2\35\1\uffff\3\35\1\uffff\2\35\1\uffff\3\35\2\uffff\4\35\1\uffff\1\35\1\37\1\35\1\uffff\1\35\33\uffff\2\35",
            ""
    };

    static final short[] dfa_295 = DFA.unpackEncodedString(dfa_295s);
    static final char[] dfa_296 = DFA.unpackEncodedStringToUnsignedChars(dfa_296s);
    static final char[] dfa_297 = DFA.unpackEncodedStringToUnsignedChars(dfa_297s);
    static final short[] dfa_298 = DFA.unpackEncodedString(dfa_298s);
    static final short[] dfa_299 = DFA.unpackEncodedString(dfa_299s);
    static final short[][] dfa_300 = unpackEncodedStringArray(dfa_300s);

    class DFA487 extends DFA {

        public DFA487(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 487;
            this.eot = dfa_295;
            this.eof = dfa_295;
            this.min = dfa_296;
            this.max = dfa_297;
            this.accept = dfa_298;
            this.special = dfa_299;
            this.transition = dfa_300;
        }
        public String getDescription() {
            return "13171:185: ( ( ( ( ( ( ( ruleSymbolLiteralComputedName ) ) | ( ( ruleStringLiteralAsName ) ) ) RightSquareBracket ) )=> ( ( ( (NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0= ruleSymbolLiteralComputedName ) ) | ( (NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0= ruleStringLiteralAsName ) ) ) RightSquareBracketKeyword_3_1_0_0_1= RightSquareBracket ) ) | ( ( (ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0= norm1_AssignmentExpression ) ) RightSquareBracketKeyword_3_1_1_1= RightSquareBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA487_31 = input.LA(1);

                         
                        int index487_31 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred281_InternalN4JSParser()) ) {s = 95;}

                        else if ( (true) ) {s = 29;}

                         
                        input.seek(index487_31);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 487, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_301s = "\137\uffff";
    static final String dfa_302s = "\1\4\23\7\1\4\7\7\1\uffff\1\4\1\0\77\7\1\uffff";
    static final String dfa_303s = "\1\u0095\23\u008c\1\u0095\1\u0091\6\u008c\1\uffff\1\176\1\0\77\u008c\1\uffff";
    static final String dfa_304s = "\34\uffff\1\2\101\uffff\1\1";
    static final String dfa_305s = "\36\uffff\1\0\100\uffff}>";
    static final String[] dfa_306s = {
            "\1\20\1\13\1\26\1\uffff\1\23\1\27\1\31\1\7\2\uffff\1\6\1\34\3\uffff\1\30\1\5\1\34\2\uffff\1\32\1\uffff\1\10\1\uffff\1\15\1\34\1\22\1\25\1\24\2\uffff\1\34\1\uffff\2\34\1\uffff\1\17\1\uffff\1\34\1\21\3\uffff\1\12\3\34\1\16\1\34\6\uffff\1\2\1\4\1\34\1\3\7\uffff\1\34\1\uffff\1\34\1\uffff\1\34\7\uffff\1\11\3\uffff\1\14\2\uffff\1\34\2\uffff\1\34\2\uffff\1\34\1\uffff\1\34\1\uffff\1\34\2\uffff\1\34\3\uffff\2\34\2\uffff\1\34\2\uffff\1\34\3\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\1\2\uffff\1\33\11\uffff\2\34\10\uffff\1\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\10\34\2\uffff\2\34\3\uffff\3\34\2\uffff\1\34\1\uffff\1\34\1\uffff\5\34\2\uffff\1\34\1\uffff\2\34\1\uffff\1\34\1\uffff\2\34\3\uffff\6\34\1\uffff\1\34\1\uffff\2\34\1\uffff\4\34\2\uffff\17\34\1\uffff\2\34\2\uffff\10\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\6\34\1\36\3\34\1\uffff\1\34\3\uffff\1\34\1\uffff\4\34\1\uffff\1\34\1\uffff\1\34\2\uffff\1\34\11\uffff\2\34\10\uffff\1\34",
            "\1\34\7\uffff\1\34\46\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34\4\uffff\1\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\17\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\1\34\1\35\1\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "",
            "\1\123\1\116\1\131\1\63\1\126\1\132\1\134\1\112\1\45\1\46\1\111\1\57\1\47\1\54\1\55\1\133\1\110\1\50\1\53\1\61\1\135\1\65\1\113\1\67\1\120\1\73\1\125\1\130\1\127\1\40\1\42\1\43\1\44\1\103\1\66\1\71\1\122\1\76\1\100\1\124\1\41\1\52\1\104\1\115\1\101\1\70\1\102\1\121\1\75\1\77\4\uffff\1\56\1\105\1\107\1\64\1\106\1\72\1\74\21\uffff\1\114\1\51\1\60\1\62\1\117\17\uffff\1\34\27\uffff\1\37",
            "\1\uffff",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            "\1\34\56\uffff\1\34\1\uffff\2\34\7\uffff\15\34\1\uffff\1\34\1\uffff\2\34\2\uffff\1\34\1\uffff\2\34\1\uffff\3\34\1\uffff\2\34\1\uffff\3\34\2\uffff\4\34\1\uffff\1\34\1\36\1\34\1\uffff\1\34\33\uffff\2\34",
            ""
    };

    static final short[] dfa_301 = DFA.unpackEncodedString(dfa_301s);
    static final char[] dfa_302 = DFA.unpackEncodedStringToUnsignedChars(dfa_302s);
    static final char[] dfa_303 = DFA.unpackEncodedStringToUnsignedChars(dfa_303s);
    static final short[] dfa_304 = DFA.unpackEncodedString(dfa_304s);
    static final short[] dfa_305 = DFA.unpackEncodedString(dfa_305s);
    static final short[][] dfa_306 = unpackEncodedStringArray(dfa_306s);

    class DFA490 extends DFA {

        public DFA490(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 490;
            this.eot = dfa_301;
            this.eof = dfa_301;
            this.min = dfa_302;
            this.max = dfa_303;
            this.accept = dfa_304;
            this.special = dfa_305;
            this.transition = dfa_306;
        }
        public String getDescription() {
            return "13226:185: ( ( ( ( ( ( ( norm1_SymbolLiteralComputedName ) ) | ( ( ruleStringLiteralAsName ) ) ) RightSquareBracket ) )=> ( ( ( (NameSymbolLiteralComputedNameParserRuleCall_3_1_0_0_0_0_0= norm1_SymbolLiteralComputedName ) ) | ( (NameStringLiteralAsNameParserRuleCall_3_1_0_0_0_1_0= ruleStringLiteralAsName ) ) ) RightSquareBracketKeyword_3_1_0_0_1= RightSquareBracket ) ) | ( ( (ComputeNameFromAssignmentExpressionParserRuleCall_3_1_1_0_0= norm3_AssignmentExpression ) ) RightSquareBracketKeyword_3_1_1_1= RightSquareBracket ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA490_30 = input.LA(1);

                         
                        int index490_30 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred282_InternalN4JSParser()) ) {s = 94;}

                        else if ( (true) ) {s = 28;}

                         
                        input.seek(index490_30);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 490, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String[] dfa_307s = {
            "\6\1\1\10\1\5\2\1\1\4\4\1\1\7\1\3\3\1\1\11\1\1\1\6\11\1\1\2\21\1\4\uffff\7\1\21\uffff\5\1\24\uffff\1\1\11\uffff\1\1\1\uffff\1\1\1\uffff\1\1\2\uffff\1\1\1\uffff\1\1\2\uffff\1\1\23\uffff\1\1",
            "",
            "\62\12\4\uffff\7\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\3\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\3\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\3\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\3\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\3\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\3\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\3\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            "\62\12\4\uffff\7\12\21\uffff\5\12\15\uffff\2\1\1\uffff\1\1\3\uffff\1\12\11\uffff\1\12\1\uffff\1\12\1\uffff\1\12\2\uffff\1\12\1\uffff\1\12\2\uffff\1\12\23\uffff\1\12",
            ""
    };
    static final short[][] dfa_307 = unpackEncodedStringArray(dfa_307s);

    class DFA496 extends DFA {

        public DFA496(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 496;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_307;
        }
        public String getDescription() {
            return "()* loopback of 13360:2: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA499 extends DFA {

        public DFA499(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 499;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_307;
        }
        public String getDescription() {
            return "()* loopback of 13384:2: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA502 extends DFA {

        public DFA502(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 502;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "()* loopback of 13459:26: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA506 extends DFA {

        public DFA506(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 506;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "()* loopback of 13504:26: ( ( ruleN4Modifier ) )*";
        }
    }
    static final String dfa_308s = "\1\154\1\176\1\uffff\1\176\1\uffff";
    static final String[] dfa_309s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\3\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\1\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\3\4\7\uffff\1\4\1\uffff\2\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\1\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final char[] dfa_308 = DFA.unpackEncodedStringToUnsignedChars(dfa_308s);
    static final short[][] dfa_309 = unpackEncodedStringArray(dfa_309s);

    class DFA540 extends DFA {

        public DFA540(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 540;
            this.eot = dfa_151;
            this.eof = dfa_151;
            this.min = dfa_152;
            this.max = dfa_308;
            this.accept = dfa_154;
            this.special = dfa_155;
            this.transition = dfa_309;
        }
        public String getDescription() {
            return "()* loopback of 14441:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= ruleBindingRestElement ) ) )*";
        }
    }
    static final String[] dfa_310s = {
            "\1\1\13\uffff\1\2",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\3\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\1\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            "",
            "\3\4\1\uffff\4\4\2\uffff\1\4\4\uffff\2\4\3\uffff\1\4\1\uffff\1\4\1\uffff\1\4\1\uffff\3\4\7\uffff\1\4\2\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\1\4\3\uffff\2\4\1\uffff\1\4\23\uffff\1\4\3\uffff\1\4\11\uffff\1\3\11\uffff\2\4\1\2\1\uffff\1\4\17\uffff\1\4",
            ""
    };
    static final short[][] dfa_310 = unpackEncodedStringArray(dfa_310s);

    class DFA546 extends DFA {

        public DFA546(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 546;
            this.eot = dfa_151;
            this.eof = dfa_151;
            this.min = dfa_152;
            this.max = dfa_308;
            this.accept = dfa_154;
            this.special = dfa_155;
            this.transition = dfa_310;
        }
        public String getDescription() {
            return "()* loopback of 14477:2: (CommaKeyword_3_1_0= Comma ( (ElementsElisionParserRuleCall_3_1_1_0= ruleElision ) )* ( (ElementsBindingRestElementParserRuleCall_3_1_2_0= norm1_BindingRestElement ) ) )*";
        }
    }
    static final String dfa_311s = "\1\uffff\1\103\40\uffff\1\103\4\uffff\31\103\5\uffff";
    static final String dfa_312s = "\1\4\1\140\40\uffff\1\140\4\uffff\31\140\5\uffff";
    static final String dfa_313s = "\1\u0095\1\160\40\uffff\1\160\4\uffff\31\160\5\uffff";
    static final String dfa_314s = "\2\uffff\40\1\1\uffff\4\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_315s = "\1\30\1\16\40\uffff\1\3\4\uffff\1\7\1\13\1\17\1\22\1\25\1\31\1\0\1\4\1\10\1\14\1\20\1\23\1\26\1\32\1\1\1\5\1\11\1\15\1\21\1\24\1\27\1\33\1\2\1\6\1\12\5\uffff}>";
    static final String[] dfa_316s = {
            "\1\65\1\60\1\73\1\25\1\70\1\74\1\76\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\75\1\52\1\12\1\15\1\23\1\77\1\27\1\55\1\31\1\62\1\35\1\67\1\72\1\71\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final short[] dfa_311 = DFA.unpackEncodedString(dfa_311s);
    static final char[] dfa_312 = DFA.unpackEncodedStringToUnsignedChars(dfa_312s);
    static final char[] dfa_313 = DFA.unpackEncodedStringToUnsignedChars(dfa_313s);
    static final short[] dfa_314 = DFA.unpackEncodedString(dfa_314s);
    static final short[] dfa_315 = DFA.unpackEncodedString(dfa_315s);
    static final short[][] dfa_316 = unpackEncodedStringArray(dfa_316s);

    class DFA550 extends DFA {

        public DFA550(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 550;
            this.eot = dfa_214;
            this.eof = dfa_311;
            this.min = dfa_312;
            this.max = dfa_313;
            this.accept = dfa_314;
            this.special = dfa_315;
            this.transition = dfa_316;
        }
        public String getDescription() {
            return "14510:1: ( ( ( ( ( ruleLiteralBindingPropertyName Colon ) )=> (LiteralBindingPropertyNameParserRuleCall_0_0_0_0= ruleLiteralBindingPropertyName ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= ruleBindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= ruleSingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA550_45 = input.LA(1);

                         
                        int index550_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_45==EOF||LA550_45==Comma||LA550_45==EqualsSign||LA550_45==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_45==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_45);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA550_53 = input.LA(1);

                         
                        int index550_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_53==EOF||LA550_53==Comma||LA550_53==EqualsSign||LA550_53==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_53==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_53);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA550_61 = input.LA(1);

                         
                        int index550_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_61==EOF||LA550_61==Comma||LA550_61==EqualsSign||LA550_61==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_61==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_61);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA550_34 = input.LA(1);

                         
                        int index550_34 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_34==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_34==EOF||LA550_34==Comma||LA550_34==EqualsSign||LA550_34==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_34);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA550_46 = input.LA(1);

                         
                        int index550_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_46==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_46==EOF||LA550_46==Comma||LA550_46==EqualsSign||LA550_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_46);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA550_54 = input.LA(1);

                         
                        int index550_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_54==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_54==EOF||LA550_54==Comma||LA550_54==EqualsSign||LA550_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_54);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA550_62 = input.LA(1);

                         
                        int index550_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_62==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_62==EOF||LA550_62==Comma||LA550_62==EqualsSign||LA550_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_62);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA550_39 = input.LA(1);

                         
                        int index550_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_39==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_39==EOF||LA550_39==Comma||LA550_39==EqualsSign||LA550_39==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_39);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA550_47 = input.LA(1);

                         
                        int index550_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_47==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_47==EOF||LA550_47==Comma||LA550_47==EqualsSign||LA550_47==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_47);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA550_55 = input.LA(1);

                         
                        int index550_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_55==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_55==EOF||LA550_55==Comma||LA550_55==EqualsSign||LA550_55==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_55);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA550_63 = input.LA(1);

                         
                        int index550_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_63==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_63==EOF||LA550_63==Comma||LA550_63==EqualsSign||LA550_63==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_63);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA550_40 = input.LA(1);

                         
                        int index550_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_40==EOF||LA550_40==Comma||LA550_40==EqualsSign||LA550_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_40==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_40);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA550_48 = input.LA(1);

                         
                        int index550_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_48==EOF||LA550_48==Comma||LA550_48==EqualsSign||LA550_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_48==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_48);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA550_56 = input.LA(1);

                         
                        int index550_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_56==EOF||LA550_56==Comma||LA550_56==EqualsSign||LA550_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_56==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_56);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA550_1 = input.LA(1);

                         
                        int index550_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_1==EOF||LA550_1==Comma||LA550_1==EqualsSign||LA550_1==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_1==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_1);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA550_41 = input.LA(1);

                         
                        int index550_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_41==EOF||LA550_41==Comma||LA550_41==EqualsSign||LA550_41==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_41==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_41);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA550_49 = input.LA(1);

                         
                        int index550_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_49==EOF||LA550_49==Comma||LA550_49==EqualsSign||LA550_49==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_49==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_49);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA550_57 = input.LA(1);

                         
                        int index550_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_57==EOF||LA550_57==Comma||LA550_57==EqualsSign||LA550_57==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_57==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_57);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA550_42 = input.LA(1);

                         
                        int index550_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_42==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_42==EOF||LA550_42==Comma||LA550_42==EqualsSign||LA550_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_42);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA550_50 = input.LA(1);

                         
                        int index550_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_50==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_50==EOF||LA550_50==Comma||LA550_50==EqualsSign||LA550_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_50);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA550_58 = input.LA(1);

                         
                        int index550_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_58==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_58==EOF||LA550_58==Comma||LA550_58==EqualsSign||LA550_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_58);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA550_43 = input.LA(1);

                         
                        int index550_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_43==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_43==EOF||LA550_43==Comma||LA550_43==EqualsSign||LA550_43==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_43);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA550_51 = input.LA(1);

                         
                        int index550_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_51==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_51==EOF||LA550_51==Comma||LA550_51==EqualsSign||LA550_51==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_51);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA550_59 = input.LA(1);

                         
                        int index550_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_59==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                        else if ( (LA550_59==EOF||LA550_59==Comma||LA550_59==EqualsSign||LA550_59==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index550_59);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA550_0 = input.LA(1);

                         
                        int index550_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA550_0>=7 && LA550_0<=126 && (s=T2S.M_457[LA550_0-(7)])>=0) && (synpred305_InternalN4JSParser())) { /* 33 cases */ }
                        else if ( (LA550_0==Yield) ) {s = 34;}

                        else if ( (LA550_0==Null) && (synpred305_InternalN4JSParser())) {s = 35;}

                        else if ( (LA550_0==True) && (synpred305_InternalN4JSParser())) {s = 36;}

                        else if ( (LA550_0==False) && (synpred305_InternalN4JSParser())) {s = 37;}

                        else if ( (LA550_0==Enum) && (synpred305_InternalN4JSParser())) {s = 38;}

                        
                        else if ((LA550_0>=4 && LA550_0<=86 && (s=T2S.M_458[LA550_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA550_0==RULE_STRING) && (synpred305_InternalN4JSParser())) {s = 64;}

                        else if ( (LA550_0==RULE_DOUBLE||LA550_0==RULE_HEX_INT||LA550_0==RULE_OCTAL_INT||LA550_0==RULE_SCIENTIFIC_INT||LA550_0==RULE_INT) && (synpred305_InternalN4JSParser())) {s = 65;}

                        else if ( (LA550_0==LeftSquareBracket) && (synpred305_InternalN4JSParser())) {s = 66;}

                        else if ( (LA550_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index550_0);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA550_44 = input.LA(1);

                         
                        int index550_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_44==EOF||LA550_44==Comma||LA550_44==EqualsSign||LA550_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_44==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_44);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA550_52 = input.LA(1);

                         
                        int index550_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_52==EOF||LA550_52==Comma||LA550_52==EqualsSign||LA550_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_52==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_52);
                        if ( s>=0 ) return s;
                        break;
                    case 27 : 
                        int LA550_60 = input.LA(1);

                         
                        int index550_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA550_60==EOF||LA550_60==Comma||LA550_60==EqualsSign||LA550_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA550_60==Colon) && (synpred305_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index550_60);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 550, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_317s = "\1\4\1\140\45\uffff\31\140\5\uffff";
    static final String dfa_318s = "\1\u0095\1\160\45\uffff\31\160\5\uffff";
    static final String dfa_319s = "\2\uffff\45\1\31\uffff\3\1\1\2\1\1";
    static final String dfa_320s = "\1\0\1\27\45\uffff\1\20\1\24\1\30\1\1\1\4\1\7\1\12\1\15\1\21\1\25\1\31\1\2\1\5\1\10\1\13\1\16\1\22\1\26\1\32\1\3\1\6\1\11\1\14\1\17\1\23\5\uffff}>";
    static final String[] dfa_321s = {
            "\1\65\1\60\1\73\1\25\1\70\1\74\1\76\1\54\1\7\1\10\1\53\1\21\1\11\1\16\1\17\1\75\1\52\1\12\1\15\1\23\1\77\1\27\1\55\1\31\1\62\1\35\1\67\1\72\1\71\1\2\1\4\1\5\1\6\1\45\1\30\1\33\1\64\1\40\1\42\1\66\1\3\1\14\1\46\1\57\1\43\1\32\1\44\1\63\1\37\1\41\4\uffff\1\20\1\47\1\51\1\26\1\50\1\34\1\36\21\uffff\1\56\1\13\1\22\1\24\1\61\23\uffff\1\103\1\102\11\uffff\1\101\1\uffff\1\101\1\uffff\1\101\2\uffff\1\101\1\uffff\1\1\2\uffff\1\100\23\uffff\1\101",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "\1\103\3\uffff\1\104\2\uffff\1\103\10\uffff\1\103",
            "",
            "",
            "",
            "",
            ""
    };
    static final char[] dfa_317 = DFA.unpackEncodedStringToUnsignedChars(dfa_317s);
    static final char[] dfa_318 = DFA.unpackEncodedStringToUnsignedChars(dfa_318s);
    static final short[] dfa_319 = DFA.unpackEncodedString(dfa_319s);
    static final short[] dfa_320 = DFA.unpackEncodedString(dfa_320s);
    static final short[][] dfa_321 = unpackEncodedStringArray(dfa_321s);

    class DFA551 extends DFA {

        public DFA551(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 551;
            this.eot = dfa_214;
            this.eof = dfa_214;
            this.min = dfa_317;
            this.max = dfa_318;
            this.accept = dfa_319;
            this.special = dfa_320;
            this.transition = dfa_321;
        }
        public String getDescription() {
            return "14534:1: ( ( ( ( ( norm1_LiteralBindingPropertyName Colon ) )=> (LiteralBindingPropertyNameParserRuleCall_0_0_0_0= norm1_LiteralBindingPropertyName ColonKeyword_0_0_0_1= Colon ) ) ( (ValueBindingElementParserRuleCall_0_1_0= norm1_BindingElement ) ) ) | ( (ValueSingleNameBindingParserRuleCall_1_0= norm1_SingleNameBinding ) ) )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA551_0 = input.LA(1);

                         
                        int index551_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_0==RULE_IDENTIFIER) ) {s = 1;}

                        
                        else if ((LA551_0>=7 && LA551_0<=126 && (s=T2S.M_459[LA551_0-(7)])>=0) && (synpred306_InternalN4JSParser())) { /* 38 cases */ }
                        
                        else if ((LA551_0>=4 && LA551_0<=86 && (s=T2S.M_458[LA551_0-(4)])>=0)) { /* 25 cases */ }
                        else if ( (LA551_0==RULE_STRING) && (synpred306_InternalN4JSParser())) {s = 64;}

                        else if ( (LA551_0==RULE_DOUBLE||LA551_0==RULE_HEX_INT||LA551_0==RULE_OCTAL_INT||LA551_0==RULE_SCIENTIFIC_INT||LA551_0==RULE_INT) && (synpred306_InternalN4JSParser())) {s = 65;}

                        else if ( (LA551_0==LeftSquareBracket) && (synpred306_InternalN4JSParser())) {s = 66;}

                        else if ( (LA551_0==CommercialAt) ) {s = 67;}

                         
                        input.seek(index551_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA551_42 = input.LA(1);

                         
                        int index551_42 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_42==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_42==Comma||LA551_42==EqualsSign||LA551_42==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_42);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA551_50 = input.LA(1);

                         
                        int index551_50 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_50==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_50==Comma||LA551_50==EqualsSign||LA551_50==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_50);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA551_58 = input.LA(1);

                         
                        int index551_58 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_58==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_58==Comma||LA551_58==EqualsSign||LA551_58==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_58);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA551_43 = input.LA(1);

                         
                        int index551_43 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_43==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_43==Comma||LA551_43==EqualsSign||LA551_43==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_43);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA551_51 = input.LA(1);

                         
                        int index551_51 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_51==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_51==Comma||LA551_51==EqualsSign||LA551_51==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_51);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA551_59 = input.LA(1);

                         
                        int index551_59 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_59==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_59==Comma||LA551_59==EqualsSign||LA551_59==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_59);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA551_44 = input.LA(1);

                         
                        int index551_44 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_44==Comma||LA551_44==EqualsSign||LA551_44==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_44==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_44);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA551_52 = input.LA(1);

                         
                        int index551_52 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_52==Comma||LA551_52==EqualsSign||LA551_52==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_52==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_52);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA551_60 = input.LA(1);

                         
                        int index551_60 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_60==Comma||LA551_60==EqualsSign||LA551_60==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_60==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_60);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA551_45 = input.LA(1);

                         
                        int index551_45 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_45==Comma||LA551_45==EqualsSign||LA551_45==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_45==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_45);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA551_53 = input.LA(1);

                         
                        int index551_53 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_53==Comma||LA551_53==EqualsSign||LA551_53==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_53==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_53);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA551_61 = input.LA(1);

                         
                        int index551_61 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_61==Comma||LA551_61==EqualsSign||LA551_61==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_61==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_61);
                        if ( s>=0 ) return s;
                        break;
                    case 13 : 
                        int LA551_46 = input.LA(1);

                         
                        int index551_46 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_46==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_46==Comma||LA551_46==EqualsSign||LA551_46==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_46);
                        if ( s>=0 ) return s;
                        break;
                    case 14 : 
                        int LA551_54 = input.LA(1);

                         
                        int index551_54 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_54==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_54==Comma||LA551_54==EqualsSign||LA551_54==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_54);
                        if ( s>=0 ) return s;
                        break;
                    case 15 : 
                        int LA551_62 = input.LA(1);

                         
                        int index551_62 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_62==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_62==Comma||LA551_62==EqualsSign||LA551_62==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_62);
                        if ( s>=0 ) return s;
                        break;
                    case 16 : 
                        int LA551_39 = input.LA(1);

                         
                        int index551_39 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_39==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_39==Comma||LA551_39==EqualsSign||LA551_39==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_39);
                        if ( s>=0 ) return s;
                        break;
                    case 17 : 
                        int LA551_47 = input.LA(1);

                         
                        int index551_47 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_47==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_47==Comma||LA551_47==EqualsSign||LA551_47==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_47);
                        if ( s>=0 ) return s;
                        break;
                    case 18 : 
                        int LA551_55 = input.LA(1);

                         
                        int index551_55 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_55==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_55==Comma||LA551_55==EqualsSign||LA551_55==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_55);
                        if ( s>=0 ) return s;
                        break;
                    case 19 : 
                        int LA551_63 = input.LA(1);

                         
                        int index551_63 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_63==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                        else if ( (LA551_63==Comma||LA551_63==EqualsSign||LA551_63==RightCurlyBracket) ) {s = 67;}

                         
                        input.seek(index551_63);
                        if ( s>=0 ) return s;
                        break;
                    case 20 : 
                        int LA551_40 = input.LA(1);

                         
                        int index551_40 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_40==Comma||LA551_40==EqualsSign||LA551_40==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_40==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_40);
                        if ( s>=0 ) return s;
                        break;
                    case 21 : 
                        int LA551_48 = input.LA(1);

                         
                        int index551_48 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_48==Comma||LA551_48==EqualsSign||LA551_48==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_48==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_48);
                        if ( s>=0 ) return s;
                        break;
                    case 22 : 
                        int LA551_56 = input.LA(1);

                         
                        int index551_56 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_56==Comma||LA551_56==EqualsSign||LA551_56==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_56==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_56);
                        if ( s>=0 ) return s;
                        break;
                    case 23 : 
                        int LA551_1 = input.LA(1);

                         
                        int index551_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_1==Comma||LA551_1==EqualsSign||LA551_1==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_1==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_1);
                        if ( s>=0 ) return s;
                        break;
                    case 24 : 
                        int LA551_41 = input.LA(1);

                         
                        int index551_41 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_41==Comma||LA551_41==EqualsSign||LA551_41==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_41==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_41);
                        if ( s>=0 ) return s;
                        break;
                    case 25 : 
                        int LA551_49 = input.LA(1);

                         
                        int index551_49 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_49==Comma||LA551_49==EqualsSign||LA551_49==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_49==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_49);
                        if ( s>=0 ) return s;
                        break;
                    case 26 : 
                        int LA551_57 = input.LA(1);

                         
                        int index551_57 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA551_57==Comma||LA551_57==EqualsSign||LA551_57==RightCurlyBracket) ) {s = 67;}

                        else if ( (LA551_57==Colon) && (synpred306_InternalN4JSParser())) {s = 68;}

                         
                        input.seek(index551_57);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 551, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_322s = "\145\uffff";
    static final String dfa_323s = "\1\2\144\uffff";
    static final String dfa_324s = "\1\4\1\0\143\uffff";
    static final String dfa_325s = "\1\u0099\1\0\143\uffff";
    static final String dfa_326s = "\2\uffff\1\2\141\uffff\1\1";
    static final String dfa_327s = "\1\uffff\1\0\143\uffff}>";
    static final String[] dfa_328s = {
            "\62\2\4\uffff\7\2\5\uffff\1\2\1\uffff\1\2\1\uffff\1\2\3\uffff\1\2\3\uffff\5\2\2\uffff\1\2\2\uffff\3\2\1\1\2\2\1\uffff\1\2\1\uffff\10\2\1\uffff\1\2\1\uffff\2\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_322 = DFA.unpackEncodedString(dfa_322s);
    static final short[] dfa_323 = DFA.unpackEncodedString(dfa_323s);
    static final char[] dfa_324 = DFA.unpackEncodedStringToUnsignedChars(dfa_324s);
    static final char[] dfa_325 = DFA.unpackEncodedStringToUnsignedChars(dfa_325s);
    static final short[] dfa_326 = DFA.unpackEncodedString(dfa_326s);
    static final short[] dfa_327 = DFA.unpackEncodedString(dfa_327s);
    static final short[][] dfa_328 = unpackEncodedStringArray(dfa_328s);

    class DFA569 extends DFA {

        public DFA569(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 569;
            this.eot = dfa_322;
            this.eof = dfa_323;
            this.min = dfa_324;
            this.max = dfa_325;
            this.accept = dfa_326;
            this.special = dfa_327;
            this.transition = dfa_328;
        }
        public String getDescription() {
            return "14916:2: ( ( ( PlusSign ) )=> (DynamicPlusSignKeyword_0_1_0= PlusSign ) )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA569_1 = input.LA(1);

                         
                        int index569_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred312_InternalN4JSParser()) ) {s = 100;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index569_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 569, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_329s = "\25\uffff";
    static final String dfa_330s = "\1\uffff\1\23\11\uffff\1\23\11\uffff";
    static final String dfa_331s = "\1\4\1\135\4\uffff\2\144\2\uffff\1\144\1\135\11\uffff";
    static final String dfa_332s = "\1\176\1\151\4\uffff\2\156\2\uffff\1\156\1\151\11\uffff";
    static final String dfa_333s = "\2\uffff\4\1\2\uffff\2\1\2\uffff\7\1\1\2\1\1";
    static final String dfa_334s = "\1\5\1\0\4\uffff\1\3\1\1\2\uffff\1\2\1\4\11\uffff}>";
    static final String[] dfa_335s = {
            "\1\7\1\23\1\15\1\uffff\1\23\1\16\1\20\1\4\7\uffff\1\17\1\5\3\uffff\1\21\1\uffff\1\22\1\uffff\1\23\3\uffff\1\23\7\uffff\1\6\2\uffff\1\23\3\uffff\1\11\1\14\1\23\1\uffff\1\12\1\13\6\uffff\1\2\2\uffff\1\3\23\uffff\1\10\26\uffff\1\23\4\uffff\1\23\2\uffff\1\23\14\uffff\1\1",
            "\1\23\1\uffff\2\23\1\uffff\1\23\1\uffff\1\24\1\uffff\1\23\2\uffff\1\23",
            "",
            "",
            "",
            "",
            "\1\24\11\uffff\1\23",
            "\1\24\11\uffff\1\23",
            "",
            "",
            "\1\24\11\uffff\1\23",
            "\1\23\1\uffff\2\23\3\uffff\1\24\1\uffff\1\23\2\uffff\1\23",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_329 = DFA.unpackEncodedString(dfa_329s);
    static final short[] dfa_330 = DFA.unpackEncodedString(dfa_330s);
    static final char[] dfa_331 = DFA.unpackEncodedStringToUnsignedChars(dfa_331s);
    static final char[] dfa_332 = DFA.unpackEncodedStringToUnsignedChars(dfa_332s);
    static final short[] dfa_333 = DFA.unpackEncodedString(dfa_333s);
    static final short[] dfa_334 = DFA.unpackEncodedString(dfa_334s);
    static final short[][] dfa_335 = unpackEncodedStringArray(dfa_335s);

    class DFA579 extends DFA {

        public DFA579(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 579;
            this.eot = dfa_329;
            this.eof = dfa_330;
            this.min = dfa_331;
            this.max = dfa_332;
            this.accept = dfa_333;
            this.special = dfa_334;
            this.transition = dfa_335;
        }
        public String getDescription() {
            return "15123:3: ( ( ( ( ruleTIdentifier ) )=> (NameTIdentifierParserRuleCall_1_0_0= ruleTIdentifier ) ) ColonKeyword_1_1= Colon )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA579_1 = input.LA(1);

                         
                        int index579_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_1==Colon) && (synpred313_InternalN4JSParser())) {s = 20;}

                        else if ( (LA579_1==EOF||LA579_1==RightParenthesis||(LA579_1>=PlusSign && LA579_1<=Comma)||LA579_1==FullStop||LA579_1==LessThanSign||LA579_1==QuestionMark) ) {s = 19;}

                         
                        input.seek(index579_1);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA579_7 = input.LA(1);

                         
                        int index579_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_7==Colon) && (synpred313_InternalN4JSParser())) {s = 20;}

                        else if ( (LA579_7==LeftCurlyBracket) ) {s = 19;}

                         
                        input.seek(index579_7);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA579_10 = input.LA(1);

                         
                        int index579_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_10==LeftCurlyBracket) ) {s = 19;}

                        else if ( (LA579_10==Colon) && (synpred313_InternalN4JSParser())) {s = 20;}

                         
                        input.seek(index579_10);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA579_6 = input.LA(1);

                         
                        int index579_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_6==Colon) && (synpred313_InternalN4JSParser())) {s = 20;}

                        else if ( (LA579_6==LeftCurlyBracket) ) {s = 19;}

                         
                        input.seek(index579_6);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA579_11 = input.LA(1);

                         
                        int index579_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_11==Colon) && (synpred313_InternalN4JSParser())) {s = 20;}

                        else if ( (LA579_11==EOF||LA579_11==RightParenthesis||(LA579_11>=PlusSign && LA579_11<=Comma)||LA579_11==LessThanSign||LA579_11==QuestionMark) ) {s = 19;}

                         
                        input.seek(index579_11);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA579_0 = input.LA(1);

                         
                        int index579_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA579_0==RULE_IDENTIFIER) ) {s = 1;}

                        else if ( (LA579_0==Get) && (synpred313_InternalN4JSParser())) {s = 2;}

                        else if ( (LA579_0==Set) && (synpred313_InternalN4JSParser())) {s = 3;}

                        else if ( (LA579_0==Abstract) && (synpred313_InternalN4JSParser())) {s = 4;}

                        else if ( (LA579_0==Project) && (synpred313_InternalN4JSParser())) {s = 5;}

                        else if ( (LA579_0==Union) ) {s = 6;}

                        else if ( (LA579_0==Intersection) ) {s = 7;}

                        else if ( (LA579_0==As) && (synpred313_InternalN4JSParser())) {s = 8;}

                        else if ( (LA579_0==From) && (synpred313_InternalN4JSParser())) {s = 9;}

                        else if ( (LA579_0==Type) ) {s = 10;}

                        else if ( (LA579_0==Void) ) {s = 11;}

                        else if ( (LA579_0==Null) && (synpred313_InternalN4JSParser())) {s = 12;}

                        else if ( (LA579_0==Implements) && (synpred313_InternalN4JSParser())) {s = 13;}

                        else if ( (LA579_0==Interface) && (synpred313_InternalN4JSParser())) {s = 14;}

                        else if ( (LA579_0==Private) && (synpred313_InternalN4JSParser())) {s = 15;}

                        else if ( (LA579_0==Protected) && (synpred313_InternalN4JSParser())) {s = 16;}

                        else if ( (LA579_0==Public) && (synpred313_InternalN4JSParser())) {s = 17;}

                        else if ( (LA579_0==Static) && (synpred313_InternalN4JSParser())) {s = 18;}

                        else if ( (LA579_0==Constructor||LA579_0==Promisify||LA579_0==Target||LA579_0==Await_1||LA579_0==This||LA579_0==This_1||LA579_0==QuestionMark||LA579_0==LeftCurlyBracket||LA579_0==Tilde) ) {s = 19;}

                         
                        input.seek(index579_0);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 579, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_336s = "\173\uffff";
    static final String dfa_337s = "\1\2\172\uffff";
    static final String dfa_338s = "\1\4\1\0\171\uffff";
    static final String dfa_339s = "\1\u0099\1\0\171\uffff";
    static final String dfa_340s = "\2\uffff\1\2\167\uffff\1\1";
    static final String dfa_341s = "\1\uffff\1\0\171\uffff}>";
    static final String[] dfa_342s = {
            "\63\2\1\uffff\30\2\1\uffff\21\2\1\uffff\3\2\1\1\13\2\3\uffff\1\2\1\uffff\4\2\1\uffff\1\2\1\uffff\1\2\2\uffff\1\2\11\uffff\2\2\10\uffff\1\2\1\uffff\1\2\1\uffff\1\2",
            "\1\uffff",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            "",
            ""
    };

    static final short[] dfa_336 = DFA.unpackEncodedString(dfa_336s);
    static final short[] dfa_337 = DFA.unpackEncodedString(dfa_337s);
    static final char[] dfa_338 = DFA.unpackEncodedStringToUnsignedChars(dfa_338s);
    static final char[] dfa_339 = DFA.unpackEncodedStringToUnsignedChars(dfa_339s);
    static final short[] dfa_340 = DFA.unpackEncodedString(dfa_340s);
    static final short[] dfa_341 = DFA.unpackEncodedString(dfa_341s);
    static final short[][] dfa_342 = unpackEncodedStringArray(dfa_342s);

    class DFA584 extends DFA {

        public DFA584(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 584;
            this.eot = dfa_336;
            this.eof = dfa_337;
            this.min = dfa_338;
            this.max = dfa_339;
            this.accept = dfa_340;
            this.special = dfa_341;
            this.transition = dfa_342;
        }
        public String getDescription() {
            return "15246:2: ( ( ( LessThanSign )=>LessThanSignKeyword_2_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_2_1_0= ruleTypeArgument ) ) (CommaKeyword_2_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_2_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_2_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA584_1 = input.LA(1);

                         
                        int index584_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred314_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index584_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 584, _s, input);
            error(nvae);
            throw nvae;
        }
    }
    static final String dfa_343s = "\21\uffff";
    static final String dfa_344s = "\1\4\2\0\1\uffff\12\0\3\uffff";
    static final String dfa_345s = "\1\176\2\0\1\uffff\12\0\3\uffff";
    static final String dfa_346s = "\3\uffff\1\3\12\uffff\1\1\1\4\1\2";
    static final String dfa_347s = "\1\0\1\1\1\2\1\uffff\1\3\1\4\1\5\1\6\1\7\1\10\1\11\1\12\1\13\1\14\3\uffff}>";
    static final String[] dfa_348s = {
            "\1\10\6\uffff\1\5\10\uffff\1\6\23\uffff\1\7\6\uffff\1\12\1\15\2\uffff\1\13\1\14\6\uffff\1\1\2\uffff\1\2\23\uffff\1\11\23\uffff\1\3\27\uffff\1\4",
            "\1\uffff",
            "\1\uffff",
            "",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "\1\uffff",
            "",
            "",
            ""
    };

    static final short[] dfa_343 = DFA.unpackEncodedString(dfa_343s);
    static final char[] dfa_344 = DFA.unpackEncodedStringToUnsignedChars(dfa_344s);
    static final char[] dfa_345 = DFA.unpackEncodedStringToUnsignedChars(dfa_345s);
    static final short[] dfa_346 = DFA.unpackEncodedString(dfa_346s);
    static final short[] dfa_347 = DFA.unpackEncodedString(dfa_347s);
    static final short[][] dfa_348 = unpackEncodedStringArray(dfa_348s);

    class DFA588 extends DFA {

        public DFA588(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 588;
            this.eot = dfa_343;
            this.eof = dfa_343;
            this.min = dfa_344;
            this.max = dfa_345;
            this.accept = dfa_346;
            this.special = dfa_347;
            this.transition = dfa_348;
        }
        public String getDescription() {
            return "15299:1: ( ( ( ( Get ( ( ruleTypesIdentifier ) ) ) )=>TStructGetterParserRuleCall_0= ruleTStructGetter ) | ( ( ( Set ( ( ruleTypesIdentifier ) ) ) )=>TStructSetterParserRuleCall_1= ruleTStructSetter ) | ( ( ( ( LessThanSign ( ( ruleTypeVariable ) ) ( Comma ( ( ruleTypeVariable ) ) )* GreaterThanSign )? ( ( ruleTypesIdentifier ) ) LeftParenthesis ) )=>TStructMethodParserRuleCall_2= ruleTStructMethod ) | TStructFieldParserRuleCall_3= ruleTStructField )";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA588_0 = input.LA(1);

                         
                        int index588_0 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (LA588_0==Get) ) {s = 1;}

                        else if ( (LA588_0==Set) ) {s = 2;}

                        else if ( (LA588_0==LessThanSign) && (synpred317_InternalN4JSParser())) {s = 3;}

                        
                        else if ((LA588_0>=4 && LA588_0<=126 && (s=T2S.M_461[LA588_0-(4)])>=0)) { /* 11 cases */ }
                        input.seek(index588_0);
                        if ( s>=0 ) return s;
                        break;
                    case 1 : 
                        int LA588_1 = input.LA(1);

                         
                        int index588_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred315_InternalN4JSParser()) ) {s = 14;}

                        else if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_1);
                        if ( s>=0 ) return s;
                        break;
                    case 2 : 
                        int LA588_2 = input.LA(1);

                         
                        int index588_2 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred316_InternalN4JSParser()) ) {s = 16;}

                        else if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_2);
                        if ( s>=0 ) return s;
                        break;
                    case 3 : 
                        int LA588_4 = input.LA(1);

                         
                        int index588_4 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_4);
                        if ( s>=0 ) return s;
                        break;
                    case 4 : 
                        int LA588_5 = input.LA(1);

                         
                        int index588_5 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_5);
                        if ( s>=0 ) return s;
                        break;
                    case 5 : 
                        int LA588_6 = input.LA(1);

                         
                        int index588_6 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_6);
                        if ( s>=0 ) return s;
                        break;
                    case 6 : 
                        int LA588_7 = input.LA(1);

                         
                        int index588_7 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_7);
                        if ( s>=0 ) return s;
                        break;
                    case 7 : 
                        int LA588_8 = input.LA(1);

                         
                        int index588_8 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_8);
                        if ( s>=0 ) return s;
                        break;
                    case 8 : 
                        int LA588_9 = input.LA(1);

                         
                        int index588_9 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_9);
                        if ( s>=0 ) return s;
                        break;
                    case 9 : 
                        int LA588_10 = input.LA(1);

                         
                        int index588_10 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_10);
                        if ( s>=0 ) return s;
                        break;
                    case 10 : 
                        int LA588_11 = input.LA(1);

                         
                        int index588_11 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_11);
                        if ( s>=0 ) return s;
                        break;
                    case 11 : 
                        int LA588_12 = input.LA(1);

                         
                        int index588_12 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_12);
                        if ( s>=0 ) return s;
                        break;
                    case 12 : 
                        int LA588_13 = input.LA(1);

                         
                        int index588_13 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred317_InternalN4JSParser()) ) {s = 3;}

                        else if ( (true) ) {s = 15;}

                         
                        input.seek(index588_13);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 588, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA595 extends DFA {

        public DFA595(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 595;
            this.eot = dfa_336;
            this.eof = dfa_337;
            this.min = dfa_338;
            this.max = dfa_339;
            this.accept = dfa_340;
            this.special = dfa_341;
            this.transition = dfa_342;
        }
        public String getDescription() {
            return "15508:2: ( ( ( LessThanSign )=>LessThanSignKeyword_1_0= LessThanSign ) ( (TypeArgsTypeArgumentParserRuleCall_1_1_0= ruleTypeArgument ) ) (CommaKeyword_1_2_0= Comma ( (TypeArgsTypeArgumentParserRuleCall_1_2_1_0= ruleTypeArgument ) ) )* GreaterThanSignKeyword_1_3= GreaterThanSign )?";
        }
        public int specialStateTransition(int s, IntStream _input) throws NoViableAltException {
            TokenStream input = (TokenStream)_input;
        	int _s = s;
            switch ( s ) {
                    case 0 : 
                        int LA595_1 = input.LA(1);

                         
                        int index595_1 = input.index();
                        input.rewind();
                        s = -1;
                        if ( (synpred321_InternalN4JSParser()) ) {s = 122;}

                        else if ( (true) ) {s = 2;}

                         
                        input.seek(index595_1);
                        if ( s>=0 ) return s;
                        break;
            }
            if (state.backtracking>0) {state.failed=true; return -1;}
            NoViableAltException nvae =
                new NoViableAltException(getDescription(), 595, _s, input);
            error(nvae);
            throw nvae;
        }
    }

    class DFA666 extends DFA {

        public DFA666(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 666;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_170;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "5559:9: ( ( ruleTypeRef ) )?";
        }
    }

    class DFA668 extends DFA {

        public DFA668(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 668;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_175;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "5703:30: ( ( ruleTypeRef ) )?";
        }
    }

    class DFA670 extends DFA {

        public DFA670(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 670;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_170;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "5733:9: ( ( ruleTypeRef ) )?";
        }
    }

    class DFA672 extends DFA {

        public DFA672(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 672;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_175;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "5877:30: ( ( ruleTypeRef ) )?";
        }
    }

    class DFA674 extends DFA {

        public DFA674(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 674;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_170;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "5912:6: ( ( ruleTypeRef ) )?";
        }
    }

    class DFA676 extends DFA {

        public DFA676(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 676;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_175;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "6145:31: ( ( ruleTypeRef ) )?";
        }
    }

    class DFA678 extends DFA {

        public DFA678(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 678;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_170;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_174;
        }
        public String getDescription() {
            return "6204:6: ( ( ruleTypeRef ) )?";
        }
    }

    class DFA680 extends DFA {

        public DFA680(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 680;
            this.eot = dfa_169;
            this.eof = dfa_169;
            this.min = dfa_175;
            this.max = dfa_171;
            this.accept = dfa_172;
            this.special = dfa_173;
            this.transition = dfa_176;
        }
        public String getDescription() {
            return "6437:31: ( ( ruleTypeRef ) )?";
        }
    }

    class DFA728 extends DFA {

        public DFA728(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 728;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "()* loopback of 12375:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA733 extends DFA {

        public DFA733(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 733;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "()* loopback of 12552:9: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA738 extends DFA {

        public DFA738(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 738;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "()* loopback of 12824:10: ( ( ruleN4Modifier ) )*";
        }
    }

    class DFA743 extends DFA {

        public DFA743(BaseRecognizer recognizer) {
            this.recognizer = recognizer;
            this.decisionNumber = 743;
            this.eot = dfa_13;
            this.eof = dfa_13;
            this.min = dfa_286;
            this.max = dfa_287;
            this.accept = dfa_288;
            this.special = dfa_17;
            this.transition = dfa_289;
        }
        public String getDescription() {
            return "()* loopback of 13107:10: ( ( ruleN4Modifier ) )*";
        }
    }
 

    public static final BitSet FOLLOW_1 = new BitSet(new long[]{0x0000000000000000L});
    public static final BitSet FOLLOW_2 = new BitSet(new long[]{0x0000000000000002L});
    public static final BitSet FOLLOW_3 = new BitSet(new long[]{0xFC3FCFFBFFF8FF72L,0x57A24C6A925D0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_4 = new BitSet(new long[]{0xFC3FCFFBFFF8FF72L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_5 = new BitSet(new long[]{0x0000401885D8CE00L});
    public static final BitSet FOLLOW_6 = new BitSet(new long[]{0x000000108518CC00L});
    public static final BitSet FOLLOW_7 = new BitSet(new long[]{0x0000001805184C00L});
    public static final BitSet FOLLOW_8 = new BitSet(new long[]{0x58088D01D5184F70L,0x4002000000440000L});
    public static final BitSet FOLLOW_9 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000000000440000L});
    public static final BitSet FOLLOW_10 = new BitSet(new long[]{0x0000000000020040L,0x0000404000000000L});
    public static final BitSet FOLLOW_11 = new BitSet(new long[]{0x0000001005184E00L});
    public static final BitSet FOLLOW_12 = new BitSet(new long[]{0x0000401005184C00L});
    public static final BitSet FOLLOW_13 = new BitSet(new long[]{0x0000000000000000L,0x0000400000000000L});
    public static final BitSet FOLLOW_14 = new BitSet(new long[]{0x0000080010000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_15 = new BitSet(new long[]{0x0000000000000000L,0x0001000100000000L});
    public static final BitSet FOLLOW_16 = new BitSet(new long[]{0x0000000000000000L,0x0000010100000000L});
    public static final BitSet FOLLOW_17 = new BitSet(new long[]{0x100040188519CE00L,0x0000440040000001L});
    public static final BitSet FOLLOW_18 = new BitSet(new long[]{0x0000800000000000L});
    public static final BitSet FOLLOW_19 = new BitSet(new long[]{0x0000000000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_20 = new BitSet(new long[]{0x0000800000000000L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_21 = new BitSet(new long[]{0x781FCD79F538CF70L,0x57A24C4A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_22 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000000002L});
    public static final BitSet FOLLOW_23 = new BitSet(new long[]{0x58088D01D5184F70L,0x4001000000440000L});
    public static final BitSet FOLLOW_24 = new BitSet(new long[]{0x0000000000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_25 = new BitSet(new long[]{0x0000000000000002L,0x0000000000040000L});
    public static final BitSet FOLLOW_26 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x40000000007C0001L});
    public static final BitSet FOLLOW_27 = new BitSet(new long[]{0x100040188518CE00L,0x0000000000000001L});
    public static final BitSet FOLLOW_28 = new BitSet(new long[]{0x1000001005184C00L,0x0000000000000001L});
    public static final BitSet FOLLOW_29 = new BitSet(new long[]{0x58088D01D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_30 = new BitSet(new long[]{0x0000000000000000L,0x0001002100000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_31 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000400040440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_32 = new BitSet(new long[]{0x0000000000000002L,0x0000000100000000L});
    public static final BitSet FOLLOW_33 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000400040440000L});
    public static final BitSet FOLLOW_34 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x40010000007C0001L});
    public static final BitSet FOLLOW_35 = new BitSet(new long[]{0x0000000000000000L,0x0000000000040000L});
    public static final BitSet FOLLOW_36 = new BitSet(new long[]{0x0000000000000002L,0x0000000080000000L});
    public static final BitSet FOLLOW_37 = new BitSet(new long[]{0x0000000000000002L,0x0001002000000000L,0x0000000002800000L});
    public static final BitSet FOLLOW_38 = new BitSet(new long[]{0x0000000080008000L});
    public static final BitSet FOLLOW_39 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_40 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000004050440000L});
    public static final BitSet FOLLOW_41 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000004010440000L});
    public static final BitSet FOLLOW_42 = new BitSet(new long[]{0x0000000000000002L,0x0000001000000000L});
    public static final BitSet FOLLOW_43 = new BitSet(new long[]{0x001A090110000130L,0x4002420000000000L});
    public static final BitSet FOLLOW_44 = new BitSet(new long[]{0x0000000000008000L,0x0000040000000000L});
    public static final BitSet FOLLOW_45 = new BitSet(new long[]{0x0000080000000000L});
    public static final BitSet FOLLOW_46 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L});
    public static final BitSet FOLLOW_47 = new BitSet(new long[]{0x001A090110000130L,0x4002400000000000L});
    public static final BitSet FOLLOW_48 = new BitSet(new long[]{0x0000000000000000L,0x0000000020000000L});
    public static final BitSet FOLLOW_49 = new BitSet(new long[]{0x0000000000008000L});
    public static final BitSet FOLLOW_50 = new BitSet(new long[]{0x0000000000000000L,0x0000004010000000L});
    public static final BitSet FOLLOW_51 = new BitSet(new long[]{0x489B890115180F70L,0x4002420020040000L});
    public static final BitSet FOLLOW_52 = new BitSet(new long[]{0x0000000000000000L,0x0000000120000000L});
    public static final BitSet FOLLOW_53 = new BitSet(new long[]{0x489B890115180F70L,0x4002420000040000L});
    public static final BitSet FOLLOW_54 = new BitSet(new long[]{0x0000000000000000L,0x0001001000000000L});
    public static final BitSet FOLLOW_55 = new BitSet(new long[]{0x0000000000008000L,0x0000000000000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_56 = new BitSet(new long[]{0x58888D01D5184F70L,0x40004C0020440000L});
    public static final BitSet FOLLOW_57 = new BitSet(new long[]{0x58888D01D5184F70L,0x40004C0000440000L});
    public static final BitSet FOLLOW_58 = new BitSet(new long[]{0x0000000000000000L,0x0000001000004000L});
    public static final BitSet FOLLOW_59 = new BitSet(new long[]{0x0000000000000000L,0x0000000000004000L});
    public static final BitSet FOLLOW_60 = new BitSet(new long[]{0x0000000000000000L,0x0000000010000000L,0x0000000000020000L});
    public static final BitSet FOLLOW_61 = new BitSet(new long[]{0x781F8D69F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_62 = new BitSet(new long[]{0xFC3FCFFBFFF8FF70L,0x57A34C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_63 = new BitSet(new long[]{0x0000000880008000L});
    public static final BitSet FOLLOW_64 = new BitSet(new long[]{0x58088D01D51A4F70L,0x4000404000440000L});
    public static final BitSet FOLLOW_65 = new BitSet(new long[]{0x58088D01D51A4F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_66 = new BitSet(new long[]{0x0000000000020002L});
    public static final BitSet FOLLOW_67 = new BitSet(new long[]{0x0010080110000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_68 = new BitSet(new long[]{0x0000000000000002L,0x0000000008000000L});
    public static final BitSet FOLLOW_69 = new BitSet(new long[]{0x0000000000000002L,0x0000008000000000L});
    public static final BitSet FOLLOW_70 = new BitSet(new long[]{0x58888D01D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_71 = new BitSet(new long[]{0x0000000000000002L,0x0000009000000000L});
    public static final BitSet FOLLOW_72 = new BitSet(new long[]{0x0000000000000000L,0x0000008000000000L});
    public static final BitSet FOLLOW_73 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000040000440000L});
    public static final BitSet FOLLOW_ruleExpression_in_ruleExpressionStatement = FOLLOW_19;
    public static final BitSet FOLLOW_74 = new BitSet(new long[]{0xFC3FCFFBFFF8FF70L,0x57A24C6A925C0541L,0x0000000000201802L});
    public static final BitSet FOLLOW_75 = new BitSet(new long[]{0x0000200000000002L});
    public static final BitSet FOLLOW_76 = new BitSet(new long[]{0x0000020000000000L});
    public static final BitSet FOLLOW_77 = new BitSet(new long[]{0x781F8D79F538CF70L,0x57A24C6A92440541L,0x0000000000201802L});
    public static final BitSet FOLLOW_78 = new BitSet(new long[]{0x0000000000000000L,0x0000000000200000L});
    public static final BitSet FOLLOW_79 = new BitSet(new long[]{0x0000000000000000L,0x0000000000600000L});
    public static final BitSet FOLLOW_80 = new BitSet(new long[]{0x781F8D69F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_81 = new BitSet(new long[]{0x0000000000000000L,0x0000002100600000L});
    public static final BitSet FOLLOW_82 = new BitSet(new long[]{0x0000000000000000L,0x0000002100000000L});
    public static final BitSet FOLLOW_83 = new BitSet(new long[]{0x781F8D69F538CF70L,0x57A24C6A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_84 = new BitSet(new long[]{0x0000000000000000L,0x0000002000000000L});
    public static final BitSet FOLLOW_85 = new BitSet(new long[]{0x0000000000000000L,0x0000002000600000L});
    public static final BitSet FOLLOW_86 = new BitSet(new long[]{0x58088D01D5184F70L,0x4001002000440000L,0x0000000002800000L});
    public static final BitSet FOLLOW_87 = new BitSet(new long[]{0x781F8D69F538CF70L,0x57A34C6A92440540L,0x0000000002A01802L});
    public static final BitSet FOLLOW_88 = new BitSet(new long[]{0x0000100000010000L,0x0001000000000000L});
    public static final BitSet FOLLOW_89 = new BitSet(new long[]{0x0000100000000000L,0x0001000000000000L});
    public static final BitSet FOLLOW_90 = new BitSet(new long[]{0x0000000000000000L,0x0000001000000000L});
    public static final BitSet FOLLOW_91 = new BitSet(new long[]{0x0000000400040000L});
    public static final BitSet FOLLOW_92 = new BitSet(new long[]{0x0000000400040002L});
    public static final BitSet FOLLOW_93 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000480000440000L});
    public static final BitSet FOLLOW_94 = new BitSet(new long[]{0x789F8D69F538CF70L,0x57A25C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_95 = new BitSet(new long[]{0x0000000000000000L,0x0000100100000000L});
    public static final BitSet FOLLOW_96 = new BitSet(new long[]{0x789F8D69F538CF70L,0x57A24C4B92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_97 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A34E40407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_98 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A24E40407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_99 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A24A40407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_100 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A24A00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_101 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A24A00407C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_102 = new BitSet(new long[]{0x0000000000000002L,0x0000002000000000L});
    public static final BitSet FOLLOW_103 = new BitSet(new long[]{0x0000000000000002L,0x0000000010000000L});
    public static final BitSet FOLLOW_104 = new BitSet(new long[]{0x780F8D69D518CF72L,0x57A04C4C10440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_105 = new BitSet(new long[]{0x0080000000000000L});
    public static final BitSet FOLLOW_106 = new BitSet(new long[]{0x789F8D69F538CF70L,0x57A24C4AB2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_107 = new BitSet(new long[]{0x0000000000000000L,0x0000000400000000L});
    public static final BitSet FOLLOW_108 = new BitSet(new long[]{0x0000000010000000L});
    public static final BitSet FOLLOW_109 = new BitSet(new long[]{0x780F8D69D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_110 = new BitSet(new long[]{0x0000000000000002L,0x0000004010000000L});
    public static final BitSet FOLLOW_111 = new BitSet(new long[]{0x0000000000000000L,0x0000100000000000L});
    public static final BitSet FOLLOW_112 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x40000040007C0001L});
    public static final BitSet FOLLOW_113 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000140L});
    public static final BitSet FOLLOW_114 = new BitSet(new long[]{0x001A080110000120L,0x4002400000000000L});
    public static final BitSet FOLLOW_115 = new BitSet(new long[]{0x0000000000000002L,0x0000000844000000L});
    public static final BitSet FOLLOW_116 = new BitSet(new long[]{0x0000000000000002L,0x0000000280000000L});
    public static final BitSet FOLLOW_117 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000800L});
    public static final BitSet FOLLOW_118 = new BitSet(new long[]{0x0000000000000000L,0x0000010000000000L});
    public static final BitSet FOLLOW_119 = new BitSet(new long[]{0x0000000000000002L,0x0000010000000000L});
    public static final BitSet FOLLOW_120 = new BitSet(new long[]{0x0000000000000082L,0x0000014000009000L});
    public static final BitSet FOLLOW_121 = new BitSet(new long[]{0x0000000000000082L,0x0000014000209000L});
    public static final BitSet FOLLOW_122 = new BitSet(new long[]{0x0240000000000002L,0x0000000000002002L});
    public static final BitSet FOLLOW_123 = new BitSet(new long[]{0x0000000000000002L,0x0000200000000000L});
    public static final BitSet FOLLOW_124 = new BitSet(new long[]{0x0000000000000002L,0x0000800000000000L});
    public static final BitSet FOLLOW_125 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000008L});
    public static final BitSet FOLLOW_126 = new BitSet(new long[]{0x0000000000000002L,0x0000000001000000L});
    public static final BitSet FOLLOW_127 = new BitSet(new long[]{0x0000000000000002L,0x0000020000000000L});
    public static final BitSet FOLLOW_128 = new BitSet(new long[]{0x0100000000000002L,0x00000180008206B4L});
    public static final BitSet FOLLOW_129 = new BitSet(new long[]{0x781F8D69F538CF72L,0x57A24C4AD2440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_130 = new BitSet(new long[]{0x781F8D69F538CF72L,0x57A24C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_131 = new BitSet(new long[]{0x0000000000000000L,0x0000010000008000L});
    public static final BitSet FOLLOW_132 = new BitSet(new long[]{0x0000000000000000L,0x0000000000008000L});
    public static final BitSet FOLLOW_133 = new BitSet(new long[]{0x0000000000000100L});
    public static final BitSet FOLLOW_134 = new BitSet(new long[]{0x781F8D69F538CF70L,0x57A34C4A92440540L,0x0000000000201802L});
    public static final BitSet FOLLOW_135 = new BitSet(new long[]{0x0000000000000000L,0x0000000000000000L,0x000000000000C000L});
    public static final BitSet FOLLOW_136 = new BitSet(new long[]{0x0000000000000002L,0x0000000400000000L});
    public static final BitSet FOLLOW_137 = new BitSet(new long[]{0x0000000000000002L,0x0000000000000000L,0x0000000000000200L});
    public static final BitSet FOLLOW_138 = new BitSet(new long[]{0x0000080010000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_139 = new BitSet(new long[]{0x001F092110000130L,0x57A2420820000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_140 = new BitSet(new long[]{0x001F092110000130L,0x57A2420800000400L,0x0000000000200002L});
    public static final BitSet FOLLOW_141 = new BitSet(new long[]{0x0000000000000002L,0x0000040000000000L});
    public static final BitSet FOLLOW_142 = new BitSet(new long[]{0x0000000000000000L,0x4000000000000000L});
    public static final BitSet FOLLOW_143 = new BitSet(new long[]{0x58088D01D51A4F70L,0x4002404000440000L});
    public static final BitSet FOLLOW_144 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A34E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_145 = new BitSet(new long[]{0x781F8D69D518CF70L,0x57A04C4810440400L,0x0000000000201802L});
    public static final BitSet FOLLOW_146 = new BitSet(new long[]{0x0000000000020042L});
    public static final BitSet FOLLOW_147 = new BitSet(new long[]{0x0000000000020042L,0x0000000100000000L});
    public static final BitSet FOLLOW_148 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000400000440000L});
    public static final BitSet FOLLOW_149 = new BitSet(new long[]{0x0000080010000100L,0x4001000000000000L});
    public static final BitSet FOLLOW_150 = new BitSet(new long[]{0x0800001005184C00L});
    public static final BitSet FOLLOW_151 = new BitSet(new long[]{0x0000000000000002L,0x0000402000000000L});
    public static final BitSet FOLLOW_152 = new BitSet(new long[]{0x4000001005184C00L});
    public static final BitSet FOLLOW_153 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A24E40507C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_154 = new BitSet(new long[]{0x58088D01D5184F70L,0x4000000000440000L,0x0000000000000002L});
    public static final BitSet FOLLOW_155 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A00800007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_156 = new BitSet(new long[]{0x0000000000000000L,0x000000B000000000L});
    public static final BitSet FOLLOW_157 = new BitSet(new long[]{0x0000000000000000L,0x000000A000000000L});
    public static final BitSet FOLLOW_158 = new BitSet(new long[]{0x0000000000000002L,0x0000400000000000L});
    public static final BitSet FOLLOW_159 = new BitSet(new long[]{0x0000000000000002L,0x0000401000000000L});
    public static final BitSet FOLLOW_160 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A10C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_161 = new BitSet(new long[]{0xFC3FFFFFFFFFFFF0L,0x52A00C00007C0001L,0x0000000000200002L});
    public static final BitSet FOLLOW_162 = new BitSet(new long[]{0x58888D01D5184F70L,0x40005C0100440000L});
    public static final BitSet FOLLOW_163 = new BitSet(new long[]{0x58888D01D5184F70L,0x40004C0100440000L});
    public static final BitSet FOLLOW_164 = new BitSet(new long[]{0x001A090110000132L,0x4002420000000000L});
    public static final BitSet FOLLOW_165 = new BitSet(new long[]{0x0002000000000000L});
    public static final BitSet FOLLOW_166 = new BitSet(new long[]{0x0020000000000002L});
    public static final BitSet FOLLOW_167 = new BitSet(new long[]{0x481B890115180F70L,0x4002420000040000L});
    public static final BitSet FOLLOW_168 = new BitSet(new long[]{0x0020000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_169 = new BitSet(new long[]{0x4819810000100810L,0x4001004000040000L});
    public static final BitSet FOLLOW_170 = new BitSet(new long[]{0x4819810000100810L,0x4001006100040000L});
    public static final BitSet FOLLOW_171 = new BitSet(new long[]{0x4819810000100810L,0x4000000000040000L});
    public static final BitSet FOLLOW_172 = new BitSet(new long[]{0x0000000000000002L,0x0000004000000000L});
    public static final BitSet FOLLOW_173 = new BitSet(new long[]{0x0000000000000002L,0x0002000000000000L,0x0000000000080000L});
    public static final BitSet FOLLOW_174 = new BitSet(new long[]{0x0012080110000100L,0x4000000000000000L});
    public static final BitSet FOLLOW_175 = new BitSet(new long[]{0x0000004000020002L});
    public static final BitSet FOLLOW_176 = new BitSet(new long[]{0x58088D01D5184F72L,0x4002000000440000L});
    public static final BitSet FOLLOW_177 = new BitSet(new long[]{0x58088D01D5184F72L,0x4000000000440000L});
    public static final BitSet FOLLOW_178 = new BitSet(new long[]{0x781F8969F538CF70L,0x57A24C4A92440540L,0x0000000000201802L});

}

final class T2S{
	final static int[] M_0 = { 11, 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, 10, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_1 = { 5, 8, -1, -1, 7, -1, -1, -1, -1, 3, 4, -1, 1, 2, 6, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10};
	final static int[] M_2 = { 7, -1, -1, -1, -1, 39, 34, 44, -1, 42, 18, 11, 14, 79, 86, 13, 24, 89, -1, -1, 9, 10, 66, 21, 20, 12, 81, 15, 83, 36, 68, 41, 23, 43, 80, -1, 17, 16, 58, 48, 84, 38, 77, 29, 40, 90, 88, 19, 33, 60, 47, 57, 37, 67, 82, -1, -1, -1, -1, 78, 30, 26, 46, 31, 85, 25, -1, -1, -1, -1, -1, 69, -1, 70, -1, 62, -1, -1, -1, -1, -1, -1, -1, 32, 76, 75, -1, 35, -1, -1, 74, -1, -1, 45, -1, -1, 71, -1, 72, -1, 61, -1, 27, 49, -1, -1, -1, 8, 63, -1, -1, 22, -1, 87, 73, -1, -1, -1, 50, -1, 55, 52, 53, 54, -1, 56, -1, 28, -1, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 65, 64, -1, -1, -1, -1, -1, -1, -1, -1, 51};
	final static int[] M_3 = { 4, 7, -1, -1, 6, 11, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, 10, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_4 = { 26, 21, 31, -1, 29, 32, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 23, -1, 28, -1, 30, -1, -1, -1, -1, -1, -1, -1, 25, -1, 16, 27, -1, -1, -1, 20, -1, -1, -1, 24, -1, -1, -1, -1, -1, -1, -1, 17, 13, -1, 18, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_6 = { 25, 20, 30, -1, 28, 31, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 22, -1, 27, -1, 29, -1, -1, -1, -1, -1, -1, -1, 24, -1, -1, 26, -1, -1, -1, 19, -1, -1, -1, 23, -1, -1, -1, -1, -1, -1, -1, 16, 13, -1, 17, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15};
	final static int[] M_7 = { 17, 12, 23, -1, 20, 24, 26, 8, -1, -1, 7, -1, -1, -1, -1, 25, 6, -1, -1, -1, 27, -1, 9, -1, 14, -1, 19, 22, 21, -1, -1, -1, -1, -1, -1, -1, 16, -1, 2, 18, -1, -1, -1, 11, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, 3, 5, -1, 4, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_9 = { 16, 11, 22, -1, 19, 23, 25, 7, -1, -1, 6, -1, -1, -1, -1, 24, 5, -1, -1, -1, 26, -1, 8, -1, 13, -1, 18, 21, 20, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 17, -1, -1, -1, 10, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, 2, 4, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_16 = { 21, 16, 25, -1, 24, 26, 28, 12, -1, -1, 11, 49, -1, -1, -1, 27, 10, 53, -1, -1, 29, -1, 13, -1, 18, 55, 23, 4, 1, -1, -1, 50, -1, 42, 32, -1, 20, -1, 6, 22, -1, -1, -1, 15, 44, 31, 41, 19, 54, -1, -1, -1, -1, -1, -1, 7, 9, 30, 8, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, 17, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_17 = { 20, 15, 24, -1, 23, 25, 27, 11, -1, -1, 10, 49, -1, -1, -1, 26, 9, 53, -1, -1, 28, -1, 12, -1, 17, 55, 22, 4, 1, -1, -1, 50, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, 54, -1, -1, -1, -1, -1, -1, 6, 8, 30, 7, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, 61, -1, -1, 3, -1, -1, 58, -1, 59, -1, 45, -1, -1, 33, -1, -1, -1, 2, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_18 = { 19, 14, 25, -1, 22, 26, 28, 10, -1, -1, 9, -1, -1, -1, -1, 27, 8, -1, -1, -1, 29, -1, 11, -1, 16, -1, 21, 24, 23, -1, -1, -1, -1, -1, -1, -1, 18, -1, 4, 20, -1, -1, -1, 13, -1, -1, -1, 17, -1, -1, -1, -1, -1, -1, -1, 5, 7, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 12, -1, -1, -1, 15, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_19 = { 18, 13, 24, -1, 21, 25, 27, 9, -1, -1, 8, -1, -1, -1, -1, 26, 7, -1, -1, -1, 28, -1, 10, -1, 15, -1, 20, 23, 22, -1, -1, -1, -1, -1, -1, -1, 17, -1, -1, 19, -1, -1, -1, 12, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, 4, 6, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3};
	final static int[] M_20 = { 14, 10, 63, 35, 5, 64, 66, 56, 21, 22, 55, 31, 23, 28, 29, 65, 54, 24, 27, 33, 67, 37, 57, 39, 6, 42, 61, 62, 4, 16, 18, 19, 20, 49, 38, 40, 13, 44, 46, 3, 17, 26, 50, 59, 47, 9, 48, 11, 2, 45, -1, -1, -1, -1, 30, 51, 53, 36, 52, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 25, 32, 34, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, 1, -1, -1, -1, 12, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, 68};
	final static int[] M_22 = { 13, 9, 62, 34, 4, 63, 65, 55, 20, 21, 54, 30, 22, 27, 28, 64, 53, 23, 26, 32, 66, 36, 56, 38, 5, 41, 60, 61, 3, 15, 17, 18, 19, 48, 37, 39, 12, 43, 45, 2, 16, 25, 49, 58, 46, 8, 47, 10, 1, 44, -1, -1, -1, -1, 29, 50, 52, 35, 51, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 24, 31, 33, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, 11, -1, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, 67};
	final static int[] M_24 = { 23, 18, 29, -1, 26, 30, 32, 14, -1, -1, 13, 52, -1, -1, -1, 31, 12, -1, -1, -1, 33, -1, 15, -1, 20, -1, 25, 28, 27, -1, -1, 53, -1, 43, 6, -1, 22, -1, 8, 24, -1, -1, -1, 17, 45, 5, 42, 21, -1, -1, -1, -1, -1, -1, -1, 9, 11, 4, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, 19, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, 3, 46, -1, -1, 34, -1, -1, -1, 51, 48, -1, -1, 49, -1, -1, -1, -1, -1, -1, 35, -1, 40, 37, 38, 39, -1, 41, -1, 7, -1, -1, 44, -1, -1, -1, -1, -1, -1, -1, -1, -1, 55, 54, -1, -1, -1, -1, -1, -1, -1, -1, 36};
	final static int[] M_25 = { 22, 17, 28, -1, 25, 29, 31, 13, -1, -1, 12, 51, -1, -1, -1, 30, 11, -1, -1, -1, 32, -1, 14, -1, 19, -1, 24, 27, 26, -1, -1, 52, -1, 42, 6, -1, 21, -1, -1, 23, -1, -1, -1, 16, 44, 5, 41, 20, -1, -1, -1, -1, -1, -1, -1, 8, 10, 4, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, -1, 18, -1, -1, -1, -1, -1, 49, -1, -1, -1, -1, -1, 3, 45, -1, -1, 33, -1, -1, -1, 50, 47, -1, -1, 48, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 7, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, 53, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_26 = { 25, 20, 31, -1, 28, 32, 34, 16, -1, -1, 15, 54, -1, -1, -1, 33, 14, 58, -1, -1, 35, -1, 17, -1, 22, 60, 27, 30, 29, -1, -1, 55, -1, 45, 8, -1, 24, -1, 10, 26, -1, -1, -1, 19, 47, 7, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 6, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, 1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, 5, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 9, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_27 = { 24, 19, 30, -1, 27, 31, 33, 15, -1, -1, 14, 53, -1, -1, -1, 32, 13, 57, -1, -1, 34, -1, 16, -1, 21, 59, 26, 29, 28, -1, -1, 54, -1, 44, 8, -1, 23, -1, -1, 25, -1, -1, -1, 18, 46, 7, 43, 22, 58, -1, -1, -1, -1, -1, -1, 10, 12, 6, 11, -1, -1, -1, -1, -1, -1, -1, 60, -1, 61, -1, 48, -1, -1, -1, -1, 1, -1, -1, 17, -1, -1, -1, 20, -1, -1, 65, -1, -1, 51, -1, -1, 62, -1, 63, -1, 47, -1, -1, 35, -1, 5, -1, 52, 49, -1, -1, 50, -1, -1, 64, -1, -1, -1, 36, -1, 41, 38, 39, 40, -1, 42, -1, 9, -1, -1, 45, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, 55, -1, -1, -1, -1, -1, -1, -1, -1, 37};
	final static int[] M_28 = { 27, 22, 33, -1, 30, 34, 36, 18, -1, -1, 17, 56, -1, -1, -1, 35, 16, 60, -1, -1, 37, -1, 19, -1, 24, 62, 29, 32, 31, -1, -1, 57, -1, 47, 10, -1, 26, -1, 12, 28, -1, -1, -1, 21, 49, 9, 46, 25, 61, -1, -1, -1, -1, -1, -1, 13, 15, 8, 14, -1, -1, -1, -1, -1, -1, -1, 63, -1, 64, -1, 51, -1, -1, -1, -1, -1, -1, -1, 20, -1, -1, -1, 23, -1, -1, 68, -1, -1, 54, -1, -1, 65, -1, 66, -1, 50, -1, -1, 38, -1, -1, -1, 55, 52, -1, -1, 53, -1, -1, 67, -1, -1, -1, 39, -1, 44, 41, 42, 43, -1, 45, -1, 11, -1, -1, 48, -1, -1, -1, -1, -1, -1, -1, -1, -1, 59, 58, -1, -1, -1, -1, -1, -1, -1, -1, 40};
	final static int[] M_29 = { 25, 20, 31, -1, 28, 32, 34, 16, -1, -1, 15, 54, -1, -1, -1, 33, 14, 58, -1, -1, 35, -1, 17, -1, 22, 60, 27, 30, 29, -1, -1, 55, -1, 45, 9, -1, 24, -1, -1, 26, -1, -1, -1, 19, 47, 8, 44, 23, 59, -1, -1, -1, -1, -1, -1, 11, 13, 7, 12, -1, -1, -1, -1, -1, -1, -1, 61, -1, 62, -1, 49, -1, -1, -1, -1, -1, -1, -1, 18, -1, -1, -1, 21, -1, -1, 66, -1, -1, 52, -1, -1, 63, -1, 64, -1, 48, -1, -1, 36, -1, -1, -1, 53, 50, -1, -1, 51, -1, -1, 65, -1, -1, -1, 37, -1, 42, 39, 40, 41, -1, 43, -1, 10, -1, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, 57, 56, -1, -1, -1, -1, -1, -1, -1, -1, 38};
	final static int[] M_30 = { 26, 21, 32, -1, 29, 33, 35, 17, -1, -1, 16, 55, -1, -1, -1, 34, 15, 59, -1, -1, 36, -1, 18, -1, 23, 61, 28, 31, 30, -1, -1, 56, -1, 46, 10, -1, 25, -1, -1, 27, -1, -1, -1, 20, 48, 9, 45, 24, 60, -1, -1, -1, -1, -1, -1, 12, 14, 8, 13, -1, -1, -1, -1, -1, -1, -1, 62, -1, 63, -1, 50, -1, -1, -1, -1, -1, -1, -1, 19, -1, -1, -1, 22, -1, -1, 67, -1, -1, 53, -1, -1, 64, -1, 65, -1, 49, -1, -1, 37, -1, -1, -1, 54, 51, -1, -1, 52, -1, -1, 66, -1, -1, -1, 38, -1, 43, 40, 41, 42, -1, 44, -1, 11, -1, -1, 47, -1, -1, -1, -1, -1, -1, -1, -1, -1, 58, 57, -1, -1, -1, -1, -1, -1, -1, -1, 39};
	final static int[] M_31 = { 15, -1, -1, -1, -1, -1, 11, -1, -1, 10, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, 12, -1, -1, -1, -1, 4, 1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 6, 8, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 5};
	final static int[] M_32 = { 20, -1, 24, -1, 23, 25, 27, -1, -1, -1, -1, -1, -1, -1, -1, 26, -1, -1, -1, -1, 28, -1, -1, -1, 17, -1, 22, -1, -1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, -1, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, -1, -1, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 16, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, -1, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_33 = { 49, -1, -1, -1, -1, -1, 53, -1, -1, -1, -1, -1, -1, -1, 55, -1, -1, -1, -1, -1, 50, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 54, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 56, -1, 57, -1, 46, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 61, -1, -1, -1, -1, -1, 58, -1, 59, -1, -1, -1, -1, -1, -1, -1, -1, -1, 47, -1, -1, 48, -1, -1, 60, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 51};
	final static int[] M_34 = { 20, 15, 24, -1, 23, 25, 27, 11, -1, -1, 10, -1, -1, -1, -1, 26, 9, -1, -1, -1, 28, -1, 12, -1, 17, -1, 22, 4, 1, -1, -1, -1, -1, 42, 32, -1, 19, -1, 29, 21, -1, -1, -1, 14, 44, 31, 41, 18, -1, -1, -1, -1, -1, -1, -1, 6, 8, 30, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 13, -1, -1, -1, 16, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, 45, -1, -1, 33, -1, -1, -1, 2, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 34, -1, 39, 36, 37, 38, -1, 40, -1, 5, -1, -1, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 35};
	final static int[] M_36 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, -1, 342, -1, -1, 348, 363, 346, 362, -1, -1, -1, 358, -1, 359};
	final static int[] M_38 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, 334, 342, -1, -1, 348, 363, 346, 362, -1, -1, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_41 = { 60, 55, 65, 34, 63, 66, -1, -1, 20, 21, -1, 30, 22, 27, 28, -1, -1, 23, 26, 32, -1, 36, -1, 38, 57, 42, 62, 14, 64, 16, 18, 19, -1, 50, 37, 40, 59, 45, 47, 61, 17, 25, 51, 54, 48, 39, 49, 58, 44, 46, -1, -1, -1, -1, 29, 10, 52, 35, -1, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 24, 31, 33, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 67};
	final static int[] M_45 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, -1, 342, -1, -1, 348, 363, 346, 362, -1, -1, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_48 = { 258, 253, 264, 226, 261, 265, 267, 249, 212, 213, 248, 222, 214, 219, 220, 266, 247, 215, 218, 224, 268, 228, 250, 230, 255, 234, 260, 263, 262, 207, 209, 210, 211, 242, 229, 232, 257, 237, 239, 259, 208, 217, 243, 252, 240, 231, 241, 256, 236, 238, -1, -1, -1, -1, 221, 244, 246, 227, 245, 233, 235, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 251, 216, 223, 225, 254, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 206, -1, -1, 269, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 205};
	final static int[] M_49 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, 439, 342, -1, -1, 348, 363, 346, 362, -1, 333, 373, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_51 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, 374, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, -1, 342, -1, -1, 348, 363, 346, 362, -1, 333, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_57 = { 60, 55, 65, 34, 63, 66, 4, 7, 20, 21, 6, 30, 22, 27, 28, 2, 3, 23, 26, 32, 5, 36, 8, 38, 57, 42, 62, 14, 64, 16, 18, 19, 9, 50, 37, 40, 59, 45, 47, 61, 17, 25, 51, 54, 48, 39, 49, 58, 44, 46, -1, -1, -1, -1, 29, 10, 52, 35, 11, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 24, 31, 33, 56, -1, -1, -1, -1, -1, 71, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 67};
	final static int[] M_59 = { 60, 55, 65, 34, 63, 66, 4, 7, 20, 21, 6, 30, 22, 27, 28, 2, 3, 23, 26, 32, 5, 36, 8, 38, 57, 42, 62, 14, 64, 16, 18, 19, 9, 50, 37, 40, 59, 45, 47, 61, 17, 25, 51, 54, 48, 39, 49, 58, 44, 46, -1, -1, -1, -1, 29, 10, 52, 35, 11, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 24, 31, 33, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 67};
	final static int[] M_65 = { 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 11};
	final static int[] M_66 = { 60, 55, 65, 34, 63, 66, -1, -1, 20, 21, -1, 30, 22, 27, 28, -1, -1, 23, 26, 32, -1, 36, -1, 38, 57, 42, 62, 14, 64, 16, 18, 19, -1, 50, 37, 40, 59, 45, 47, 61, 17, 25, 51, 54, 48, 39, 49, 58, 44, 46, -1, -1, -1, -1, 29, -1, 52, 35, -1, 41, 43, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 53, 24, 31, 33, 56, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 15, -1, -1, 67};
	final static int[] M_73 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 379, 367, 380, 368, 386, 347, 349, 355, -1, 350, -1, 371, 381, -1, -1, 352, -1, 372, 361, -1, 343, 357, 378, -1, 341, 383, -1, 384, 334, 382, -1, -1, 385, 363, 346, 362, -1, -1, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 377, 376};
	final static int[] M_74 = { 405, 400, 409, -1, 408, 410, 412, 397, -1, -1, 396, 429, -1, -1, -1, 411, 395, 431, -1, -1, 413, -1, 398, -1, 402, 433, 407, 389, 387, -1, -1, 430, -1, 425, 416, -1, 404, -1, 391, 406, -1, -1, -1, 399, 427, 415, 424, 403, 432, -1, -1, -1, -1, -1, -1, 392, 394, 414, 393, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 401, -1, -1, 435, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 388, -1, 373, -1, 428, -1, -1, 434, -1, -1, -1, 417, -1, 422, 419, 420, 421, -1, 423, -1, 390, -1, -1, 426, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 418};
	final static int[] M_84 = { 125, 120, 131, 93, 128, 132, 134, 116, 79, 80, 115, 89, 81, 86, 87, 133, 114, 82, 85, 91, 135, 95, 117, 97, 122, 101, 127, 130, 129, 74, 76, 77, 78, 109, 96, 99, 124, 104, 106, 126, 75, 84, 110, 119, 107, 98, 108, 123, 103, 105, -1, -1, -1, -1, 88, 111, 113, 94, 112, 100, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118, 83, 90, 92, 121, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, 136};
	final static int[] M_86 = { 288, 283, 294, -1, 291, 295, 297, 279, -1, -1, 278, -1, -1, -1, -1, 296, 277, -1, -1, -1, 298, -1, 280, -1, 285, -1, 290, 293, 292, -1, -1, -1, -1, -1, -1, -1, 287, -1, 273, 289, -1, -1, -1, 282, -1, -1, -1, 286, -1, -1, -1, -1, -1, -1, -1, 274, 276, -1, 275, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 281, -1, -1, -1, 284, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, -1, -1, 299};
	final static int[] M_87 = { 320, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, -1, -1, 326, -1, -1, -1, -1, -1, 321, -1, 314, 304, -1, -1, -1, -1, -1, -1, -1, -1, -1, 315, 303, 313, -1, 325, -1, -1, -1, -1, -1, -1, -1, -1, 302, -1, -1, -1, -1, -1, -1, -1, -1, 327, -1, 328, -1, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 332, -1, -1, 301, -1, -1, 329, -1, 330, -1, 316, -1, -1, 305, -1, -1, -1, 300, 318, -1, -1, 319, -1, -1, 331, -1, -1, -1, 306, -1, 311, 308, 309, 310, -1, 312, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 323, 322, -1, -1, -1, -1, -1, -1, -1, -1, 307};
	final static int[] M_97 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, 439, 342, -1, -1, 348, 363, 346, 362, -1, 333, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_99 = { 492, 487, 498, 460, 495, 499, 501, 483, 446, 447, 482, 456, 448, 453, 454, 500, 481, 449, 452, 458, 502, 462, 484, 464, 489, 468, 494, 497, 496, 441, 443, 444, 445, 476, 463, 466, 491, 471, 473, 493, 442, 451, 477, 486, 474, 465, 475, 490, 470, 472, -1, -1, -1, -1, 455, 478, 480, 461, 479, 467, 469, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 485, 450, 457, 459, 488, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 440};
	final static int[] M_114 = { 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, 11, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_117 = { 351, -1, -1, -1, -1, -1, -1, -1, 437, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, 374, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 438, -1, 341, 344, -1, 345, -1, 342, -1, -1, 348, 363, 346, 362, -1, 333, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335, -1, -1, -1, -1, 436};
	final static int[] M_155 = { 125, 120, 131, 93, 128, 132, 134, 116, 79, 80, 115, 89, 81, 86, 87, 133, 114, 82, 85, 91, 135, 95, 117, 97, 122, 101, 127, 130, 129, 74, 76, 77, 78, 109, 96, 99, 124, 104, 106, 126, 75, 84, 110, 119, 107, 98, 108, 123, 103, 105, -1, -1, -1, -1, 88, 111, 113, 94, 112, 100, 102, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 118, 83, 90, 92, 121, -1, -1, -1, -1, -1, 72, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 73, -1, -1, 136};
	final static int[] M_176 = { 287, 282, 293, -1, 290, 294, 296, 278, -1, -1, 277, -1, -1, -1, -1, 295, 276, -1, -1, -1, 297, -1, 279, -1, 284, -1, 289, 292, 291, -1, -1, -1, -1, -1, -1, -1, 286, -1, -1, 288, -1, -1, -1, 281, -1, -1, -1, 285, -1, -1, -1, -1, -1, -1, -1, 273, 275, -1, 274, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 280, -1, -1, -1, 283, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 272, -1, -1, 298};
	final static int[] M_177 = { 320, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, -1, -1, 326, -1, -1, -1, -1, -1, 321, -1, 314, 304, -1, -1, -1, 301, -1, -1, -1, -1, -1, 315, 303, 313, -1, 325, -1, -1, -1, -1, -1, -1, -1, -1, 302, -1, -1, -1, -1, -1, -1, -1, -1, 327, -1, 328, -1, 317, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 332, -1, -1, 300, -1, -1, 329, -1, 330, -1, 316, -1, -1, 305, -1, -1, -1, 299, 318, -1, -1, 319, -1, -1, 331, -1, -1, -1, 306, -1, 311, 308, 309, 310, -1, 312, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 323, 322, -1, -1, -1, -1, -1, -1, -1, -1, 307};
	final static int[] M_186 = { 394, 389, 398, 351, 397, 399, 401, 385, -1, -1, 384, 423, -1, -1, -1, 400, 383, 427, -1, -1, 402, -1, 386, -1, 391, 429, 396, 378, 375, -1, -1, 424, -1, 416, 406, -1, 393, -1, 403, 395, -1, -1, -1, 388, 418, 405, 415, 392, 428, -1, 354, -1, 369, 353, -1, 380, 382, 404, 381, -1, -1, 356, 366, 360, 370, 364, 430, 367, 431, 368, 420, 347, 349, 355, 374, 350, -1, 371, 387, -1, -1, 352, 390, 372, 361, 435, 343, 357, 377, -1, 341, 432, -1, 433, -1, 419, -1, -1, 407, 363, 346, 362, 376, 421, -1, 358, 422, 359, -1, 434, -1, -1, -1, 408, -1, 413, 410, 411, 412, -1, 414, -1, 379, -1, -1, 417, -1, -1, -1, -1, -1, -1, -1, -1, -1, 426, 425, -1, -1, -1, -1, -1, -1, -1, -1, 409};
	final static int[] M_197 = { 191, 186, 197, 159, 194, 198, 200, 182, 145, 146, 181, 155, 147, 152, 153, 199, 180, 148, 151, 157, 201, 161, 183, 163, 188, 167, 193, 196, 195, 140, 142, 143, 144, 175, 162, 165, 190, 170, 172, 192, 141, 150, 176, 185, 173, 164, 174, 189, 169, 171, -1, -1, -1, -1, 154, 177, 179, 160, 178, 166, 168, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 184, 149, 156, 158, 187, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 139, -1, -1, 202};
	final static int[] M_225 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, -1, -1, 341, 344, -1, 345, 334, 342, -1, -1, 348, 363, 346, 362, -1, -1, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_230 = { 493, 488, 499, 461, 496, 500, 502, 484, 447, 448, 483, 457, 449, 454, 455, 501, 482, 450, 453, 459, 503, 463, 485, 465, 490, 469, 495, 498, 497, 442, 444, 445, 446, 477, 464, 467, 492, 472, 474, 494, 443, 452, 478, 487, 475, 466, 476, 491, 471, 473, -1, -1, -1, -1, 456, 479, 481, 462, 480, 468, 470, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 486, 451, 458, 460, 489, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 440, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 441};
	final static int[] M_237 = { 4, 7, -1, -1, 6, -1, -1, -1, -1, 2, 3, -1, -1, -1, 5, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 72};
	final static int[] M_250 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, 333, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, -1, 342, -1, -1, 348, 363, 346, 362, -1, 334, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_252 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, 331, 342, -1, -1, 348, 363, 346, 362, -1, -1, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_254 = { 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 10, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_257 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, 437, 342, -1, -1, 348, 363, 346, 362, -1, 334, 332, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_261 = { 59, 54, 64, 33, 62, 65, -1, -1, 19, 20, -1, 29, 21, 26, 27, -1, -1, 22, 25, 31, -1, 35, -1, 37, 56, 41, 61, 13, 63, 15, 17, 18, -1, 49, 36, 39, 58, 44, 46, 60, 16, 24, 50, 53, 47, 38, 48, 57, 43, 45, -1, -1, -1, -1, 28, -1, 51, 34, 10, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 23, 30, 32, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, 66};
	final static int[] M_265 = { 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, 10};
	final static int[] M_266 = { 59, 54, 64, 33, 62, 65, -1, -1, 19, 20, -1, 29, 21, 26, 27, -1, -1, 22, 25, 31, -1, 35, -1, 37, 56, 41, 61, 13, 63, 15, 17, 18, -1, 49, 36, 39, 58, 44, 46, 60, 16, 24, 50, 53, 47, 38, 48, 57, 43, 45, -1, -1, -1, -1, 28, -1, 51, 34, -1, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 23, 30, 32, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, 66};
	final static int[] M_268 = { 59, 54, 64, 33, 62, 65, -1, -1, 19, 20, -1, 29, 21, 26, 27, -1, -1, 22, 25, 31, -1, 35, -1, 37, 56, 41, 61, 13, 63, 15, 17, 18, -1, 49, 36, 39, 58, 44, 46, 60, 16, 24, 50, 53, 47, 38, 48, 57, 43, 45, -1, -1, -1, -1, 28, 9, 51, 34, -1, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 23, 30, 32, 55, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, 66};
	final static int[] M_272 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, 437, 342, -1, -1, 348, 363, 346, 362, -1, 334, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_273 = { 490, 485, 496, 458, 493, 497, 499, 481, 444, 445, 480, 454, 446, 451, 452, 498, 479, 447, 450, 456, 500, 460, 482, 462, 487, 466, 492, 495, 494, 439, 441, 442, 443, 474, 461, 464, 489, 469, 471, 491, 440, 449, 475, 484, 472, 463, 473, 488, 468, 470, -1, -1, -1, -1, 453, 476, 478, 459, 477, 465, 467, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 483, 448, 455, 457, 486, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 438};
	final static int[] M_276 = { 59, 54, 64, 33, 62, 65, 3, 6, 19, 20, 5, 29, 21, 26, 27, 1, 2, 22, 25, 31, 4, 35, 7, 37, 56, 41, 61, 13, 63, 15, 17, 18, 8, 49, 36, 39, 58, 44, 46, 60, 16, 24, 50, 53, 47, 38, 48, 57, 43, 45, -1, -1, -1, -1, 28, 9, 51, 34, 10, 40, 42, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 52, 23, 30, 32, 55, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 14, -1, -1, 66};
	final static int[] M_288 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, -1, -1, 341, 344, -1, 345, 331, 342, -1, -1, 348, 363, 346, 362, -1, -1, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_291 = { 3, 6, -1, -1, 5, -1, -1, -1, -1, 1, 2, -1, -1, -1, 4, -1, 7, -1, -1, -1, -1, -1, -1, -1, -1, -1, 8, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 70};
	final static int[] M_300 = { 393, 388, 397, -1, 396, 398, 400, 384, -1, -1, 383, 421, -1, -1, -1, 399, 382, 425, -1, -1, 401, -1, 385, -1, 390, 427, 395, 376, 373, -1, -1, 422, -1, 414, 404, -1, 392, -1, 378, 394, -1, -1, -1, 387, 416, 403, 413, 391, 426, -1, -1, -1, -1, -1, -1, 379, 381, 402, 380, -1, -1, -1, -1, -1, -1, -1, 428, -1, 429, -1, 418, -1, -1, -1, -1, -1, -1, -1, 386, -1, -1, -1, 389, -1, -1, 433, -1, -1, 375, -1, -1, 430, -1, 431, -1, 417, -1, -1, 405, -1, -1, -1, 374, 419, -1, -1, 420, -1, -1, 432, -1, -1, -1, 406, -1, 411, 408, 409, 410, -1, 412, -1, 377, -1, -1, 415, -1, -1, -1, -1, -1, -1, -1, -1, -1, 424, 423, -1, -1, -1, -1, -1, -1, -1, -1, 407};
	final static int[] M_301 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, -1, 367, -1, 368, -1, 347, 349, 355, -1, 350, -1, 371, -1, -1, -1, 352, -1, 372, 361, -1, 343, 357, -1, -1, 341, -1, -1, -1, 331, -1, -1, -1, -1, 363, 346, 362, -1, -1, -1, 358, -1, 359};
	final static int[] M_307 = { 189, 184, 195, 157, 192, 196, 198, 180, 143, 144, 179, 153, 145, 150, 151, 197, 178, 146, 149, 155, 199, 159, 181, 161, 186, 165, 191, 194, 193, 138, 140, 141, 142, 173, 160, 163, 188, 168, 170, 190, 139, 148, 174, 183, 171, 162, 172, 187, 167, 169, -1, -1, -1, -1, 152, 175, 177, 158, 176, 164, 166, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 182, 147, 154, 156, 185, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 137, -1, -1, 200};
	final static int[] M_340 = { 256, 251, 262, 224, 259, 263, 265, 247, 210, 211, 246, 220, 212, 217, 218, 264, 245, 213, 216, 222, 266, 226, 248, 228, 253, 232, 258, 261, 260, 205, 207, 208, 209, 240, 227, 230, 255, 235, 237, 257, 206, 215, 241, 250, 238, 229, 239, 254, 234, 236, -1, -1, -1, -1, 219, 242, 244, 225, 243, 231, 233, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 249, 214, 221, 223, 252, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 204, -1, -1, 267, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 203};
	final static int[] M_342 = { 286, 281, 292, -1, 289, 293, 295, 277, -1, -1, 276, -1, -1, -1, -1, 294, 275, -1, -1, -1, 296, -1, 278, -1, 283, -1, 288, 291, 290, -1, -1, -1, -1, -1, -1, -1, 285, -1, 271, 287, -1, -1, -1, 280, -1, -1, -1, 284, -1, -1, -1, -1, -1, -1, -1, 272, 274, -1, 273, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 279, -1, -1, -1, 282, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 270, -1, -1, 297};
	final static int[] M_343 = { 318, -1, -1, -1, -1, -1, 322, -1, -1, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, 319, -1, 312, 302, -1, -1, -1, -1, -1, -1, -1, -1, -1, 313, 301, 311, -1, 323, -1, -1, -1, -1, -1, -1, -1, -1, 300, -1, -1, -1, -1, -1, -1, -1, -1, 325, -1, 326, -1, 315, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 330, -1, -1, 299, -1, -1, 327, -1, 328, -1, 314, -1, -1, 303, -1, -1, -1, 298, 316, -1, -1, 317, -1, -1, 329, -1, -1, -1, 304, -1, 309, 306, 307, 308, -1, 310, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 321, 320, -1, -1, -1, -1, -1, -1, -1, -1, 305};
	final static int[] M_366 = { 351, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 354, -1, 369, 353, -1, -1, -1, -1, -1, -1, -1, 356, 366, 360, 370, 364, 338, 367, 339, 368, 365, 347, 349, 355, -1, 350, -1, 371, 340, -1, -1, 352, -1, 372, 361, -1, 343, 357, 337, -1, 341, 344, -1, 345, -1, 342, -1, -1, 348, 363, 346, 362, -1, 334, -1, 358, -1, 359, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 336, 335};
	final static int[] M_396 = { 123, 118, 129, 91, 126, 130, 132, 114, 77, 78, 113, 87, 79, 84, 85, 131, 112, 80, 83, 89, 133, 93, 115, 95, 120, 99, 125, 128, 127, 72, 74, 75, 76, 107, 94, 97, 122, 102, 104, 124, 73, 82, 108, 117, 105, 96, 106, 121, 101, 103, -1, -1, -1, -1, 86, 109, 111, 92, 110, 98, 100, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 116, 81, 88, 90, 119, -1, -1, -1, -1, -1, 70, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 71, -1, -1, 134};
	final static int[] M_420 = { 285, 280, 291, -1, 288, 292, 294, 276, -1, -1, 275, -1, -1, -1, -1, 293, 274, -1, -1, -1, 295, -1, 277, -1, 282, -1, 287, 290, 289, -1, -1, -1, -1, -1, -1, -1, 284, -1, -1, 286, -1, -1, -1, 279, -1, -1, -1, 283, -1, -1, -1, -1, -1, -1, -1, 271, 273, -1, 272, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 278, -1, -1, -1, 281, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 270, -1, -1, 296};
	final static int[] M_421 = { 318, -1, -1, -1, -1, -1, 322, -1, -1, -1, -1, -1, -1, -1, 324, -1, -1, -1, -1, -1, 319, -1, 312, 302, -1, -1, -1, 299, -1, -1, -1, -1, -1, 313, 301, 311, -1, 323, -1, -1, -1, -1, -1, -1, -1, -1, 300, -1, -1, -1, -1, -1, -1, -1, -1, 325, -1, 326, -1, 315, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 330, -1, -1, 298, -1, -1, 327, -1, 328, -1, 314, -1, -1, 303, -1, -1, -1, 297, 316, -1, -1, 317, -1, -1, 329, -1, -1, -1, 304, -1, 309, 306, 307, 308, -1, 310, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 321, 320, -1, -1, -1, -1, -1, -1, -1, -1, 305};
	final static int[] M_443 = { 392, 387, 396, 351, 395, 397, 399, 383, -1, -1, 382, 421, -1, -1, -1, 398, 381, 425, -1, -1, 400, -1, 384, -1, 389, 427, 394, 376, 373, -1, -1, 422, -1, 414, 404, -1, 391, -1, 401, 393, -1, -1, -1, 386, 416, 403, 413, 390, 426, -1, 354, -1, 369, 353, -1, 378, 380, 402, 379, -1, -1, 356, 366, 360, 370, 364, 428, 367, 429, 368, 418, 347, 349, 355, 333, 350, -1, 371, 385, -1, -1, 352, 388, 372, 361, 433, 343, 357, 375, -1, 341, 430, -1, 431, -1, 417, -1, -1, 405, 363, 346, 362, 374, 419, -1, 358, 420, 359, -1, 432, -1, -1, -1, 406, -1, 411, 408, 409, 410, -1, 412, -1, 377, -1, -1, 415, -1, -1, -1, -1, -1, -1, -1, -1, -1, 424, 423, -1, -1, -1, -1, -1, -1, -1, -1, 407};
	final static int[] M_457 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, -1, 2, 4, 5, 6, -1, 24, 27, -1, 32, -1, -1, 3, 12, -1, -1, -1, 26, -1, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_458 = { 53, 48, 59, -1, 56, 60, 62, 44, -1, -1, 43, -1, -1, -1, -1, 61, 42, -1, -1, -1, 63, -1, 45, -1, 50, -1, 55, 58, 57, -1, -1, -1, -1, -1, -1, -1, 52, -1, -1, 54, -1, -1, -1, 47, -1, -1, -1, 51, -1, -1, -1, -1, -1, -1, -1, 39, 41, -1, 40, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 46, -1, -1, -1, 49};
	final static int[] M_459 = { 21, -1, -1, -1, -1, 7, 8, -1, 17, 9, 14, 15, -1, -1, 10, 13, 19, -1, 23, -1, 25, -1, 29, -1, -1, -1, 2, 4, 5, 6, 37, 24, 27, -1, 32, 34, -1, 3, 12, 38, -1, 35, 26, 36, -1, 31, 33, -1, -1, -1, -1, 16, -1, -1, 22, -1, 28, 30, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 11, 18, 20, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 1};
	final static int[] M_461 = { 8, -1, -1, -1, -1, -1, -1, 5, -1, -1, -1, -1, -1, -1, -1, -1, 6, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 7, -1, -1, -1, -1, -1, -1, 10, 13, -1, -1, 11, 12, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 9, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 3, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 4};
}