/* XPECT_SETUP eu.numberfour.n4js.spec.tests.N4JSSpecTest END_SETUP */
// IDE-561

/* XPECT output --- 
<==
stdout:
# allMembers (direct + consumed + inherited + direct static) && annotated with @Nfon
 - N4DataField :: datafieldPublicStaticStringClassA
 - N4DataField :: datafieldPublicStaticStringClassS
 - N4DataField :: datafieldPublicStaticStringClassSS
 - N4DataField :: datafieldPublicStringRoleR
 - N4DataField :: datafieldPublicStringRoleRR
# allDataFields (direct + consumed + inherited + direct static) && annotated with @Nfon
 - N4DataField :: datafieldPublicStaticStringClassA
 - N4DataField :: datafieldPublicStaticStringClassS
 - N4DataField :: datafieldPublicStaticStringClassSS
 - N4DataField :: datafieldPublicStringRoleR
 - N4DataField :: datafieldPublicStringRoleRR
# allMembers (direct + consumed + inherited + direct static) && annotated with @Test
 - N4Method :: methodPublicStaticVoidClassA
 - N4Method :: methodPublicStaticVoidClassS
 - N4Method :: methodPublicStaticVoidClassSS
 - N4Method :: methodPublicVoidsRoleR
 - N4Method :: methodPublicVoidsRoleRR
# allMethods (direct + consumed + inherited + direct static) && annotated with @Test
 - N4Method :: methodPublicStaticVoidClassA
 - N4Method :: methodPublicStaticVoidClassS
 - N4Method :: methodPublicStaticVoidClassSS
 - N4Method :: methodPublicVoidsRoleR
 - N4Method :: methodPublicVoidsRoleRR
stderr:
==>
--- */



export public class SS{
	@Nfon
	public static datafieldPublicStaticStringClassSS : string = "1";
	public static datafieldPublicStaticStringClassSS_NoAnn : string = "1";
	
	@Test
	public static methodPublicStaticVoidClassSS() : void{}
	public static methodPublicStaticVoidClassSS_NoAnn() : void{}
	
	@Nfon
	public datafieldPublicStringClassSS : string = "3";
	public datafieldPublicStringClassSS_NoAnn : string = "3";
	
	@Test
	public methodPublicVoidsClassSS() : void{}
	public methodPublicVoidsClassSS_NoAnn() : void{}
}
export public class S extends SS {
	@Nfon
	public static datafieldPublicStaticStringClassS : string = "1";
	public static datafieldPublicStaticStringClassS_NoAnn : string = "1";
	
	@Test
	public static methodPublicStaticVoidClassS() : void{}
	public static methodPublicStaticVoidClassS_NoAnn() : void{}
	
	@Nfon
	public datafieldPublicStringClassS : string = "3";
	public datafieldPublicStringClassS_NoAnn : string = "3";
	
	@Test
	public methodPublicVoidsClassS() : void{}
	public methodPublicVoidsClassS_NoAnn() : void{}
}
interface RR {
	
	@Nfon
	public datafieldPublicStringRoleRR : string = "3";
	public datafieldPublicStringRoleRR_NoAnn : string = "3";
	
	@Test
	public methodPublicVoidsRoleRR() : void{}
	public methodPublicVoidsRoleRR_NoAnn() : void{}
}
interface R extends RR {
	
	@Nfon
	public datafieldPublicStringRoleR : string = "3";
	public datafieldPublicStringRoleR_NoAnn : string = "3";
	
	@Test
	public methodPublicVoidsRoleR() : void{}
	public methodPublicVoidsRoleR_NoAnn() : void{}
}

export public class ClassWithStuff extends S implements R {
	@Nfon
	public static datafieldPublicStaticStringClassA : string = "1";
	public static datafieldPublicStaticStringClassA_NoAnn : string = "1";
	
	@Test
	public static methodPublicStaticVoidClassA() : void{}
	public static methodPublicStaticVoidClassA_NoAnn() : void{}
	
	@Nfon
	public datafieldPublicStringClassA : string = "3";
	public datafieldPublicStringClassA_NoAnn : string = "3";
	
	@Test
	public methodPublicVoidsClassA() : void{}
	public methodPublicVoidsClassA_NoAnn() : void{}
}


function findMemberType(m : N4Member){
	if(m instanceof N4Method) {return "N4Method"}
	if(m instanceof N4DataField) {return "N4DataField"}
	if(m instanceof N4Accessor) {return "N4Accessor"}
	if(m instanceof N4Field) {return "N4Field"}
	if(m instanceof N4Member) {return "N4Member"}
	return "unknown type of member"
}

function print1 (a : Array<string>){
	a.forEach(function(s : string){ console.log(s);});
}

function printMembers(arr : Array<? extends N4Member>){
	var asd : Array<string> = [];
	arr.forEach(function(m : N4Member){ asd.push (" - "+ findMemberType(m)+ " :: "+ m.name) ; });
	asd.sort();   print1 ( asd );
}


var test = ClassWithStuff.n4type
console.log("# allMembers (direct + consumed + inherited + direct static) && annotated with @Nfon")
printMembers(test.membersWithAnnotation("Nfon", true, true, true));
console.log("# allDataFields (direct + consumed + inherited + direct static) && annotated with @Nfon")
printMembers(test.dataFieldsWithAnnotation("Nfon", true, true, true));
console.log("# allMembers (direct + consumed + inherited + direct static) && annotated with @Test")
printMembers(test.membersWithAnnotation("Test", true, true, true));
console.log("# allMethods (direct + consumed + inherited + direct static) && annotated with @Test")
printMembers(test.methodsWithAnnotation("Test", true, true, true));
