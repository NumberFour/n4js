@@Global

export external public class EventTarget {

}

export external public class Event {

}

export external public class HTMLElement {

}

/**
 * dbo TODO more
 */
export external public abstract class Element {
    protected constructor();
};

/**
 * @see http://facebook.github.io/react/docs/events.html
 * dbo TODO more
 */
export external public class ~SyntheticEvent {
    protected constructor();

    public bubbles: boolean;
    public cancelable: boolean;
    public currentTarget: EventTarget;
    public defaultPrevented: boolean;
    public eventPhase: number;
    public isTrusted: boolean;
    public nativeEvent: Event;
    public preventDefault(): void;
    public stopPropagation(): void;
    public target: EventTarget;
    public timeStamp: number;
    public type: string;
}

/**
 * https://github.com/facebook/react/blob/master/src/modern/class/ReactComponent.js
 *
 * http://facebook.github.io/react/docs/reusable-components.html
 * http://facebook.github.io/react/blog/2015/03/10/react-v0.13.html
 */
export external public abstract class Component<PropsT extends Object, StateT extends Object> {
    public props: PropsT;
    public state: StateT;
    public context: Object+;
    public refs: Object+;
    public static name: Object+;

    public abstract render(): union{Component<?, ?>, Element};

    /**
     * Base class helpers for the updating state of a component.
     */
    public constructor(props: Object?, context: Object? );

    /**
     * Values in the mapping will be set on this.props if that prop is not specified by the parent component (i.e. using an in check).
     * Be aware that any complex objects will be shared across instances, not copied.
     */
    protected static defaultProps: Object;

    /**
     * The propTypes object allows you to validate props being passed to your components.
     *
     * @see http://facebook.github.io/react/docs/reusable-components.html
     */
    protected static propTypes: Object;

    /**
     * Forces an update. This should only be invoked when it is known with
     * certainty that we are **not** in a DOM transaction.
     *
     * You may want to call this when you know that some deeper aspect of the
     * component's state has changed but `setState` was not called.
     *
     * This will not invoke `shouldUpdateComponent`, but it will invoke
     * `componentWillUpdate` and `componentDidUpdate`.
     *
     * @param callback - Called after update is complete.
     */
    @Final protected forceUpdate(callback: Function?): void;

    /**
     * Sets a subset of the state. Always use this to mutate
     * state. You should treat `this.state` as immutable.
     *
     * There is no guarantee that `this.state` will be immediately updated, so
     * accessing `this.state` after calling this method may return the old value.
     *
     * There is no guarantee that calls to `setState` will run synchronously,
     * as they may eventually be batched together.  You can provide an optional
     * callback that will be executed when the call to setState is actually
     * completed.
     *
     * When a function is provided to setState, it will be called at some point in
     * the future (not synchronously). It will be called with the up to date
     * component arguments (state, props, context). These values can be different
     * from this.* because your function may be called after receiveProps but before
     * shouldComponentUpdate, and this new state, props, and context will not yet be
     * assigned to this.
     *
     * @param {object|function} partialState Next partial state or function to
     *        produce next partial state to be merged with current state.
     * @param {?function} callback Called after state is updated.
     * @final
     * @protected
     */
    public setState(partialState: union{Object, {function(state: Object, props: Object, context: Object): void}}, callback: Function?): void;

    /**
     * Returns true if the component is rendered into the DOM, false otherwise.
     * You can use this method to guard asynchronous calls to setState() or forceUpdate().
     */
    public isMounted(): boolean;

    //
    // Lifecycle Methods:
    //

    /**
     * Invoked once, both on the client and server, immediately before the initial rendering occurs.
     * If you call setState within this method, render() will see the updated state and will be executed only once despite the state change.
     */
    protected componentWillMount(): void;

    /**
     * Invoked once, only on the client (not on the server), immediately after the initial rendering occurs.
     * At this point in the lifecycle, the component has a DOM representation which you can access via R.findDOMNode().
     * If you want to integrate with other JavaScript frameworks, set timers using setTimeout or setInterval, or send AJAX requests, perform those operations in this method.
     */
    protected componentDidMount(): void;

    /**
     * Invoked when a component is receiving new props.
     * This method is not called for the initial render.
     *
     * Use this as an opportunity to react to a prop transition before render() is called by updating the state using this.setState().
     * The old props can be accessed via this.props. Calling this.setState() within this function will not trigger an additional render.
     *
     * dbo TODO react deprecated?
     */
    protected componentWillReceiveProps(nextProps: Object): void;

    /**
     * Invoked before rendering when new props or state are being received.
     * This method is not called for the initial render or when forceUpdate is used.
     *
     * Use this as an opportunity to return false when you're certain that the transition to the new props and state will not require a component update.
     *
     * <pre>
     * @Override boolean shouldComponentUpdate(Object nextProps, ObjectnextState) {
     *     return nextProps.id !== this.props.id;
     * }
     *
     * If shouldComponentUpdate returns false, then render() will be completely skipped until the next state change.
     * (In addition, componentWillUpdate and componentDidUpdate will not be called.)
     *
     * By default, shouldComponentUpdate always returns true to prevent subtle bugs when state is mutated in place,
     * but if you are careful to always treat state as immutable and to read only from props and state in render() then
     * you can override shouldComponentUpdate with an implementation that compares the old props and state to their replacements.
     *
     * If performance is a bottleneck, especially with dozens or hundreds of components, use shouldComponentUpdate to speed up your app.
     */
    protected shouldComponentUpdate(nextProps: Object, nextState: Object): boolean;

    /**
     * Invoked immediately before rendering when new props or state are being received.
     * This method is not called for the initial render.
     *
     * Use this as an opportunity to perform preparation before an update occurs.
     *
     * Note:
     * You cannot use this.setState() in this method.
     * If you need to update state in response to a prop change, use componentWillReceiveProps instead.
     */
    protected componentWillUpdate(nextProps: Object, nextState: Object): void;

    /**
     * Invoked immediately after the component's updates are flushed to the DOM.
     * This method is not called for the initial render.
     *
     * Use this as an opportunity to operate on the DOM when the component has been updated.
     */
    protected componentDidUpdate(prevProps: Object, prevState: Object): void;

    /**
     * Invoked immediately before a component is unmounted from the DOM.
     *
     * Perform any necessary cleanup in this method, such as invalidating timers or
     * cleaning up any DOM elements that were created in componentDidMount.
     */
    protected componentWillUnmount(): void;
}

export external public abstract class ~React {
    /**
     * Finds the DOM node of a given component if mounted.
     */
    public static findDOMNode(component: Component<?, ?>): HTMLElement;

    /**
     * Create and return a new Element of the given type.
     * The type argument can be either an html tag name string (eg. 'div', 'span', etc),
     * or a ReactClass.
     */
    public static createElement(
        type: union{string, constructor{Component}},
        props: Object?, ...children: union{string, Element, Array<Element>}): Element;

    /**
     * Clone and return a new Element using element as the starting point.
     * The resulting element will have the original element's props with the new props merged in shallowly.
     * New children will replace existing children.
     * Unlike R.addons.cloneWithProps, key and ref from the original element will be preserved.
     * There is no special behavior for merging any props (unlike cloneWithProps).
     */
    public static cloneElement(
        element: Element,
        props: Object?,
        ...children: union{string, Element, Array<Element>}): Element;

    /**
     * Render a Element into the DOM in the supplied container and return a reference to the component.
     * If the Element was previously rendered into container, this will perform an update on it and only mutate
     * the DOM as necessary to reflect the latest React component.
     * If the optional callback is provided, it will be executed after the component is rendered or updated.
     */
    public static render(
        element: Element,
        container: Element,
        callback: Function?): Component<?, ?>;

    /**
     * Verifies the object is a Element.
     */
    public static isValidElement(object: Object): boolean;

    /**
     * Remove a mounted React component from the DOM and clean up its event handlers and state.
     * If no component was mounted in the container, calling this function does nothing.
     * Returns true if a component was unmounted and false if there was no component to unmount.
     */
    public static unmountComponentAtNode(container: Element): boolean;

    /**
     * Render a Element to its initial HTML. This should only be used on the server.
     * React will return an HTML string.
     * You can use this method to generate HTML on the server and send the markup down on the initial
     * request for faster page loads and to allow search engines to crawl your pages for SEO purposes.
     * If you call R.render() on a node that already has this server-rendered markup,
     * React will preserve it and only attach event handlers, allowing you to have a very performant first-load experience.
     */
    public static renderToString(element: Element): string;

    /**
     * Similar to renderToString, except this doesn't create extra DOM attributes such as data-react-id,
     * that React uses internally.
     * This is useful if you want to use React as a simple static page generator, as stripping away the
     * extra attributes can save lots of bytes.
     */
    public static renderToStaticMarkup(element: Element): string;

    /**
     * Configure React's event system to handle touch events on mobile devices.
     */
    public static initializeTouchEvents(shouldUseTouch: boolean): void;

    /**
     * R.DOM provides convenience wrappers around R.createElement for DOM components.
     * These should only be used when not using JSX. For example, R.DOM.div(null, 'Hello World!')
     */
    public const DOM: ~Object with {
            props: {function(Object?, ...children: union{string, Element, Array<Element>}): Element} div;
        };

    /**
     * You can also specify a custom validator. It should return an Error
     * object if the validation fails. Don't `console.warn` or throw, as this
     * won't work inside `oneOfType`.
     */
    public customProp(props: Object, propName: string, componentName: string);
}

export external public interface PropConstraint {
    public get isRequired(): PropConstraint;
}
export external public interface PropType extends PropConstraint {}

/**
 * R.PropTypes includes types that can be used with a component's propTypes object to validate
 * props being passed to your components.
 *
 * @see http://facebook.github.io/react/docs/reusable-components.html
 */
export external public class PropTypes {
    // You can declare that a prop is a specific JS primitive. By default, these
    // are all optional.
    public const array: PropType;
    public const bool: PropType;
    public const func: PropType;
    public const number: PropType;
    public const object: PropType;
    public const string: PropType;

    // Anything that can be rendered: numbers, strings, elements or an array
    // containing these types.
    public const node: PropType;

    // A React element.
    public const element: PropType;

    // You can also declare that a prop is an instance of a class. This uses
    // JS's instanceof operator.
    public static instanceOf(comp: Object): PropConstraint;

    // You can ensure that your prop is limited to specific values by treating
    // it as an enum.
    public static oneOf(...values: any): PropConstraint;

    // An object that could be one of many types
    public static oneOfType(...constraints: PropConstraint): PropConstraint;

    // An array of a certain type
    public static arrayOf(elemType: PropType): PropConstraint;

    // An object with property values of a certain type
    public static objectOf(valueType: PropType): PropConstraint;

    // An object taking on a particular shape
    public static shape(Object): PropConstraint;
}

/* -*- mode: typescript;-*- */