export public class Element {
	name: string = "dummy";
	props : ~ComponentProps;
	children: Array<any> = [];
}


export public interface ~ComponentProps {
//	public children: Array<Element>?;
	public ref: {function(Object /* node */): void}?;
	// Attention: Beware that you can't read/rely on the key property when rendering, see https://facebook.github.io/react/docs/lists-and-keys.html
	public key: string?;
}

export public abstract class Component <PropsT extends ComponentProps, StateT extends Object> {
	private _props: PropsT;
	public get props(): PropsT {
		return this._props;
	}
	public state: StateT;

	public context: Object+;
	public static name: Object+;

	public render(): Element {
		return null;
	}

	/**
	 * Base class helpers for the updating state of a component.
	 */
	@CovariantConstructor
	public constructor(props: PropsT) {
		this._props = props;
	}

}


/**
 * React.PureComponent is exactly like React.Component but implements shouldComponentUpdate() with a shallow prop and state comparison.
 */
export public abstract class PureComponent <PropsT extends ComponentProps, StateT extends Object>
	extends Component<PropsT, StateT>{};

/**
 * Create and return a new Element of the given type.
 * The type argument can be either an html tag name string (eg. 'div', 'span', etc),
 * or a ReactClass.
 */
// mor TODO IDE-2323 
//    public static <PropsT extends ComponentProps> createElement(
//        type: union{string, {function(PropsT?): Element}, constructor{Component<PropsT, ?>}},
//        props: PropsT?, ...children: union{string, Element, Array<Element>}): Element;
export public function createElement(type: union {string, {function(Object?): Element}, constructor{Component} },
	props: Object?,
	...children: union { string, Element, Array<Element> }): Element{
		
		let element = new Element
		
		if(typeof type ==  'string'){
			element.name = type as string;
		}else if(N4Type.of(type) == Component){
			element.name = N4Type.of(type).name
		}else if(type instanceof Function){
			 let fnName = type.toString();
  			 fnName = fnName.substring('function '.length);
  			 fnName = fnName.substring(0, fnName.indexOf('('));
			element.name = fnName.trim()
		}else{ 
			const msg = "cannot obtain name of the component type";
			console.error(msg);
			throw msg;
		}
		element.props = props
		
		children.map((p)=>createChildElements(p)).forEach(cha=>(cha as Array<?>).forEach(ch=>element.children.push(ch)))
		
		return element;
	}
	
export public function createChildElements(type: union { string, Element, Array<Element> }): Array<any>{
		let elements :Array<any> = []
		
		if(typeof type ==  'string'){
			let element = new Element
			element.name = type as string;
			elements.push(element)
		}else if(N4Type.of(type) == Element){
			elements.push(type as Element)
		}else if(type instanceof Array){
			 (type as Array<?>).forEach(e=>elements.push(e))
		}else{
			elements.push(type)
		}
		return elements;
	}
	

/* -*- mode: typescript;-*- */
