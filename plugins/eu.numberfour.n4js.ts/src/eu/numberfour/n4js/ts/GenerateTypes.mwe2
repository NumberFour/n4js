/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
module eu.numberfour.n4js.ts.GenerateTypes

import org.eclipse.xtext.xtext.generator.*
import org.eclipse.xtext.xtext.generator.model.project.*

import eu.numberfour.n4js.generation.*

var fileExtensions = "n4ts"
var rootPath = ".."
var runtimeProjectName = "eu.numberfour.n4js.ts"
var runtimeProjectPath = "${rootPath}/${runtimeProjectName}"

Workflow {
	component = XtextGenerator {
		configuration = TypesGeneratorModule {
			project = StandardProjectConfig {
				baseName = runtimeProjectName
				rootPath = rootPath
				genericIde = {
					enabled = true
					name = "${runtimeProjectName}.ui"
					root = "${runtimeProjectPath}.ui"
				}
				eclipsePlugin = {
					enabled = true
				}
				createEclipseMetaData = false
			}
			code = {
				encoding = "UTF-8"
				fileHeader = "/*\n * generated by Xtext \${version}\n */"
				lineDelimiter = '\n'
				preferXtendStubs = true
			}
		}

		language = XtextGeneratorLanguage {
			name = "eu.numberfour.n4js.ts.TypeExpressions"
			fileExtensions = fileExtensions
			generateXtendStubs = false

			referencedResource = "platform:/resource/org.eclipse.emf.ecore.xcore.lib/model/XcoreLang.xcore"
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
			referencedResource = "platform:/resource/eu.numberfour.n4js.ts.model/model/Types.xcore"
			referencedResource = "platform:/resource/eu.numberfour.n4js.ts.model/model/TypeRefs.xcore"

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 {}

			// serializer 2.0
			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			// content assist API
			fragment = ui.contentAssist.ContentAssistFragment2 {
				inheritImplementation = false
			}

			fragment = formatting.Formatter2Fragment2 {}
		}

		language = XtextGeneratorLanguage {
			name = "eu.numberfour.n4js.ts.Types"
			fileExtensions = fileExtensions
			generateXtendStubs = false

			referencedResource = "platform:/resource/org.eclipse.emf.ecore.xcore.lib/model/XcoreLang.xcore"
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.ecore"
			referencedResource = "platform:/resource/org.eclipse.emf.ecore/model/Ecore.genmodel"
			referencedResource = "platform:/resource/eu.numberfour.n4js.ts.model/model/Types.xcore"
			referencedResource = "platform:/resource/eu.numberfour.n4js.ts.model/model/TypeRefs.xcore"
			referencedResource = "platform:/resource/${runtimeProjectName}/src/eu/numberfour/n4js/ts/TypeExpressions.xtext"

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment2 {}

			// serializer 2.0
			fragment = serializer.SerializerFragment2 {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment2 {}

			// The antlr parser generator fragment.
			fragment = eu.numberfour.n4js.antlr.N4AntlrGeneratorFragment2 {
				antlrParam = "-Xconversiontimeout"
				antlrParam = "10000"
				combinedGrammar = false
				debugGrammar = true
			}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment2 {
				inheritImplementation = false
			}

			// old scoping and exporting API
			// fragment = exporting.SimpleNamesFragment {}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment2 {
			 	inheritImplementation = false
			}
//			fragment = exporting.QualifiedNamesFragment2 {}
//			fragment = builder.BuilderIntegrationFragment2 {}

			// generator API
//			fragment = generator.GeneratorFragment2 {}

			// labeling API
			fragment = ui.labeling.LabelProviderFragment2 {}

			// outline API
			fragment = ui.outline.OutlineTreeProviderFragment2 {}
			fragment = ui.outline.QuickOutlineFragment2 {}

			// quickfix API
			fragment = ui.quickfix.QuickfixProviderFragment2 {
				inheritImplementation = false
			}

			// content assist API
			fragment = ui.contentAssist.ContentAssistFragment2 {
				inheritImplementation = false
			}

			// generates junit test support classes into Generator#pathTestProject
//			fragment = junit.Junit4Fragment2 {}

			// project wizard (optional)
			// fragment = ui.projectWizard.SimpleProjectWizardFragment2 {
			// }

			// rename refactoring
			fragment = ui.refactoring.RefactorElementNameFragment2 {}

			// provides a preference page for template proposals
			fragment = ui.templates.CodetemplatesGeneratorFragment2 {}

			// provides a compare view
			fragment = ui.compare.CompareFragment2 {}
		}
	}
}
