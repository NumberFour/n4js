import { Element, Component } from "react";

/**
 * @see http://facebook.github.io/react/docs/events.html
 * dbo TODO more
 */
export external public class ~SyntheticEvent {
    protected constructor();

    public bubbles: boolean;
    public cancelable: boolean;
    public currentTarget: EventTarget;
    public defaultPrevented: boolean;
    public eventPhase: number;
    public isTrusted: boolean;
    public nativeEvent: Event;
    public preventDefault(): void;
    public stopPropagation(): void;
    public target: EventTarget;
    public timeStamp: number;
    public type: string;
}

export external public function findDOMNode(component: Component<?, ?>): Node;

/**
 * Render a Element into the DOM in the supplied container and return a reference to the component.
 * If the Element was previously rendered into container, this will perform an update on it and only mutate
 * the DOM as necessary to reflect the latest React component.
 * If the optional callback is provided, it will be executed after the component is rendered or updated.
 */
export external public function render(
    element: Element,
    container: Node,
    callback: Function?): void;

/**
 * Remove a mounted React component from the DOM and clean up its event handlers and state.
 * If no component was mounted in the container, calling this function does nothing.
 * Returns true if a component was unmounted and false if there was no component to unmount.
 */
export external public function unmountComponentAtNode(container: Node): boolean;
    
/* -*- mode: typescript;-*- */