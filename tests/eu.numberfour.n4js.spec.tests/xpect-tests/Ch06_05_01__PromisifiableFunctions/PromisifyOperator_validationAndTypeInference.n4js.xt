/* XPECT_SETUP eu.numberfour.n4js.spec.tests.N4JSSpecTest END_SETUP */


class MyError extends Error {}
class Content {}


// ######################################################################################################
// with declared function

@Promisifiable
function f(path:string, cb:{function(MyError,Content)}) {}
function fNonP(path:string, cb:{function(MyError,Content)}) {}
var fInVar = f;

// XPECT type of 'test01' --> Promise<Content,MyError>
// XPECT noerrors -->
var test01 = @Promisify f("");

// XPECT type of 'test02' --> Promise<Content,MyError>
// XPECT noerrors -->
var test02 = @Promisify fInVar("");

// XPECT errors --> "@Promisify may only be applied to a call expression with a @Promisifiable function or method as target." at "@Promisify f"
var test03 = @Promisify f;

// XPECT errors --> "@Promisify may only be applied to a call expression with a @Promisifiable function or method as target." at "@Promisify fNonP("")"
var test04 = @Promisify fNonP("");

async function testFun() {
	// XPECT type of 'test05' --> Content
	// XPECT noerrors -->
	var test05 = await @Promisify f("");
	
	// XPECT type of 'test06' --> Content
	// XPECT noerrors -->
	var test06 = await f("");
}


// ######################################################################################################
// with method

class C {
	@Promisifiable
	m(path:string, cb:{function(MyError,Content)}) {}
	mNonP(path:string, cb:{function(MyError,Content)}) {}
}
var c : C;
// XPECT warnings --> "A reference to method m is created detached from a (correct) this-instance." at "m"
var mInVar = c.m;


// XPECT type of 'test11' --> Promise<Content,MyError>
// XPECT noerrors -->
var test11 = @Promisify c.m("");

// XPECT type of 'test12' --> Promise<Content,MyError>
// XPECT noerrors -->
var test12 = @Promisify mInVar("");

// cannot test the following case because of Xpect problem (overlap of error and warning):
// X--PECT errors --> "@Promisify may only be applied to a call expression with a @Promisifiable function or method as target." at "@Promisify c.m"
// X--PECT warnings --> "A reference to method m is created detached from a (correct) this-instance." at "m"
//var test13 = @Promisify c.m;

// XPECT errors --> "@Promisify may only be applied to a call expression with a @Promisifiable function or method as target." at "@Promisify c.mNonP("")"
var test14 = @Promisify c.mNonP("");

async function testMeth() {
	// XPECT type of 'test15' --> Content
	// XPECT noerrors -->
	var test15 = await @Promisify c.m("");
	
	// XPECT type of 'test16' --> Content
	// XPECT noerrors -->
	var test16 = await c.m("");
}

