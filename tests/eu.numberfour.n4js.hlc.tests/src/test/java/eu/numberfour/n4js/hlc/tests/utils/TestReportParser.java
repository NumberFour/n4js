/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
package eu.numberfour.n4js.hlc.tests.utils;

import java.io.File;
import java.util.concurrent.atomic.AtomicReference;

import javax.xml.parsers.SAXParser;
import javax.xml.parsers.SAXParserFactory;

import org.xml.sax.Attributes;
import org.xml.sax.SAXException;
import org.xml.sax.helpers.DefaultHandler;

/**
 * SAX parser for JUnit test reports generated by {@code stdlib} test suite execution.
 */
public class TestReportParser {

	private static final String NAME = "name";
	private static final String CLASSNAME = "classname";
	private static final String MESSAGE = "message";
	private static final String ERROR = "error";
	private static final String FAILURE = "failure";
	private static final String TESTCASE = "testcase";
	private static final String TESTSUITE = "testsuite";

	/**
	 * Parses a JUnit report file content and creates a {@link TestReport test report} instance based on the content of
	 * the parsed file.
	 *
	 * @param report
	 *            the JUnit report file
	 * @return the test report.
	 */
	public TestReport parse(final File report) {

		try {

			final AtomicReference<TestReport> reportRef = new AtomicReference<>();
			final SAXParserFactory factory = SAXParserFactory.newInstance();
			factory.setValidating(false);
			factory.setNamespaceAware(false);
			final SAXParser parser = factory.newSAXParser();

			parser.parse(report, new DefaultHandler() {

				private boolean idle = true;
				private TestCase currentCase;

				@Override
				public void startElement(final String uri, final String localName, final String qName,
						final Attributes attributes) throws SAXException {

					if (TESTSUITE.equals(qName)) {
						reportRef.set(new TestReport(attributes));
					} else if (TESTCASE.equals(qName) && idle) {
						idle = false;
						currentCase = new TestCase();
						currentCase.name = getCaseName(attributes);
					} else if ((ERROR.equals(qName) || FAILURE.equals(qName) && !idle)) {
						currentCase.status = qName;
						currentCase.message = attributes.getValue(MESSAGE);
						reportRef.get().appendFailure(currentCase);
						idle = true;
					}
				}

				@Override
				public void endElement(String uri, String localName, String qName) throws SAXException {
					if ((TESTCASE.equals(qName) || TESTSUITE.equals(qName)) && !idle) {
						if (isFailureCase(currentCase)) {
							reportRef.get().appendFailure(currentCase);
						}
						idle = true;
					}
				}

				private boolean isFailureCase(TestCase tc) {
					return FAILURE.equals(tc.status) || ERROR.equals(tc.status);
				}

				private String getCaseName(final Attributes attributes) {
					return new StringBuilder(attributes.getValue(CLASSNAME))
							.append(".")
							.append(attributes.getValue(NAME))
							.toString();
				}

			});

			return reportRef.get();
		} catch (final Exception e) {
			throw new RuntimeException(e);
		}
	}

}
