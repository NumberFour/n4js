import { ITestReporter } from "ITestReporter"
import { ITestController } from "ITestController"
import { TestDescriptor } from "TestDescriptor"

export public class TestController implements ITestController{
	
	private session : string = "";
	private reporters : Array<ITestReporter> = [];
	private testDescriptors : Array<TestDescriptor> = [];
	
	constructor(spec : Object){
		var self = this;
		(spec['reporters'] as Array<ITestReporter>).forEach(function(r : ITestReporter){
			self.reporters.push(r);
		});
		var specData : Object = JSON.parse(spec['testData'] as string ) as Object;
		this.session = specData['sessionId'] as string;
		(specData['testDescriptors'] as Array<TestDescriptor>).forEach(function(td : TestDescriptor){
			self.testDescriptors.push(td);
		})
	}
	
	@Override
	public runTests() : void{
		console.log("running tests....");
		console.log("session", this.session);
		console.log('testDescriptors', this.testDescriptors);
		
		var moduleFQN = "";
		var ctorName = "";

		var iLen = this.testDescriptors.length;
		var testDescriptor : TestDescriptor = null;
		for (var i = 0; i<iLen; i++){
			testDescriptor = this.testDescriptors[i]
			moduleFQN = testDescriptor.origin + "/" + testDescriptor.fqn.substring(0,testDescriptor.fqn.indexOf("."));
			ctorName = testDescriptor.fqn.substring(testDescriptor.fqn.indexOf(".") + 1);
			var ctor = ((TestController.loadClass(moduleFQN))[ctorName] as Function) as constructor{Object};
			var to : Object = new ctor();
			
			var jLen = testDescriptor.testMethods.length;
			var m : string = "";
			for (var j = 0; j<jLen; j++){
				m = testDescriptor.testMethods[j];
				try{
					(to[m] as Function)();
					this.reporters.forEach(function(reporter : ITestReporter){
						reporter.reportSuccess(moduleFQN + "::" + ctorName + ":" + m);	
					});
				}catch(e){
					var err : Error = e as Error;
					this.reporters.forEach(function(reporter : ITestReporter){
						reporter.reportFailure(moduleFQN + "::" + ctorName + ":" + m, err);	
					});
				}
			}
		}
	}
	
	//TODO @returns N4 module exports
	private static loadClass(name : string) : Object{
		return Function("name", "return n4.$requireSync(name);")(name) as Object;
	}
}