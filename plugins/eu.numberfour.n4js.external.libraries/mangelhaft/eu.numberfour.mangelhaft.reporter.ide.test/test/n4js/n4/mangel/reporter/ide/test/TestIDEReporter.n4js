/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
//import {InstrumentedTest} from "n4/mangel/InstrumentedTest"
//import {Assert} from "n4/mangel/assert/Assert"
//import {TestFunctionType} from "n4/mangel/mangeltypes/TestFunctionType"
//import {TestMethodDescriptor} from "n4/mangel/mangeltypes/TestMethodDescriptor"
//import {TestResult} from "n4/mangel/mangeltypes/TestResult"
//import {TestSpy} from "n4/mangel/mangeltypes/TestSpy"
//import {TestStatus} from "n4/mangel/mangeltypes/TestStatus"
//import {IDEReporter} from "n4/mangel/reporter/ide/IDEReporter"
//import {Method} from "fetch/Method"
//import {RequestInit} from "fetch/RequestInit"

//export public class TestIDEReporter{
//    @Inject
//    public spy: TestSpy;
//    @Inject
//    public reporter: IDEReporter;
//    static endpoint = "http://party.com/all/the/time";
//    static sessionId = "WantSomeGetSome";
//    private fetchRequest: union{string, Request};
//    private fetchInit: RequestInit;
//
//    @BeforeAll
//    inLieuOfConstructorInjection() {
//        this.reporter.endpoint = TestIDEReporter.endpoint;
//    }
//    @Before
//    reset() {
//        let that = this;
//        that.spy.reset();
//        async function mockFetchFunction(input: union{string, Request}, init: RequestInit?): Response{
//            that.fetchRequest = input;
//            that.fetchInit = init;
//            return null;
//        }
//
//        this.reporter.fetch = mockFetchFunction;
//        let dummy: Promise<any, ?> = this.reporter.register();
//        this.fetchRequest = null;
//        this.fetchInit = null;
//
//    }
//    @Test
//    async testTestingStarted() {
//        let sessionId = TestIDEReporter.sessionId + "testTestingStarted";
//        await this.spy.testingStarted.dispatch([666, sessionId, 666]);
//        Assert.isTrue(typeof this.fetchRequest === "string",
//            "fetch request param should be string");
//        Assert.equal(this.fetchRequest, [TestIDEReporter.endpoint,
//                                        "n4.ide/testing/sessions",
//                                        sessionId,
//                                        "start"].join("/"), "requestURL should match");
//        Assert.deepEqual(this.fetchInit,
//            {
//               Method method: Method.POST,
//               union{Headers,Array<Array<string>>,Object} headers: { "Content-Type": "application/vnd.n4.ide.start_session_req.tm+json"
//                            , "Accept": "application/json"
//                        },
//               string body: JSON.stringify(undefined, null, 2)
//
//        }, "headers/method/body should match")
//    }
//    @Test
//    async testTestStarted() {
//        let instrumentedTest = new InstrumentedTest()
//        , test = new TestMethodDescriptor({name: "partyTime", type: TestFunctionType.TEST, {function()} value: null})
//        instrumentedTest.name = "totalParty"
//        await this.spy.testingStarted.dispatch([666, TestIDEReporter.sessionId, 666]);
//        await this.spy.testStarted.dispatch([instrumentedTest, test]);
//
//        Assert.equal(this.fetchRequest, [TestIDEReporter.endpoint,
//                                        "n4.ide/testing/sessions",
//                                        TestIDEReporter.sessionId,
//                                        "tests",
//                                        "totalParty%23partyTime",
//                                        "start"
//                                        ].join("/"), "requestURL should match");
//
//        Assert.deepEqual(this.fetchInit,
//            {
//               Method method: Method.POST
//               ,union{Headers,Array<Array<string>>,Object} headers: { "Content-Type": "application/vnd.n4.ide.start_test_req.tm+json"
//                            , "Accept": "application/json"
//                        }
//               , string body:
//               JSON.stringify({number timeout: test.timeout + this.reporter.timeoutBuffer}, null, 2)
//        }, "headers/method/body should match")
//
//    }
//    @Test
//    async testTestFinished() {
//        let instrumentedTest = new InstrumentedTest()
//        , test = new TestMethodDescriptor({name: "partyTime", type: TestFunctionType.TEST, {function()} value: null})
//        , tr = new TestResult({testStatus: TestStatus.failed,
//                               description: ""
//                               ,message: "Partied too hard"
//                               ,trace: ["in the closet", "on the floor"]
//        })
//        instrumentedTest.name = "totalParty"
//        await this.spy.testingStarted.dispatch([666, TestIDEReporter.sessionId, 666]);
//        await this.spy.testStarted.dispatch([instrumentedTest, test]);
//        await this.spy.testFinished.dispatch([instrumentedTest, test, tr]);
//        Assert.equal(this.fetchRequest, [TestIDEReporter.endpoint,
//                                        "n4.ide/testing/sessions",
//                                        TestIDEReporter.sessionId,
//                                        "tests",
//                                        "totalParty%23partyTime",
//                                        "end"
//                                        ].join("/"), "requestURL should match");
//        let body = JSON.parse(this.fetchInit.body);
//        this.fetchInit.body = null;
//        Assert.deepEqual(new TestResult(body as TestResult), new TestResult ({
//                            testStatus: TestStatus.failed
//                            ,message: "Partied too hard"
//                            ,trace: ["in the closet", "on the floor"]
//                        }));
//
//        Assert.deepEqual(this.fetchInit,
//            {
//               Method method: Method.POST
//               ,union{Headers,Array<Array<string>>,Object} headers: { "Content-Type": "application/vnd.n4.ide.end_test_req.tm+json"
//                            , "Accept": "application/json"
//                        }
//               , string body: null
//
//        }, "headers/method/body should match")
//
//    }
//    @Test
//    async testTestingFinished() {
//        let instrumentedTest = new InstrumentedTest()
//        , test = new TestMethodDescriptor({name: "partyTime", type: TestFunctionType.TEST, {function()} value: null})
//        , tr = new TestResult({testStatus: TestStatus.failed,
//                               description: ""
//                               ,message: "Partied too hard"
//                               ,trace: ["in the closet", "on the floor"]
//        });
//
//        instrumentedTest.name = "totalParty";
//        await this.spy.testingStarted.dispatch([666, TestIDEReporter.sessionId, 666]);
//        await this.spy.testStarted.dispatch([instrumentedTest, test]);
//        await this.spy.testFinished.dispatch([instrumentedTest, test, tr]);
//        await this.spy.testingFinished.dispatch([null]);
//        Assert.equal(this.fetchRequest, [TestIDEReporter.endpoint,
//                                        "n4.ide/testing/sessions",
//                                        TestIDEReporter.sessionId,
//                                        "end"
//                                        ].join("/"), "requestURL should match");
//
//        Assert.deepEqual(this.fetchInit,
//            {
//               Method method: Method.POST
//               ,union{Headers,Array<Array<string>>,Object} headers: { "Content-Type": "application/vnd.n4.ide.end_session_req.tm+json"
//                            , "Accept": "application/json"
//                        }
//               , string body:
//               JSON.stringify( undefined, null, 2)
//        }, "headers/method/body should match")
//    }
//}
