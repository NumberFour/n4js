/* XPECT_SETUP eu.numberfour.n4js.bugreports.tests.N4JSBugreportTest END_SETUP  */


class G<T> {}

function <T> f(
        p : union{T,G<T>}
    ) : G<T> { return null; }

var gn : G<number>;

// type of r1 will be "G<union{G<number>,number}>":
var r1 = f(gn);

// leading to the following unexpected problem:

// X--PECT noerrors??? --> "G<union{G<number>,number}> is not a subtype of G<number>."
var r2 : G<number> = f(gn);

// actually, the above error might also be seen as correct, because there are two valid solutions
// and we may not want to choose:
<number>f(gn); // -> returning G<number>
<G<number>>f(gn); // -> returning G<G<number>>

// however, in other cases we also use the expected return type to choose among solutions,
// so not choosing here seems inconsistent.


// EDIT:
// above you see the original consideration (kept for reference)
// below is the new status (after IDE-1702) which seems to work ok, mostly, but might have to be
// refined or reconsidered at some point:

// we decided to choose one of the abovementioned solutions, namely <number>f()

// XPECT typeArgs of 'f' --> number
var v01 = f(gn);

// XPECT noerrors -->
var v02 : G<number> = f(gn);

