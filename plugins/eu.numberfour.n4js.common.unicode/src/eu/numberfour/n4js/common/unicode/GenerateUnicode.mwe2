/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
module eu.numberfour.n4js.common.unicode.GenerateUnicode

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var projectName = "eu.numberfour.n4js.common.unicode"
var grammarURI = "platform:/resource/${projectName}/grammar-gen/eu/numberfour/n4js/common/unicode/Unicode.xtext"
var runtimeProject = "../${projectName}"
var encoding = 'UTF-8'
var lineDelimiter = '\n'

/**
 * A minimal workflow that only generates the components which are referenced
 * by the components of child grammars.
 *
 * The unicode terminal grammar is used by other grammars. Their code will
 * try to find the parse tree constuctor of the super grammar thus we need
 * both the grammar access and the parse tree constructor for the unicode grammar.
 */
Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}

	// This generator isn't called by the GenerateUnicode.mwe2, this has to be done manually
	//bean = generator.UnicodeGrammarGenerator {}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = Generator auto-inject {
		pathRtProject = runtimeProject
		projectNameRt = projectName
		language = auto-inject {
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}
			fragment = parseTreeConstructor.ParseTreeConstructorFragment {}
		}
	}
}
