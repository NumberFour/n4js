/**
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 */
module eu.numberfour.n4js.regex.GenerateRegularExpression

import org.eclipse.emf.mwe.utils.*
import org.eclipse.xtext.generator.*
import org.eclipse.xtext.ui.generator.*

var fileExtensions = "regex"
var projectName = "eu.numberfour.n4js.regex"
var runtimeProject = "../${projectName}"
var grammarURI = "platform:/resource/${projectName}/src/eu/numberfour/n4js/regex/RegularExpression.xtext"
var uiProject = "${runtimeProject}/../${projectName}.ui"
var testProject = "${runtimeProject}/../../tests/${projectName}.tests"
var generateXtendStub = true
var lineDelimiter = '\n'
var encoding = 'UTF-8'

Workflow {
	bean = StandaloneSetup {
		scanClassPath = true
		platformUri = "${runtimeProject}/.."
	}

	component = DirectoryCleaner {
		directory = "${runtimeProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${uiProject}/src-gen"
	}

	component = DirectoryCleaner {
		directory = "${testProject}/src-gen"
	}

	component = Generator auto-inject {
		pathRtProject = runtimeProject
		pathUiProject = uiProject
		pathTestProject = testProject
		projectNameRt = projectName
		projectNameUi = "${projectName}.ui"
		language = auto-inject {
			uri = grammarURI

			// Java API to access grammar elements (required by several other fragments)
			// fragment = eu.numberfour.n4js.antlr.grammarAccess.WindowsAwareGrammarAccessFragment auto-inject {}
			fragment = grammarAccess.GrammarAccessFragment auto-inject {}
			// generates Java API for the generated EPackages
			fragment = ecore.EMFGeneratorFragment auto-inject {}

			// serializer 2.0
			fragment = serializer.SerializerFragment auto-inject {
				generateStub = false
			}

			// a custom ResourceFactory for use with EMF
			fragment = resourceFactory.ResourceFactoryFragment auto-inject {}

			// The antlr parser generator fragment.
			fragment = eu.numberfour.n4js.antlr.delimiters.AntlrGeneratorFragment auto-inject {}

			// Xtend-based API for validation
			fragment = validation.ValidatorFragment auto-inject {
			//    composedCheck = "org.eclipse.xtext.validation.ImportUriValidator"
			//    composedCheck = "org.eclipse.xtext.validation.NamesAreUniqueValidator"
				inheritImplementation = false
			}

			// old scoping and exporting API
			// fragment = scoping.ImportURIScopingFragment auto-inject {}
			// fragment = exporting.SimpleNamesFragment auto-inject {}

			// scoping and exporting API
			fragment = scoping.ImportNamespacesScopingFragment auto-inject {
				inheritImplementation = false
			}
			fragment = exporting.QualifiedNamesFragment auto-inject {}
			fragment = builder.BuilderIntegrationFragment auto-inject {}

			// generator API
			fragment = generator.GeneratorFragment auto-inject {}

			// formatter API
			fragment = formatting.FormatterFragment auto-inject {}

			// labeling API
			fragment = labeling.LabelProviderFragment auto-inject {}

			// outline API
			fragment = outline.OutlineTreeProviderFragment auto-inject {}
			fragment = outline.QuickOutlineFragment auto-inject {}

			// quickfix API
			fragment = quickfix.QuickfixProviderFragment auto-inject {
				inheritImplementation = false
			}

			// content assist API
			fragment = contentAssist.ContentAssistFragment auto-inject {
				inheritImplementation = false
			}

			// generates a more lightweight Antlr parser and lexer tailored for content assist
			fragment = parser.antlr.ex.ca.ContentAssistParserGeneratorFragment auto-inject {}

			// generates junit test support classes into Generator#pathTestProject
			//fragment = junit.Junit4Fragment auto-inject {}

			// project wizard (optional)
			// fragment = projectWizard.SimpleProjectWizardFragment auto-inject {
			//      generatorProjectName = "${projectName}"
			// }

			// rename refactoring
			fragment = refactoring.RefactorElementNameFragment auto-inject {}

			// provides a preference page for template proposals
			fragment = templates.CodetemplatesGeneratorFragment auto-inject {}

			// provides a compare view
			fragment = compare.CompareFragment auto-inject {}
		}
	}
}
