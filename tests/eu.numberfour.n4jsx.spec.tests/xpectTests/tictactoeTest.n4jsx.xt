/* XPECT_SETUP eu.numberfour.n4jsx.spec.tests.N4JSXSpecTest

	ResourceSet {
		ThisFile {}
		File "Blob.n4jsd" {}
		File "ClientRect.n4jsd" {}
		File "ClipboardEvent.n4jsd" {}
		File "console.n4jsd" {}
		File "CSSStyleDeclaration.n4jsd" {}
		File "Document.n4jsd" {}
		File "DOMTokenList.n4jsd" {}
		File "Element.n4jsd" {}
		File "Event.n4jsd" {}
		File "EventTarget.n4jsd" {}
		File "FormData.n4jsd" {}
		File "HTMLCanvasElement.n4jsd" {}
		File "HTMLDialogElement.n4jsd" {}
		File "HTMLElement.n4jsd" {}
		File "HTMLInputElement.n4jsd" {}
		File "KeyboardEvent.n4jsd" {}
		File "Location.n4jsd" {}
		File "MouseEvent.n4jsd" {}
		File "NamedNodeMap.n4jsd" {}
		File "Navigator.n4jsd" {}
		File "Node.n4jsd" {}
		File "NodeList.n4jsd" {}

		File "react.n4jsd" {}
		File "react-dom.n4jsd" {}
	}

    END_SETUP
*/

import * as React from "react";
import * as ReactDOM from "react-dom"

function Square(props: ~Object with { value: string; onClick: {function(): void} }): React.Element {
  return (
      <button className="square" onClick={() => props.onClick()}>
        { props.value }
      </button>
    );
}

class Board extends React.Component<~Object with {
		squares: Array<string>;
		onClick: {function(int): void}
	},
	Object> {
  renderSquare(i: int) {
    return <Square value={this.props.squares[i]} onClick={() => this.props.onClick(i)} />;
  }

  @Override
  public render(): React.Element {
    return (
      <div>
        <div className="board-row">
          {this.renderSquare(0)}
          {this.renderSquare(1)}
          {this.renderSquare(2)}
        </div>
        <div className="board-row">
          {this.renderSquare(3)}
          {this.renderSquare(4)}
          {this.renderSquare(5)}
        </div>
        <div className="board-row">
          {this.renderSquare(6)}
          {this.renderSquare(7)}
          {this.renderSquare(8)}
        </div>
      </div>
    );
  }
}

<Board squares=""/>

class Game extends React.Component<Object,
	~Object with
		{history: Array<~Object with {squares: Array<string>}>, xIsNext: boolean, stepNumber: int}> {
  public constructor(props: Object) {
    super(props);
    this.state = {
      history: [{
        squares: (new Array<string>(9)).map(() => null)
      }],
      xIsNext: true,
      stepNumber: 0
    }
  }


  handleClick(i: int): void {
      const history = this.state.history;
      const current = history[history.length - 1];
      const squares = current.squares.slice();
      if (calculateWinner(squares) || squares[i]) {
        return;
      }

      squares[i] = this.state.xIsNext? 'X' : 'O';
      this.setState({
        history: history.concat([{
          squares: squares
        }]),
        xIsNext: !this.state.xIsNext,
        stepNumber: history.length})
  }

  jumpTo(step: int): void {
    this.setState({
    	  //TODO: to be clarified with Daniel
    	  BLAHH: 10,
      stepNumber: step,
      xIsNext: (step % 2)? false: true
    });
  }

  @Override
  public render(): React.Element {
    const history = this.state.history;
    const current = history[this.state.stepNumber];
    const winner = calculateWinner(current.squares);
    let status;
    if (winner) {
      status = 'Winner: ' + winner;
    } else {
      status = 'Next player: ' + (this.state.xIsNext? 'X' : 'O')
    }

    const moves = history.map((step, move) => {
      const desc = move?
            'Move #' + move :
            'Game start';
      return (
        <li key={move}>
          <a href="#" onClick={() => this.jumpTo(move)}>{desc}</a>
        </li>
      )
    });


    return (
      <div className="game">
        <div className="game-board">
          <Board squares={current.squares}
                 onClick={(i : int) => this.handleClick(i)}/>
        </div>
        <div className="game-info">
          <div>{ status }</div>
          <ol>{ moves }</ol>
        </div>
      </div>
    );
  }
}

// ========================================

ReactDOM.render(
  <Game />,
  document.getElementById('container')
);

function calculateWinner(squares: Array<string>) {
  const lines = [
    [0, 1, 2],
    [3, 4, 5],
    [6, 7, 8],
    [0, 3, 6],
    [1, 4, 7],
    [2, 5, 8],
    [0, 4, 8],
    [2, 4, 6],
  ];
  for (let i = 0; i < lines.length; i++) {
    const [a, b, c] = lines[i];
    if (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {
      return squares[a];
    }
  }
  return null;
}
