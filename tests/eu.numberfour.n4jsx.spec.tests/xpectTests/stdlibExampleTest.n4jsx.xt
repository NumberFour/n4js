/* XPECT_SETUP eu.numberfour.n4jsx.spec.tests.N4JSXSpecTest

	ResourceSet {
		ThisFile {}
		File "react.n4jsd" {}
	}

	END_SETUP
*/

import * as React from "react";

class ~Props  {
	public myProp: string;
}

function PureFnComponent(props: Props): React.Element {
	return (<div>{props.myProp}</div>);
}

//XPECT noerrors
var a = <PureFnComponent myProp="This is my prop"/>

class LowerComponent extends React.Component<~Object with {whatTextShouldIShow : string}, ~Object with {squares: Array<string>}> {
	public constructor(props: ~Object with {whatTextShouldIShow : string}) {
	    super(props);
	    this.state = {
	      //XPECT noerrors
	      squares: new Array<string>(9)
	    };
	    //XPECT noerrors
	    if (this.state.squares.length == 1) {

	    }
  	}

	@Override
	public render(): React.Element {
		//XPECT noerrors
		return (<div>{this.props.whatTextShouldIShow}</div>);
	}
}

class MyComponent extends
	React.Component<~Object with {aProp: string}, String> {

	@Override
	public render(): React.Element {
		const constText = "some text";
		//XPECT noerrors
		return (<LowerComponent whatTextShouldIShow="Hallo">{constText}</LowerReact.Component>
		);
	}
}

class MyHigherComponent extends
	React.Component<~Object with {someCondition: Number}, ~Object with {aStateProp: Boolean}> {

	@Override
	public render(): React.Element {
		let d = this.state.aStateProp;
		//XPECT errors --> "Couldn't resolve reference to IdentifiableElement 'simplePropForMyComponent'." at "simplePropForMyComponent"
		return (<MyComponent aProp={5} simplePropForMyComponent={
         (() => {
         	//XPECT noerrors
           if (this.props.someCondition) {
             return "ein Text";
           }
           return "";
         })()
       }>{d}</MyReact.Component>);
	}
}