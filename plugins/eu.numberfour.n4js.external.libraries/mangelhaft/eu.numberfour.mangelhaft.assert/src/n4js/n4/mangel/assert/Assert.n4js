/*
 * Copyright (c) 2016 NumberFour AG.
 * All rights reserved. This program and the accompanying materials
 * are made available under the terms of the Eclipse Public License v1.0
 * which accompanies this distribution, and is available at
 * http://www.eclipse.org/legal/epl-v10.html
 *
 * Contributors:
 *   NumberFour AG - Initial API and implementation
 *
 * 3rd Party Code used here:
 * - [node-deep-equal](https://github.com/substack/node-deep-equal), [MIT](https://raw.githubusercontent.com/substack/node-deep-equal/master/LICENSE)
 * - [Node.js Assert Library](https://raw.githubusercontent.com/nodejs/node/master/lib/assert.js), [MIT like](https://raw.githubusercontent.com/nodejs/node/master/lib/assert.js)
 */
import {AssertionError} from "n4/mangel/assert/AssertionError"
import {ErrorPrimitiveType} from "n4/mangel/assert/ErrorPrimitiveType"
import {PreconditionNotMet} from "n4/mangel/precondition/PreconditionNotMet"
import {decycle} from "json-cycle"

function getTypeName(val): string {
    if (typeof val === "object") {
        let ctor: Object+ = (val as Object).constructor;
        let n4type = ctor.n4type as N4Type;
        if (n4type) {
            return n4type.fqn;
        }
    }
    return String(val);
}

export public const DEFAULT_TIMEOUT = 1000;
export public const DEFAULT_POLLING_INTERVAL = 50;

function isUndefinedOrNull(value) {
    return value === null || value === undefined;
}

function isArguments(object: Object) {
    return Object.getPrototypeOf({}).toString.call(object) == '[object Arguments]';
}

let dupObject: Object = Object; //avoid warnings.
const Object_keys = typeof Object.keys === 'function' ? dupObject["keys"] : function (obj) {
    let keys: Array<string> = [];
    for (let key: string in obj as Object) keys.push(key);
    return keys;
};

function objEquiv(aAny: any, bAny: any, ignorePrototype: boolean=): boolean {
    let a = aAny as Object,
        b = bAny as Object,
        ka: Array<string>, kb: Array<string>,
        key: string, i: int;

    if (isUndefinedOrNull(a) || isUndefinedOrNull(b)) return false;
    if (!ignorePrototype && (a["prototype"] !== b["prototype"])) {
        return false;
    }

    if (isArguments(a)) {
        if (!isArguments(b)) {
            return false;
        }
        a = Array.prototype.slice.call(a) as Object;
        b = Array.prototype.slice.call(b) as Object;
        return _deepEqual(a, b, ignorePrototype);
    }
    try {
        ka = Object_keys(a);
        kb = Object_keys(b);
    } catch (e) {
        return false;
    }

    if (ka.length != kb.length) {
        return false;
    }

    ka.sort();
    kb.sort();
    for (i = ka.length - 1; i >= 0; i--) {
        if (ka[i] != kb[i]) {
            return false;
        }
    }

    for (i = ka.length - 1; i >= 0; i--) {
        key = ka[i];
        if (!_deepEqual(a[key], b[key], ignorePrototype)) {
            return false;
        }
            
    }
    return true;
}

function  _deepEqual(actual: any, expected: any, ignorePrototype: boolean=): boolean {
    if (actual === expected) {
        return true;

    } else if (actual instanceof Date && expected instanceof Date) {
        return (actual as Date).getTime() === (expected as Date).getTime();

    } else if (actual instanceof RegExp && expected instanceof RegExp) {
        let actualRegExp = actual as RegExp,
            expectedRegExp = expected as RegExp;

        return  actualRegExp.source === expectedRegExp.source && 
                actualRegExp.global === expectedRegExp.global &&
                actualRegExp.multiline === expectedRegExp.multiline &&
                actualRegExp.lastIndex === expectedRegExp.lastIndex &&
                actualRegExp.ignoreCase === expectedRegExp.ignoreCase;

    } else if (typeof actual != 'object' && typeof expected != 'object') {
        return actual == expected;

    } else {
        return objEquiv(actual, expected, ignorePrototype);
    }
}

function expectedException(actual: any, expected: union{type{Error}, RegExp, string}) {
    if (typeof expected === "string") {
        return ((typeof actual) === expected as string);
    }
    if (Object.getPrototypeOf({}).toString.call(expected) == '[object RegExp]') {
        return (expected as RegExp).test((actual as Object).toString());
    } else if (actual instanceof
        expected as type{Object}) {
        return true;
    }
    return false;
}

/**
 * Assert class contains statics to assert truths used in tests
 */
@TestAPI
export public class Assert {

    private const RETHROWN_SPECIAL_ERROR_TYPES = [N4ApiNotImplementedError, PreconditionNotMet];
    private static rethrowIfSpecialError(error: any, expected: any=) {
        let objError: Object,
            ctor: type{Object};

        if (error !== null && typeof error === "object") {
            objError = error as Object;
            ctor = objError.constructor;
            if (ctor !== expected && this.RETHROWN_SPECIAL_ERROR_TYPES.indexOf(ctor) !== -1) {
                throw error;
            }
        }
    }

    /**
     * Throws an exception that displays the values for actual and expected separated by the provided operator.
     * @param  actual             actual result
     * @param  expected           expected result
     * @param  message            optional message
     * @param  operator           operator tested
     * @param  stackStartFunction top level function
     */
    protected static fail_(actual: any, expected: any, message: string=, operator: string=, stackStartFunction: Function=) {
        let obj: Object = this,
            fail_ = obj["fail_"],
            error = new AssertionError({
                string message: message,
                any actual: actual,
                any expected: expected,
                string operator: operator,
                stackStartFunction: fail_
            });
        throw error;
    }

    public static fail(message: string, error: any=) {
        this.fail_(error, null, message, null);
    }

    /**
     * Tests if value is truthy, it is equivalent to assert.equal(true, !!value, message);
     * @param  value   value to test
     * @param  message optional message describing what was being tested
     */
    public static ok(value: any, message: string) {
        if(!!!value) {
            this.fail_(value, true, message, '==')
        }
    }
    /**
     * Tests shallow, coercive equality with the equal comparison operator ( == ).
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     */
    public static equal (actual: any, expected: any, message: string=) {
        if (actual != expected) {
            this.fail_(actual, expected, message, '==');
        }
    }
    /**
     * Tests if actual is greater than ( > operator) expected
     */
    public static greaterThan(actual: union{number,string,boolean}, expected: union{number,string,boolean}, message: string=) {
        if (!(actual > expected)) {
            this.fail_(actual, expected, message, '>');
        }
    }
    /**
     * Tests if actual is less than ( < operator) expected
     */
    public static lessThan(actual: union{number,string,boolean}, expected: union{number,string,boolean}, message: string=) {
        if (!(actual < expected)) {
            this.fail_(actual, expected, message, '<');
        }
    }

    /**
     * Tests if actual is greater than or equal( >= operator) expected
     */
    public static greaterThanOrEqual(actual: union{number,string,boolean}, expected: union{number,string,boolean}, message: string=) {
        if (!(actual >= expected)) {
            this.fail_(actual, expected, message, '>');
        }
    }
    /**
     * Tests if actual is less than or equal ( <= operator) expected
     */
    public static lessThanOrEqual(actual: union{number,string,boolean}, expected: union{number,string,boolean}, message: string=) {
        if (!(actual <= expected)) {
            this.fail_(actual, expected, message, '<');
        }
    }
    /**
     * Tests if actual is strictly equal to null
     */
    public static isNull(actual: any, message: string=) {
        if (actual !== null) {
            this.fail_(actual, null, message, "=== null");
        }
    }
    /**
     * tests if actual is strictly equal to Undefined
     */
    public static isUndefined(actual: any, message: string=) {
        let undef;
        if (actual !== undef) {
            this.fail_(actual, null, message, "=== undefined");
        }
    }
    /**
     * tests if actual is strictly not equal to null
     */
    public static isNotNull(actual: any, message: string=) {
        if (actual === null) {
            this.fail_(actual, null, message, "!== null");
        }
    }
    /**
     * tests if actual is strictly not equal to undefined
     */
    public static isNotUndefined(actual: any, message: string=) {
        let undef;
        if (actual === undef) {
            this.fail_(actual, null, message, "!== undefined");
        }
    }
    /**
     * Tests if actual is strictly equal to null or undefined
     */
    public static isNullOrUndefined(actual: any, message: string=) {
        let undef;
        if (!(actual === null || actual === undef)) {
            this.fail_(actual, null, message, "=== null || undefined");
        }
    }
    /**
     * Tests if actual is not strictly equal to null or undefined
     */
    public static isNotNullOrUndefined(actual: any, message: string=) {
        if ((actual === null || actual === undefined)) {
            this.fail_(actual, null, message, "!== null || undefined");
        }
    }

    /**
     * Tests shallow, coercive equality with the equal comparison operator ( == ).
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     */
    public static notEqual(actual: any, expected: any, message: string=) {
        if (actual == expected) {
            this.fail_(actual, expected, message, '!=');
        }
    }

    /**
     * deep test for equality that ensures entire object is equal
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     * @param ignorePrototype optional flag to not test for prototypical identicalness
     */
    public static deepEqual(actual: any, expected: any, message: string=, ignorePrototype: boolean=) {
        actual = decycle(actual);
        expected = decycle(expected);

        if (!_deepEqual(actual, expected, ignorePrototype)) {
            try {
                message += "\n " + JSON.stringify({actual: actual, expected: expected}, null, "    ");
            } catch(err) {
                message += "\n unable to calculate diff";
            }
            this.fail_(actual, expected, message, 'deepEqual');
        }
    }

    /**
     * deep test for inequality that ensures some part of object is inequal
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     * @param ignorePrototype optional flag to not test for prototypical identicalness
     */
    public static notDeepEqual(actual: any, expected: any, message: string=, ignorePrototype: boolean=) {
        if (_deepEqual(actual, expected, ignorePrototype)) {
            this.fail_(actual, expected, message, 'NotDeepEqual');
        }
    }
    /**
     * Tests shallow, strict equality with the strict equal comparison operator ( === ).
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     */
    public static strictEqual (actual: any, expected: any, message: string=) {
        if (!(actual === expected)) {
            this.fail_(actual, expected, message, '===');
        }
    }
    /**
     * Tests shallow, strict inequality with the strict unequal comparison operator ( !== ).
     * @param  actual   actual value to be tested
     * @param  expected expected value (what actual should be)
     * @param  message  optional message describing what was tested
     */
    public static notStrictEqual (actual: any, expected: any, message: string=) {
        if (!(actual !== expected)) {
            this.fail_(actual, expected, message, '!==');
        }
    }

    /**
     * Tests if truthy.
     * @param  actual   actual value to be tested
     * @param  message  optional message describing what was tested
     */
    public static isTrue (actual: any, message: string=) {
        if(!(!!actual)) {
            this.fail_(actual, true, message, "== true")
        }
    }
    /**
     * Tests if not truthy.
     * @param  actual   actual value to be tested
     * @param  message  optional message describing what was tested
     */
    public static isFalse (actual: any, message: string=) {
        if(!!actual) {
            this.fail_(actual, true, message, "!== true")
        }
    }

    /**
     * checks that the actual object is an instance of the expected object
     */
    public static isInstanceOf(actual: any, expected: type{Object} & ~Object with {n4type:N4Type;}, message: string=) {
        if (!(actual instanceof expected)) {
            let actualName = getTypeName(actual),
                expectedName = (expected as type{N4Object}).n4type.fqn; // TODO IDE-385
            this.fail_(actualName, expectedName, message, "instanceof");
        }
    }

    /**
     * checks that the actual object is not an instance of the expected object
     */
    public static isNotInstanceOf(actual: any, expected: type{Object} & ~Object with {n4type:N4Type}, message: string=) {
        if (actual instanceof expected) {
            let actualName = getTypeName(actual),
                expectedName = (expected as type{N4Object}).n4type.fqn; // TODO IDE-385
            this.fail_(actualName, expectedName, message, "not instanceof");
        }
    }

    /**
     * ensures provided function throws
     * @param  testFunction function to test. should be callable without arguments
     * @param  error        optional error if provided will ensure the thrown error is of the same type.
     * @param  message      optional message describing what was tested
     */
    public static throws (testFunction: {function(): any?}, error: union{ErrorPrimitiveType, type{Error}}=, message: string=): any {
        let actual: any+,
            threw = false;
        try {
            testFunction();
        } catch (e) {
            threw = true;
            actual = e;
        }
        if (!threw) {
            this.fail_(null, null, message, "Did not throw any exception");
        }
        return this.thrownCheck(true, actual, error, message, "throws");
    }
    /**
     * ensures provided function does not throws
     * @param  testFunction function to test. should be callable without arguments
     * @param  error        optional error if provided will ensure the thrown error is of the same type.
     * @param  message      optional message describing what was tested
     */
    public static doesNotThrow(testFunction: {function(): any?}, error: union{ErrorPrimitiveType, type{Object}}=, message: string=) {
        let actual: any+,
            threw = false;

        try {
            testFunction();
        } catch (e) {
            threw = true;
            actual = e;
            this.rethrowIfSpecialError(actual, error);
        }
        if (threw) {
            this.fail_(actual, null, message, "does not throw");
        }
    }
    /**
     * ensures provided function throws only async
     * @param  testFunction function to test. should be callable without arguments
     * @param  expectedErrorType        optional error if provided will ensure the thrown error is of the same type.
     * @param  message      optional message describing what was tested
     */
    public static async throwsAsync (testFunction: {function(): any?}, expectedErrorType: union{ErrorPrimitiveType, constructor{? extends Error}}=, message: string=): any {
        let actual: any+,
            threw = false;

        try {
            await Promise.resolve(testFunction());
        } catch (e) {
            threw = true;
            actual = e;
        }
        if (!threw) {
            this.fail_(null, null, message, "Did not throw any exception");
        }
        return this.thrownCheck(true, actual, expectedErrorType, message, "throws");
    }
    /**
     * ensures provided function does not throw only async
     * @param  testFunction function to test. should be callable without arguments
     * @param  error        optional error if provided will ensure the thrown error is of the same type.
     * @param  message      optional message describing what was tested
     */
    public static async doesNotThrowAsync(testFunction: {function(): any?}, error: union{ErrorPrimitiveType, type{Object}}=, message: string=) {
        let actual: any+,
            threw = false;
        try {
            await Promise.resolve(testFunction());
        } catch (e) {
            threw = true;
            actual = e;
            this.rethrowIfSpecialError(actual, error);
        }

        if (threw) {
            this.fail_(actual, null, message, "does not throw");
        }
    }

    /**
     * Polls the given function for a truthy result.
     *
     * In case you have an asymchronous predicate function the following code is probably helpful:
     * <pre>
     * while (true) {
     *     if (await myPredicatFn()) { break; }
     * }
     * </pre>
     *
     * @param resultFn predicate function to test
     * @param message optional message describing what was tested
     * @param timeoutMillisecs optional timeout in millisecs
     * @param intervalMillisecs optional polling interval in millisecs
     */
    public static <T> waitForCondition(resultFn: {function(): T?}, message: string=, timeoutMillisecs: number=, intervalMillisecs: number=): Promise<T, any> {
        timeoutMillisecs = timeoutMillisecs || DEFAULT_TIMEOUT;
        intervalMillisecs = intervalMillisecs || DEFAULT_POLLING_INTERVAL;

        return new Promise<T, any>(function(resolveFn: {function(T): void}, rejectFn: {function(any): void}) {
            timeoutMillisecs += Date.now();

            let handle = setInterval(function() {
                try {
                    let res = resultFn();
                    if (res) { // truthy
                        clearInterval(handle);
                        resolveFn(res);
                    } else {
                        let now = Date.now();
                        if (now >= timeoutMillisecs) {
                            throw new Error(message ? message + ": condition timeout": "condition timeout");
                        }
                    }
                } catch (exc) { // reject on any error
                    clearInterval(handle);
                    rejectFn(exc);
                }
            }, intervalMillisecs);
        });
    }

    private static thrownCheck(shouldThrow: boolean, actual: any+, expected: union{ErrorPrimitiveType, type{Error}}=, message: string=, operator: string=): any {
        this.rethrowIfSpecialError(actual, expected);

        let msg = ".";
        if (expected) { // prepend ctor name
            let ctorFn = ((expected as Object) as Error);
            if (ctorFn.name) {
                msg = ` (${ctorFn.name}).`;
            }
        }
        if (message) {
            msg += ` ${message}`;
        } else {
            msg += ".";
        }

//        if (shouldThrow && actual) {
//            this.fail_(actual, expected, 'Missing expected exception' + message, operator);
//        }

        if (!shouldThrow && expectedException(actual, expected)) {
            this.fail_(actual, expected, 'Got unwanted exception' + message, operator);
        }

        if ((shouldThrow && expected != null && !expectedException(actual, expected)) || (!shouldThrow && actual != null)) {
            this.fail_("" + actual, expected, "thrown error of wrong type " + message, operator);
        }
        return actual;
    }
}

/* -*- mode: javascript;-*- */