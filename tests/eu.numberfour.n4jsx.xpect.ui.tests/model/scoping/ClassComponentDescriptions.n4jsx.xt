/* XPECT_SETUP eu.numberfour.n4jsx.xpect.ui.tests.N4JSXXpectPluginTest
    
	Workspace {
		Project "N4JSXPECTTests" {
			Folder "model" {
				Folder "scoping" {
					ThisFile {}
				}
				Folder "jsxbackend" {
					File "react.n4jsd" { from = "../../reactFiles/react.n4jsd" }
				}
			}
			File "manifest.n4mf" { from="../../manifest.n4mf" }
		}
	}
	
   END_SETUP 
 */


import * as React from "jsxbackend/react"


export public class LowerComponent extends React.Component<~Object with {whatTextShouldIShow : string}, ~Object with {squares: Array<string>}> {
	@Override
	public render() : React.Element{
		return (<div>{this.props.whatTextShouldIShow}</div>);
	}
}


/* XPECT scope at 'React.|Component'  ---
Array, Boolean, Component, ComponentProps, Date, Element, Error, EvalError,
Function, Generator, Iterable, Iterable2, Iterable3, Iterable4, Iterable5, Iterable6,
Iterable7, Iterable8, Iterable9, Iterator, IteratorEntry, JSON, LowerComponent, Math,
MyComponent, N4Accessor, N4Annotation, N4ApiNotImplementedError, N4Class, N4Classifier,
N4DataField, N4Element, N4Enum, N4EnumType, N4Field, N4Interface, N4Member, N4Method,
N4NamedElement, N4Object, N4Provider, N4Role, N4StringBasedEnum, N4StringBasedEnumType, N4Type,
Number, Object, Promise, PropConstraint, PropType, PropTypes, PureComponent,
RangeError, React, React.Component, React.ComponentProps, React.Element,
React.PropConstraint, React.PropType, React.PropTypes, React.PureComponent, React.cloneElement,
React.createElement, React.isValidElement, React.renderToStaticMarkup, React.renderToString,
ReferenceError, RegExp, String, Symbol, SyntaxError, TEMP_ReturnTypeOfMatchExec, TypeError,
URIError, any, boolean, cloneElement, console, createElement, i18nKey, int,
isValidElement, jsxbackend.react.Component, jsxbackend.react.ComponentProps,
jsxbackend.react.Element, jsxbackend.react.PropConstraint, jsxbackend.react.PropType,
jsxbackend.react.PropTypes, jsxbackend.react.PureComponent, jsxbackend.react.cloneElement,
jsxbackend.react.createElement, jsxbackend.react.isValidElement, jsxbackend.react.renderToStaticMarkup,
jsxbackend.react.renderToString, null, number, pathSelector, renderToStaticMarkup, renderToString,
scoping.ClassComponentDescriptions.LowerComponent, scoping.ClassComponentDescriptions.MyComponent, string, symbol, typeName,
undefined, void
--- */
export public class MyComponent extends React.Component<~Object with {aProp: string}, String> {

	@Override
	public render() : React.Element{
		const constText = "some text";
		return (<LowerComponent whatTextShouldIShow="Hallo">{constText}</LowerComponent>
		);
	}
}




