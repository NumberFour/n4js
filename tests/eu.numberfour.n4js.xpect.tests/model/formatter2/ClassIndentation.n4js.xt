/* XPECT_SETUP eu.numberfour.n4js.xpect.tests.N4JSXpectTest 
   
   	 Preference "format.parenthesis" "true" {}
   	 Preference "format.surround_paren_content_with_space" "false" {}
   	 Preference "format.max_consecutive_newlines" "2" {}
   
   END_SETUP
 */





// Additional Linebreak after last statement required!
// If missing, then automatic semicolon insertion / replacement behaves differently.
/* XPECT formattedLines 26 ---
export public class EmailSetAdapter implements DataAdapter {
	private events: Array<ContentDataSetEvent> = [];

	public getLatestEvent(): ContentDataSetEvent {
		if (this.events.length < 1) {
			throw new Error("No ContentDataSetEvent captured! Please investigate the test setup.");
		}
		return this.events[this.events.length - 1];
	}

	public reset(): void {
		this.events = [];
	}

	@Override
	public notifyChanged(evs: Array<DataEvent>): void {
		evs.forEach(e => this.events.push(e as ContentDataSetEvent));
	}
}

interface DataAdapter {
	public notifyChanged(evs: Array<DataEvent>): void;
}
interface ContentDataSetEvent {}
interface DataEvent {}
--- */
export public class EmailSetAdapter implements DataAdapter {
  private events: Array<ContentDataSetEvent> = [];

  public getLatestEvent(): ContentDataSetEvent {
    if (this.events.length < 1) {
      throw new Error("No ContentDataSetEvent captured! Please investigate the test setup.");
    }
    return this.events[this.events.length - 1];
  }

  public reset(): void {
    this.events = [];
  }

  @Override
  public notifyChanged(evs: Array<DataEvent>): void {
    evs.forEach(e => this.events.push(e as ContentDataSetEvent));
  }
}


interface DataAdapter {
  public notifyChanged(evs: Array<DataEvent>): void;
}
interface ContentDataSetEvent{}
interface DataEvent {}
